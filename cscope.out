cscope 15 $HOME/sx1302_hal -q 0000006842 0001107215
	@libloragw/inc/config.h

1 #i‚de‡
_LORAGW_CONFIGURATION_H


2 
	#_LORAGW_CONFIGURATION_H


	)

3 
	#LIBLORAGW_VERSION
 "2.1.0"

	)

4 
	#DEBUG_AUX
 0

	)

5 
	#DEBUG_COM
 0

	)

6 
	#DEBUG_MCU
 0

	)

7 
	#DEBUG_I2C
 0

	)

8 
	#DEBUG_REG
 0

	)

9 
	#DEBUG_HAL
 0

	)

10 
	#DEBUG_GPS
 0

	)

11 
	#DEBUG_GPIO


	)

12 
	#DEBUG_LBT
 0

	)

13 
	#DEBUG_RAD
 0

	)

14 
	#DEBUG_CAL
 0

	)

15 
	#DEBUG_SX1302
 0

	)

16 
	#DEBUG_FTIME
 0

	)

	@libloragw/inc/loragw_ad5338r.h

16 #i‚de‡
_LORAGW_AD5338R_H


17 
	#_LORAGW_AD5338R_H


	)

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

22 
	~"c⁄fig.h
"

27 
	#VOLTAGE2HEX_H
(
a
Ë–◊)*1024/5/4 )

	)

28 
	#VOLTAGE2HEX_L
(
a
Ë–((()(◊)*1024/5)Ë& 0x3Ë* 64 )

	)

33 
	#I2C_PORT_DAC_AD5338R
 0x0C

	)

35 
	#AD5338R_CMD_SIZE
 3

	)

40 
ad5338r_c⁄figuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
);

41 
ad5338r_wrôe
(
i2c_fd
, 
uöt8_t
 
i2c_addr
, uöt8_à
buf
[
AD5338R_CMD_SIZE
]);

	@libloragw/inc/loragw_agc_params.h

16 #i‚de‡
_LORAGW_AGC_PARAMS_H


17 
	#_LORAGW_AGC_PARAMS_H


	)

22 
	sagc_gaö_∑øms_s
 {

23 
uöt8_t
 
	m™a_mö
;

24 
uöt8_t
 
	m™a_max
;

25 
uöt8_t
 
	m™a_thªsh_l
;

26 
uöt8_t
 
	m™a_thªsh_h
;

27 
uöt8_t
 
	mdec_©ä_mö
;

28 
uöt8_t
 
	mdec_©ä_max
;

29 
uöt8_t
 
	mdec_thªsh_l
;

30 
uöt8_t
 
	mdec_thªsh_h1
;

31 
uöt8_t
 
	mdec_thªsh_h2
;

32 
uöt8_t
 
	mch™_©ä_mö
;

33 
uöt8_t
 
	mch™_©ä_max
;

34 
uöt8_t
 
	mch™_thªsh_l
;

35 
uöt8_t
 
	mch™_thªsh_h
;

36 
uöt8_t
 
	mdevi˚Sñ
;

37 
uöt8_t
 
	mhpMax
;

38 
uöt8_t
 
	m∑DutyCy˛e
;

44 c⁄° 
agc_gaö_∑øms_s
 
	gagc_∑øms_sx1250
 = {

45 .
™a_mö
 = 1,

46 .
	g™a_max
 = 13,

47 .
	g™a_thªsh_l
 = 3,

48 .
	g™a_thªsh_h
 = 12,

49 .
	gdec_©ä_mö
 = 4,

50 .
	gdec_©ä_max
 = 15,

51 .
	gdec_thªsh_l
 = 40,

52 .
	gdec_thªsh_h1
 = 80,

53 .
	gdec_thªsh_h2
 = 90,

54 .
	gch™_©ä_mö
 = 4,

55 .
	gch™_©ä_max
 = 14,

56 .
	gch™_thªsh_l
 = 52,

57 .
	gch™_thªsh_h
 = 132,

58 .
	gdevi˚Sñ
 = 0,

59 .
	ghpMax
 = 7,

60 .
	g∑DutyCy˛e
 = 4

63 c⁄° 
agc_gaö_∑øms_s
 
	gagc_∑øms_sx125x
 = {

64 .
™a_mö
 = 0,

65 .
	g™a_max
 = 9,

66 .
	g™a_thªsh_l
 = 16,

67 .
	g™a_thªsh_h
 = 35,

68 .
	gdec_©ä_mö
 = 7,

69 .
	gdec_©ä_max
 = 11,

70 .
	gdec_thªsh_l
 = 45,

71 .
	gdec_thªsh_h1
 = 100,

72 .
	gdec_thªsh_h2
 = 115,

73 .
	gch™_©ä_mö
 = 4,

74 .
	gch™_©ä_max
 = 14,

75 .
	gch™_thªsh_l
 = 52,

76 .
	gch™_thªsh_h
 = 132,

77 .
	gdevi˚Sñ
 = 0,

78 .
	ghpMax
 = 0,

79 .
	g∑DutyCy˛e
 = 0

	@libloragw/inc/loragw_aux.h

16 #i‚de‡
_LORAGW_AUX_H


17 
	#_LORAGW_AUX_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

24 
	~<sys/time.h
>

26 
	~"c⁄fig.h
"

31 
	#DEBUG_PERF
 0

	)

36 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

37 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

46 
	#TAKE_N_BITS_FROM
(
b
, 
p
, 
n
Ë(((bË>> (p)Ë& ((1 << (n)Ë- 1))

	)

54 
	#TIMER_SUB
(
a
, 
b
, 
ªsu…
) \

56 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

57 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

58 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

59 --(
ªsu…
)->
tv_£c
; \

60 (
ªsu…
)->
tv_u£c
 += 1000000; \

62 } 0)

	)

71 
waô_ms
(
t
);

77 
waô_us
(
t
);

93 
uöt32_t
 
l‹a_∑ckë_time_⁄_aú
–c⁄° 
uöt8_t
 
bw
,

94 c⁄° 
uöt8_t
 
sf
,

95 c⁄° 
uöt8_t
 
¸
,

96 c⁄° 
uöt16_t
 
n_symbﬁ_¥ómbÀ
,

97 c⁄° 
boﬁ
 
no_hódî
,

98 c⁄° 
boﬁ
 
no_¸c
,

99 c⁄° 
uöt8_t
 
size
,

100 * 
nb_symbﬁs
,

101 
uöt32_t
 * 
nb_symbﬁs_∑ylﬂd
,

102 
uöt16_t
 * 
t_symbﬁ_us
);

108 
_mós_time_°¨t
(
timevÆ
 *
tm
);

116 
_mós_time_°›
(
debug_Àvñ
, 
timevÆ
 
°¨t_time
, c⁄° *
°r
);

122 
timeout_°¨t
(
timevÆ
 * 
°¨t
);

130 
timeout_check
(
timevÆ
 
°¨t
, 
uöt32_t
 
timeout_ms
);

	@libloragw/inc/loragw_cal.h

16 #i‚de‡
_LORAGW_CAL_H


17 
	#_LORAGW_CAL_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

35 
	slgw_sx125x_ˇl_rx_ªsu…_s
 {

36 
öt8_t
 
	mamp
;

37 
öt8_t
 
	mphi
;

38 
uöt16_t
 
	mªj
;

39 
uöt16_t
 
	mªj_öô
;

40 
uöt16_t
 
	m¢r
;

43 
	slgw_sx125x_ˇl_tx_ªsu…_s
 {

44 
uöt8_t
 
	mdac_gaö
;

45 
uöt8_t
 
	mmix_gaö
;

46 
öt8_t
 
	moff£t_i
;

47 
öt8_t
 
	moff£t_q
;

48 
uöt16_t
 
	mªj
;

49 
uöt16_t
 
	msig
;

55 
sx1302_ˇl_°¨t
(
uöt8_t
 
vîsi⁄
, 
lgw_c⁄f_rxrf_s
 * 
rf_chaö_cfg
, 
lgw_tx_gaö_lut_s
 * 
txgaö_lut
);

	@libloragw/inc/loragw_com.h

18 #i‚de‡
_LORAGW_COM_H


19 
	#_LORAGW_COM_H


	)

24 
	~<°döt.h
>

26 
	~"c⁄fig.h
"

31 
	#LGW_COM_SUCCESS
 0

	)

32 
	#LGW_COM_ERROR
 -1

	)

34 
	#LGW_SPI_MUX_TARGET_SX1302
 0x00

	)

35 
	#LGW_SPI_MUX_TARGET_RADIOA
 0x01

	)

36 
	#LGW_SPI_MUX_TARGET_RADIOB
 0x02

	)

41 
	ecom_ty≥_e
 {

42 
	mLGW_COM_SPI
,

43 
	mLGW_COM_USB
,

44 
	mLGW_COM_UNKNOWN


45 } 
	tlgw_com_ty≥_t
;

47 
	ecom_wrôe_mode_e
 {

48 
	mLGW_COM_WRITE_MODE_SINGLE
,

49 
	mLGW_COM_WRITE_MODE_BULK
,

50 
	mLGW_COM_WRITE_MODE_UNKNOWN


51 } 
	tlgw_com_wrôe_mode_t
;

59 
lgw_com_›í
(
lgw_com_ty≥_t
 
com_ty≥
, c⁄° *
com_∑th
);

64 
lgw_com_˛o£
();

69 
lgw_com_w
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
d©a
);

74 
lgw_com_r
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
);

79 
lgw_com_rmw
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
offs
, uöt8_à
Àng
, uöt8_à
d©a
);

84 
lgw_com_wb
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, c⁄° uöt8_à*
d©a
, uöt16_à
size
);

89 
lgw_com_rb
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
, uöt16_à
size
);

94 
lgw_com_£t_wrôe_mode
(
lgw_com_wrôe_mode_t
 
wrôe_mode
);

99 
lgw_com_Êush
();

104 
uöt16_t
 
lgw_com_chunk_size
();

109 
lgw_com_gë_ãm≥øtuª
(* 
ãm≥øtuª
);

114 * 
lgw_com_èrgë
();

119 
lgw_com_ty≥_t
 
lgw_com_ty≥
();

	@libloragw/inc/loragw_debug.h

16 #i‚de‡
_LORAGW_DBG_H


17 
	#_LORAGW_DBG_H


	)

22 
	~"c⁄fig.h
"

34 
dbg_log_buf„r_to_fûe
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf„r
, 
uöt16_t
 
size
);

40 
dbg_log_∑ylﬂd_diff_to_fûe
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf„r1
, uöt8_à* 
buf„r2
, 
uöt16_t
 
size
);

46 
dbg_öô_øndom
();

52 
dbg_gíî©e_øndom_∑ylﬂd
(
uöt32_t
 
pkt_˙t
, 
uöt8_t
 * 
buf„r_ex≥˘ed
, uöt8_à
size
);

58 
dbg_check_∑ylﬂd
(
lgw_c⁄f_debug_s
 * 
c⁄ãxt
, 
FILE
 * 
fûe
, 
uöt8_t
 * 
∑ylﬂd_ª˚ived
, uöt8_à
size
, uöt8_à
ªf_∑ylﬂd_idx
, uöt8_à
sf
);

	@libloragw/inc/loragw_gps.h

18 #i‚de‡
_LORAGW_GPS_H


19 
	#_LORAGW_GPS_H


	)

24 
	#_GNU_SOURCE


	)

25 
	~<°döt.h
>

26 
	~<time.h
>

27 
	~<ãrmios.h
>

28 
	~<uni°d.h
>

30 
	~"c⁄fig.h
"

39 
	såef
 {

40 
time_t
 
	msy°ime
;

41 
uöt32_t
 
	mcou¡_us
;

42 
time•ec
 
	mutc
;

43 
time•ec
 
	mgps
;

44 
	mxèl_îr
;

51 
	sco‹d_s
 {

52 
	mœt
;

53 
	ml⁄
;

54 
	mÆt
;

61 
	egps_msg
 {

62 
	mUNKNOWN
,

63 
	mIGNORED
,

64 
	mINVALID
,

65 
	mINCOMPLETE
,

67 
	mNMEA_RMC
,

68 
	mNMEA_GGA
,

69 
	mNMEA_GNS
,

70 
	mNMEA_ZDA
,

72 
	mNMEA_GBS
,

73 
	mNMEA_GST
,

74 
	mNMEA_GSA
,

75 
	mNMEA_GSV
,

77 
	mNMEA_GLL
,

78 
	mNMEA_TXT
,

79 
	mNMEA_VTG
,

81 
	mUBX_NAV_TIMEGPS
,

82 
	mUBX_NAV_TIMEUTC


88 
	#LGW_GPS_SUCCESS
 0

	)

89 
	#LGW_GPS_ERROR
 -1

	)

91 
	#LGW_GPS_MIN_MSG_SIZE
 (8)

	)

92 
	#LGW_GPS_UBX_SYNC_CHAR
 (0xB5)

	)

93 
	#LGW_GPS_NMEA_SYNC_CHAR
 (0x24)

	)

107 
lgw_gps_íabÀ
(* 
ây_∑th
, * 
gps_Ámûly
, 
•ìd_t
 
èrgë_bøã
, * 
fd_±r
);

115 
lgw_gps_dißbÀ
(
fd
);

129 
gps_msg
 
lgw_∑r£_nmó
(c⁄° * 
£rül_buff
, 
buff_size
);

144 
gps_msg
 
lgw_∑r£_ubx
(c⁄° * 
£rül_buff
, 
size_t
 
buff_size
, size_à*
msg_size
);

161 
lgw_gps_gë
(
time•ec
 *
utc
, time•e¯*
gps_time
, 
co‹d_s
 *
loc
, co‹d_†*
îr
);

174 
lgw_gps_sync
(
åef
 *
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 
utc
, time•e¯
gps_time
);

188 
lgw_˙t2utc
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
* 
utc
);

202 
lgw_utc2˙t
(
åef
 
ªf
,
time•ec
 
utc
, 
uöt32_t
* 
cou¡_us
);

216 
lgw_˙t2gps
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
* 
gps_time
);

230 
lgw_gps2˙t
(
åef
 
ªf
, 
time•ec
 
gps_time
, 
uöt32_t
* 
cou¡_us
);

	@libloragw/inc/loragw_hal.h

16 #i‚de‡
_LORAGW_HAL_H


17 
	#_LORAGW_HAL_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

25 
	~"l‹agw_com.h
"

27 
	~"c⁄fig.h
"

32 
	#IS_LORA_BW
(
bw
Ë((bw =
BW_125KHZ
Ë|| (bw =
BW_250KHZ
Ë|| (bw =
BW_500KHZ
))

	)

33 
	#IS_LORA_DR
(
dr
Ë((d∏=
DR_LORA_SF5
Ë|| (d∏=
DR_LORA_SF6
Ë|| (d∏=
DR_LORA_SF7
Ë|| (d∏=
DR_LORA_SF8
Ë|| (d∏=
DR_LORA_SF9
Ë|| (d∏=
DR_LORA_SF10
Ë|| (d∏=
DR_LORA_SF11
Ë|| (d∏=
DR_LORA_SF12
))

	)

34 
	#IS_LORA_CR
(
¸
Ë((¸ =
CR_LORA_4_5
Ë|| (¸ =
CR_LORA_4_6
Ë|| (¸ =
CR_LORA_4_7
Ë|| (¸ =
CR_LORA_4_8
))

	)

36 
	#IS_FSK_BW
(
bw
Ë((bw >1Ë&& (bw <7))

	)

37 
	#IS_FSK_DR
(
dr
Ë((d∏>
DR_FSK_MIN
Ë&& (d∏<
DR_FSK_MAX
))

	)

39 
	#IS_TX_MODE
(
mode
Ë((modê=
IMMEDIATE
Ë|| (modê=
TIMESTAMPED
Ë|| (modê=
ON_GPS
))

	)

45 
	#LGW_HAL_SUCCESS
 0

	)

46 
	#LGW_HAL_ERROR
 -1

	)

47 
	#LGW_LBT_NOT_ALLOWED
 1

	)

50 
	#LGW_XTAL_FREQU
 32000000

	)

51 
	#LGW_RF_CHAIN_NB
 2

	)

52 
	#LGW_RF_RX_BANDWIDTH
 {1000000, 1000000}

	)

55 
	#LGW_IF_CHAIN_NB
 10

	)

56 
	#LGW_REF_BW
 125000

	)

57 
	#LGW_MULTI_NB
 8

	)

58 
	#LGW_MULTI_SF_EN
 0xFF

	)

62 
	#MOD_UNDEFINED
 0

	)

63 
	#MOD_CW
 0x08

	)

64 
	#MOD_LORA
 0x10

	)

65 
	#MOD_FSK
 0x20

	)

69 
	#BW_UNDEFINED
 0

	)

70 
	#BW_500KHZ
 0x06

	)

71 
	#BW_250KHZ
 0x05

	)

72 
	#BW_125KHZ
 0x04

	)

76 
	#DR_UNDEFINED
 0

	)

77 
	#DR_LORA_SF5
 5

	)

78 
	#DR_LORA_SF6
 6

	)

79 
	#DR_LORA_SF7
 7

	)

80 
	#DR_LORA_SF8
 8

	)

81 
	#DR_LORA_SF9
 9

	)

82 
	#DR_LORA_SF10
 10

	)

83 
	#DR_LORA_SF11
 11

	)

84 
	#DR_LORA_SF12
 12

	)

86 
	#DR_FSK_MIN
 500

	)

87 
	#DR_FSK_MAX
 250000

	)

91 
	#CR_UNDEFINED
 0

	)

92 
	#CR_LORA_4_5
 0x01

	)

93 
	#CR_LORA_4_6
 0x02

	)

94 
	#CR_LORA_4_7
 0x03

	)

95 
	#CR_LORA_4_8
 0x04

	)

99 
	#STAT_UNDEFINED
 0x00

	)

100 
	#STAT_NO_CRC
 0x01

	)

101 
	#STAT_CRC_BAD
 0x11

	)

102 
	#STAT_CRC_OK
 0x10

	)

105 
	#IMMEDIATE
 0

	)

106 
	#TIMESTAMPED
 1

	)

107 
	#ON_GPS
 2

	)

110 
	#TX_STATUS
 1

	)

111 
	#RX_STATUS
 2

	)

115 
	#TX_STATUS_UNKNOWN
 0

	)

116 
	#TX_OFF
 1

	)

117 
	#TX_FREE
 2

	)

118 
	#TX_SCHEDULED
 3

	)

119 
	#TX_EMITTING
 4

	)

123 
	#RX_STATUS_UNKNOWN
 0

	)

124 
	#RX_OFF
 1

	)

125 
	#RX_ON
 2

	)

126 
	#RX_SUSPENDED
 3

	)

129 
	#TX_GAIN_LUT_SIZE_MAX
 16

	)

132 
	#LGW_LBT_CHANNEL_NB_MAX
 16

	)

135 
	#LGW_SPECTRAL_SCAN_RESULT_SIZE
 33

	)

145 
	mLGW_RADIO_TYPE_NONE
,

146 
	mLGW_RADIO_TYPE_SX1255
,

147 
	mLGW_RADIO_TYPE_SX1257
,

148 
	mLGW_RADIO_TYPE_SX1272
,

149 
	mLGW_RADIO_TYPE_SX1276
,

150 
	mLGW_RADIO_TYPE_SX1250


151 } 
	tlgw_ødio_ty≥_t
;

157 
	slgw_c⁄f_bﬂrd_s
 {

158 
boﬁ
 
	ml‹aw™_public
;

159 
uöt8_t
 
	m˛k§c
;

160 
boﬁ
 
	mfuŒ_du∂ex
;

161 
lgw_com_ty≥_t
 
	mcom_ty≥
;

162 
	mcom_∑th
[64];

169 
	slgw_rssi_tcomp_s
 {

170 
	mc€ff_a
;

171 
	mc€ff_b
;

172 
	mc€ff_c
;

173 
	mc€ff_d
;

174 
	mc€ff_e
;

181 
	slgw_c⁄f_rxrf_s
 {

182 
boﬁ
 
	míabÀ
;

183 
uöt32_t
 
	m‰eq_hz
;

184 
	mrssi_off£t
;

185 
lgw_rssi_tcomp_s
 
	mrssi_tcomp
;

186 
lgw_ødio_ty≥_t
 
	mty≥
;

187 
boﬁ
 
	mtx_íabÀ
;

188 
boﬁ
 
	msögÀ_öput_mode
;

195 
	slgw_c⁄f_rxif_s
 {

196 
boﬁ
 
	míabÀ
;

197 
uöt8_t
 
	mrf_chaö
;

198 
öt32_t
 
	m‰eq_hz
;

199 
uöt8_t
 
	mb™dwidth
;

200 
uöt32_t
 
	md©¨©e
;

201 
uöt8_t
 
	msync_w‹d_size
;

202 
uöt64_t
 
	msync_w‹d
;

203 
boﬁ
 
	mim∂icô_hdr
;

204 
uöt8_t
 
	mim∂icô_∑ylﬂd_Àngth
;

205 
boﬁ
 
	mim∂icô_¸c_í
;

206 
uöt8_t
 
	mim∂icô_codî©e
;

213 
	slgw_c⁄f_demod_s
 {

214 
uöt8_t
 
	mmu…isf_d©¨©e
;

221 
	slgw_pkt_rx_s
 {

222 
uöt32_t
 
	m‰eq_hz
;

223 
öt32_t
 
	m‰eq_off£t
;

224 
uöt8_t
 
	mif_chaö
;

225 
uöt8_t
 
	m°©us
;

226 
uöt32_t
 
	mcou¡_us
;

227 
uöt8_t
 
	mrf_chaö
;

228 
uöt8_t
 
	mmodem_id
;

229 
uöt8_t
 
	mmoduœti⁄
;

230 
uöt8_t
 
	mb™dwidth
;

231 
uöt32_t
 
	md©¨©e
;

232 
uöt8_t
 
	mcodî©e
;

233 
	mrssic
;

234 
	mrssis
;

235 
	m¢r
;

236 
	m¢r_mö
;

237 
	m¢r_max
;

238 
uöt16_t
 
	m¸c
;

239 
uöt16_t
 
	msize
;

240 
uöt8_t
 
	m∑ylﬂd
[256];

241 
boﬁ
 
	m·ime_ª˚ived
;

242 
uöt32_t
 
	m·ime
;

249 
	slgw_pkt_tx_s
 {

250 
uöt32_t
 
	m‰eq_hz
;

251 
uöt8_t
 
	mtx_mode
;

252 
uöt32_t
 
	mcou¡_us
;

253 
uöt8_t
 
	mrf_chaö
;

254 
öt8_t
 
	mrf_powî
;

255 
uöt8_t
 
	mmoduœti⁄
;

256 
öt8_t
 
	m‰eq_off£t
;

257 
uöt8_t
 
	mb™dwidth
;

258 
uöt32_t
 
	md©¨©e
;

259 
uöt8_t
 
	mcodî©e
;

260 
boﬁ
 
	mövît_pﬁ
;

261 
uöt8_t
 
	mf_dev
;

262 
uöt16_t
 
	m¥ómbÀ
;

263 
boﬁ
 
	mno_¸c
;

264 
boﬁ
 
	mno_hódî
;

265 
uöt16_t
 
	msize
;

266 
uöt8_t
 
	m∑ylﬂd
[256];

273 
	slgw_tx_gaö_s
 {

274 
öt8_t
 
	mrf_powî
;

275 
uöt8_t
 
	mdig_gaö
;

276 
uöt8_t
 
	m∑_gaö
;

278 
uöt8_t
 
	mdac_gaö
;

279 
uöt8_t
 
	mmix_gaö
;

280 
öt8_t
 
	moff£t_i
;

281 
öt8_t
 
	moff£t_q
;

282 
uöt8_t
 
	mpwr_idx
;

289 
	slgw_tx_gaö_lut_s
 {

290 
lgw_tx_gaö_s
 
	mlut
[
TX_GAIN_LUT_SIZE_MAX
];

291 
uöt8_t
 
	msize
;

298 
	sc⁄f_ªf_∑ylﬂd_s
 {

299 
uöt32_t
 
	mid
;

300 
uöt8_t
 
	m∑ylﬂd
[255];

301 
uöt32_t
 
	m¥ev_˙t
;

303 
	slgw_c⁄f_debug_s
 {

304 
uöt8_t
 
	mnb_ªf_∑ylﬂd
;

305 
c⁄f_ªf_∑ylﬂd_s
 
	mªf_∑ylﬂd
[16];

306 
	mlog_fûe_«me
[128];

314 
	mLGW_FTIME_MODE_HIGH_CAPACITY
,

315 
	mLGW_FTIME_MODE_ALL_SF


316 } 
	tlgw_·ime_mode_t
;

322 
	slgw_c⁄f_·ime_s
 {

323 
boﬁ
 
	míabÀ
;

324 
lgw_·ime_mode_t
 
	mmode
;

332 
	mLGW_LBT_SCAN_TIME_128_US
 = 128,

333 
	mLGW_LBT_SCAN_TIME_5000_US
 = 5000,

334 } 
	tlgw_lbt_sˇn_time_t
;

339 
	slgw_c⁄f_ch™_lbt_s
{

340 
uöt32_t
 
	m‰eq_hz
;

341 
uöt8_t
 
	mb™dwidth
;

342 
lgw_lbt_sˇn_time_t
 
	msˇn_time_us
;

343 
uöt16_t
 
	må™smô_time_ms
;

350 
	slgw_c⁄f_lbt_s
 {

351 
boﬁ
 
	míabÀ
;

352 
öt8_t
 
	mrssi_èrgë
;

353 
uöt8_t
 
	mnb_ch™√l
;

354 
lgw_c⁄f_ch™_lbt_s
 
	mch™√ls
[
LGW_LBT_CHANNEL_NB_MAX
];

361 
	slgw_c⁄f_sx1261_s
 {

362 
boﬁ
 
	míabÀ
;

363 
	m•i_∑th
[64];

364 
öt8_t
 
	mrssi_off£t
;

365 
lgw_c⁄f_lbt_s
 
	mlbt_c⁄f
;

372 
	slgw_c⁄ãxt_s
 {

374 
boﬁ
 
	mis_°¨ãd
;

375 
lgw_c⁄f_bﬂrd_s
 
	mbﬂrd_cfg
;

377 
lgw_c⁄f_rxrf_s
 
	mrf_chaö_cfg
[
LGW_RF_CHAIN_NB
];

378 
lgw_c⁄f_rxif_s
 
	mif_chaö_cfg
[
LGW_IF_CHAIN_NB
];

379 
lgw_c⁄f_demod_s
 
	mdemod_cfg
;

380 
lgw_c⁄f_rxif_s
 
	ml‹a_£rvi˚_cfg
;

381 
lgw_c⁄f_rxif_s
 
	mfsk_cfg
;

383 
lgw_tx_gaö_lut_s
 
	mtx_gaö_lut
[
LGW_RF_CHAIN_NB
];

385 
lgw_c⁄f_·ime_s
 
	m·ime_cfg
;

386 
lgw_c⁄f_sx1261_s
 
	msx1261_cfg
;

388 
lgw_c⁄f_debug_s
 
	mdebug_cfg
;

389 } 
	tlgw_c⁄ãxt_t
;

395 
	elgw_•e˘øl_sˇn_°©us_e
 {

396 
	mLGW_SPECTRAL_SCAN_STATUS_NONE
,

397 
	mLGW_SPECTRAL_SCAN_STATUS_ON_GOING
,

398 
	mLGW_SPECTRAL_SCAN_STATUS_ABORTED
,

399 
	mLGW_SPECTRAL_SCAN_STATUS_COMPLETED
,

400 
	mLGW_SPECTRAL_SCAN_STATUS_UNKNOWN


401 } 
	tlgw_•e˘øl_sˇn_°©us_t
;

411 
lgw_bﬂrd_£tc⁄f
(
lgw_c⁄f_bﬂrd_s
 * 
c⁄f
);

419 
lgw_rxrf_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_c⁄f_rxrf_s
 * 
c⁄f
);

427 
lgw_rxif_£tc⁄f
(
uöt8_t
 
if_chaö
, 
lgw_c⁄f_rxif_s
 * 
c⁄f
);

434 
lgw_demod_£tc⁄f
(
lgw_c⁄f_demod_s
 * 
c⁄f
);

441 
lgw_txgaö_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_tx_gaö_lut_s
 * 
c⁄f
);

448 
lgw_·ime_£tc⁄f
(
lgw_c⁄f_·ime_s
 * 
c⁄f
);

455 
lgw_sx1261_£tc⁄f
(
lgw_c⁄f_sx1261_s
 * 
c⁄f
);

462 
lgw_debug_£tc⁄f
(
lgw_c⁄f_debug_s
 * 
c⁄f
);

468 
lgw_°¨t
();

474 
lgw_°›
();

482 
lgw_ª˚ive
(
uöt8_t
 
max_pkt
, 
lgw_pkt_rx_s
 * 
pkt_d©a
);

508 
lgw_£nd
(
lgw_pkt_tx_s
 * 
pkt_d©a
);

516 
lgw_°©us
(
uöt8_t
 
rf_chaö
, uöt8_à
£À˘
, uöt8_à* 
code
);

522 
lgw_ab‹t_tx
(
uöt8_t
 
rf_chaö
);

529 
lgw_gë_åig˙t
(
uöt32_t
 * 
åig_˙t_us
);

536 
lgw_gë_ö°˙t
(
uöt32_t
 * 
ö°_˙t_us
);

543 
lgw_gë_eui
(
uöt64_t
 * 
eui
);

550 
lgw_gë_ãm≥øtuª
(* 
ãm≥øtuª
);

556 c⁄° * 
lgw_vîsi⁄_öfo
();

563 
uöt32_t
 
lgw_time_⁄_aú
(c⁄° 
lgw_pkt_tx_s
 * 
∑ckë
);

571 
lgw_•e˘øl_sˇn_°¨t
(
uöt32_t
 
‰eq_hz
, 
uöt16_t
 
nb_sˇn
);

578 
lgw_•e˘øl_sˇn_gë_°©us
(
lgw_•e˘øl_sˇn_°©us_t
 * 
°©us
);

586 
lgw_•e˘øl_sˇn_gë_ªsu…s
(
öt16_t
 
Àvñs_dbm
[
LGW_SPECTRAL_SCAN_RESULT_SIZE
], 
uöt16_t
 
ªsu…s
[LGW_SPECTRAL_SCAN_RESULT_SIZE]);

592 
lgw_•e˘øl_sˇn_ab‹t
();

	@libloragw/inc/loragw_i2c.h

16 #i‚de‡
_LORAGW_I2C_H


17 
	#_LORAGW_I2C_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

29 
	#LGW_I2C_SUCCESS
 0

	)

30 
	#LGW_I2C_ERROR
 -1

	)

32 
	#I2C_DEVICE
 "/dev/i2c-1"

	)

44 
i2c_löuxdev_›í
(c⁄° *
∑th
, 
uöt8_t
 
devi˚_addr
, *
i2c_fd
);

51 
i2c_löuxdev_˛o£
(
i2c_fd
);

61 
i2c_löuxdev_ªad
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à*
d©a
);

71 
i2c_löuxdev_wrôe
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à
d©a
);

81 
i2c_löuxdev_wrôe_buf„r
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à*
buf„r
, uöt8_à
size
);

	@libloragw/inc/loragw_lbt.h

16 #i‚de‡
_LORAGW_LBT_H


17 
	#_LORAGW_LBT_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

25 
	~"l‹agw_hÆ.h
"

27 
	~"c⁄fig.h
"

47 
lgw_lbt_°¨t
(c⁄° 
lgw_c⁄f_sx1261_s
 * 
sx1261_c⁄ãxt
, c⁄° 
lgw_pkt_tx_s
 * 
pkt
);

53 
lgw_lbt_°›
();

61 
lgw_lbt_tx_°©us
(
uöt8_t
 
rf_chaö
, 
boﬁ
 * 
tx_ok
);

	@libloragw/inc/loragw_mcu.h

18 #i‚de‡
_LORAGW_MCU_H


19 
	#_LORAGW_MCU_H


	)

24 
	~<°döt.h
>

26 
	~"c⁄fig.h
"

31 c⁄° 
	gmcu_vîsi⁄_°rög
[] = "01.00.00";

33 
	#MAX_SIZE_COMMAND
 ( 4200 )

	)

34 
	#MAX_SPI_COMMAND
 ( 
MAX_SIZE_COMMAND
 - 
CMD_OFFSET__DATA
 - 1 )

	)

36 
	#LGW_USB_BURST_CHUNK
 ( 4096 )

	)

41 
	e‹dî_id_e


43 
	mORDER_ID__REQ_PING
 = 0x00,

44 
	mORDER_ID__REQ_GET_STATUS
 = 0x01,

45 
	mORDER_ID__REQ_BOOTLOADER_MODE
 = 0x02,

46 
	mORDER_ID__REQ_RESET
 = 0x03,

47 
	mORDER_ID__REQ_WRITE_GPIO
 = 0x04,

48 
	mORDER_ID__REQ_MULTIPLE_SPI
 = 0x05,

50 
	mORDER_ID__ACK_PING
 = 0x40,

51 
	mORDER_ID__ACK_GET_STATUS
 = 0x41,

52 
	mORDER_ID__ACK_BOOTLOADER_MODE
 = 0x42,

53 
	mORDER_ID__ACK_RESET
 = 0x43,

54 
	mORDER_ID__ACK_WRITE_GPIO
 = 0x44,

55 
	mORDER_ID__ACK_MULTIPLE_SPI
 = 0x45,

57 
	mORDER_ID__CMD_ERROR
 = 0xFF

58 } 
	t‹dî_id_t
;

62 
	mCMD_OFFSET__ID
,

63 
	mCMD_OFFSET__SIZE_MSB
,

64 
	mCMD_OFFSET__SIZE_LSB
,

65 
	mCMD_OFFSET__CMD
,

66 
	mCMD_OFFSET__DATA


67 } 
	te_cmd_‹dî_off£t
;

71 
	mREQ_RESET__TYPE
,

72 
	mREQ_RESET_SIZE


73 } 
	te_cmd_off£t_ªq_ª£t
;

77 
	mREQ_WRITE_GPIO__PORT
,

78 
	mREQ_WRITE_GPIO__PIN
,

79 
	mREQ_WRITE_GPIO__STATE
,

80 
	mREQ_WRITE_GPIO_SIZE


81 } 
	te_cmd_off£t_ªq_wrôe_gpio
;

85 
	mACK_PING__UNIQUE_ID_0
, 
	mACK_PING__UNIQUE_ID_1
, 
	mACK_PING__UNIQUE_ID_2
, 
	mACK_PING__UNIQUE_ID_3
,

86 
	mACK_PING__UNIQUE_ID_4
, 
	mACK_PING__UNIQUE_ID_5
, 
	mACK_PING__UNIQUE_ID_6
, 
	mACK_PING__UNIQUE_ID_7
,

87 
	mACK_PING__UNIQUE_ID_8
, 
	mACK_PING__UNIQUE_ID_9
, 
	mACK_PING__UNIQUE_ID_10
, 
	mACK_PING__UNIQUE_ID_11
,

88 
	mACK_PING__VERSION_0
, 
	mACK_PING__VERSION_1
, 
	mACK_PING__VERSION_2
, 
	mACK_PING__VERSION_3
, 
	mACK_PING__VERSION_4
,

89 
	mACK_PING__VERSION_5
, 
	mACK_PING__VERSION_6
, 
	mACK_PING__VERSION_7
, 
	mACK_PING__VERSION_8
,

90 
	mACK_PING_SIZE
,

91 } 
	te_cmd_off£t_ack_pög
;

95 
	mACK_GET_STATUS__SYSTEM_TIME_31_24
, 
	mACK_GET_STATUS__SYSTEM_TIME_23_16
, 
	mACK_GET_STATUS__SYSTEM_TIME_15_8
, 
	mACK_GET_STATUS__SYSTEM_TIME_7_0
,

96 
	mACK_GET_STATUS__TEMPERATURE_15_8
, 
	mACK_GET_STATUS__TEMPERATURE_7_0
,

97 
	mACK_GET_STATUS_SIZE


98 } 
	te_cmd_off£t_ack_gë_°©us
;

102 
	mACK_GPIO_WRITE__STATUS
,

103 
	mACK_GPIO_WRITE_SIZE


104 } 
	te_cmd_off£t_ack_gpio_wrôe
;

108 
	mACK_RESET__STATUS
,

109 
	mACK_RESET_SIZE


110 } 
	te_cmd_off£t_ack_ª£t
;

114 
	mMCU_SPI_TARGET_SX1302
,

115 
	mMCU_SPI_TARGET_SX1261


116 } 
	te_cmd_•i_èrgë
;

120 
	mMCU_SPI_REQ_TYPE_READ_WRITE
 = 0x01,

121 
	mMCU_SPI_REQ_TYPE_READ_MODIFY_WRITE
 = 0x02

122 } 
	te_cmd_•i_ªq_ty≥
;

126 
	mRESET_TYPE__GTW


127 } 
	te_ª£t_ty≥
;

131 
	mSPI_STATUS_OK
,

132 
	mSPI_STATUS_FAIL
,

133 
	mSPI_STATUS_WRONG_PARAM
,

134 
	mSPI_STATUS_TIMEOUT


135 } 
	te_•i_°©us
;

138 
uöt32_t
 
	munique_id_high
;

139 
uöt32_t
 
	munique_id_mid
;

140 
uöt32_t
 
	munique_id_low
;

141 
	mvîsi⁄
[10];

142 } 
	ts_pög_öfo
;

145 
uöt32_t
 
	msy°em_time_ms
;

146 
	mãm≥øtuª
;

147 } 
	ts_°©us
;

155 
mcu_pög
(
fd
, 
s_pög_öfo
 * 
öfo
);

160 
mcu_boŸ
(
fd
);

165 
mcu_gë_°©us
(
fd
, 
s_°©us
 * 
°©us
);

170 
mcu_gpio_wrôe
(
fd
, 
uöt8_t
 
gpio_p‹t
, uöt8_à
gpio_id
, uöt8_à
gpio_vÆue
);

181 
mcu_•i_wrôe
(
fd
, 
uöt8_t
 * 
ö_out_buf
, 
size_t
 
buf_size
);

186 
mcu_•i_°‹e
(
uöt8_t
 * 
ö_out_buf
, 
size_t
 
buf_size
);

191 
mcu_•i_Êush
(
fd
);

	@libloragw/inc/loragw_reg.h

19 #i‚de‡
_LORAGW_REG_H


20 
	#_LORAGW_REG_H


	)

25 
	~<°döt.h
>

26 
	~<°dboﬁ.h
>

28 
	~"c⁄fig.h
"

30 
	~"l‹agw_com.h
"

35 
	slgw_ªg_s
 {

36 
öt8_t
 
	m∑ge
;

37 
uöt16_t
 
	maddr
;

38 
uöt8_t
 
	moffs
;

39 
boﬁ
 
	msign
;

40 
uöt8_t
 
	mÀng
;

41 
boﬁ
 
	mrd⁄
;

42 
boﬁ
 
	mchck
;

43 
öt32_t
 
	mdÊt
;

52 
	#LGW_REG_SUCCESS
 0

	)

53 
	#LGW_REG_ERROR
 -1

	)

54 
	#LGW_REG_WARNING
 -2

	)

56 
	#SX1302_REG_COMMON_PAGE_PAGE
 0

	)

57 
	#SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL
 1

	)

58 
	#SX1302_REG_COMMON_CTRL0_HOST_RADIO_CTRL
 2

	)

59 
	#SX1302_REG_COMMON_CTRL0_RADIO_MISC_EN
 3

	)

60 
	#SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_B
 4

	)

61 
	#SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_A
 5

	)

62 
	#SX1302_REG_COMMON_CTRL1_SWAP_IQ_RADIO_B
 6

	)

63 
	#SX1302_REG_COMMON_CTRL1_SAMPLING_EDGE_RADIO_B
 7

	)

64 
	#SX1302_REG_COMMON_CTRL1_SWAP_IQ_RADIO_A
 8

	)

65 
	#SX1302_REG_COMMON_CTRL1_SAMPLING_EDGE_RADIO_A
 9

	)

66 
	#SX1302_REG_COMMON_SPI_DIV_RATIO_SPI_HALF_PERIOD
 10

	)

67 
	#SX1302_REG_COMMON_RADIO_SELECT_RADIO_SELECT
 11

	)

68 
	#SX1302_REG_COMMON_GEN_GLOBAL_EN
 12

	)

69 
	#SX1302_REG_COMMON_GEN_FSK_MODEM_ENABLE
 13

	)

70 
	#SX1302_REG_COMMON_GEN_CONCENTRATOR_MODEM_ENABLE
 14

	)

71 
	#SX1302_REG_COMMON_GEN_MBWSSF_MODEM_ENABLE
 15

	)

72 
	#SX1302_REG_COMMON_VERSION_VERSION
 16

	)

73 
	#SX1302_REG_COMMON_DUMMY_DUMMY
 17

	)

74 
	#SX1302_REG_AGC_MCU_CTRL_CLK_EN
 18

	)

75 
	#SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
 19

	)

76 
	#SX1302_REG_AGC_MCU_CTRL_MCU_CLEAR
 20

	)

77 
	#SX1302_REG_AGC_MCU_CTRL_HOST_PROG
 21

	)

78 
	#SX1302_REG_AGC_MCU_CTRL_PARITY_ERROR
 22

	)

79 
	#SX1302_REG_AGC_MCU_MCU_AGC_STATUS_MCU_AGC_STATUS
 23

	)

80 
	#SX1302_REG_AGC_MCU_PA_GAIN_PA_B_GAIN
 24

	)

81 
	#SX1302_REG_AGC_MCU_PA_GAIN_PA_A_GAIN
 25

	)

82 
	#SX1302_REG_AGC_MCU_RF_EN_A_RADIO_RST
 26

	)

83 
	#SX1302_REG_AGC_MCU_RF_EN_A_RADIO_EN
 27

	)

84 
	#SX1302_REG_AGC_MCU_RF_EN_A_PA_EN
 28

	)

85 
	#SX1302_REG_AGC_MCU_RF_EN_A_LNA_EN
 29

	)

86 
	#SX1302_REG_AGC_MCU_RF_EN_B_RADIO_RST
 30

	)

87 
	#SX1302_REG_AGC_MCU_RF_EN_B_RADIO_EN
 31

	)

88 
	#SX1302_REG_AGC_MCU_RF_EN_B_PA_EN
 32

	)

89 
	#SX1302_REG_AGC_MCU_RF_EN_B_LNA_EN
 33

	)

90 
	#SX1302_REG_AGC_MCU_LUT_TABLE_A_PA_LUT
 34

	)

91 
	#SX1302_REG_AGC_MCU_LUT_TABLE_A_LNA_LUT
 35

	)

92 
	#SX1302_REG_AGC_MCU_LUT_TABLE_B_PA_LUT
 36

	)

93 
	#SX1302_REG_AGC_MCU_LUT_TABLE_B_LNA_LUT
 37

	)

94 
	#SX1302_REG_AGC_MCU_UART_CFG_MSBF
 38

	)

95 
	#SX1302_REG_AGC_MCU_UART_CFG_PAR_EN
 39

	)

96 
	#SX1302_REG_AGC_MCU_UART_CFG_PAR_MODE
 40

	)

97 
	#SX1302_REG_AGC_MCU_UART_CFG_START_LEN
 41

	)

98 
	#SX1302_REG_AGC_MCU_UART_CFG_STOP_LEN
 42

	)

99 
	#SX1302_REG_AGC_MCU_UART_CFG_WORD_LEN
 43

	)

100 
	#SX1302_REG_AGC_MCU_UART_CFG2_BIT_RATE
 44

	)

101 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE3_MCU_MAIL_BOX_WR_DATA
 45

	)

102 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE2_MCU_MAIL_BOX_WR_DATA
 46

	)

103 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE1_MCU_MAIL_BOX_WR_DATA
 47

	)

104 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
 48

	)

105 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE3_MCU_MAIL_BOX_RD_DATA
 49

	)

106 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE2_MCU_MAIL_BOX_RD_DATA
 50

	)

107 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE1_MCU_MAIL_BOX_RD_DATA
 51

	)

108 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE0_MCU_MAIL_BOX_RD_DATA
 52

	)

109 
	#SX1302_REG_AGC_MCU_DUMMY_DUMMY3
 53

	)

110 
	#SX1302_REG_CLK_CTRL_CLK_SEL_CLKDIV_EN
 54

	)

111 
	#SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_B_SEL
 55

	)

112 
	#SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_A_SEL
 56

	)

113 
	#SX1302_REG_CLK_CTRL_DUMMY_DUMMY
 57

	)

114 
	#SX1302_REG_TX_TOP_A_TX_TRIG_TX_FSM_CLR
 58

	)

115 
	#SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_GPS
 59

	)

116 
	#SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_DELAYED
 60

	)

117 
	#SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
 61

	)

118 
	#SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
 62

	)

119 
	#SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
 63

	)

120 
	#SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
 64

	)

121 
	#SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
 65

	)

122 
	#SX1302_REG_TX_TOP_A_TX_START_DELAY_MSB_TX_START_DELAY
 66

	)

123 
	#SX1302_REG_TX_TOP_A_TX_START_DELAY_LSB_TX_START_DELAY
 67

	)

124 
	#SX1302_REG_TX_TOP_A_TX_CTRL_WRITE_BUFFER
 68

	)

125 
	#SX1302_REG_TX_TOP_A_TX_RAMP_DURATION_TX_RAMP_DURATION
 69

	)

126 
	#SX1302_REG_TX_TOP_A_GEN_CFG_0_MODULATION_TYPE
 70

	)

127 
	#SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_CTRL
 71

	)

128 
	#SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_SEL
 72

	)

129 
	#SX1302_REG_TX_TOP_A_TX_FLAG_TX_TIMEOUT
 73

	)

130 
	#SX1302_REG_TX_TOP_A_TX_FLAG_PKT_DONE
 74

	)

131 
	#SX1302_REG_TX_TOP_A_AGC_TX_BW_AGC_TX_BW
 75

	)

132 
	#SX1302_REG_TX_TOP_A_AGC_TX_PWR_AGC_TX_PWR
 76

	)

133 
	#SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
 77

	)

134 
	#SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
 78

	)

135 
	#SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
 79

	)

136 
	#SX1302_REG_TX_TOP_A_TX_FSM_STATUS_TX_STATUS
 80

	)

137 
	#SX1302_REG_TX_TOP_A_DUMMY_CONTROL_DUMMY
 81

	)

138 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
 82

	)

139 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_CLK_EDGE
 83

	)

140 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
 84

	)

141 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
 85

	)

142 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_SRC
 86

	)

143 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
 87

	)

144 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
 88

	)

145 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
 89

	)

146 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
 90

	)

147 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
 91

	)

148 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
 92

	)

149 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
 93

	)

150 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
 94

	)

151 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
 95

	)

152 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
 96

	)

153 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_TEST_MOD_FREQ
 97

	)

154 
	#SX1302_REG_TX_TOP_A_DUMMY_MODULATOR_DUMMY
 98

	)

155 
	#SX1302_REG_TX_TOP_A_FSK_PKT_LEN_PKT_LENGTH
 99

	)

156 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_TX_CONT
 100

	)

157 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_IBM
 101

	)

158 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_DCFREE_ENC
 102

	)

159 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_EN
 103

	)

160 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_PKT_MODE
 104

	)

161 
	#SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
 105

	)

162 
	#SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
 106

	)

163 
	#SX1302_REG_TX_TOP_A_FSK_BIT_RATE_MSB_BIT_RATE
 107

	)

164 
	#SX1302_REG_TX_TOP_A_FSK_BIT_RATE_LSB_BIT_RATE
 108

	)

165 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_SIZE
 109

	)

166 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_PREAMBLE_SEQ
 110

	)

167 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_EN
 111

	)

168 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
 112

	)

169 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_EN
 113

	)

170 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
 114

	)

171 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
 115

	)

172 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
 116

	)

173 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
 117

	)

174 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
 118

	)

175 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
 119

	)

176 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
 120

	)

177 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
 121

	)

178 
	#SX1302_REG_TX_TOP_A_DUMMY_GSFK_DUMMY
 122

	)

179 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_BW
 123

	)

180 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_SF
 124

	)

181 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
 125

	)

182 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET
 126

	)

183 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
 127

	)

184 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_1_CODING_RATE
 128

	)

185 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_FINE_SYNCH_EN
 129

	)

186 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_MODEM_EN
 130

	)

187 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CADRXTX
 131

	)

188 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_IMPLICIT_HEADER
 132

	)

189 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CRC_EN
 133

	)

190 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_3_PAYLOAD_LENGTH
 134

	)

191 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE_EN
 135

	)

192 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE
 136

	)

193 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_1_MODEM_START
 137

	)

194 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_1_HEADER_DIFF_MODE
 138

	)

195 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_1_ZERO_PAD
 139

	)

196 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_2_PREAMBLE_SYMB_NB
 140

	)

197 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_3_PREAMBLE_SYMB_NB
 141

	)

198 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
 142

	)

199 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_RX
 143

	)

200 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_TX
 144

	)

201 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_LOWPASS
 145

	)

202 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_PPM_OFFSET_SIG
 146

	)

203 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTCHIRP
 147

	)

204 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_INVERT
 148

	)

205 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTINUOUS
 149

	)

206 
	#SX1302_REG_TX_TOP_A_TX_CFG0_1_POWER_RANGING
 150

	)

207 
	#SX1302_REG_TX_TOP_A_TX_CFG1_0_FRAME_NB
 151

	)

208 
	#SX1302_REG_TX_TOP_A_TX_CFG1_1_HOP_CTRL
 152

	)

209 
	#SX1302_REG_TX_TOP_A_TX_CFG1_1_IFS
 153

	)

210 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_AUTO_SCALE
 154

	)

211 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_DROP_ON_SYNCH
 155

	)

212 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_GAIN
 156

	)

213 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_PEAK1_POS
 157

	)

214 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_FINETIME_ON_LAST
 158

	)

215 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_TIMEOUT_OPT
 159

	)

216 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_PEAK2_POS
 160

	)

217 
	#SX1302_REG_TX_TOP_A_LORA_TX_STATE_STATUS
 161

	)

218 
	#SX1302_REG_TX_TOP_A_LORA_TX_FLAG_FRAME_DONE
 162

	)

219 
	#SX1302_REG_TX_TOP_A_LORA_TX_FLAG_CONT_DONE
 163

	)

220 
	#SX1302_REG_TX_TOP_A_LORA_TX_FLAG_PLD_DONE
 164

	)

221 
	#SX1302_REG_TX_TOP_A_DUMMY_LORA_DUMMY
 165

	)

222 
	#SX1302_REG_TX_TOP_B_TX_TRIG_TX_FSM_CLR
 166

	)

223 
	#SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_GPS
 167

	)

224 
	#SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_DELAYED
 168

	)

225 
	#SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
 169

	)

226 
	#SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
 170

	)

227 
	#SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
 171

	)

228 
	#SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
 172

	)

229 
	#SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
 173

	)

230 
	#SX1302_REG_TX_TOP_B_TX_START_DELAY_MSB_TX_START_DELAY
 174

	)

231 
	#SX1302_REG_TX_TOP_B_TX_START_DELAY_LSB_TX_START_DELAY
 175

	)

232 
	#SX1302_REG_TX_TOP_B_TX_CTRL_WRITE_BUFFER
 176

	)

233 
	#SX1302_REG_TX_TOP_B_TX_RAMP_DURATION_TX_RAMP_DURATION
 177

	)

234 
	#SX1302_REG_TX_TOP_B_GEN_CFG_0_MODULATION_TYPE
 178

	)

235 
	#SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_CTRL
 179

	)

236 
	#SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_SEL
 180

	)

237 
	#SX1302_REG_TX_TOP_B_TX_FLAG_TX_TIMEOUT
 181

	)

238 
	#SX1302_REG_TX_TOP_B_TX_FLAG_PKT_DONE
 182

	)

239 
	#SX1302_REG_TX_TOP_B_AGC_TX_BW_AGC_TX_BW
 183

	)

240 
	#SX1302_REG_TX_TOP_B_AGC_TX_PWR_AGC_TX_PWR
 184

	)

241 
	#SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
 185

	)

242 
	#SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
 186

	)

243 
	#SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
 187

	)

244 
	#SX1302_REG_TX_TOP_B_TX_FSM_STATUS_TX_STATUS
 188

	)

245 
	#SX1302_REG_TX_TOP_B_DUMMY_CONTROL_DUMMY
 189

	)

246 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
 190

	)

247 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_CLK_EDGE
 191

	)

248 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
 192

	)

249 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
 193

	)

250 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_SRC
 194

	)

251 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
 195

	)

252 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
 196

	)

253 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
 197

	)

254 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
 198

	)

255 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
 199

	)

256 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
 200

	)

257 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
 201

	)

258 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
 202

	)

259 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
 203

	)

260 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
 204

	)

261 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_TEST_MOD_FREQ
 205

	)

262 
	#SX1302_REG_TX_TOP_B_DUMMY_MODULATOR_DUMMY
 206

	)

263 
	#SX1302_REG_TX_TOP_B_FSK_PKT_LEN_PKT_LENGTH
 207

	)

264 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_TX_CONT
 208

	)

265 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_IBM
 209

	)

266 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_DCFREE_ENC
 210

	)

267 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_EN
 211

	)

268 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_PKT_MODE
 212

	)

269 
	#SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
 213

	)

270 
	#SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
 214

	)

271 
	#SX1302_REG_TX_TOP_B_FSK_BIT_RATE_MSB_BIT_RATE
 215

	)

272 
	#SX1302_REG_TX_TOP_B_FSK_BIT_RATE_LSB_BIT_RATE
 216

	)

273 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_SIZE
 217

	)

274 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_PREAMBLE_SEQ
 218

	)

275 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_EN
 219

	)

276 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
 220

	)

277 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_EN
 221

	)

278 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
 222

	)

279 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
 223

	)

280 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
 224

	)

281 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
 225

	)

282 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
 226

	)

283 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
 227

	)

284 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
 228

	)

285 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
 229

	)

286 
	#SX1302_REG_TX_TOP_B_DUMMY_GSFK_DUMMY
 230

	)

287 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_BW
 231

	)

288 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_SF
 232

	)

289 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
 233

	)

290 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET
 234

	)

291 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
 235

	)

292 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_1_CODING_RATE
 236

	)

293 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_FINE_SYNCH_EN
 237

	)

294 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_MODEM_EN
 238

	)

295 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CADRXTX
 239

	)

296 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_IMPLICIT_HEADER
 240

	)

297 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CRC_EN
 241

	)

298 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_3_PAYLOAD_LENGTH
 242

	)

299 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE_EN
 243

	)

300 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE
 244

	)

301 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_1_MODEM_START
 245

	)

302 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_1_HEADER_DIFF_MODE
 246

	)

303 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_1_ZERO_PAD
 247

	)

304 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_2_PREAMBLE_SYMB_NB
 248

	)

305 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_3_PREAMBLE_SYMB_NB
 249

	)

306 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
 250

	)

307 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_RX
 251

	)

308 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_TX
 252

	)

309 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_LOWPASS
 253

	)

310 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_PPM_OFFSET_SIG
 254

	)

311 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTCHIRP
 255

	)

312 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_INVERT
 256

	)

313 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTINUOUS
 257

	)

314 
	#SX1302_REG_TX_TOP_B_TX_CFG0_1_POWER_RANGING
 258

	)

315 
	#SX1302_REG_TX_TOP_B_TX_CFG1_0_FRAME_NB
 259

	)

316 
	#SX1302_REG_TX_TOP_B_TX_CFG1_1_HOP_CTRL
 260

	)

317 
	#SX1302_REG_TX_TOP_B_TX_CFG1_1_IFS
 261

	)

318 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_AUTO_SCALE
 262

	)

319 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_DROP_ON_SYNCH
 263

	)

320 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_GAIN
 264

	)

321 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_PEAK1_POS
 265

	)

322 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_FINETIME_ON_LAST
 266

	)

323 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_TIMEOUT_OPT
 267

	)

324 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_PEAK2_POS
 268

	)

325 
	#SX1302_REG_TX_TOP_B_LORA_TX_STATE_STATUS
 269

	)

326 
	#SX1302_REG_TX_TOP_B_LORA_TX_FLAG_FRAME_DONE
 270

	)

327 
	#SX1302_REG_TX_TOP_B_LORA_TX_FLAG_CONT_DONE
 271

	)

328 
	#SX1302_REG_TX_TOP_B_LORA_TX_FLAG_PLD_DONE
 272

	)

329 
	#SX1302_REG_TX_TOP_B_DUMMY_LORA_DUMMY
 273

	)

330 
	#SX1302_REG_GPIO_GPIO_DIR_H_DIRECTION
 274

	)

331 
	#SX1302_REG_GPIO_GPIO_DIR_L_DIRECTION
 275

	)

332 
	#SX1302_REG_GPIO_GPIO_OUT_H_OUT_VALUE
 276

	)

333 
	#SX1302_REG_GPIO_GPIO_OUT_L_OUT_VALUE
 277

	)

334 
	#SX1302_REG_GPIO_GPIO_IN_H_IN_VALUE
 278

	)

335 
	#SX1302_REG_GPIO_GPIO_IN_L_IN_VALUE
 279

	)

336 
	#SX1302_REG_GPIO_GPIO_PD_H_PD_VALUE
 280

	)

337 
	#SX1302_REG_GPIO_GPIO_PD_L_PD_VALUE
 281

	)

338 
	#SX1302_REG_GPIO_GPIO_SEL_0_SELECTION
 282

	)

339 
	#SX1302_REG_GPIO_GPIO_SEL_1_SELECTION
 283

	)

340 
	#SX1302_REG_GPIO_GPIO_SEL_2_SELECTION
 284

	)

341 
	#SX1302_REG_GPIO_GPIO_SEL_3_SELECTION
 285

	)

342 
	#SX1302_REG_GPIO_GPIO_SEL_4_SELECTION
 286

	)

343 
	#SX1302_REG_GPIO_GPIO_SEL_5_SELECTION
 287

	)

344 
	#SX1302_REG_GPIO_GPIO_SEL_6_SELECTION
 288

	)

345 
	#SX1302_REG_GPIO_GPIO_SEL_7_SELECTION
 289

	)

346 
	#SX1302_REG_GPIO_GPIO_SEL_8_11_GPIO_11_9_SEL
 290

	)

347 
	#SX1302_REG_GPIO_GPIO_SEL_8_11_GPIO_8_SEL
 291

	)

348 
	#SX1302_REG_GPIO_HOST_IRQ_TX_TIMEOUT_B
 292

	)

349 
	#SX1302_REG_GPIO_HOST_IRQ_TX_TIMEOUT_A
 293

	)

350 
	#SX1302_REG_GPIO_HOST_IRQ_TX_DONE_B
 294

	)

351 
	#SX1302_REG_GPIO_HOST_IRQ_TX_DONE_A
 295

	)

352 
	#SX1302_REG_GPIO_HOST_IRQ_TIMESTAMP
 296

	)

353 
	#SX1302_REG_GPIO_HOST_IRQ_RX_BUFFER_WATERMARK
 297

	)

354 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TX_TIMEOUT_B
 298

	)

355 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TX_TIMEOUT_A
 299

	)

356 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TX_DONE_B
 300

	)

357 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TX_DONE_A
 301

	)

358 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TIMESTAMP
 302

	)

359 
	#SX1302_REG_GPIO_HOST_IRQ_EN_RX_BUFFER_WATERMARK
 303

	)

360 
	#SX1302_REG_GPIO_DUMMY_DUMMY
 304

	)

361 
	#SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_POL
 305

	)

362 
	#SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_EN
 306

	)

363 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
 307

	)

364 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB1_TIMESTAMP_PPS
 308

	)

365 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_LSB2_TIMESTAMP_PPS
 309

	)

366 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_LSB1_TIMESTAMP_PPS
 310

	)

367 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_MSB2_TIMESTAMP
 311

	)

368 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_MSB1_TIMESTAMP
 312

	)

369 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_LSB2_TIMESTAMP
 313

	)

370 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_LSB1_TIMESTAMP
 314

	)

371 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_SET3_TIMESTAMP
 315

	)

372 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_SET2_TIMESTAMP
 316

	)

373 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_SET1_TIMESTAMP
 317

	)

374 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_SET0_TIMESTAMP
 318

	)

375 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_3_TIMESTAMP
 319

	)

376 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_2_TIMESTAMP
 320

	)

377 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_1_TIMESTAMP
 321

	)

378 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_0_TIMESTAMP
 322

	)

379 
	#SX1302_REG_TIMESTAMP_DUMMY_DUMMY
 323

	)

380 
	#SX1302_REG_RX_TOP_FREQ_0_MSB_IF_FREQ_0
 324

	)

381 
	#SX1302_REG_RX_TOP_FREQ_0_LSB_IF_FREQ_0
 325

	)

382 
	#SX1302_REG_RX_TOP_FREQ_1_MSB_IF_FREQ_1
 326

	)

383 
	#SX1302_REG_RX_TOP_FREQ_1_LSB_IF_FREQ_1
 327

	)

384 
	#SX1302_REG_RX_TOP_FREQ_2_MSB_IF_FREQ_2
 328

	)

385 
	#SX1302_REG_RX_TOP_FREQ_2_LSB_IF_FREQ_2
 329

	)

386 
	#SX1302_REG_RX_TOP_FREQ_3_MSB_IF_FREQ_3
 330

	)

387 
	#SX1302_REG_RX_TOP_FREQ_3_LSB_IF_FREQ_3
 331

	)

388 
	#SX1302_REG_RX_TOP_FREQ_4_MSB_IF_FREQ_4
 332

	)

389 
	#SX1302_REG_RX_TOP_FREQ_4_LSB_IF_FREQ_4
 333

	)

390 
	#SX1302_REG_RX_TOP_FREQ_5_MSB_IF_FREQ_5
 334

	)

391 
	#SX1302_REG_RX_TOP_FREQ_5_LSB_IF_FREQ_5
 335

	)

392 
	#SX1302_REG_RX_TOP_FREQ_6_MSB_IF_FREQ_6
 336

	)

393 
	#SX1302_REG_RX_TOP_FREQ_6_LSB_IF_FREQ_6
 337

	)

394 
	#SX1302_REG_RX_TOP_FREQ_7_MSB_IF_FREQ_7
 338

	)

395 
	#SX1302_REG_RX_TOP_FREQ_7_LSB_IF_FREQ_7
 339

	)

396 
	#SX1302_REG_RX_TOP_RADIO_SELECT_RADIO_SELECT
 340

	)

397 
	#SX1302_REG_RX_TOP_RSSI_CONTROL_RSSI_FILTER_ALPHA
 341

	)

398 
	#SX1302_REG_RX_TOP_RSSI_CONTROL_SELECT_RSSI
 342

	)

399 
	#SX1302_REG_RX_TOP_RSSI_DEF_VALUE_CHAN_RSSI_DEF_VALUE
 343

	)

400 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG1_CHAN_DAGC_THRESHOLD_HIGH
 344

	)

401 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG2_CHAN_DAGC_THRESHOLD_LOW
 345

	)

402 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MAX_ATTEN
 346

	)

403 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MIN_ATTEN
 347

	)

404 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG4_CHAN_DAGC_STEP
 348

	)

405 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG5_CHAN_DAGC_MODE
 349

	)

406 
	#SX1302_REG_RX_TOP_RSSI_VALUE_CHAN_RSSI
 350

	)

407 
	#SX1302_REG_RX_TOP_GAIN_CONTROL_CHAN_GAIN_VALID
 351

	)

408 
	#SX1302_REG_RX_TOP_GAIN_CONTROL_CHAN_GAIN
 352

	)

409 
	#SX1302_REG_RX_TOP_CLK_CONTROL_CHAN_CLK_EN
 353

	)

410 
	#SX1302_REG_RX_TOP_DUMMY0_DUMMY0
 354

	)

411 
	#SX1302_REG_RX_TOP_CORR_CLOCK_ENABLE_CLK_EN
 355

	)

412 
	#SX1302_REG_RX_TOP_CORRELATOR_EN_CORR_EN
 356

	)

413 
	#SX1302_REG_RX_TOP_CORRELATOR_SF_EN_CORR_SF_EN
 357

	)

414 
	#SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ONLY_FIRST_DET_EDGE_ENABLE_ONLY_FIRST_DET_EDGE
 358

	)

415 
	#SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ACC_CLEAR_ENABLE_CORR_ACC_CLEAR
 359

	)

416 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_WIN_LEN
 360

	)

417 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_PEAK_SUM_EN
 361

	)

418 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_PEAK_POS_SEL
 362

	)

419 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_COEFF
 363

	)

420 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_AUTO_RESCALE
 364

	)

421 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_2_SAME_PEAKS
 365

	)

422 
	#SX1302_REG_RX_TOP_SF5_CFG2_ACC_MIN2
 366

	)

423 
	#SX1302_REG_RX_TOP_SF5_CFG2_ACC_PNR
 367

	)

424 
	#SX1302_REG_RX_TOP_SF5_CFG3_MIN_SINGLE_PEAK
 368

	)

425 
	#SX1302_REG_RX_TOP_SF5_CFG4_MSP_PNR
 369

	)

426 
	#SX1302_REG_RX_TOP_SF5_CFG5_MSP2_PNR
 370

	)

427 
	#SX1302_REG_RX_TOP_SF5_CFG6_MSP_PEAK_NB
 371

	)

428 
	#SX1302_REG_RX_TOP_SF5_CFG6_MSP_CNT_MODE
 372

	)

429 
	#SX1302_REG_RX_TOP_SF5_CFG6_MSP_POS_SEL
 373

	)

430 
	#SX1302_REG_RX_TOP_SF5_CFG7_MSP2_PEAK_NB
 374

	)

431 
	#SX1302_REG_RX_TOP_SF5_CFG7_NOISE_COEFF
 375

	)

432 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_WIN_LEN
 376

	)

433 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_PEAK_SUM_EN
 377

	)

434 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_PEAK_POS_SEL
 378

	)

435 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_COEFF
 379

	)

436 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_AUTO_RESCALE
 380

	)

437 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_2_SAME_PEAKS
 381

	)

438 
	#SX1302_REG_RX_TOP_SF6_CFG2_ACC_MIN2
 382

	)

439 
	#SX1302_REG_RX_TOP_SF6_CFG2_ACC_PNR
 383

	)

440 
	#SX1302_REG_RX_TOP_SF6_CFG3_MIN_SINGLE_PEAK
 384

	)

441 
	#SX1302_REG_RX_TOP_SF6_CFG4_MSP_PNR
 385

	)

442 
	#SX1302_REG_RX_TOP_SF6_CFG5_MSP2_PNR
 386

	)

443 
	#SX1302_REG_RX_TOP_SF6_CFG6_MSP_PEAK_NB
 387

	)

444 
	#SX1302_REG_RX_TOP_SF6_CFG6_MSP_CNT_MODE
 388

	)

445 
	#SX1302_REG_RX_TOP_SF6_CFG6_MSP_POS_SEL
 389

	)

446 
	#SX1302_REG_RX_TOP_SF6_CFG7_MSP2_PEAK_NB
 390

	)

447 
	#SX1302_REG_RX_TOP_SF6_CFG7_NOISE_COEFF
 391

	)

448 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_WIN_LEN
 392

	)

449 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_PEAK_SUM_EN
 393

	)

450 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_PEAK_POS_SEL
 394

	)

451 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_COEFF
 395

	)

452 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_AUTO_RESCALE
 396

	)

453 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_2_SAME_PEAKS
 397

	)

454 
	#SX1302_REG_RX_TOP_SF7_CFG2_ACC_MIN2
 398

	)

455 
	#SX1302_REG_RX_TOP_SF7_CFG2_ACC_PNR
 399

	)

456 
	#SX1302_REG_RX_TOP_SF7_CFG3_MIN_SINGLE_PEAK
 400

	)

457 
	#SX1302_REG_RX_TOP_SF7_CFG4_MSP_PNR
 401

	)

458 
	#SX1302_REG_RX_TOP_SF7_CFG5_MSP2_PNR
 402

	)

459 
	#SX1302_REG_RX_TOP_SF7_CFG6_MSP_PEAK_NB
 403

	)

460 
	#SX1302_REG_RX_TOP_SF7_CFG6_MSP_CNT_MODE
 404

	)

461 
	#SX1302_REG_RX_TOP_SF7_CFG6_MSP_POS_SEL
 405

	)

462 
	#SX1302_REG_RX_TOP_SF7_CFG7_MSP2_PEAK_NB
 406

	)

463 
	#SX1302_REG_RX_TOP_SF7_CFG7_NOISE_COEFF
 407

	)

464 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_WIN_LEN
 408

	)

465 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_PEAK_SUM_EN
 409

	)

466 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_PEAK_POS_SEL
 410

	)

467 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_COEFF
 411

	)

468 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_AUTO_RESCALE
 412

	)

469 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_2_SAME_PEAKS
 413

	)

470 
	#SX1302_REG_RX_TOP_SF8_CFG2_ACC_MIN2
 414

	)

471 
	#SX1302_REG_RX_TOP_SF8_CFG2_ACC_PNR
 415

	)

472 
	#SX1302_REG_RX_TOP_SF8_CFG3_MIN_SINGLE_PEAK
 416

	)

473 
	#SX1302_REG_RX_TOP_SF8_CFG4_MSP_PNR
 417

	)

474 
	#SX1302_REG_RX_TOP_SF8_CFG5_MSP2_PNR
 418

	)

475 
	#SX1302_REG_RX_TOP_SF8_CFG6_MSP_PEAK_NB
 419

	)

476 
	#SX1302_REG_RX_TOP_SF8_CFG6_MSP_CNT_MODE
 420

	)

477 
	#SX1302_REG_RX_TOP_SF8_CFG6_MSP_POS_SEL
 421

	)

478 
	#SX1302_REG_RX_TOP_SF8_CFG7_MSP2_PEAK_NB
 422

	)

479 
	#SX1302_REG_RX_TOP_SF8_CFG7_NOISE_COEFF
 423

	)

480 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_WIN_LEN
 424

	)

481 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_PEAK_SUM_EN
 425

	)

482 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_PEAK_POS_SEL
 426

	)

483 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_COEFF
 427

	)

484 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_AUTO_RESCALE
 428

	)

485 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_2_SAME_PEAKS
 429

	)

486 
	#SX1302_REG_RX_TOP_SF9_CFG2_ACC_MIN2
 430

	)

487 
	#SX1302_REG_RX_TOP_SF9_CFG2_ACC_PNR
 431

	)

488 
	#SX1302_REG_RX_TOP_SF9_CFG3_MIN_SINGLE_PEAK
 432

	)

489 
	#SX1302_REG_RX_TOP_SF9_CFG4_MSP_PNR
 433

	)

490 
	#SX1302_REG_RX_TOP_SF9_CFG5_MSP2_PNR
 434

	)

491 
	#SX1302_REG_RX_TOP_SF9_CFG6_MSP_PEAK_NB
 435

	)

492 
	#SX1302_REG_RX_TOP_SF9_CFG6_MSP_CNT_MODE
 436

	)

493 
	#SX1302_REG_RX_TOP_SF9_CFG6_MSP_POS_SEL
 437

	)

494 
	#SX1302_REG_RX_TOP_SF9_CFG7_MSP2_PEAK_NB
 438

	)

495 
	#SX1302_REG_RX_TOP_SF9_CFG7_NOISE_COEFF
 439

	)

496 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_WIN_LEN
 440

	)

497 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_PEAK_SUM_EN
 441

	)

498 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_PEAK_POS_SEL
 442

	)

499 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_COEFF
 443

	)

500 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_AUTO_RESCALE
 444

	)

501 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_2_SAME_PEAKS
 445

	)

502 
	#SX1302_REG_RX_TOP_SF10_CFG2_ACC_MIN2
 446

	)

503 
	#SX1302_REG_RX_TOP_SF10_CFG2_ACC_PNR
 447

	)

504 
	#SX1302_REG_RX_TOP_SF10_CFG3_MIN_SINGLE_PEAK
 448

	)

505 
	#SX1302_REG_RX_TOP_SF10_CFG4_MSP_PNR
 449

	)

506 
	#SX1302_REG_RX_TOP_SF10_CFG5_MSP2_PNR
 450

	)

507 
	#SX1302_REG_RX_TOP_SF10_CFG6_MSP_PEAK_NB
 451

	)

508 
	#SX1302_REG_RX_TOP_SF10_CFG6_MSP_CNT_MODE
 452

	)

509 
	#SX1302_REG_RX_TOP_SF10_CFG6_MSP_POS_SEL
 453

	)

510 
	#SX1302_REG_RX_TOP_SF10_CFG7_MSP2_PEAK_NB
 454

	)

511 
	#SX1302_REG_RX_TOP_SF10_CFG7_NOISE_COEFF
 455

	)

512 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_WIN_LEN
 456

	)

513 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_PEAK_SUM_EN
 457

	)

514 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_PEAK_POS_SEL
 458

	)

515 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_COEFF
 459

	)

516 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_AUTO_RESCALE
 460

	)

517 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_2_SAME_PEAKS
 461

	)

518 
	#SX1302_REG_RX_TOP_SF11_CFG2_ACC_MIN2
 462

	)

519 
	#SX1302_REG_RX_TOP_SF11_CFG2_ACC_PNR
 463

	)

520 
	#SX1302_REG_RX_TOP_SF11_CFG3_MIN_SINGLE_PEAK
 464

	)

521 
	#SX1302_REG_RX_TOP_SF11_CFG4_MSP_PNR
 465

	)

522 
	#SX1302_REG_RX_TOP_SF11_CFG5_MSP2_PNR
 466

	)

523 
	#SX1302_REG_RX_TOP_SF11_CFG6_MSP_PEAK_NB
 467

	)

524 
	#SX1302_REG_RX_TOP_SF11_CFG6_MSP_CNT_MODE
 468

	)

525 
	#SX1302_REG_RX_TOP_SF11_CFG6_MSP_POS_SEL
 469

	)

526 
	#SX1302_REG_RX_TOP_SF11_CFG7_MSP2_PEAK_NB
 470

	)

527 
	#SX1302_REG_RX_TOP_SF11_CFG7_NOISE_COEFF
 471

	)

528 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_WIN_LEN
 472

	)

529 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_PEAK_SUM_EN
 473

	)

530 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_PEAK_POS_SEL
 474

	)

531 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_COEFF
 475

	)

532 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_AUTO_RESCALE
 476

	)

533 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_2_SAME_PEAKS
 477

	)

534 
	#SX1302_REG_RX_TOP_SF12_CFG2_ACC_MIN2
 478

	)

535 
	#SX1302_REG_RX_TOP_SF12_CFG2_ACC_PNR
 479

	)

536 
	#SX1302_REG_RX_TOP_SF12_CFG3_MIN_SINGLE_PEAK
 480

	)

537 
	#SX1302_REG_RX_TOP_SF12_CFG4_MSP_PNR
 481

	)

538 
	#SX1302_REG_RX_TOP_SF12_CFG5_MSP2_PNR
 482

	)

539 
	#SX1302_REG_RX_TOP_SF12_CFG6_MSP_PEAK_NB
 483

	)

540 
	#SX1302_REG_RX_TOP_SF12_CFG6_MSP_CNT_MODE
 484

	)

541 
	#SX1302_REG_RX_TOP_SF12_CFG6_MSP_POS_SEL
 485

	)

542 
	#SX1302_REG_RX_TOP_SF12_CFG7_MSP2_PEAK_NB
 486

	)

543 
	#SX1302_REG_RX_TOP_SF12_CFG7_NOISE_COEFF
 487

	)

544 
	#SX1302_REG_RX_TOP_DUMMY1_DUMMY1
 488

	)

545 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_BW_START
 489

	)

546 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_AUTO_BW_RED
 490

	)

547 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_NO_FAST_START
 491

	)

548 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_BYPASS
 492

	)

549 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_ENABLE
 493

	)

550 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG2_BW_LOCKED
 494

	)

551 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG2_BW
 495

	)

552 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG3_BW_RED
 496

	)

553 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG4_IIR_DCC_TIME
 497

	)

554 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_0_FIR1_COEFF_0
 498

	)

555 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_1_FIR1_COEFF_1
 499

	)

556 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_2_FIR1_COEFF_2
 500

	)

557 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_3_FIR1_COEFF_3
 501

	)

558 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_4_FIR1_COEFF_4
 502

	)

559 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_5_FIR1_COEFF_5
 503

	)

560 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_6_FIR1_COEFF_6
 504

	)

561 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_7_FIR1_COEFF_7
 505

	)

562 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_0_FIR2_COEFF_0
 506

	)

563 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_1_FIR2_COEFF_1
 507

	)

564 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_2_FIR2_COEFF_2
 508

	)

565 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_3_FIR2_COEFF_3
 509

	)

566 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_4_FIR2_COEFF_4
 510

	)

567 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_5_FIR2_COEFF_5
 511

	)

568 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_6_FIR2_COEFF_6
 512

	)

569 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_7_FIR2_COEFF_7
 513

	)

570 
	#SX1302_REG_RX_TOP_RX_DFE_AGC0_RADIO_GAIN_RED_SEL
 514

	)

571 
	#SX1302_REG_RX_TOP_RX_DFE_AGC0_RADIO_GAIN_RED_DB
 515

	)

572 
	#SX1302_REG_RX_TOP_RX_DFE_AGC1_DC_COMP_EN
 516

	)

573 
	#SX1302_REG_RX_TOP_RX_DFE_AGC1_FORCE_DEFAULT_FIR
 517

	)

574 
	#SX1302_REG_RX_TOP_RX_DFE_AGC1_RSSI_EARLY_LATCH
 518

	)

575 
	#SX1302_REG_RX_TOP_RX_DFE_AGC1_FREEZE_ON_SYNC
 519

	)

576 
	#SX1302_REG_RX_TOP_RX_DFE_AGC2_DAGC_IN_COMP
 520

	)

577 
	#SX1302_REG_RX_TOP_RX_DFE_AGC2_DAGC_FIR_HYST
 521

	)

578 
	#SX1302_REG_RX_TOP_RX_DFE_AGC2_RSSI_MAX_SAMPLE
 522

	)

579 
	#SX1302_REG_RX_TOP_RX_DFE_AGC2_RSSI_MIN_SAMPLE
 523

	)

580 
	#SX1302_REG_RX_TOP_RX_DFE_GAIN0_DAGC_FIR_FAST
 524

	)

581 
	#SX1302_REG_RX_TOP_RX_DFE_GAIN0_FORCE_GAIN_FIR
 525

	)

582 
	#SX1302_REG_RX_TOP_RX_DFE_GAIN0_GAIN_FIR1
 526

	)

583 
	#SX1302_REG_RX_TOP_RX_DFE_GAIN0_GAIN_FIR2
 527

	)

584 
	#SX1302_REG_RX_TOP_DAGC_CFG_TARGET_LVL
 528

	)

585 
	#SX1302_REG_RX_TOP_DAGC_CFG_GAIN_INCR_STEP
 529

	)

586 
	#SX1302_REG_RX_TOP_DAGC_CFG_GAIN_DROP_COMP
 530

	)

587 
	#SX1302_REG_RX_TOP_DAGC_CFG_COMB_FILTER_EN
 531

	)

588 
	#SX1302_REG_RX_TOP_DAGC_CFG_NO_FREEZE_START
 532

	)

589 
	#SX1302_REG_RX_TOP_DAGC_CFG_FREEZE_ON_SYNC
 533

	)

590 
	#SX1302_REG_RX_TOP_DAGC_CNT0_SAMPLE
 534

	)

591 
	#SX1302_REG_RX_TOP_DAGC_CNT1_THR_M6
 535

	)

592 
	#SX1302_REG_RX_TOP_DAGC_CNT2_THR_M12
 536

	)

593 
	#SX1302_REG_RX_TOP_DAGC_CNT3_THR_M18
 537

	)

594 
	#SX1302_REG_RX_TOP_DAGC_CNT4_GAIN
 538

	)

595 
	#SX1302_REG_RX_TOP_DAGC_CNT4_FORCE_GAIN
 539

	)

596 
	#SX1302_REG_RX_TOP_TXRX_CFG1_PPM_OFFSET_HDR_CTRL
 540

	)

597 
	#SX1302_REG_RX_TOP_TXRX_CFG1_PPM_OFFSET
 541

	)

598 
	#SX1302_REG_RX_TOP_TXRX_CFG1_MODEM_EN
 542

	)

599 
	#SX1302_REG_RX_TOP_TXRX_CFG1_CODING_RATE
 543

	)

600 
	#SX1302_REG_RX_TOP_TXRX_CFG2_MODEM_START
 544

	)

601 
	#SX1302_REG_RX_TOP_TXRX_CFG2_CADRXTX
 545

	)

602 
	#SX1302_REG_RX_TOP_TXRX_CFG2_IMPLICIT_HEADER
 546

	)

603 
	#SX1302_REG_RX_TOP_TXRX_CFG2_CRC_EN
 547

	)

604 
	#SX1302_REG_RX_TOP_TXRX_CFG3_PAYLOAD_LENGTH
 548

	)

605 
	#SX1302_REG_RX_TOP_TXRX_CFG4_INT_STEP_ORIDE_EN
 549

	)

606 
	#SX1302_REG_RX_TOP_TXRX_CFG4_INT_STEP_ORIDE
 550

	)

607 
	#SX1302_REG_RX_TOP_TXRX_CFG5_HEADER_DIFF_MODE
 551

	)

608 
	#SX1302_REG_RX_TOP_TXRX_CFG5_ZERO_PAD
 552

	)

609 
	#SX1302_REG_RX_TOP_TXRX_CFG6_PREAMBLE_SYMB_NB
 553

	)

610 
	#SX1302_REG_RX_TOP_TXRX_CFG7_PREAMBLE_SYMB_NB
 554

	)

611 
	#SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_INT_DELAY
 555

	)

612 
	#SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_RX
 556

	)

613 
	#SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_TX
 557

	)

614 
	#SX1302_REG_RX_TOP_TXRX_CFG8_POST_PREAMBLE_GAP_LONG
 558

	)

615 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF12
 559

	)

616 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF11
 560

	)

617 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF10
 561

	)

618 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF9
 562

	)

619 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF8
 563

	)

620 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF7
 564

	)

621 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF6
 565

	)

622 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF5
 566

	)

623 
	#SX1302_REG_RX_TOP_RX_CFG0_DFT_PEAK_EN
 567

	)

624 
	#SX1302_REG_RX_TOP_RX_CFG0_CHIRP_INVERT
 568

	)

625 
	#SX1302_REG_RX_TOP_RX_CFG0_SWAP_IQ
 569

	)

626 
	#SX1302_REG_RX_TOP_RX_CFG0_CONTINUOUS
 570

	)

627 
	#SX1302_REG_RX_TOP_RX_CFG1_DETECT_TIMEOUT
 571

	)

628 
	#SX1302_REG_RX_TOP_RX_CFG2_CLK_EN_RESYNC_DIN
 572

	)

629 
	#SX1302_REG_RX_TOP_RX_CFG2_LLR_SCALE
 573

	)

630 
	#SX1302_REG_RX_TOP_FRAME_SYNCH0_SF5_PEAK1_POS_SF5
 574

	)

631 
	#SX1302_REG_RX_TOP_FRAME_SYNCH1_SF5_PEAK2_POS_SF5
 575

	)

632 
	#SX1302_REG_RX_TOP_FRAME_SYNCH0_SF6_PEAK1_POS_SF6
 576

	)

633 
	#SX1302_REG_RX_TOP_FRAME_SYNCH1_SF6_PEAK2_POS_SF6
 577

	)

634 
	#SX1302_REG_RX_TOP_FRAME_SYNCH0_SF7TO12_PEAK1_POS_SF7TO12
 578

	)

635 
	#SX1302_REG_RX_TOP_FRAME_SYNCH1_SF7TO12_PEAK2_POS_SF7TO12
 579

	)

636 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_FINETIME_ON_LAST
 580

	)

637 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_AUTO_SCALE
 581

	)

638 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_DROP_ON_SYNCH
 582

	)

639 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_GAIN
 583

	)

640 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_TIMEOUT_OPT
 584

	)

641 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_GAIN_P_HDR_RED
 585

	)

642 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_ROUNDING
 586

	)

643 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_POS_LIMIT
 587

	)

644 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_SUM_SIZE
 588

	)

645 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_MODE
 589

	)

646 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_AUTO
 590

	)

647 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_PAYLOAD
 591

	)

648 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_PREAMB
 592

	)

649 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_AUTO
 593

	)

650 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_PAYLOAD
 594

	)

651 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_PREAMB
 595

	)

652 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_3_FINESYNCH_SUM
 596

	)

653 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_3_FINESYNCH_GAIN
 597

	)

654 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF8
 598

	)

655 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF7
 599

	)

656 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF6
 600

	)

657 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF5
 601

	)

658 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF12
 602

	)

659 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF11
 603

	)

660 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF10
 604

	)

661 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF9
 605

	)

662 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_6_GAIN_P_PREAMB_SF12
 606

	)

663 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_6_GAIN_P_PREAMB_SF5_6
 607

	)

664 
	#SX1302_REG_RX_TOP_FINE_TIMING_7_GAIN_I_AUTO_MAX
 608

	)

665 
	#SX1302_REG_RX_TOP_FINE_TIMING_7_GAIN_P_AUTO_MAX
 609

	)

666 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_GAIN_P_HDR_RED
 610

	)

667 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_ROUNDING
 611

	)

668 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_POS_LIMIT
 612

	)

669 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_SUM_SIZE
 613

	)

670 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_MODE
 614

	)

671 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_AUTO
 615

	)

672 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_PAYLOAD
 616

	)

673 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_PREAMB
 617

	)

674 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_AUTO
 618

	)

675 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_PAYLOAD
 619

	)

676 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_PREAMB
 620

	)

677 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_3_FINESYNCH_SUM
 621

	)

678 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_3_FINESYNCH_GAIN
 622

	)

679 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF8
 623

	)

680 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF7
 624

	)

681 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF6
 625

	)

682 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF5
 626

	)

683 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF12
 627

	)

684 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF11
 628

	)

685 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF10
 629

	)

686 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF9
 630

	)

687 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_6_GAIN_P_PREAMB_SF12
 631

	)

688 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_6_GAIN_P_PREAMB_SF5_6
 632

	)

689 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
 633

	)

690 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
 634

	)

691 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
 635

	)

692 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_DELTA
 636

	)

693 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FINE_DELTA
 637

	)

694 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_ERROR
 638

	)

695 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
 639

	)

696 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_OFFSET
 640

	)

697 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_DETECT
 641

	)

698 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME4_FREQ_TO_TIME_INVERT_RNG
 642

	)

699 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF8
 643

	)

700 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF7
 644

	)

701 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF6
 645

	)

702 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF5
 646

	)

703 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF12
 647

	)

704 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF11
 648

	)

705 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF10
 649

	)

706 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF9
 650

	)

707 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF8
 651

	)

708 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF7
 652

	)

709 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF6
 653

	)

710 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF5
 654

	)

711 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF12
 655

	)

712 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF11
 656

	)

713 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF10
 657

	)

714 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF9
 658

	)

715 
	#SX1302_REG_RX_TOP_FREQ_TRACK2_FREQ_TRACK_FINE
 659

	)

716 
	#SX1302_REG_RX_TOP_FREQ_TRACK2_FREQ_TRACK_HDR_SKIP
 660

	)

717 
	#SX1302_REG_RX_TOP_FREQ_TRACK3_FREQ_SYNCH_GAIN
 661

	)

718 
	#SX1302_REG_RX_TOP_FREQ_TRACK3_FREQ_TRACK_AUTO_THR
 662

	)

719 
	#SX1302_REG_RX_TOP_FREQ_TRACK4_SNR_MIN_WINDOW
 663

	)

720 
	#SX1302_REG_RX_TOP_FREQ_TRACK4_GAIN_AUTO_SNR_MIN
 664

	)

721 
	#SX1302_REG_RX_TOP_FREQ_TRACK4_FREQ_SYNCH_THR
 665

	)

722 
	#SX1302_REG_RX_TOP_DETECT_MSP0_MSP_PNR
 666

	)

723 
	#SX1302_REG_RX_TOP_DETECT_MSP1_MSP2_PNR
 667

	)

724 
	#SX1302_REG_RX_TOP_DETECT_MSP2_MSP2_PEAK_NB
 668

	)

725 
	#SX1302_REG_RX_TOP_DETECT_MSP2_MSP_PEAK_NB
 669

	)

726 
	#SX1302_REG_RX_TOP_DETECT_MSP3_ACC_MIN2
 670

	)

727 
	#SX1302_REG_RX_TOP_DETECT_MSP3_ACC_WIN_LEN
 671

	)

728 
	#SX1302_REG_RX_TOP_DETECT_MSP3_MSP_POS_SEL
 672

	)

729 
	#SX1302_REG_RX_TOP_DETECT_MSP3_MSP_CNT_MODE
 673

	)

730 
	#SX1302_REG_RX_TOP_DETECT_ACC1_USE_GAIN_SYMB
 674

	)

731 
	#SX1302_REG_RX_TOP_DETECT_ACC1_ACC_PNR
 675

	)

732 
	#SX1302_REG_RX_TOP_DETECT_ACC2_NOISE_COEFF
 676

	)

733 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_COEFF
 677

	)

734 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_2_SAME_PEAKS
 678

	)

735 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_AUTO_RESCALE
 679

	)

736 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_PEAK_POS_SEL
 680

	)

737 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_PEAK_SUM_EN
 681

	)

738 
	#SX1302_REG_RX_TOP_DETECT_ACC3_MIN_SINGLE_PEAK
 682

	)

739 
	#SX1302_REG_RX_TOP_TIMESTAMP_SEL_SNR_MIN
 683

	)

740 
	#SX1302_REG_RX_TOP_TIMESTAMP_ENABLE
 684

	)

741 
	#SX1302_REG_RX_TOP_TIMESTAMP_NB_SYMB
 685

	)

742 
	#SX1302_REG_RX_TOP_MODEM_BUSY_MSB_RX_MODEM_BUSY
 686

	)

743 
	#SX1302_REG_RX_TOP_MODEM_BUSY_LSB_RX_MODEM_BUSY
 687

	)

744 
	#SX1302_REG_RX_TOP_MODEM_STATE_RX_MODEM_STS_SPARE
 688

	)

745 
	#SX1302_REG_RX_TOP_MODEM_STATE_RX_MODEM_STATE
 689

	)

746 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_GAIN_H
 690

	)

747 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_GAIN_L
 691

	)

748 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_SIGN
 692

	)

749 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_MODEM_SYNC_DELTA
 693

	)

750 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_LSB_MODEM_SYNC_DELTA
 694

	)

751 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF8
 695

	)

752 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF7
 696

	)

753 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF6
 697

	)

754 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF5
 698

	)

755 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF12
 699

	)

756 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF11
 700

	)

757 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF10
 701

	)

758 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF9
 702

	)

759 
	#SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_3_CLK_OVERRIDE
 703

	)

760 
	#SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_2_CLK_OVERRIDE
 704

	)

761 
	#SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_1_CLK_OVERRIDE
 705

	)

762 
	#SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_0_CLK_OVERRIDE
 706

	)

763 
	#SX1302_REG_RX_TOP_DUMMY2_DUMMY2
 707

	)

764 
	#SX1302_REG_RX_TOP_RX_BUFFER_DEBUG_MODE
 708

	)

765 
	#SX1302_REG_RX_TOP_RX_BUFFER_DIRECT_RAM_IF
 709

	)

766 
	#SX1302_REG_RX_TOP_RX_BUFFER_LEGACY_TIMESTAMP
 710

	)

767 
	#SX1302_REG_RX_TOP_RX_BUFFER_STORE_HEADER_ERR_META
 711

	)

768 
	#SX1302_REG_RX_TOP_RX_BUFFER_STORE_SYNC_FAIL_META
 712

	)

769 
	#SX1302_REG_RX_TOP_RX_BUFFER_TIMESTAMP_CFG_MAX_TS_METRICS
 713

	)

770 
	#SX1302_REG_RX_TOP_RX_BUFFER_IRQ_CTRL_MSB_RX_BUFFER_IRQ_THRESHOLD
 714

	)

771 
	#SX1302_REG_RX_TOP_RX_BUFFER_IRQ_CTRL_LSB_RX_BUFFER_IRQ_THRESHOLD
 715

	)

772 
	#SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_MSB_LAST_ADDR_READ
 716

	)

773 
	#SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_LSB_LAST_ADDR_READ
 717

	)

774 
	#SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_MSB_LAST_ADDR_WRITE
 718

	)

775 
	#SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_LSB_LAST_ADDR_WRITE
 719

	)

776 
	#SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES
 720

	)

777 
	#SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_LSB_RX_BUFFER_NB_BYTES
 721

	)

778 
	#SX1302_REG_RX_TOP_MULTI_SF_SYNC_ERR_PKT_CNT_MULTI_SF_SYNC_ERR_PKTS
 722

	)

779 
	#SX1302_REG_RX_TOP_MULTI_SF_PLD_ERR_PKT_CNT_MULTI_SF_PLD_ERR_PKTS
 723

	)

780 
	#SX1302_REG_RX_TOP_MULTI_SF_GOOD_PKT_CNT_MULTI_SF_GOOD_PKTS
 724

	)

781 
	#SX1302_REG_RX_TOP_SERV_MODEM_SYNC_ERR_PKT_CNT_SERV_MODEM_SYNC_ERR_PKTS
 725

	)

782 
	#SX1302_REG_RX_TOP_SERV_MODEM_PLD_ERR_PKT_CNT_SERV_MODEM_PLD_ERR_PKTS
 726

	)

783 
	#SX1302_REG_RX_TOP_SERV_MODEM_GOOD_PKT_CNT_SERV_MODEM_GOOD_PKTS
 727

	)

784 
	#SX1302_REG_RX_TOP_GFSK_MODEM_SYNC_ERR_PKT_CNT_GFSK_MODEM_SYNC_ERR_PKTS
 728

	)

785 
	#SX1302_REG_RX_TOP_GFSK_MODEM_PLD_ERR_PKT_CNT_GFSK_MODEM_PLD_ERR_PKTS
 729

	)

786 
	#SX1302_REG_RX_TOP_GFSK_MODEM_GOOD_PKT_CNT_GFSK_MODEM_GOOD_PKTS
 730

	)

787 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_0_BAD_MODEM_ID_WRITE
 731

	)

788 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_1_BAD_MODEM_ID_WRITE
 732

	)

789 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_2_BAD_MODEM_ID_WRITE
 733

	)

790 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_0_BAD_MODEM_ID_READ
 734

	)

791 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_1_BAD_MODEM_ID_READ
 735

	)

792 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_2_BAD_MODEM_ID_READ
 736

	)

793 
	#SX1302_REG_RX_TOP_CLOCK_GATE_OVERRIDE_0_CLK_OVERRIDE
 737

	)

794 
	#SX1302_REG_RX_TOP_SAMPLE_4_MSPS_LATCHED_125K_SAMPLE_4_MSPS_LATCHED_125K
 738

	)

795 
	#SX1302_REG_RX_TOP_DUMMY3_DUMMY3
 739

	)

796 
	#SX1302_REG_ARB_MCU_CTRL_CLK_EN
 740

	)

797 
	#SX1302_REG_ARB_MCU_CTRL_RADIO_RST
 741

	)

798 
	#SX1302_REG_ARB_MCU_CTRL_FORCE_HOST_FE_CTRL
 742

	)

799 
	#SX1302_REG_ARB_MCU_CTRL_MCU_CLEAR
 743

	)

800 
	#SX1302_REG_ARB_MCU_CTRL_HOST_PROG
 744

	)

801 
	#SX1302_REG_ARB_MCU_CTRL_PARITY_ERROR
 745

	)

802 
	#SX1302_REG_ARB_MCU_MCU_ARB_STATUS_MCU_ARB_STATUS
 746

	)

803 
	#SX1302_REG_ARB_MCU_UART_CFG_MSBF
 747

	)

804 
	#SX1302_REG_ARB_MCU_UART_CFG_PAR_EN
 748

	)

805 
	#SX1302_REG_ARB_MCU_UART_CFG_PAR_MODE
 749

	)

806 
	#SX1302_REG_ARB_MCU_UART_CFG_START_LEN
 750

	)

807 
	#SX1302_REG_ARB_MCU_UART_CFG_STOP_LEN
 751

	)

808 
	#SX1302_REG_ARB_MCU_UART_CFG_WORD_LEN
 752

	)

809 
	#SX1302_REG_ARB_MCU_UART_CFG2_BIT_RATE
 753

	)

810 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_0_ARB_DEBUG_CFG_0
 754

	)

811 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_1_ARB_DEBUG_CFG_1
 755

	)

812 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_2_ARB_DEBUG_CFG_2
 756

	)

813 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_3_ARB_DEBUG_CFG_3
 757

	)

814 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_0_ARB_DEBUG_STS_0
 758

	)

815 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_1_ARB_DEBUG_STS_1
 759

	)

816 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_2_ARB_DEBUG_STS_2
 760

	)

817 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_3_ARB_DEBUG_STS_3
 761

	)

818 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_4_ARB_DEBUG_STS_4
 762

	)

819 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_5_ARB_DEBUG_STS_5
 763

	)

820 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_6_ARB_DEBUG_STS_6
 764

	)

821 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_7_ARB_DEBUG_STS_7
 765

	)

822 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_8_ARB_DEBUG_STS_8
 766

	)

823 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_9_ARB_DEBUG_STS_9
 767

	)

824 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_10_ARB_DEBUG_STS_10
 768

	)

825 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_11_ARB_DEBUG_STS_11
 769

	)

826 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_12_ARB_DEBUG_STS_12
 770

	)

827 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_13_ARB_DEBUG_STS_13
 771

	)

828 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_14_ARB_DEBUG_STS_14
 772

	)

829 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_15_ARB_DEBUG_STS_15
 773

	)

830 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_1_OFFSET
 774

	)

831 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_0_OFFSET
 775

	)

832 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_3_OFFSET
 776

	)

833 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_2_OFFSET
 777

	)

834 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_5_OFFSET
 778

	)

835 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_4_OFFSET
 779

	)

836 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_7_OFFSET
 780

	)

837 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_6_OFFSET
 781

	)

838 
	#SX1302_REG_ARB_MCU_DUMMY_DUMMY3
 782

	)

839 
	#SX1302_REG_RADIO_FE_GLBL_CTRL_DECIM_B_CLR
 783

	)

840 
	#SX1302_REG_RADIO_FE_GLBL_CTRL_DECIM_A_CLR
 784

	)

841 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
 785

	)

842 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_A_FORCE_HOST_FILTER_GAIN
 786

	)

843 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
 787

	)

844 
	#SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_A_RSSI_DB_DEFAULT_VALUE
 788

	)

845 
	#SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_A_RSSI_DEC_DEFAULT_VALUE
 789

	)

846 
	#SX1302_REG_RADIO_FE_RSSI_DEC_RD_RADIO_A_RSSI_DEC_OUT
 790

	)

847 
	#SX1302_REG_RADIO_FE_RSSI_BB_RD_RADIO_A_RSSI_BB_OUT
 791

	)

848 
	#SX1302_REG_RADIO_FE_DEC_FILTER_RD_RADIO_A_DEC_FILTER_GAIN
 792

	)

849 
	#SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_A_RSSI_BB_FILTER_ALPHA
 793

	)

850 
	#SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_A_RSSI_DEC_FILTER_ALPHA
 794

	)

851 
	#SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_A_AMP_COEFF
 795

	)

852 
	#SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_A_PHI_COEFF
 796

	)

853 
	#SX1302_REG_RADIO_FE_RADIO_DIO_TEST_MODE_RADIO_A_DIO_TEST_MODE
 797

	)

854 
	#SX1302_REG_RADIO_FE_RADIO_DIO_TEST_DIR_RADIO_A_DIO_TEST_DIR
 798

	)

855 
	#SX1302_REG_RADIO_FE_RADIO_DIO_DIR_RADIO_A_DIO_DIR
 799

	)

856 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
 800

	)

857 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_B_FORCE_HOST_FILTER_GAIN
 801

	)

858 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
 802

	)

859 
	#SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_B_RSSI_DB_DEFAULT_VALUE
 803

	)

860 
	#SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_B_RSSI_DEC_DEFAULT_VALUE
 804

	)

861 
	#SX1302_REG_RADIO_FE_RSSI_DEC_RD_RADIO_B_RSSI_DEC_OUT
 805

	)

862 
	#SX1302_REG_RADIO_FE_RSSI_BB_RD_RADIO_B_RSSI_BB_OUT
 806

	)

863 
	#SX1302_REG_RADIO_FE_DEC_FILTER_RD_RADIO_B_DEC_FILTER_GAIN
 807

	)

864 
	#SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_B_RSSI_BB_FILTER_ALPHA
 808

	)

865 
	#SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_B_RSSI_DEC_FILTER_ALPHA
 809

	)

866 
	#SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_B_AMP_COEFF
 810

	)

867 
	#SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_B_PHI_COEFF
 811

	)

868 
	#SX1302_REG_RADIO_FE_RADIO_DIO_TEST_MODE_RADIO_B_DIO_TEST_MODE
 812

	)

869 
	#SX1302_REG_RADIO_FE_RADIO_DIO_TEST_DIR_RADIO_B_DIO_TEST_DIR
 813

	)

870 
	#SX1302_REG_RADIO_FE_RADIO_DIO_DIR_RADIO_B_DIO_DIR
 814

	)

871 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
 815

	)

872 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_BUSY
 816

	)

873 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_DURATION
 817

	)

874 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
 818

	)

875 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
 819

	)

876 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL
 820

	)

877 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_EN
 821

	)

878 
	#SX1302_REG_RADIO_FE_SIG_ANA_FREQ_FREQ
 822

	)

879 
	#SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
 823

	)

880 
	#SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
 824

	)

881 
	#SX1302_REG_RADIO_FE_DUMMY_DUMMY
 825

	)

882 
	#SX1302_REG_OTP_BYTE_ADDR_ADDR
 826

	)

883 
	#SX1302_REG_OTP_RD_DATA_RD_DATA
 827

	)

884 
	#SX1302_REG_OTP_STATUS_CHECKSUM_STATUS
 828

	)

885 
	#SX1302_REG_OTP_STATUS_FSM_READY
 829

	)

886 
	#SX1302_REG_OTP_CFG_ACCESS_MODE
 830

	)

887 
	#SX1302_REG_OTP_BIT_POS_POS
 831

	)

888 
	#SX1302_REG_OTP_PIN_CTRL_0_TM
 832

	)

889 
	#SX1302_REG_OTP_PIN_CTRL_0_STROBE
 833

	)

890 
	#SX1302_REG_OTP_PIN_CTRL_0_PGENB
 834

	)

891 
	#SX1302_REG_OTP_PIN_CTRL_0_LOAD
 835

	)

892 
	#SX1302_REG_OTP_PIN_CTRL_0_CSB
 836

	)

893 
	#SX1302_REG_OTP_PIN_CTRL_1_FSCK
 837

	)

894 
	#SX1302_REG_OTP_PIN_CTRL_1_FSI
 838

	)

895 
	#SX1302_REG_OTP_PIN_CTRL_1_FRST
 839

	)

896 
	#SX1302_REG_OTP_PIN_STATUS_FSO
 840

	)

897 
	#SX1302_REG_OTP_MODEM_EN_0_MODEM_EN
 841

	)

898 
	#SX1302_REG_OTP_MODEM_EN_1_MODEM_EN
 842

	)

899 
	#SX1302_REG_OTP_MODEM_SF_EN_SF_EN
 843

	)

900 
	#SX1302_REG_OTP_TIMESTAMP_EN_TIMESTAMP_EN
 844

	)

901 
	#SX1302_REG_OTP_DUMMY_DUMMY
 845

	)

902 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_MSB_IF_FREQ_0
 846

	)

903 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_LSB_IF_FREQ_0
 847

	)

904 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_RADIO_SEL_RADIO_SELECT
 848

	)

905 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_BW_START
 849

	)

906 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_AUTO_BW_RED
 850

	)

907 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_NO_FAST_START
 851

	)

908 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_BYPASS
 852

	)

909 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_ENABLE
 853

	)

910 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG2_BW_LOCKED
 854

	)

911 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG2_BW
 855

	)

912 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG3_BW_RED
 856

	)

913 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG4_IIR_DCC_TIME
 857

	)

914 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_0_FIR1_COEFF_0
 858

	)

915 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_1_FIR1_COEFF_1
 859

	)

916 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_2_FIR1_COEFF_2
 860

	)

917 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_3_FIR1_COEFF_3
 861

	)

918 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_4_FIR1_COEFF_4
 862

	)

919 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_5_FIR1_COEFF_5
 863

	)

920 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_6_FIR1_COEFF_6
 864

	)

921 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_7_FIR1_COEFF_7
 865

	)

922 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_0_FIR2_COEFF_0
 866

	)

923 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_1_FIR2_COEFF_1
 867

	)

924 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_2_FIR2_COEFF_2
 868

	)

925 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_3_FIR2_COEFF_3
 869

	)

926 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_4_FIR2_COEFF_4
 870

	)

927 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_5_FIR2_COEFF_5
 871

	)

928 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_6_FIR2_COEFF_6
 872

	)

929 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_7_FIR2_COEFF_7
 873

	)

930 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC0_RADIO_GAIN_RED_SEL
 874

	)

931 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC0_RADIO_GAIN_RED_DB
 875

	)

932 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_DC_COMP_EN
 876

	)

933 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FORCE_DEFAULT_FIR
 877

	)

934 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_RSSI_EARLY_LATCH
 878

	)

935 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FREEZE_ON_SYNC
 879

	)

936 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_IN_COMP
 880

	)

937 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_FIR_HYST
 881

	)

938 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_RSSI_MAX_SAMPLE
 882

	)

939 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_RSSI_MIN_SAMPLE
 883

	)

940 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_DAGC_FIR_FAST
 884

	)

941 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_FORCE_GAIN_FIR
 885

	)

942 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_GAIN_FIR1
 886

	)

943 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_GAIN_FIR2
 887

	)

944 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_TARGET_LVL
 888

	)

945 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_INCR_STEP
 889

	)

946 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_DROP_COMP
 890

	)

947 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_COMB_FILTER_EN
 891

	)

948 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_NO_FREEZE_START
 892

	)

949 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_FREEZE_ON_SYNC
 893

	)

950 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT0_SAMPLE
 894

	)

951 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT1_THR_M6
 895

	)

952 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT2_THR_M12
 896

	)

953 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT3_THR_M18
 897

	)

954 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT4_GAIN
 898

	)

955 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT4_FORCE_GAIN
 899

	)

956 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_BW
 900

	)

957 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_SF
 901

	)

958 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET_HDR_CTRL
 902

	)

959 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET
 903

	)

960 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_MODEM_EN
 904

	)

961 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_CODING_RATE
 905

	)

962 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
 906

	)

963 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_MODEM_START
 907

	)

964 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CADRXTX
 908

	)

965 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_IMPLICIT_HEADER
 909

	)

966 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CRC_EN
 910

	)

967 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG3_PAYLOAD_LENGTH
 911

	)

968 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG4_INT_STEP_ORIDE_EN
 912

	)

969 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG4_INT_STEP_ORIDE
 913

	)

970 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG5_HEADER_DIFF_MODE
 914

	)

971 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG5_ZERO_PAD
 915

	)

972 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG6_PREAMBLE_SYMB_NB
 916

	)

973 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG7_PREAMBLE_SYMB_NB
 917

	)

974 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_INT_DELAY
 918

	)

975 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_RX
 919

	)

976 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_TX
 920

	)

977 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_POST_PREAMBLE_GAP_LONG
 921

	)

978 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_DFT_PEAK_EN
 922

	)

979 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_CHIRP_INVERT
 923

	)

980 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_SWAP_IQ
 924

	)

981 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_CONTINUOUS
 925

	)

982 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG1_DETECT_TIMEOUT
 926

	)

983 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG2_AUTO_ACK_RANGE
 927

	)

984 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG2_AUTO_ACK_DELAY
 928

	)

985 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_RESTART_ON_HDR_ERR
 929

	)

986 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_CLK_EN_RESYNC_DIN
 930

	)

987 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_LLR_SCALE
 931

	)

988 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH0_PEAK1_POS
 932

	)

989 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH1_PEAK2_POS
 933

	)

990 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_FINETIME_ON_LAST
 934

	)

991 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_AUTO_SCALE
 935

	)

992 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_DROP_ON_SYNCH
 936

	)

993 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_GAIN
 937

	)

994 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_TIMEOUT_OPT
 938

	)

995 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_GAIN_P_HDR_RED
 939

	)

996 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_ROUNDING
 940

	)

997 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_POS_LIMIT
 941

	)

998 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_SUM_SIZE
 942

	)

999 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_MODE
 943

	)

1000 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_AUTO
 944

	)

1001 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PAYLOAD
 945

	)

1002 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
 946

	)

1003 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
 947

	)

1004 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PAYLOAD
 948

	)

1005 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PREAMB
 949

	)

1006 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_FINESYNCH_SUM
 950

	)

1007 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_FINESYNCH_GAIN
 951

	)

1008 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_GAIN_I_AUTO
 952

	)

1009 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING4_GAIN_I_AUTO_MAX
 953

	)

1010 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING4_GAIN_P_AUTO_MAX
 954

	)

1011 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
 955

	)

1012 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
 956

	)

1013 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
 957

	)

1014 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_DELTA
 958

	)

1015 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FINE_DELTA
 959

	)

1016 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_ERROR
 960

	)

1017 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
 961

	)

1018 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_OFFSET
 962

	)

1019 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_DETECT
 963

	)

1020 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME4_FREQ_TO_TIME_INVERT_RNG
 964

	)

1021 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_FINE
 965

	)

1022 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_HDR_SKIP
 966

	)

1023 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_EN
 967

	)

1024 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK1_FREQ_SYNCH_GAIN
 968

	)

1025 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK1_FREQ_TRACK_AUTO_THR
 969

	)

1026 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_SNR_MIN_WINDOW
 970

	)

1027 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_GAIN_AUTO_SNR_MIN
 971

	)

1028 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_FREQ_SYNCH_THR
 972

	)

1029 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP0_MSP_PNR
 973

	)

1030 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP1_MSP2_PNR
 974

	)

1031 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP2_PEAK_NB
 975

	)

1032 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP_PEAK_NB
 976

	)

1033 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_ACC_MIN2
 977

	)

1034 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_ACC_WIN_LEN
 978

	)

1035 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_MSP_POS_SEL
 979

	)

1036 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_MSP_CNT_MODE
 980

	)

1037 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_USE_GAIN_SYMB
 981

	)

1038 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
 982

	)

1039 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_NOISE_COEFF
 983

	)

1040 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_COEFF
 984

	)

1041 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_2_SAME_PEAKS
 985

	)

1042 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_AUTO_RESCALE
 986

	)

1043 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_PEAK_POS_SEL
 987

	)

1044 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_PEAK_SUM_EN
 988

	)

1045 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC3_MIN_SINGLE_PEAK
 989

	)

1046 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_SEL_SNR_MIN
 990

	)

1047 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_ENABLE
 991

	)

1048 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_NB_SYMB
 992

	)

1049 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_FSK_TRANSPOSE_CLK_OVERRIDE
 993

	)

1050 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_FSK_MODEM_CLK_OVERRIDE
 994

	)

1051 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_TRANSPOSE_CLK_OVERRIDE
 995

	)

1052 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_MODEM_CLK_OVERRIDE
 996

	)

1053 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DUMMY0_DUMMY0
 997

	)

1054 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_MSB_IF_FREQ_0
 998

	)

1055 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_LSB_IF_FREQ_0
 999

	)

1056 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_IBM
 1000

	)

1057 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_DCFREE_ENC
 1001

	)

1058 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_EN
 1002

	)

1059 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_PKT_MODE
 1003

	)

1060 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_ADRS_COMP
 1004

	)

1061 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_PSIZE
 1005

	)

1062 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_CH_BW_EXPO
 1006

	)

1063 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_MODEM_INVERT_IQ
 1007

	)

1064 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_AUTO_AFC
 1008

	)

1065 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RADIO_SELECT
 1009

	)

1066 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RX_INVERT
 1010

	)

1067 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_RSSI_LENGTH
 1011

	)

1068 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_ERROR_OSR_TOL
 1012

	)

1069 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_NODE_ADRS_NODE_ADRS
 1013

	)

1070 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_BROADCAST_BROADCAST
 1014

	)

1071 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_PKT_LENGTH_PKT_LENGTH
 1015

	)

1072 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_MSB_TIMEOUT
 1016

	)

1073 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_LSB_TIMEOUT
 1017

	)

1074 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_MSB_BIT_RATE
 1018

	)

1075 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_LSB_BIT_RATE
 1019

	)

1076 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
 1020

	)

1077 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
 1021

	)

1078 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
 1022

	)

1079 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
 1023

	)

1080 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
 1024

	)

1081 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
 1025

	)

1082 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
 1026

	)

1083 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
 1027

	)

1084 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_RSSI_FILTER_ALPHA_FSK_RSSI_FILTER_ALPHA
 1028

	)

1085 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DUMMY1_DUMMY1
 1029

	)

1086 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_ENABLE
 1030

	)

1087 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTUREWRAP
 1031

	)

1088 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTUREFORCETRIGGER
 1032

	)

1089 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTURESTART
 1033

	)

1090 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_RAMCONFIG
 1034

	)

1091 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_SOURCE_A_SOURCEMUX
 1035

	)

1092 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_SOURCE_B_SOURCEMUX
 1036

	)

1093 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_0_CAPTUREPERIOD
 1037

	)

1094 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_1_CAPTUREPERIOD
 1038

	)

1095 
	#SX1302_REG_CAPTURE_RAM_STATUS_CAPCOMPLETE
 1039

	)

1096 
	#SX1302_REG_CAPTURE_RAM_LAST_RAM_ADDR_0_LASTRAMADDR
 1040

	)

1097 
	#SX1302_REG_CAPTURE_RAM_LAST_RAM_ADDR_1_LASTRAMADDR
 1041

	)

1098 
	#SX1302_REG_CAPTURE_RAM_CLOCK_GATE_OVERRIDE_CLK_OVERRIDE
 1042

	)

1099 
	#SX1302_REG_CAPTURE_RAM_DUMMY0_DUMMY0
 1043

	)

1101 
	#LGW_TOTALREGS
 1044

	)

1106 
	#SX1302_REG_TX_TOP_TX_TRIG_TX_FSM_CLR
(
rf_chaö
) ((rf_chain == 0) ? \

1107 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_FSM_CLR
 : \

1108 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_FSM_CLR
)

	)

1109 
	#SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_GPS
(
rf_chaö
) ((rf_chain == 0) ? \

1110 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_GPS
 : \

1111 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_GPS
)

	)

1112 
	#SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_DELAYED
(
rf_chaö
) ((rf_chain == 0) ? \

1113 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_DELAYED
 : \

1114 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_DELAYED
)

	)

1115 
	#SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_IMMEDIATE
(
rf_chaö
) ((rf_chain == 0) ? \

1116 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
 : \

1117 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
)

	)

1118 
	#SX1302_REG_TX_TOP_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
(
rf_chaö
) ((rf_chain == 0) ? \

1119 
SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
 : \

1120 
SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
)

	)

1121 
	#SX1302_REG_TX_TOP_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
(
rf_chaö
) ((rf_chain == 0) ? \

1122 
SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
 : \

1123 
SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
)

	)

1124 
	#SX1302_REG_TX_TOP_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
(
rf_chaö
) ((rf_chain == 0) ? \

1125 
SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
 : \

1126 
SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
)

	)

1127 
	#SX1302_REG_TX_TOP_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
(
rf_chaö
) ((rf_chain == 0) ? \

1128 
SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
 : \

1129 
SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
)

	)

1130 
	#SX1302_REG_TX_TOP_TX_START_DELAY_MSB_TX_START_DELAY
(
rf_chaö
) ((rf_chain == 0) ? \

1131 
SX1302_REG_TX_TOP_A_TX_START_DELAY_MSB_TX_START_DELAY
 : \

1132 
SX1302_REG_TX_TOP_B_TX_START_DELAY_MSB_TX_START_DELAY
)

	)

1133 
	#SX1302_REG_TX_TOP_TX_START_DELAY_LSB_TX_START_DELAY
(
rf_chaö
) ((rf_chain == 0) ? \

1134 
SX1302_REG_TX_TOP_A_TX_START_DELAY_LSB_TX_START_DELAY
 : \

1135 
SX1302_REG_TX_TOP_B_TX_START_DELAY_LSB_TX_START_DELAY
)

	)

1136 
	#SX1302_REG_TX_TOP_TX_CTRL_WRITE_BUFFER
(
rf_chaö
) ((rf_chain == 0) ? \

1137 
SX1302_REG_TX_TOP_A_TX_CTRL_WRITE_BUFFER
 : \

1138 
SX1302_REG_TX_TOP_B_TX_CTRL_WRITE_BUFFER
)

	)

1139 
	#SX1302_REG_TX_TOP_TX_RAMP_DURATION_TX_RAMP_DURATION
(
rf_chaö
) ((rf_chain == 0) ? \

1140 
SX1302_REG_TX_TOP_A_TX_RAMP_DURATION_TX_RAMP_DURATION
 : \

1141 
SX1302_REG_TX_TOP_B_TX_RAMP_DURATION_TX_RAMP_DURATION
)

	)

1142 
	#SX1302_REG_TX_TOP_GEN_CFG_0_MODULATION_TYPE
(
rf_chaö
) ((rf_chain == 0) ? \

1143 
SX1302_REG_TX_TOP_A_GEN_CFG_0_MODULATION_TYPE
 : \

1144 
SX1302_REG_TX_TOP_B_GEN_CFG_0_MODULATION_TYPE
)

	)

1145 
	#SX1302_REG_TX_TOP_TEST_0_TX_ACTIVE_CTRL
(
rf_chaö
) ((rf_chain == 0) ? \

1146 
SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_CTRL
 : \

1147 
SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_CTRL
)

	)

1148 
	#SX1302_REG_TX_TOP_TEST_0_TX_ACTIVE_SEL
(
rf_chaö
) ((rf_chain == 0) ? \

1149 
SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_SEL
 : \

1150 
SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_SEL
)

	)

1151 
	#SX1302_REG_TX_TOP_TX_FLAG_TX_TIMEOUT
(
rf_chaö
) ((rf_chain == 0) ? \

1152 
SX1302_REG_TX_TOP_A_TX_FLAG_TX_TIMEOUT
 : \

1153 
SX1302_REG_TX_TOP_B_TX_FLAG_TX_TIMEOUT
)

	)

1154 
	#SX1302_REG_TX_TOP_TX_FLAG_PKT_DONE
(
rf_chaö
) ((rf_chain == 0) ? \

1155 
SX1302_REG_TX_TOP_A_TX_FLAG_PKT_DONE
 : \

1156 
SX1302_REG_TX_TOP_B_TX_FLAG_PKT_DONE
)

	)

1157 
	#SX1302_REG_TX_TOP_AGC_TX_BW_AGC_TX_BW
(
rf_chaö
) ((rf_chain == 0) ? \

1158 
SX1302_REG_TX_TOP_A_AGC_TX_BW_AGC_TX_BW
 : \

1159 
SX1302_REG_TX_TOP_B_AGC_TX_BW_AGC_TX_BW
)

	)

1160 
	#SX1302_REG_TX_TOP_AGC_TX_PWR_AGC_TX_PWR
(
rf_chaö
) ((rf_chain == 0) ? \

1161 
SX1302_REG_TX_TOP_A_AGC_TX_PWR_AGC_TX_PWR
 : \

1162 
SX1302_REG_TX_TOP_B_AGC_TX_PWR_AGC_TX_PWR
)

	)

1163 
	#SX1302_REG_TX_TOP_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
(
rf_chaö
) ((rf_chain == 0) ? \

1164 
SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
 : \

1165 
SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
)

	)

1166 
	#SX1302_REG_TX_TOP_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
(
rf_chaö
) ((rf_chain == 0) ? \

1167 
SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
 : \

1168 
SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
)

	)

1169 
	#SX1302_REG_TX_TOP_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
(
rf_chaö
) ((rf_chain == 0) ? \

1170 
SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
 : \

1171 
SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
)

	)

1172 
	#SX1302_REG_TX_TOP_TX_FSM_STATUS_TX_STATUS
(
rf_chaö
) ((rf_chain == 0) ? \

1173 
SX1302_REG_TX_TOP_A_TX_FSM_STATUS_TX_STATUS
 : \

1174 
SX1302_REG_TX_TOP_B_TX_FSM_STATUS_TX_STATUS
)

	)

1175 
	#SX1302_REG_TX_TOP_DUMMY_CONTROL_DUMMY
(
rf_chaö
) ((rf_chain == 0) ? \

1176 
SX1302_REG_TX_TOP_A_DUMMY_CONTROL_DUMMY
 : \

1177 
SX1302_REG_TX_TOP_B_DUMMY_CONTROL_DUMMY
)

	)

1178 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
(
rf_chaö
) ((rf_chain == 0) ? \

1179 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
 : \

1180 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
)

	)

1181 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_CLK_EDGE
(
rf_chaö
) ((rf_chain == 0) ? \

1182 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_CLK_EDGE
 : \

1183 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_CLK_EDGE
)

	)

1184 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_MODE
(
rf_chaö
) ((rf_chain == 0) ? \

1185 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
 : \

1186 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
)

	)

1187 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_DST
(
rf_chaö
) ((rf_chain == 0) ? \

1188 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
 : \

1189 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
)

	)

1190 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_SRC
(
rf_chaö
) ((rf_chain == 0) ? \

1191 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_SRC
 : \

1192 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_SRC
)

	)

1193 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
(
rf_chaö
) ((rf_chain == 0) ? \

1194 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
 : \

1195 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
)

	)

1196 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
(
rf_chaö
) ((rf_chain == 0) ? \

1197 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
 : \

1198 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
)

	)

1199 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
(
rf_chaö
) ((rf_chain == 0) ? \

1200 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
 : \

1201 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
)

	)

1202 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_I_OFFSET_I_OFFSET
(
rf_chaö
) ((rf_chain == 0) ? \

1203 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
 : \

1204 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
)

	)

1205 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
(
rf_chaö
) ((rf_chain == 0) ? \

1206 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
 : \

1207 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
)

	)

1208 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
(
rf_chaö
) ((rf_chain == 0) ? \

1209 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
 : \

1210 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
)

	)

1211 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
(
rf_chaö
) ((rf_chain == 0) ? \

1212 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
 : \

1213 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
)

	)

1214 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
(
rf_chaö
) ((rf_chain == 0) ? \

1215 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
 : \

1216 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
)

	)

1217 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
(
rf_chaö
) ((rf_chain == 0) ? \

1218 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
 : \

1219 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
)

	)

1220 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
(
rf_chaö
) ((rf_chain == 0) ? \

1221 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
 : \

1222 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
)

	)

1223 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_TEST_MOD_FREQ
(
rf_chaö
) ((rf_chain == 0) ? \

1224 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_TEST_MOD_FREQ
 : \

1225 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_TEST_MOD_FREQ
)

	)

1226 
	#SX1302_REG_TX_TOP_DUMMY_MODULATOR_DUMMY
(
rf_chaö
) ((rf_chain == 0) ? \

1227 
SX1302_REG_TX_TOP_A_DUMMY_MODULATOR_DUMMY
 : \

1228 
SX1302_REG_TX_TOP_B_DUMMY_MODULATOR_DUMMY
)

	)

1229 
	#SX1302_REG_TX_TOP_FSK_PKT_LEN_PKT_LENGTH
(
rf_chaö
) ((rf_chain == 0) ? \

1230 
SX1302_REG_TX_TOP_A_FSK_PKT_LEN_PKT_LENGTH
 : \

1231 
SX1302_REG_TX_TOP_B_FSK_PKT_LEN_PKT_LENGTH
)

	)

1232 
	#SX1302_REG_TX_TOP_FSK_CFG_0_TX_CONT
(
rf_chaö
) ((rf_chain == 0) ? \

1233 
SX1302_REG_TX_TOP_A_FSK_CFG_0_TX_CONT
 : \

1234 
SX1302_REG_TX_TOP_B_FSK_CFG_0_TX_CONT
)

	)

1235 
	#SX1302_REG_TX_TOP_FSK_CFG_0_CRC_IBM
(
rf_chaö
) ((rf_chain == 0) ? \

1236 
SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_IBM
 : \

1237 
SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_IBM
)

	)

1238 
	#SX1302_REG_TX_TOP_FSK_CFG_0_DCFREE_ENC
(
rf_chaö
) ((rf_chain == 0) ? \

1239 
SX1302_REG_TX_TOP_A_FSK_CFG_0_DCFREE_ENC
 : \

1240 
SX1302_REG_TX_TOP_B_FSK_CFG_0_DCFREE_ENC
)

	)

1241 
	#SX1302_REG_TX_TOP_FSK_CFG_0_CRC_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1242 
SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_EN
 : \

1243 
SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_EN
)

	)

1244 
	#SX1302_REG_TX_TOP_FSK_CFG_0_PKT_MODE
(
rf_chaö
) ((rf_chain == 0) ? \

1245 
SX1302_REG_TX_TOP_A_FSK_CFG_0_PKT_MODE
 : \

1246 
SX1302_REG_TX_TOP_B_FSK_CFG_0_PKT_MODE
)

	)

1247 
	#SX1302_REG_TX_TOP_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
(
rf_chaö
) ((rf_chain == 0) ? \

1248 
SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
 : \

1249 
SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
)

	)

1250 
	#SX1302_REG_TX_TOP_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
(
rf_chaö
) ((rf_chain == 0) ? \

1251 
SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
 : \

1252 
SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
)

	)

1253 
	#SX1302_REG_TX_TOP_FSK_BIT_RATE_MSB_BIT_RATE
(
rf_chaö
) ((rf_chain == 0) ? \

1254 
SX1302_REG_TX_TOP_A_FSK_BIT_RATE_MSB_BIT_RATE
 : \

1255 
SX1302_REG_TX_TOP_B_FSK_BIT_RATE_MSB_BIT_RATE
)

	)

1256 
	#SX1302_REG_TX_TOP_FSK_BIT_RATE_LSB_BIT_RATE
(
rf_chaö
) ((rf_chain == 0) ? \

1257 
SX1302_REG_TX_TOP_A_FSK_BIT_RATE_LSB_BIT_RATE
 : \

1258 
SX1302_REG_TX_TOP_B_FSK_BIT_RATE_LSB_BIT_RATE
)

	)

1259 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_REF_PATTERN_SIZE
(
rf_chaö
) ((rf_chain == 0) ? \

1260 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_SIZE
 : \

1261 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_SIZE
)

	)

1262 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_PREAMBLE_SEQ
(
rf_chaö
) ((rf_chain == 0) ? \

1263 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_PREAMBLE_SEQ
 : \

1264 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_PREAMBLE_SEQ
)

	)

1265 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_REF_PATTERN_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1266 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_EN
 : \

1267 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_EN
)

	)

1268 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
(
rf_chaö
) ((rf_chain == 0) ? \

1269 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
 : \

1270 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
)

	)

1271 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_GAUSSIAN_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1272 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_EN
 : \

1273 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_EN
)

	)

1274 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1275 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
 : \

1276 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
)

	)

1277 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1278 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
 : \

1279 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
)

	)

1280 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1281 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
 : \

1282 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
)

	)

1283 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1284 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
 : \

1285 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
)

	)

1286 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1287 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
 : \

1288 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
)

	)

1289 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1290 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
 : \

1291 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
)

	)

1292 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1293 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
 : \

1294 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
)

	)

1295 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1296 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
 : \

1297 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
)

	)

1298 
	#SX1302_REG_TX_TOP_DUMMY_GSFK_DUMMY
(
rf_chaö
) ((rf_chain == 0) ? \

1299 
SX1302_REG_TX_TOP_A_DUMMY_GSFK_DUMMY
 : \

1300 
SX1302_REG_TX_TOP_B_DUMMY_GSFK_DUMMY
)

	)

1301 
	#SX1302_REG_TX_TOP_TXRX_CFG0_0_MODEM_BW
(
rf_chaö
) ((rf_chain == 0) ? \

1302 
SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_BW
 : \

1303 
SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_BW
)

	)

1304 
	#SX1302_REG_TX_TOP_TXRX_CFG0_0_MODEM_SF
(
rf_chaö
) ((rf_chain == 0) ? \

1305 
SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_SF
 : \

1306 
SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_SF
)

	)

1307 
	#SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
(
rf_chaö
) ((rf_chain == 0) ? \

1308 
SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
 : \

1309 
SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
)

	)

1310 
	#SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET
(
rf_chaö
) ((rf_chain == 0) ? \

1311 
SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET
 : \

1312 
SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET
)

	)

1313 
	#SX1302_REG_TX_TOP_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
(
rf_chaö
) ((rf_chain == 0) ? \

1314 
SX1302_REG_TX_TOP_A_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
 : \

1315 
SX1302_REG_TX_TOP_B_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
)

	)

1316 
	#SX1302_REG_TX_TOP_TXRX_CFG0_1_CODING_RATE
(
rf_chaö
) ((rf_chain == 0) ? \

1317 
SX1302_REG_TX_TOP_A_TXRX_CFG0_1_CODING_RATE
 : \

1318 
SX1302_REG_TX_TOP_B_TXRX_CFG0_1_CODING_RATE
)

	)

1319 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_FINE_SYNCH_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1320 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_FINE_SYNCH_EN
 : \

1321 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_FINE_SYNCH_EN
)

	)

1322 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_MODEM_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1323 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_MODEM_EN
 : \

1324 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_MODEM_EN
)

	)

1325 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_CADRXTX
(
rf_chaö
) ((rf_chain == 0) ? \

1326 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CADRXTX
 : \

1327 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CADRXTX
)

	)

1328 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_IMPLICIT_HEADER
(
rf_chaö
) ((rf_chain == 0) ? \

1329 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_IMPLICIT_HEADER
 : \

1330 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_IMPLICIT_HEADER
)

	)

1331 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_CRC_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1332 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CRC_EN
 : \

1333 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CRC_EN
)

	)

1334 
	#SX1302_REG_TX_TOP_TXRX_CFG0_3_PAYLOAD_LENGTH
(
rf_chaö
) ((rf_chain == 0) ? \

1335 
SX1302_REG_TX_TOP_A_TXRX_CFG0_3_PAYLOAD_LENGTH
 : \

1336 
SX1302_REG_TX_TOP_B_TXRX_CFG0_3_PAYLOAD_LENGTH
)

	)

1337 
	#SX1302_REG_TX_TOP_TXRX_CFG1_0_INT_STEP_ORIDE_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1338 
SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE_EN
 : \

1339 
SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE_EN
)

	)

1340 
	#SX1302_REG_TX_TOP_TXRX_CFG1_0_INT_STEP_ORIDE
(
rf_chaö
) ((rf_chain == 0) ? \

1341 
SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE
 : \

1342 
SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE
)

	)

1343 
	#SX1302_REG_TX_TOP_TXRX_CFG1_1_MODEM_START
(
rf_chaö
) ((rf_chain == 0) ? \

1344 
SX1302_REG_TX_TOP_A_TXRX_CFG1_1_MODEM_START
 : \

1345 
SX1302_REG_TX_TOP_B_TXRX_CFG1_1_MODEM_START
)

	)

1346 
	#SX1302_REG_TX_TOP_TXRX_CFG1_1_HEADER_DIFF_MODE
(
rf_chaö
) ((rf_chain == 0) ? \

1347 
SX1302_REG_TX_TOP_A_TXRX_CFG1_1_HEADER_DIFF_MODE
 : \

1348 
SX1302_REG_TX_TOP_B_TXRX_CFG1_1_HEADER_DIFF_MODE
)

	)

1349 
	#SX1302_REG_TX_TOP_TXRX_CFG1_1_ZERO_PAD
(
rf_chaö
) ((rf_chain == 0) ? \

1350 
SX1302_REG_TX_TOP_A_TXRX_CFG1_1_ZERO_PAD
 : \

1351 
SX1302_REG_TX_TOP_B_TXRX_CFG1_1_ZERO_PAD
)

	)

1352 
	#SX1302_REG_TX_TOP_TXRX_CFG1_2_PREAMBLE_SYMB_NB
(
rf_chaö
) ((rf_chain == 0) ? \

1353 
SX1302_REG_TX_TOP_A_TXRX_CFG1_2_PREAMBLE_SYMB_NB
 : \

1354 
SX1302_REG_TX_TOP_B_TXRX_CFG1_2_PREAMBLE_SYMB_NB
)

	)

1355 
	#SX1302_REG_TX_TOP_TXRX_CFG1_3_PREAMBLE_SYMB_NB
(
rf_chaö
) ((rf_chain == 0) ? \

1356 
SX1302_REG_TX_TOP_A_TXRX_CFG1_3_PREAMBLE_SYMB_NB
 : \

1357 
SX1302_REG_TX_TOP_B_TXRX_CFG1_3_PREAMBLE_SYMB_NB
)

	)

1358 
	#SX1302_REG_TX_TOP_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
(
rf_chaö
) ((rf_chain == 0) ? \

1359 
SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
 : \

1360 
SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
)

	)

1361 
	#SX1302_REG_TX_TOP_TXRX_CFG1_4_AUTO_ACK_RX
(
rf_chaö
) ((rf_chain == 0) ? \

1362 
SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_RX
 : \

1363 
SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_RX
)

	)

1364 
	#SX1302_REG_TX_TOP_TXRX_CFG1_4_AUTO_ACK_TX
(
rf_chaö
) ((rf_chain == 0) ? \

1365 
SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_TX
 : \

1366 
SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_TX
)

	)

1367 
	#SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_LOWPASS
(
rf_chaö
) ((rf_chain == 0) ? \

1368 
SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_LOWPASS
 : \

1369 
SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_LOWPASS
)

	)

1370 
	#SX1302_REG_TX_TOP_TX_CFG0_0_PPM_OFFSET_SIG
(
rf_chaö
) ((rf_chain == 0) ? \

1371 
SX1302_REG_TX_TOP_A_TX_CFG0_0_PPM_OFFSET_SIG
 : \

1372 
SX1302_REG_TX_TOP_B_TX_CFG0_0_PPM_OFFSET_SIG
)

	)

1373 
	#SX1302_REG_TX_TOP_TX_CFG0_0_CONTCHIRP
(
rf_chaö
) ((rf_chain == 0) ? \

1374 
SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTCHIRP
 : \

1375 
SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTCHIRP
)

	)

1376 
	#SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_INVERT
(
rf_chaö
) ((rf_chain == 0) ? \

1377 
SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_INVERT
 : \

1378 
SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_INVERT
)

	)

1379 
	#SX1302_REG_TX_TOP_TX_CFG0_0_CONTINUOUS
(
rf_chaö
) ((rf_chain == 0) ? \

1380 
SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTINUOUS
 : \

1381 
SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTINUOUS
)

	)

1382 
	#SX1302_REG_TX_TOP_TX_CFG0_1_POWER_RANGING
(
rf_chaö
) ((rf_chain == 0) ? \

1383 
SX1302_REG_TX_TOP_A_TX_CFG0_1_POWER_RANGING
 : \

1384 
SX1302_REG_TX_TOP_B_TX_CFG0_1_POWER_RANGING
)

	)

1385 
	#SX1302_REG_TX_TOP_TX_CFG1_0_FRAME_NB
(
rf_chaö
) ((rf_chain == 0) ? \

1386 
SX1302_REG_TX_TOP_A_TX_CFG1_0_FRAME_NB
 : \

1387 
SX1302_REG_TX_TOP_B_TX_CFG1_0_FRAME_NB
)

	)

1388 
	#SX1302_REG_TX_TOP_TX_CFG1_1_HOP_CTRL
(
rf_chaö
) ((rf_chain == 0) ? \

1389 
SX1302_REG_TX_TOP_A_TX_CFG1_1_HOP_CTRL
 : \

1390 
SX1302_REG_TX_TOP_B_TX_CFG1_1_HOP_CTRL
)

	)

1391 
	#SX1302_REG_TX_TOP_TX_CFG1_1_IFS
(
rf_chaö
) ((rf_chain == 0) ? \

1392 
SX1302_REG_TX_TOP_A_TX_CFG1_1_IFS
 : \

1393 
SX1302_REG_TX_TOP_B_TX_CFG1_1_IFS
)

	)

1394 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_0_AUTO_SCALE
(
rf_chaö
) ((rf_chain == 0) ? \

1395 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_AUTO_SCALE
 : \

1396 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_AUTO_SCALE
)

	)

1397 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_0_DROP_ON_SYNCH
(
rf_chaö
) ((rf_chain == 0) ? \

1398 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_DROP_ON_SYNCH
 : \

1399 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_DROP_ON_SYNCH
)

	)

1400 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_0_GAIN
(
rf_chaö
) ((rf_chain == 0) ? \

1401 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_GAIN
 : \

1402 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_GAIN
)

	)

1403 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_0_PEAK1_POS
(
rf_chaö
) ((rf_chain == 0) ? \

1404 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_PEAK1_POS
 : \

1405 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_PEAK1_POS
)

	)

1406 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_1_FINETIME_ON_LAST
(
rf_chaö
) ((rf_chain == 0) ? \

1407 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_FINETIME_ON_LAST
 : \

1408 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_FINETIME_ON_LAST
)

	)

1409 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_1_TIMEOUT_OPT
(
rf_chaö
) ((rf_chain == 0) ? \

1410 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_TIMEOUT_OPT
 : \

1411 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_TIMEOUT_OPT
)

	)

1412 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_1_PEAK2_POS
(
rf_chaö
) ((rf_chain == 0) ? \

1413 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_PEAK2_POS
 : \

1414 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_PEAK2_POS
)

	)

1415 
	#SX1302_REG_TX_TOP_LORA_TX_STATE_STATUS
(
rf_chaö
) ((rf_chain == 0) ? \

1416 
SX1302_REG_TX_TOP_A_LORA_TX_STATE_STATUS
 : \

1417 
SX1302_REG_TX_TOP_B_LORA_TX_STATE_STATUS
)

	)

1418 
	#SX1302_REG_TX_TOP_LORA_TX_FLAG_FRAME_DONE
(
rf_chaö
) ((rf_chain == 0) ? \

1419 
SX1302_REG_TX_TOP_A_LORA_TX_FLAG_FRAME_DONE
 : \

1420 
SX1302_REG_TX_TOP_B_LORA_TX_FLAG_FRAME_DONE
)

	)

1421 
	#SX1302_REG_TX_TOP_LORA_TX_FLAG_CONT_DONE
(
rf_chaö
) ((rf_chain == 0) ? \

1422 
SX1302_REG_TX_TOP_A_LORA_TX_FLAG_CONT_DONE
 : \

1423 
SX1302_REG_TX_TOP_B_LORA_TX_FLAG_CONT_DONE
)

	)

1424 
	#SX1302_REG_TX_TOP_LORA_TX_FLAG_PLD_DONE
(
rf_chaö
) ((rf_chain == 0) ? \

1425 
SX1302_REG_TX_TOP_A_LORA_TX_FLAG_PLD_DONE
 : \

1426 
SX1302_REG_TX_TOP_B_LORA_TX_FLAG_PLD_DONE
)

	)

1427 
	#SX1302_REG_TX_TOP_DUMMY_LORA_DUMMY
(
rf_chaö
) ((rf_chain == 0) ? \

1428 
SX1302_REG_TX_TOP_A_DUMMY_LORA_DUMMY
 : \

1429 
SX1302_REG_TX_TOP_B_DUMMY_LORA_DUMMY
)

	)

1440 
lgw_c⁄√˘
(c⁄° 
lgw_com_ty≥_t
 
com_ty≥
, c⁄° * 
com_∑th
);

1446 
lgw_disc⁄√˘
();

1454 
lgw_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
);

1462 
lgw_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 *
ªg_vÆue
);

1471 
lgw_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
);

1480 
lgw_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
);

1489 
lgw_mem_wb
(
uöt16_t
 
mem_addr
, c⁄° 
uöt8_t
 *
d©a
, uöt16_à
size
);

1499 
lgw_mem_rb
(
uöt16_t
 
mem_addr
, 
uöt8_t
 *
d©a
, uöt16_à
size
, 
boﬁ
 
fifo_mode
);

	@libloragw/inc/loragw_spi.h

19 #i‚de‡
_LORAGW_SPI_H


20 
	#_LORAGW_SPI_H


	)

25 
	~<°döt.h
>

27 
	~"c⁄fig.h
"

32 
	#LGW_SPI_SUCCESS
 0

	)

33 
	#LGW_SPI_ERROR
 -1

	)

35 
	#SPI_SPEED
 2000000

	)

47 
lgw_•i_›í
(c⁄° * 
com_∑th
, **
com_èrgë_±r
);

55 
lgw_•i_˛o£
(*
com_èrgë
);

64 
lgw_•i_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
d©a
);

73 
lgw_•i_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
);

84 
lgw_•i_rmw
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
offs
, uöt8_à
Àng
, uöt8_à
d©a
);

94 
lgw_•i_wb
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, c⁄° uöt8_à*
d©a
, uöt16_à
size
);

104 
lgw_•i_rb
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
, uöt16_à
size
);

109 
uöt16_t
 
lgw_•i_chunk_size
();

	@libloragw/inc/loragw_stts751.h

16 #i‚de‡
_LORAGW_STTS751_H


17 
	#_LORAGW_STTS751_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

25 
	~"c⁄fig.h
"

41 c⁄° 
uöt8_t
 
	gI2C_PORT_TEMP_SENSOR
[] = {0x39, 0x3B, 0x38};

52 
°ts751_c⁄figuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
);

61 
°ts751_gë_ãm≥øtuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
, * 
ãm≥øtuª
);

	@libloragw/inc/loragw_sx1250.h

16 #i‚de‡
_LORAGW_SX1250_H


17 
	#_LORAGW_SX1250_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

25 
	~"sx1250_defs.h
"

27 
	~"c⁄fig.h
"

41 
sx1250_ˇlibøã
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
);

42 
sx1250_£tup
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, 
boﬁ
 
sögÀ_öput_mode
);

44 
sx1250_ªg_w
(
sx1250_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
, uöt8_à
rf_chaö
);

45 
sx1250_ªg_r
(
sx1250_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
, uöt8_à
rf_chaö
);

	@libloragw/inc/loragw_sx125x.h

15 #i‚de‡
_LORAGW_SX125X_H


16 
	#_LORAGW_SX125X_H


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

27 
	sødio_ªg_s


29 
uöt8_t
 
	maddr
;

30 
uöt8_t
 
	moffs
;

31 
uöt8_t
 
	mÀng
;

37 
	#SX1257_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 19Ë/ 32000000U)

	)

38 
	#SX1255_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 20Ë/ 32000000U)

	)

43 
	#LGW_REG_SUCCESS
 0

	)

44 
	#LGW_REG_ERROR
 -1

	)

46 
	#SX125x_32MHz_FRAC
 15625

	)

48 
	#SX125x_TX_DAC_CLK_SEL
 0

	)

49 
	#SX125x_TX_DAC_GAIN
 2

	)

50 
	#SX125x_TX_MIX_GAIN
 14

	)

51 
	#SX125x_TX_PLL_BW
 1

	)

52 
	#SX125x_TX_ANA_BW
 0

	)

53 
	#SX125x_TX_DAC_BW
 5

	)

54 
	#SX125x_RX_LNA_GAIN
 1

	)

55 
	#SX125x_RX_BB_GAIN
 15

	)

56 
	#SX125x_LNA_ZIN
 0

	)

57 
	#SX125x_RX_ADC_BW
 7

	)

58 
	#SX125x_RX_ADC_TRIM
 6

	)

59 
	#SX125x_RX_BB_BW
 0

	)

60 
	#SX125x_RX_PLL_BW
 0

	)

61 
	#SX125x_ADC_TEMP
 0

	)

62 
	#SX125x_XOSC_GM_STARTUP
 13

	)

63 
	#SX125x_XOSC_DISABLE
 2

	)

66 
	mSX125x_REG_MODE
 = 0,

67 
	mSX125x_REG_MODE__PA_DRIVER_EN
 = 1,

68 
	mSX125x_REG_MODE__TX_EN
 = 2,

69 
	mSX125x_REG_MODE__RX_EN
 = 3,

70 
	mSX125x_REG_MODE__STANDBY_EN
 = 4,

71 
	mSX125x_REG_FRF_RX_MSB
 = 5,

72 
	mSX125x_REG_FRF_RX_MID
 = 6,

73 
	mSX125x_REG_FRF_RX_LSB
 = 7,

74 
	mSX125x_REG_FRF_TX_MSB
 = 8,

75 
	mSX125x_REG_FRF_TX_MID
 = 9,

76 
	mSX125x_REG_FRF_TX_LSB
 = 10,

77 
	mSX125x_REG_VERSION
 = 11,

78 
	mSX125x_REG_TX_GAIN
 = 12,

79 
	mSX125x_REG_TX_GAIN__DAC_GAIN
 = 13,

80 
	mSX125x_REG_TX_GAIN__MIX_GAIN
 = 14,

81 
	mSX125x_REG_TX_BW
 = 15,

82 
	mSX125x_REG_TX_BW__PLL_BW
 = 16,

83 
	mSX125x_REG_TX_BW__ANA_BW
 = 17,

84 
	mSX125x_REG_TX_DAC_BW
 = 18,

85 
	mSX125x_REG_RX_ANA_GAIN
 = 19,

86 
	mSX125x_REG_RX_ANA_GAIN__LNA_GAIN
 = 20,

87 
	mSX125x_REG_RX_ANA_GAIN__BB_GAIN
 = 21,

88 
	mSX125x_REG_RX_ANA_GAIN__LNA_ZIN
 = 22,

89 
	mSX125x_REG_RX_BW
 = 23,

90 
	mSX125x_REG_RX_BW__ADC_BW
 = 24,

91 
	mSX125x_REG_RX_BW__ADC_TRIM
 = 25,

92 
	mSX125x_REG_RX_BW__BB_BW
 = 26,

93 
	mSX125x_REG_RX_PLL_BW
 = 27,

94 
	mSX125x_REG_RX_PLL_BW__PLL_BW
 = 28,

95 
	mSX125x_REG_RX_PLL_BW__ADC_TEMP_EN
 = 29,

96 
	mSX125x_REG_DIO_MAPPING
 = 30,

97 
	mSX125x_REG_DIO_MAPPING__DIO_0_MAPPING
 = 31,

98 
	mSX125x_REG_DIO_MAPPING__DIO_1_MAPPING
 = 32,

99 
	mSX125x_REG_DIO_MAPPING__DIO_2_MAPPING
 = 33,

100 
	mSX125x_REG_DIO_MAPPING__DIO_3_MAPPING
 = 34,

101 
	mSX125x_REG_CLK_SELECT
 = 35,

102 
	mSX125x_REG_CLK_SELECT__DIG_LOOPBACK_EN
 = 36,

103 
	mSX125x_REG_CLK_SELECT__RF_LOOPBACK_EN
 = 37,

104 
	mSX125x_REG_CLK_SELECT__CLK_OUT
 = 38,

105 
	mSX125x_REG_CLK_SELECT__DAC_CLK_SELECT
 = 39,

106 
	mSX125x_REG_MODE_STATUS
 = 40,

107 
	mSX125x_REG_MODE_STATUS__LOW_BAT_EN
 = 41,

108 
	mSX125x_REG_MODE_STATUS__RX_PLL_LOCKED
 = 42,

109 
	mSX125x_REG_MODE_STATUS__TX_PLL_LOCKED
 = 43,

110 
	mSX125x_REG_LOW_BAT_THRESH
 = 44,

111 
	mSX125x_REG_SX1257_XOSC_TEST
 = 45,

112 
	mSX125x_REG_SX1257_XOSC_TEST__DISABLE
 = 46,

113 
	mSX125x_REG_SX1257_XOSC_TEST__GM_STARTUP
 = 47,

114 
	mSX125x_REG_SX1255_XOSC_TEST
 = 48,

115 
	mSX125x_REG_SX1255_XOSC_TEST__DISABLE
 = 49,

116 
	mSX125x_REG_SX1255_XOSC_TEST__GM_STARTUP
 = 50

118 
	tødio_ªg_t
;

120 
	#RADIO_TOTALREGS
 51

	)

142 
sx125x_£tup
(
uöt8_t
 
rf_chaö
, uöt8_à
rf_˛kout
, 
boﬁ
 
rf_íabÀ
, uöt8_à
rf_ødio_ty≥
, 
uöt32_t
 
‰eq_hz
);

144 
sx125x_ªg_w
(
ødio_ªg_t
 
idx
, 
uöt8_t
 
d©a
, uöt8_à
rf_chaö
);

145 
sx125x_ªg_r
(
ødio_ªg_t
 
idx
, 
uöt8_t
 *
d©a
, uöt8_à
rf_chaö
);

	@libloragw/inc/loragw_sx1261.h

17 #i‚de‡
_LORAGW_SX1261_H


18 
	#_LORAGW_SX1261_H


	)

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

26 
	~"l‹agw_hÆ.h
"

27 
	~"sx1261_defs.h
"

29 
	~"c⁄fig.h
"

37 c⁄° 
	gsx1261_¥am_vîsi⁄_°rög
[] = "2D06";

45 
sx1261_c⁄√˘
(
lgw_com_ty≥_t
 
com_ty≥
, c⁄° *
com_∑th
);

46 
sx1261_disc⁄√˘
();

48 
sx1261_ªg_w
(
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
);

49 
sx1261_ªg_r
(
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
);

51 
sx1261_lﬂd_¥am
();

52 
sx1261_ˇlibøã
(
uöt32_t
 
‰eq_hz
);

53 
sx1261_£tup
();

54 
sx1261_£t_rx_∑øms
(
uöt32_t
 
‰eq_hz
, 
uöt8_t
 
b™dwidth
);

56 
sx1261_lbt_°¨t
(
lgw_lbt_sˇn_time_t
 
sˇn_time_us
, 
öt8_t
 
thªshﬁd_dbm
);

57 
sx1261_lbt_°›
();

59 
sx1261_•e˘øl_sˇn_°¨t
(
uöt16_t
 
nb_sˇn
);

60 
sx1261_•e˘øl_sˇn_°©us
(
lgw_•e˘øl_sˇn_°©us_t
 * 
°©us
);

61 
sx1261_•e˘øl_sˇn_gë_ªsu…s
(
öt8_t
 
rssi_off£t
, 
öt16_t
 * 
Àvñs_dbm
, 
uöt16_t
 * 
ªsu…s
);

62 
sx1261_•e˘øl_sˇn_ab‹t
();

	@libloragw/inc/loragw_sx1302.h

15 #i‚de‡
_LORAGW_SX1302_H


16 
	#_LORAGW_SX1302_H


	)

21 
	~<°döt.h
>

23 
	~"c⁄fig.h
"

29 
	#SX1302_AGC_RADIO_GAIN_AUTO
 0xFF

	)

30 
	#TX_START_DELAY_DEFAULT
 1500

	)

33 
	#IF_UNDEFINED
 0

	)

34 
	#IF_LORA_STD
 0x10

	)

35 
	#IF_LORA_MULTI
 0x11

	)

36 
	#IF_FSK_STD
 0x20

	)

41 
	#REG_SELECT
(
rf_chaö
, 
a
, 
b
Ë(‘f_chaö =0Ë?á : b)

	)

43 
	#SET_PPM_ON
(
bw
,
dr
Ë(((bw =
BW_125KHZ
Ë&& ((d∏=
DR_LORA_SF11
Ë|| (d∏=
DR_LORA_SF12
))Ë|| ((bw =
BW_250KHZ
Ë&& (d∏=DR_LORA_SF12)))

	)

53 
	mCHIP_MODEL_ID_SX1302
 = 0x02,

54 
	mCHIP_MODEL_ID_SX1303
 = 0x03,

55 
	mCHIP_MODEL_ID_UNKNOWN


56 } 
	tsx1302_modñ_id_t
;

63 
	mRX_FREQ_TRACK_OFF
 = 0x00,

64 
	mRX_FREQ_TRACK_ON
 = 0x01,

65 
	mRX_FREQ_TRACK_AUTO
 = 0x03

66 } 
	tsx1302_rx_‰equícy_åackög_t
;

73 
	mRX_FINE_TIMING_MODE_ABS
 = 0x01,

74 
	mRX_FINE_TIMING_MODE_LINEAR
 = 0x02,

75 
	mRX_FINE_TIMING_MODE_AUTO
 = 0x03

76 } 
	tsx1302_rx_föe_timög_mode_t
;

83 
	mRX_DFT_PEAK_MODE_DISABLED
 = 0x00,

84 
	mRX_DFT_PEAK_MODE_FULL
 = 0x01,

85 
	mRX_DFT_PEAK_MODE_TRACK
 = 0x02,

86 
	mRX_DFT_PEAK_MODE_AUTO
 = 0x03

87 } 
	tsx1302_rx_d·_≥ak_mode_t
;

98 
sx1302_öô
(c⁄° 
lgw_c⁄f_·ime_s
 *
c⁄f
);

105 
sx1302_gë_eui
(
uöt64_t
 * 
eui
);

112 
sx1302_gë_modñ_id
(
sx1302_modñ_id_t
 * 
modñ_id
);

120 
sx1302_upd©e
();

127 
sx1302_ødio_˛ock_£À˘
(
uöt8_t
 
rf_chaö
);

135 
sx1302_ødio_ª£t
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ty≥
);

143 
sx1302_ødio_£t_mode
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ty≥
);

150 
sx1302_ødio_ho°_˘æ
(
boﬁ
 
ho°_˘æ
);

159 
sx1302_ødio_ˇlibøã
(
lgw_c⁄f_rxrf_s
 * 
c⁄ãxt_rf_chaö
, 
uöt8_t
 
˛k§c
, 
lgw_tx_gaö_lut_s
 * 
txgaö_lut
);

166 
sx1302_∑_ a_lut_c⁄figuª
(
lgw_c⁄f_bﬂrd_s
 * 
c⁄ãxt_bﬂrd
);

173 
sx1302_ødio_„_c⁄figuª
();

180 
uöt8_t
 
sx1302_gë_ifmod_c⁄fig
(uöt8_à
if_chaö
);

188 
sx1302_ch™√lizî_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
if_cfg
, 
boﬁ
 
fix_gaö
);

196 
sx1302_l‹a_c‹ªœt‹_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
if_cfg
, 
lgw_c⁄f_demod_s
 * 
demod_cfg
);

203 
sx1302_l‹a_£rvi˚_c‹ªœt‹_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
);

211 
sx1302_l‹a_syncw‹d
(
boﬁ
 
public
, 
uöt8_t
 
l‹a_£rvi˚_sf
);

218 
sx1302_l‹a_modem_c⁄figuª
(
uöt32_t
 
ødio_‰eq_hz
);

226 
sx1302_l‹a_£rvi˚_modem_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
, 
uöt32_t
 
ødio_‰eq_hz
);

233 
sx1302_fsk_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
);

240 
sx1302_modem_íabÀ
();

247 
sx1302_gps_íabÀ
(
boﬁ
 
íabÀ
);

254 
uöt32_t
 
sx1302_time°amp_cou¡î
(
boﬁ
 
µs
);

261 
sx1302_agc_lﬂd_fúmw¨e
(c⁄° 
uöt8_t
 *
fúmw¨e
);

268 
sx1302_agc_°©us
(
uöt8_t
* 
°©us
);

275 
sx1302_agc_waô_°©us
(
uöt8_t
 
°©us
);

282 
sx1302_agc_maûbox_ªad
(
uöt8_t
 
maûbox
, uöt8_t* 
vÆue
);

289 
sx1302_agc_maûbox_wrôe
(
uöt8_t
 
maûbox
, uöt8_à
vÆue
);

296 
sx1302_agc_°¨t
(
uöt8_t
 
vîsi⁄
, 
lgw_ødio_ty≥_t
 
ødio_ty≥
, uöt8_à
™a_gaö
, uöt8_à
dec_gaö
, 
boﬁ
 
fuŒ_du∂ex
, boﬁ 
lbt_íabÀ
);

303 
sx1302_¨b_lﬂd_fúmw¨e
(c⁄° 
uöt8_t
 *
fúmw¨e
);

310 
sx1302_¨b_°©us
(
uöt8_t
* 
°©us
);

317 
sx1302_¨b_waô_°©us
(
uöt8_t
 
°©us
);

324 
sx1302_¨b_debug_ªad
(
uöt8_t
 
ªg_id
, uöt8_t* 
vÆue
);

331 
sx1302_¨b_debug_wrôe
(
uöt8_t
 
ªg_id
, uöt8_à
vÆue
);

338 
sx1302_¨b_°¨t
(
uöt8_t
 
vîsi⁄
, c⁄° 
lgw_c⁄f_·ime_s
 * 
·ime_c⁄ãxt
);

345 
uöt8_t
 
sx1302_¨b_gë_debug_°©s_dëe˘
(uöt8_à
ch™√l
);

352 
uöt8_t
 
sx1302_¨b_gë_debug_°©s_Æloc
(uöt8_à
ch™√l
);

359 
sx1302_¨b_¥öt_debug_°©s
();

366 
uöt16_t
 
sx1302_l‹a_∑ylﬂd_¸c
(c⁄° 
uöt8_t
 * 
d©a
, uöt8_à
size
);

374 
sx1302_„tch
(
uöt8_t
 * 
nb_pkt
);

382 
sx1302_∑r£
(
lgw_c⁄ãxt_t
 * 
c⁄ãxt
, 
lgw_pkt_rx_s
 * 
p
);

394 
sx1302_tx_£t_°¨t_dñay
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ødio_ty≥
, uöt8_à
moduœti⁄
, uöt8_à
b™dwidth
, uöt8_à
chúp_low∑ss
, 
uöt16_t
 * 
dñay
);

402 
sx1302_rssi_gë_ãm≥øtuª_off£t
(
lgw_rssi_tcomp_s
 * 
c⁄ãxt
, 
ãm≥øtuª
);

409 
uöt8_t
 
sx1302_tx_°©us
(uöt8_à
rf_chaö
);

417 
uöt8_t
 
sx1302_rx_°©us
(uöt8_à
rf_chaö
);

424 
sx1302_tx_ab‹t
(
uöt8_t
 
rf_chaö
);

431 
sx1302_tx_c⁄figuª
(
lgw_ødio_ty≥_t
 
ødio_ty≥
);

438 
sx1302_£nd
(
lgw_ødio_ty≥_t
 
ødio_ty≥
, 
lgw_tx_gaö_lut_s
 * 
tx_lut
, 
boﬁ
 
lw™_public
, 
lgw_c⁄f_rxif_s
 * 
c⁄ãxt_fsk
, 
lgw_pkt_tx_s
 * 
pkt_d©a
);

445 
sx1302_£t_gpio
(
uöt8_t
 
gpio_ªg_vÆ
);

452 
sx1302_dc_nŸch_dñay
(
if_‰eq_hz
);

	@libloragw/inc/loragw_sx1302_rx.h

16 #i‚de‡
_LORAGW_SX1302_RX_H


17 
	#_LORAGW_SX1302_RX_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

39 
	srx_∑ckë_s
 {

40 
uöt8_t
 
	mrxbyãnb_modem
;

41 
uöt8_t
 
	mrx_ch™√l_ö
;

42 
boﬁ
 
	m¸c_í
;

43 
uöt8_t
 
	mcodög_øã
;

44 
uöt8_t
 
	mrx_øã_sf
;

45 
uöt8_t
 
	mmodem_id
;

46 
öt32_t
 
	m‰equícy_off£t_îr‹
;

47 
uöt8_t
 
	m∑ylﬂd
[255];

48 
boﬁ
 
	m∑ylﬂd_¸c_îr‹
;

49 
boﬁ
 
	msync_îr‹
;

50 
boﬁ
 
	mhódî_îr‹
;

51 
boﬁ
 
	mtimög_£t
;

52 
öt8_t
 
	m¢r_avîage
;

53 
uöt8_t
 
	mrssi_ch™_avg
;

54 
uöt8_t
 
	mrssi_sig«l_avg
;

55 
uöt8_t
 
	mrssi_ch™_max_√g_dñè
;

56 
uöt8_t
 
	mrssi_ch™_max_pos_dñè
;

57 
uöt8_t
 
	mrssi_sig_max_√g_dñè
;

58 
uöt8_t
 
	mrssi_sig_max_pos_dñè
;

59 
uöt32_t
 
	mtime°amp_˙t
;

60 
uöt16_t
 
	mrx_¸c16_vÆue
;

61 
uöt8_t
 
	mnum_ts_mërics_°‹ed
;

62 
öt8_t
 
	mtime°amp_avg
[255];

63 
öt8_t
 
	mtime°amp_°ddev
[255];

64 
uöt8_t
 
	m∑ckë_checksum
;

65 } 
	trx_∑ckë_t
;

71 
	srx_buf„r_s
 {

72 
uöt8_t
 
	mbuf„r
[4096];

73 
uöt16_t
 
	mbuf„r_size
;

74 
	mbuf„r_ödex
;

75 
uöt8_t
 
	mbuf„r_pkt_nb
;

76 } 
	trx_buf„r_t
;

86 
rx_buf„r_√w
(
rx_buf„r_t
 * 
£lf
);

93 
rx_buf„r_dñ
(
rx_buf„r_t
 * 
£lf
);

100 
rx_buf„r_„tch
(
rx_buf„r_t
 * 
£lf
);

108 
rx_buf„r_p›
(
rx_buf„r_t
 * 
£lf
, 
rx_∑ckë_t
 * 
pkt
);

113 
uöt16_t
 
rx_buf„r_ªad_±r_addr
();

115 
uöt16_t
 
rx_buf„r_wrôe_±r_addr
();

117 
rx_buf„r_dump
(
FILE
 * 
fûe
, 
uöt16_t
 
°¨t_addr
, uöt16_à
íd_addr
);

	@libloragw/inc/loragw_sx1302_timestamp.h

21 #i‚de‡
_LORAGW_SX1302_TIMESTAMP_H


22 
	#_LORAGW_SX1302_TIMESTAMP_H


	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

30 
	~"l‹agw_hÆ.h
"

31 
	~"l‹agw_sx1302.h
"

33 
	~"c⁄fig.h
"

48 
	stime°amp_öfo_s
 {

49 
uöt32_t
 
	mcou¡î_us_27bôs_ªf
;

50 
uöt8_t
 
	mcou¡î_us_27bôs_wøp
;

52 
	stime°amp_cou¡î_s
 {

53 
time°amp_öfo_s
 
	mö°
;

54 
time°amp_öfo_s
 
	mµs
;

55 } 
	ttime°amp_cou¡î_t
;

65 
time°amp_cou¡î_√w
(
time°amp_cou¡î_t
 * 
£lf
);

72 
time°amp_cou¡î_dñëe
(
time°amp_cou¡î_t
 * 
£lf
);

81 
time°amp_cou¡î_upd©e
(
time°amp_cou¡î_t
 * 
£lf
, 
uöt32_t
 
µs
, uöt32_à
˙t
);

90 
uöt32_t
 
time°amp_cou¡î_ex∑nd
(
time°amp_cou¡î_t
 * 
£lf
, 
boﬁ
 
µs
, uöt32_à
˙t_us
);

98 
uöt32_t
 
time°amp_pkt_ex∑nd
(
time°amp_cou¡î_t
 * 
£lf
, uöt32_à
˙t_us
);

107 
time°amp_cou¡î_gë
(
time°amp_cou¡î_t
 * 
£lf
, 
uöt32_t
 * 
ö°
, uöt32_à* 
µs
);

120 
öt32_t
 
time°amp_cou¡î_c‹ª˘i⁄
(
lgw_c⁄ãxt_t
 * 
c⁄ãxt
, 
uöt8_t
 
b™dwidth
, uöt8_à
d©¨©e
, uöt8_à
codî©e
, 
boﬁ
 
¸c_í
, uöt8_à
∑ylﬂd_Àngth
, 
sx1302_rx_d·_≥ak_mode_t
 
d·_≥ak_mode
);

132 
time°amp_cou¡î_mode
(
boﬁ
 
·ime_íabÀ
);

144 
¥eci£_time°amp_ˇlcuœã
(
uöt8_t
 
ts_mërics_nb
, c⁄° 
öt8_t
 * 
ts_mërics
, 
uöt32_t
 
pkt_cﬂr£_tm°
, uöt8_à
sf
, 
öt32_t
 
if_‰eq_hz
, 
pkt_‰eq_îr‹
, uöt32_à* 
ªsu…_·ime
);

	@libloragw/inc/loragw_usb.h

18 #i‚de‡
_LORAGW_USB_H


19 
	#_LORAGW_USB_H


	)

24 
	~<°döt.h
>

26 
	~"l‹agw_com.h
"

28 
	~"c⁄fig.h
"

33 
	#LGW_USB_SUCCESS
 0

	)

34 
	#LGW_USB_ERROR
 -1

	)

43 
lgw_usb_›í
(c⁄° * 
com_∑th
, **
com_èrgë_±r
);

49 
lgw_usb_˛o£
(*
com_èrgë
);

54 
lgw_usb_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
d©a
);

59 
lgw_usb_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
);

64 
lgw_usb_wb
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, c⁄° uöt8_à*
d©a
, uöt16_à
size
);

69 
lgw_usb_rb
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
, uöt16_à
size
);

74 
lgw_usb_rmw
(*
com_èrgë
, 
uöt16_t
 
addªss
, 
uöt8_t
 
offs
, uöt8_à
Àng
, uöt8_à
d©a
);

79 
lgw_usb_£t_wrôe_mode
(
lgw_com_wrôe_mode_t
 
wrôe_mode
);

84 
lgw_usb_Êush
(*
com_èrgë
);

89 
uöt16_t
 
lgw_usb_chunk_size
();

94 
lgw_usb_gë_ãm≥øtuª
(*
com_èrgë
, * 
ãm≥øtuª
);

	@libloragw/inc/sx1250_com.h

16 #i‚de‡
_SX1250_COM_H


17 
	#_SX1250_COM_H


	)

22 
	~<°döt.h
>

24 
	~"l‹agw_com.h
"

25 
	~"sx1250_defs.h
"

27 
	~"c⁄fig.h
"

41 
sx1250_com_w
(
lgw_com_ty≥_t
 
com_ty≥
, *
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

42 
sx1250_com_r
(
lgw_com_ty≥_t
 
com_ty≥
, *
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

	@libloragw/inc/sx1250_defs.h

16 #i‚de‡
_SX1250_DEFS_H


17 
	#_SX1250_DEFS_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

29 
	#SX1250_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 25Ë/ 32000000U)

	)

38 
	mCALIBRATE
 = 0x89,

39 
	mCALIBRATE_IMAGE
 = 0x98,

40 
	mCLR_IRQ_STATUS
 = 0x02,

41 
	mSTOP_TIMER_ON_PREAMBLE
 = 0x9F,

42 
	mSET_RFSWITCHMODE
 = 0x9D,

43 
	mGET_IRQ_STATUS
 = 0x12,

44 
	mGET_RX_BUFFER_STATUS
 = 0x13,

45 
	mGET_PACKET_STATUS
 = 0x14,

46 
	mREAD_BUFFER
 = 0x1E,

47 
	mREAD_REGISTER
 = 0x1D,

48 
	mSET_DIO_IRQ_PARAMS
 = 0x08,

49 
	mSET_MODULATION_PARAMS
 = 0x8B,

50 
	mSET_PA_CONFIG
 = 0x95,

51 
	mSET_PACKET_PARAMS
 = 0x8C,

52 
	mSET_PACKET_TYPE
 = 0x8A,

53 
	mSET_RF_FREQUENCY
 = 0x86,

54 
	mSET_BUFFER_BASE_ADDRESS
 = 0x8F,

55 
	mSET_SLEEP
 = 0x84,

56 
	mSET_STANDBY
 = 0x80,

57 
	mSET_RX
 = 0x82,

58 
	mSET_TX
 = 0x83,

59 
	mSET_TX_PARAMS
 = 0x8E,

60 
	mWRITE_BUFFER
 = 0x0E,

61 
	mWRITE_REGISTER
 = 0x0D,

62 
	mSET_TXCONTINUOUSWAVE
 = 0xD1,

63 
	mSET_TXCONTINUOUSPREAMBLE
= 0xD2,

64 
	mGET_STATUS
 = 0xC0,

65 
	mSET_REGULATORMODE
 = 0x96,

66 
	mSET_FS
 = 0xC1,

67 
	mGET_DEVICE_ERRORS
 = 0x17

68 } 
	tsx1250_›_code_t
;

71 
	mSTDBY_RC
 = 0x00,

72 
	mSTDBY_XOSC
 = 0x01

73 } 
	tsx1250_°™dby_modes_t
;

76 
	mPACKET_TYPE_GFSK
 = 0x00,

77 
	mPACKET_TYPE_LORA
 = 0x01

78 } 
	tsx1250_∑ckë_ty≥_t
;

81 
	mSET_RAMP_10U
 = 0x00,

82 
	mSET_RAMP_20U
 = 0x01,

83 
	mSET_RAMP_40U
 = 0x02,

84 
	mSET_RAMP_80U
 = 0x03,

85 
	mSET_RAMP_200U
 = 0x04,

86 
	mSET_RAMP_800U
 = 0x05,

87 
	mSET_RAMP_1700U
 = 0x06,

88 
	mSET_RAMP_3400U
 = 0x07

89 } 
	tsx1250_ømp_time_t
;

	@libloragw/inc/sx1250_spi.h

16 #i‚de‡
_SX1250_SPI_H


17 
	#_SX1250_SPI_H


	)

22 
	~<°döt.h
>

24 
	~"sx1250_defs.h
"

26 
	~"c⁄fig.h
"

40 
sx1250_•i_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

41 
sx1250_•i_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

	@libloragw/inc/sx1250_usb.h

16 #i‚de‡
_SX1250_USB_H


17 
	#_SX1250_USB_H


	)

22 
	~<°döt.h
>

24 
	~"sx1250_defs.h
"

26 
	~"c⁄fig.h
"

40 
sx1250_usb_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

41 
sx1250_usb_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

	@libloragw/inc/sx125x_com.h

15 #i‚de‡
_SX125X_COM_H


16 
	#_SX125X_COM_H


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

24 
	~"l‹agw_com.h
"

41 
sx125x_com_r
(
lgw_com_ty≥_t
 
com_ty≥
, *
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
);

42 
sx125x_com_w
(
lgw_com_ty≥_t
 
com_ty≥
, *
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
);

	@libloragw/inc/sx125x_spi.h

15 #i‚de‡
_SX125X_SPI_H


16 
	#_SX125X_SPI_H


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

39 
sx125x_•i_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
);

40 
sx125x_•i_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
);

	@libloragw/inc/sx1261_com.h

16 #i‚de‡
_SX1261_COM_H


17 
	#_SX1261_COM_H


	)

22 
	~<°döt.h
>

24 
	~"l‹agw_com.h
"

25 
	~"sx1261_defs.h
"

27 
	~"c⁄fig.h
"

44 
sx1261_com_›í
(
lgw_com_ty≥_t
 
com_ty≥
, c⁄° *
com_∑th
);

49 
sx1261_com_˛o£
();

54 
sx1261_com_w
(
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
);

59 
sx1261_com_r
(
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
);

64 
sx1261_com_£t_wrôe_mode
(
lgw_com_wrôe_mode_t
 
wrôe_mode
);

69 
sx1261_com_Êush
();

	@libloragw/inc/sx1261_defs.h

16 #i‚de‡
_SX1261_DEFS_H


17 
	#_SX1261_DEFS_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

29 
	#SX1261_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 25Ë/ 32000000U)

	)

38 
	mSX1261_CALIBRATE_IMAGE
 = 0x98,

39 
	mSX1261_CLR_IRQ_STATUS
 = 0x02,

40 
	mSX1261_STOP_TIMER_ON_PREAMBLE
 = 0x9F,

41 
	mSX1261_SET_RFSWITCHMODE
 = 0x9D,

42 
	mSX1261_GET_IRQ_STATUS
 = 0x12,

43 
	mSX1261_GET_RX_BUFFER_STATUS
 = 0x13,

44 
	mSX1261_GET_PACKET_STATUS
 = 0x14,

45 
	mSX1261_GET_RSSI_INST
 = 0x15,

46 
	mSX1261_READ_BUFFER
 = 0x1E,

47 
	mSX1261_READ_REGISTER
 = 0x1D,

48 
	mSX1261_SET_DIO_IRQ_PARAMS
 = 0x08,

49 
	mSX1261_SET_MODULATION_PARAMS
 = 0x8B,

50 
	mSX1261_SET_PA_CONFIG
 = 0x95,

51 
	mSX1261_SET_PACKET_PARAMS
 = 0x8C,

52 
	mSX1261_SET_PACKET_TYPE
 = 0x8A,

53 
	mSX1261_SET_RF_FREQUENCY
 = 0x86,

54 
	mSX1261_SET_BUFFER_BASE_ADDRESS
 = 0x8F,

55 
	mSX1261_SET_SLEEP
 = 0x84,

56 
	mSX1261_SET_STANDBY
 = 0x80,

57 
	mSX1261_SET_RX
 = 0x82,

58 
	mSX1261_SET_TX
 = 0x83,

59 
	mSX1261_SET_TX_PARAMS
 = 0x8E,

60 
	mSX1261_WRITE_BUFFER
 = 0x0E,

61 
	mSX1261_WRITE_REGISTER
 = 0x0D,

62 
	mSX1261_SET_TXCONTINUOUSWAVE
 = 0xD1,

63 
	mSX1261_SET_TXCONTINUOUSPREAMBLE
 = 0xD2,

64 
	mSX1261_GET_STATUS
 = 0xC0,

65 
	mSX1261_SET_REGULATORMODE
 = 0x96,

66 
	mSX1261_SET_FS
 = 0xC1,

67 
	mSX1261_GET_DEVICE_ERRORS
 = 0x17

68 } 
	tsx1261_›_code_t
;

71 
	mSX1261_STDBY_RC
 = 0x00,

72 
	mSX1261_STDBY_XOSC
 = 0x01

73 } 
	tsx1261_°™dby_modes_t
;

76 
	mSX1261_PACKET_TYPE_GFSK
 = 0x00,

77 
	mSX1261_PACKET_TYPE_LORA
 = 0x01

78 } 
	tsx1261_∑ckë_ty≥_t
;

81 
	mSX1261_SET_RAMP_10U
 = 0x00,

82 
	mSX1261_SET_RAMP_20U
 = 0x01,

83 
	mSX1261_SET_RAMP_40U
 = 0x02,

84 
	mSX1261_SET_RAMP_80U
 = 0x03,

85 
	mSX1261_SET_RAMP_200U
 = 0x04,

86 
	mSX1261_SET_RAMP_800U
 = 0x05,

87 
	mSX1261_SET_RAMP_1700U
 = 0x06,

88 
	mSX1261_SET_RAMP_3400U
 = 0x07

89 } 
	tsx1261_ømp_time_t
;

92 
	mSX1261_STATUS_MODE_STBY_RC
 = 0x20,

93 
	mSX1261_STATUS_MODE_STBY_XOSC
 = 0x30,

94 
	mSX1261_STATUS_MODE_FS
 = 0x40,

95 
	mSX1261_STATUS_MODE_RX
 = 0x50,

96 
	mSX1261_STATUS_MODE_TX
 = 0x60

97 } 
	tsx1261_°©us_mode_t
;

100 
	mSX1261_STATUS_READY
 = 0x02,

101 
	mSX1261_STATUS_TIMEOUT
 = 0x03,

102 
	mSX1261_STATUS_PROCESSING_ERROR
 = 0x04,

103 
	mSX1261_STATUS_EXECUTION_FAILED
 = 0x05,

104 
	mSX1261_STATUS_TX_DONE
 = 0x06

105 } 
	tsx1261_°©us_comm™d_°©us_t
;

	@libloragw/inc/sx1261_spi.h

17 #i‚de‡
_SX1261_SPI_H


18 
	#_SX1261_SPI_H


	)

23 
	~<°döt.h
>

25 
	~"sx1261_defs.h
"

27 
	~"c⁄fig.h
"

41 
sx1261_•i_w
(*
com_èrgë
, 
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
);

42 
sx1261_•i_r
(*
com_èrgë
, 
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
);

	@libloragw/inc/sx1261_usb.h

17 #i‚de‡
_SX1261_USB_H


18 
	#_SX1261_USB_H


	)

23 
	~<°döt.h
>

25 
	~"l‹agw_com.h
"

26 
	~"sx1261_defs.h
"

28 
	~"c⁄fig.h
"

45 
sx1261_usb_w
(*
com_èrgë
, 
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
);

50 
sx1261_usb_r
(*
com_èrgë
, 
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
);

55 
sx1261_usb_£t_wrôe_mode
(
lgw_com_wrôe_mode_t
 
wrôe_mode
);

60 
sx1261_usb_Êush
(*
com_èrgë
);

	@libloragw/src/loragw_ad5338r.c

15 
	~<°döt.h
>

16 
	~<°dboﬁ.h
>

17 
	~<°dio.h
>

19 
	~"l‹agw_i2c.h
"

20 
	~"l‹agw_ad5338r.h
"

25 #i‡
DEBUG_I2C
 == 1

26 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

27 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

28 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_I2C_ERROR
;}

	)

30 
	#DEBUG_MSG
(
°r
)

	)

31 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

32 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_I2C_ERROR
;}

	)

38 
	$ad5338r_c⁄figuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
) {

39 
îr
;

40 
uöt8_t
 
cmd_so·_ª£t
[
AD5338R_CMD_SIZE
] = {0x69, 0x00, 0x00};

41 
uöt8_t
 
cmd_powî_up_dn
[
AD5338R_CMD_SIZE
] = {0x40, 0x00, 0x00};

42 
uöt8_t
 
cmd_öã∫Æ_ªf
[
AD5338R_CMD_SIZE
] = {0x70, 0x00, 0x00};

45 i‡(
i2c_fd
 <= 0) {

46 
	`¥ötf
("ERROR: invalid I2C file descriptor\n");

47  
LGW_I2C_ERROR
;

50 
	`DEBUG_PRINTF
("INFO: c⁄figurög AD5338R DAC o¿0x%02X...\n", 
i2c_addr
);

55 
îr
 = 
	`i2c_löuxdev_wrôe
(
i2c_fd
, 
i2c_addr
, 
cmd_so·_ª£t
[0], cmd_soft_reset[1]);

56 i‡(
îr
 != 0) {

57 
	`¥ötf
("ERROR: AD5338R softwareÑeset failed\n");

58  
LGW_I2C_ERROR
;

62 
îr
 = 
	`ad5338r_wrôe
(
i2c_fd
, 
i2c_addr
, 
cmd_powî_up_dn
);

63 i‡(
îr
 != 0) {

64 
	`¥ötf
("ERROR: AD5338R failedÅo setÅoÇormal operation\n");

65  
LGW_I2C_ERROR
;

69 
îr
 = 
	`ad5338r_wrôe
(
i2c_fd
, 
i2c_addr
, 
cmd_öã∫Æ_ªf
);

70 i‡(
îr
 != 0) {

71 
	`¥ötf
("ERROR: AD5338R failedÅo set internalÑeference ON\n");

72  
LGW_I2C_ERROR
;

75 
	`¥ötf
("INFO: AD5338R is configured\n");

77  
LGW_I2C_SUCCESS
;

78 
	}
}

82 
	$ad5338r_wrôe
(
i2c_fd
, 
uöt8_t
 
i2c_addr
, uöt8_à
buf
[
AD5338R_CMD_SIZE
]) {

83 
îr
;

86 
îr
 = 
	`i2c_löuxdev_wrôe_buf„r
(
i2c_fd
, 
i2c_addr
, 
buf
, 
AD5338R_CMD_SIZE
);

87 i‡(
îr
 != 0) {

88 
	`¥ötf
("ERROR: failedÅo write AD5338R command\n");

89  
LGW_I2C_ERROR
;

92  
LGW_I2C_SUCCESS
;

93 
	}
}

	@libloragw/src/loragw_aux.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°dio.h
>

27 
	~<time.h
>

28 
	~<m©h.h
>

30 
	~"l‹agw_aux.h
"

31 
	~"l‹agw_hÆ.h
"

36 #i‡
DEBUG_AUX
 == 1

37 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

38 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

40 
	#DEBUG_MSG
(
°r
)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

47 
	$waô_us
(
dñay_us
) {

48 
time•ec
 
dly
;

49 
time•ec
 
ªm
;

51 
dly
.
tv_£c
 = 
dñay_us
 / 1000000;

52 
dly
.
tv_n£c
 = (
dñay_us
 % 1000000) * 1000;

54 
	`DEBUG_PRINTF
("NOTE dly: %ld se¯%ldÇs\n", 
dly
.
tv_£c
, dly.
tv_n£c
);

56 (
dly
.
tv_£c
 > 0Ë|| (dly.
tv_n£c
 > 1000)) {

61 
ªm
.
tv_£c
 = 0;

62 
ªm
.
tv_n£c
 = 0;

63 
	`˛ock_«no¶ìp
(
CLOCK_MONOTONIC
, 0, &
dly
, &
ªm
);

64 
	`DEBUG_PRINTF
("NOTEÑemaö: %ld se¯%ldÇs\n", 
ªm
.
tv_£c
,Ñem.
tv_n£c
);

65 
dly
 = 
ªm
;

69 
	}
}

73 
	$waô_ms
(
dñay_ms
) {

74 
time•ec
 
dly
;

75 
time•ec
 
ªm
;

77 
dly
.
tv_£c
 = 
dñay_ms
 / 1000;

78 
dly
.
tv_n£c
 = (()
dñay_ms
 % 1000) * 1000000;

80 
	`DEBUG_PRINTF
("NOTE dly: %ld se¯%ldÇs\n", 
dly
.
tv_£c
, dly.
tv_n£c
);

82 if((
dly
.
tv_£c
 > 0Ë|| ((dly.tv_£¯=0Ë&& (dly.
tv_n£c
 > 100000))) {

83 
	`˛ock_«no¶ìp
(
CLOCK_MONOTONIC
, 0, &
dly
, &
ªm
);

84 
	`DEBUG_PRINTF
("NOTEÑemaö: %ld se¯%ldÇs\n", 
ªm
.
tv_£c
,Ñem.
tv_n£c
);

87 
	}
}

91 
uöt32_t
 
	$l‹a_∑ckë_time_⁄_aú
(c⁄° 
uöt8_t
 
bw
, c⁄° uöt8_à
sf
, c⁄° uöt8_à
¸
, c⁄° 
uöt16_t
 
n_symbﬁ_¥ómbÀ
,

92 c⁄° 
boﬁ
 
no_hódî
, c⁄° boﬁ 
no_¸c
, c⁄° 
uöt8_t
 
size
,

93 * 
out_nb_symbﬁs
, 
uöt32_t
 * 
out_nb_symbﬁs_∑ylﬂd
, 
uöt16_t
 * 
out_t_symbﬁ_us
) {

94 
uöt8_t
 
H
, 
DE
, 
n_bô_¸c
;

95 
uöt8_t
 
bw_pow
;

96 
uöt16_t
 
t_symbﬁ_us
;

97 
n_symbﬁ
;

98 
uöt32_t
 
tﬂ_us
, 
n_symbﬁ_∑ylﬂd
;

101 i‡(
	`IS_LORA_DR
(
sf
Ë=
Ál£
) {

102 
	`¥ötf
("ERROR: wr⁄g d©¨©ê- %s\n", 
__FUNCTION__
);

105 i‡(
	`IS_LORA_BW
(
bw
Ë=
Ál£
) {

106 
	`¥ötf
("ERROR: wr⁄g b™dwidth - %s\n", 
__FUNCTION__
);

109 i‡(
	`IS_LORA_CR
(
¸
Ë=
Ál£
) {

110 
	`¥ötf
("ERROR: wr⁄g codögÑ©ê- %s\n", 
__FUNCTION__
);

115 
bw
) {

116 
BW_125KHZ
:

117 
bw_pow
 = 1;

119 
BW_250KHZ
:

120 
bw_pow
 = 2;

122 
BW_500KHZ
:

123 
bw_pow
 = 4;

126 
	`¥ötf
("ERROR: unsuµ‹ãd b™dwôh 0x%02X (%s)\n", 
bw
, 
__FUNCTION__
);

131 
t_symbﬁ_us
 = (1 << 
sf
Ë* 8 / 
bw_pow
;

134 
H
 = (
no_hódî
 =
Ál£
) ? 1 : 0;

135 
DE
 = (
sf
 >= 11) ? 1 : 0;

136 
n_bô_¸c
 = (
no_¸c
 =
Ál£
) ? 16 : 0;

139 
n_symbﬁ_∑ylﬂd
 = 
	`˚û
–
	`MAX
–()–8 * 
size
 + 
n_bô_¸c
 - 4*
sf
 + ((s‡>7Ë? 8 : 0Ë+ 20*
H
 ), 0.0) /

140 ()–4 * (
sf
 - 2*
DE
)) )

141 * ( 
¸
 + 4 );

144 
n_symbﬁ
 = ()
n_symbﬁ_¥ómbÀ
 + ((
sf
 >7Ë? 4.25 : 6.25Ë+ 8.0 + ()
n_symbﬁ_∑ylﬂd
;

147 
tﬂ_us
 = (
uöt32_t
)–()
n_symbﬁ
 * ()
t_symbﬁ_us
 );

149 
	`DEBUG_PRINTF
("INFO: LoR®∑ckë ToA: %u u†“_symbﬁ:%f,Å_symbﬁ_us:%u)\n", 
tﬂ_us
, 
n_symbﬁ
, 
t_symbﬁ_us
);

152 i‡(
out_nb_symbﬁs
 !
NULL
) {

153 *
out_nb_symbﬁs
 = 
n_symbﬁ
;

155 i‡(
out_nb_symbﬁs_∑ylﬂd
 !
NULL
) {

156 *
out_nb_symbﬁs_∑ylﬂd
 = 
n_symbﬁ_∑ylﬂd
;

158 i‡(
out_t_symbﬁ_us
 !
NULL
) {

159 *
out_t_symbﬁ_us
 = 
t_symbﬁ_us
;

162  
tﬂ_us
;

163 
	}
}

167 #¥agm®
GCC
 
dügno°ic
 
push


168 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

169 
	$_mós_time_°¨t
(
timevÆ
 *
tm
)

171 #i‡(
DEBUG_PERF
 > 0) && (DEBUG_PERF <= 5)

172 
	`gëtimeofday
(
tm
, 
NULL
);

174 
	}
}

176 
	$_mós_time_°›
(
debug_Àvñ
, 
timevÆ
 
°¨t_time
, c⁄° *
°r
)

178 #i‡(
DEBUG_PERF
 > 0) && (DEBUG_PERF <= 5)

179 
timevÆ
 
tm
;

180 
time_ms
;

181 *
ödít
[] = { "", " ..", " ....", " ......", " ........" };

183 
	`gëtimeofday
(&
tm
, 
NULL
);

185 
time_ms
 = (
tm
.
tv_£c
 - 
°¨t_time
.tv_£cË* 1000.0 + (tm.
tv_u£c
 - start_time.tv_usec) / 1000.0;

186 i‡((
debug_Àvñ
 > 0Ë&& (debug_Àvñ <
DEBUG_PERF
)) {

187 
	`¥ötf
("PERF:%†%†%‡ms\n", 
ödít
[
debug_Àvñ
 - 1], 
°r
, 
time_ms
);

190 
	}
}

191 #¥agm®
GCC
 
dügno°ic
 
p›


195 
	$timeout_°¨t
(
timevÆ
 * 
°¨t
) {

196 
	`gëtimeofday
(
°¨t
, 
NULL
);

197 
	}
}

201 
	$timeout_check
(
timevÆ
 
°¨t
, 
uöt32_t
 
timeout_ms
) {

202 
timevÆ
 
tm
;

203 
timevÆ
 
diff
;

204 
uöt32_t
 
ms
;

206 
	`gëtimeofday
(&
tm
, 
NULL
);

208 
	`TIMER_SUB
(&
tm
, &
°¨t
, &
diff
);

210 
ms
 = 
diff
.
tv_£c
 * 1000 + diff.
tv_u£c
 / 1000;

211 i‡(
ms
 >
timeout_ms
) {

216 
	}
}

	@libloragw/src/loragw_cal.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<m©h.h
>

23 
	~"l‹agw_ªg.h
"

24 
	~"l‹agw_aux.h
"

25 
	~"l‹agw_hÆ.h
"

26 
	~"l‹agw_sx1302.h
"

27 
	~"l‹agw_sx125x.h
"

28 
	~"l‹agw_ˇl.h
"

33 
	#TX_CALIB_DONE_BY_HAL
 0

	)

38 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

39 #i‡
DEBUG_CAL
 == 1

40 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

44 
	#DEBUG_MSG
(
°r
)

	)

45 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

46 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

52 
	#CAL_TX_TONE_FREQ_HZ
 250000

	)

53 
	#CAL_ITER
 3

	)

54 
	#CAL_TX_CORR_DURATION
 0

	)

60 
öt8_t
 
	grf_rx_image_amp
[
LGW_RF_CHAIN_NB
] = {0, 0};

61 
öt8_t
 
	grf_rx_image_phi
[
LGW_RF_CHAIN_NB
] = {0, 0};

66 
ˇl_rx_ªsu…_öô
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
);

67 
ˇl_rx_ªsu…_s‹t
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
);

68 
boﬁ
 
ˇl_rx_ªsu…_as£π
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
);

69 
sx125x_ˇl_rx_image
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, 
boﬁ
 
u£_lo›back
, uöt8_à
ødio_ty≥
, 
lgw_sx125x_ˇl_rx_ªsu…_s
 * 
ªs
);

71 
ˇl_tx_ªsu…_öô
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
);

72 
ˇl_tx_ªsu…_s‹t
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
);

73 
boﬁ
 
ˇl_tx_ªsu…_as£π
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
);

74 
sx125x_ˇl_tx_dc_off£t
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, uöt8_à
dac_gaö
, uöt8_à
mix_gaö
, uöt8_à
ødio_ty≥
, 
lgw_sx125x_ˇl_tx_ªsu…_s
 * 
ªs
);

79 
	$sx1302_ˇl_°¨t
(
uöt8_t
 
vîsi⁄
, 
lgw_c⁄f_rxrf_s
 * 
rf_chaö_cfg
, 
lgw_tx_gaö_lut_s
 * 
txgaö_lut
) {

80 
i
, 
j
, 
k
;

81 
uöt8_t
 
vÆ
;

82 
boﬁ
 
ˇl_°©us
 = 
Ál£
;

83 
uöt8_t
 
x_max
;

84 
x_max_idx
;

85 
uöt8_t
 
dac_gaö
[
LGW_RF_CHAIN_NB
][
TX_GAIN_LUT_SIZE_MAX
];

86 
uöt8_t
 
mix_gaö
[
LGW_RF_CHAIN_NB
][
TX_GAIN_LUT_SIZE_MAX
];

87 
öt8_t
 
off£t_i
[
LGW_RF_CHAIN_NB
][
TX_GAIN_LUT_SIZE_MAX
];

88 
öt8_t
 
off£t_q
[
LGW_RF_CHAIN_NB
][
TX_GAIN_LUT_SIZE_MAX
];

89 
uöt8_t
 
nb_gaös
[
LGW_RF_CHAIN_NB
];

90 
boﬁ
 
unique_gaös
;

91 
lgw_sx125x_ˇl_rx_ªsu…_s
 
ˇl_rx
[
CAL_ITER
], 
ˇl_rx_mö
, 
ˇl_rx_max
;

92 
lgw_sx125x_ˇl_tx_ªsu…_s
 
ˇl_tx
[
CAL_ITER
], 
ˇl_tx_mö
, 
ˇl_tx_max
;

95 
	`sx1302_agc_waô_°©us
(0x01);

97 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

98 i‡(
vÆ
 !
vîsi⁄
) {

99 
	`¥ötf
("ERROR: wr⁄g CAL fw vîsi⁄ (%d)\n", 
vÆ
);

100  
LGW_HAL_ERROR
;

102 
	`¥ötf
("CAL FW VERSION: %d\n", 
vÆ
);

105 
	`sx1302_agc_maûbox_wrôe
(3, 0xFF);

108 
	`sx1302_agc_waô_°©us
(0x00);

110 
	`¥ötf
("CAL: started\n");

113 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

114 i‡(
rf_chaö_cfg
[
i
].
íabÀ
) {

116 i‡(
rf_chaö_cfg
[0].
ty≥
 ==Ñf_chain_cfg[1].type) {

117 
	`ˇl_rx_ªsu…_öô
(&
ˇl_rx_mö
, &
ˇl_rx_max
);

118 
j
 = 0; j < 
CAL_ITER
; j++) {

119 
	`sx125x_ˇl_rx_image
(
i
, 
rf_chaö_cfg
[i].
‰eq_hz
, 
Ál£
,Ñf_chaö_cfg[i].
ty≥
, &
ˇl_rx
[
j
]);

120 
	`ˇl_rx_ªsu…_s‹t
(&
ˇl_rx
[
j
], &
ˇl_rx_mö
, &
ˇl_rx_max
);

122 
ˇl_°©us
 = 
	`ˇl_rx_ªsu…_as£π
(&
ˇl_rx_mö
, &
ˇl_rx_max
);

126 i‡((
ˇl_°©us
 =
Ál£
Ë|| (
rf_chaö_cfg
[0].
ty≥
 !=Ñf_chain_cfg[1].type)) {

127 
	`ˇl_rx_ªsu…_öô
(&
ˇl_rx_mö
, &
ˇl_rx_max
);

128 
j
 = 0; j < 
CAL_ITER
; j++) {

129 
	`sx125x_ˇl_rx_image
(
i
, 
rf_chaö_cfg
[i].
‰eq_hz
, 
åue
,Ñf_chaö_cfg[i].
ty≥
, &
ˇl_rx
[
j
]);

130 
	`ˇl_rx_ªsu…_s‹t
(&
ˇl_rx
[
j
], &
ˇl_rx_mö
, &
ˇl_rx_max
);

132 
ˇl_°©us
 = 
	`ˇl_rx_ªsu…_as£π
(&
ˇl_rx_mö
, &
ˇl_rx_max
);

135 i‡(
ˇl_°©us
 =
Ál£
) {

136 
	`DEBUG_MSG
("*********************************************\n");

137 
	`DEBUG_PRINTF
("ERROR: Rx imagêˇlibøti⁄ o‡ødiÿ%d faûed\n",
i
);

138 
	`DEBUG_MSG
("*********************************************\n");

139  
LGW_HAL_ERROR
;

143 
x_max
 = 0;

144 
x_max_idx
 = 0;

145 
j
=0; j<
CAL_ITER
; j++) {

146 i‡(
ˇl_rx
[
j
].
ªj
 > 
x_max
) {

147 
x_max
 = 
ˇl_rx
[
j
].
ªj
;

148 
x_max_idx
 = 
j
;

151 
rf_rx_image_amp
[
i
] = 
ˇl_rx
[
x_max_idx
].
amp
;

152 
rf_rx_image_phi
[
i
] = 
ˇl_rx
[
x_max_idx
].
phi
;

154 
	`DEBUG_PRINTF
("INFO: Rx imagêˇlibøti⁄ o‡ødiÿ%d suc˚eded. Im¥oved imagêªje˘i⁄ from %2dÅÿ%2d dB (Amp:%3d Phi:%3d)\n", 
i
, 
ˇl_rx
[
x_max_idx
].
ªj_öô
, cÆ_rx[x_max_idx].
ªj
, cÆ_rx[x_max_idx].
amp
, cÆ_rx[x_max_idx].
phi
);

156 
rf_rx_image_amp
[
i
] = 0;

157 
rf_rx_image_phi
[
i
] = 0;

162 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_A_AMP_COEFF
, (
öt32_t
)
rf_rx_image_amp
[0]);

163 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_A_PHI_COEFF
, (
öt32_t
)
rf_rx_image_phi
[0]);

164 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_B_AMP_COEFF
, (
öt32_t
)
rf_rx_image_amp
[1]);

165 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_B_PHI_COEFF
, (
öt32_t
)
rf_rx_image_phi
[1]);

168 
k
 = 0; k < 
LGW_RF_CHAIN_NB
; k++) {

169 
nb_gaös
[
k
] = 0;

170 
i
 = 0; i < 
txgaö_lut
[
k
].
size
; i++) {

171 
unique_gaös
 = 
åue
;

172 
j
 = 0; j < 
nb_gaös
[
k
]; j++) {

173 i‡((
txgaö_lut
[
k
].
lut
[
i
].
dac_gaö
 =dac_gaö[k][
j
]Ë&& (txgaö_lut[k].lut[i].
mix_gaö
 == mix_gain[k][j])) {

174 
unique_gaös
 = 
Ál£
;

177 i‡(
unique_gaös
) {

178 
dac_gaö
[
k
][
nb_gaös
[k]] = 
txgaö_lut
[k].
lut
[
i
].dac_gain;

179 
mix_gaö
[
k
][
nb_gaös
[k]] = 
txgaö_lut
[k].
lut
[
i
].mix_gain;

180 
nb_gaös
[
k
] += 1;

186 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

187 i‡(
rf_chaö_cfg
[
i
].
tx_íabÀ
) {

188 
j
 = 0; j < 
nb_gaös
[
i
]; j++) {

189 
	`ˇl_tx_ªsu…_öô
(&
ˇl_tx_mö
, &
ˇl_tx_max
);

190 
k
 = 0; k < 
CAL_ITER
; k++){

191 
	`sx125x_ˇl_tx_dc_off£t
(
i
, 
rf_chaö_cfg
[i].
‰eq_hz
, 
dac_gaö
[i][
j
], 
mix_gaö
[i][j],Ñf_chaö_cfg[i].
ty≥
, &
ˇl_tx
[
k
]);

192 
	`ˇl_tx_ªsu…_s‹t
(&
ˇl_tx
[
k
], &
ˇl_tx_mö
, &
ˇl_tx_max
);

194 
ˇl_°©us
 = 
	`ˇl_tx_ªsu…_as£π
(&
ˇl_tx_mö
, &
ˇl_tx_max
);

196 i‡(
ˇl_°©us
 =
Ál£
) {

197 
	`DEBUG_MSG
("*********************************************\n");

198 
	`DEBUG_PRINTF
("ERROR: Tx DC off£àˇlibøti⁄ o‡ødiÿ%d f‹ DAC gaö %dánd mixî gaö %2d faûed\n", 
i
, 
dac_gaö
[i][
j
], 
mix_gaö
[i][j]);

199 
	`DEBUG_MSG
("*********************************************\n");

200  
LGW_HAL_ERROR
;

204 
x_max
 = 0;

205 
x_max_idx
 = 0;

206 
k
 = 0; k < 
CAL_ITER
; k++) {

207 i‡(
ˇl_tx
[
k
].
ªj
 > 
x_max
) {

208 
x_max
 = 
ˇl_tx
[
k
].
ªj
;

209 
x_max_idx
 = 
k
;

212 
off£t_i
[
i
][
j
] = 
ˇl_tx
[
x_max_idx
].offset_i;

213 
off£t_q
[
i
][
j
] = 
ˇl_tx
[
x_max_idx
].offset_q;

215 
	`DEBUG_PRINTF
("INFO: Tx DC off£àˇlibøti⁄ o‡ødiÿ%d f‹ DAC gaö %dánd mixî gaö %2d suc˚eded. Im¥oved DCÑeje˘i⁄ by %2d dB (I:%4d Q:%4d)\n", 
i
, 
dac_gaö
[i][
j
], 
mix_gaö
[i][j], 
ˇl_tx
[
x_max_idx
].
ªj
, cÆ_tx[x_max_idx].
off£t_i
, cÆ_tx[x_max_idx].
off£t_q
);

221 
k
 = 0; k < 
LGW_RF_CHAIN_NB
; k++) {

222 
i
 = 0; i < 
txgaö_lut
[
k
].
size
; i++) {

223 
j
 = 0; j < 
nb_gaös
[
k
]; j++) {

224 i‡((
txgaö_lut
[
k
].
lut
[
i
].
dac_gaö
 =dac_gaö[k][
j
]Ë&& (txgaö_lut[k].lut[i].
mix_gaö
 == mix_gain[k][j])) {

228 
txgaö_lut
[
k
].
lut
[
i
].
off£t_i
 = off£t_i[k][
j
];

229 
txgaö_lut
[
k
].
lut
[
i
].
off£t_q
 = off£t_q[k][
j
];

233 
	`¥ötf
("-------------------------------------------------------------------\n");

234 
	`¥ötf
("Radio calibration completed:\n");

235 
	`¥ötf
(" RadioA:ámp:%dÖhi:%d\n", 
rf_rx_image_amp
[0], 
rf_rx_image_phi
[0]);

236 
	`¥ötf
(" RadioB:ámp:%dÖhi:%d\n", 
rf_rx_image_amp
[1], 
rf_rx_image_phi
[1]);

237 
k
 = 0; k < 
LGW_RF_CHAIN_NB
; k++) {

238 
	`¥ötf
(" TX cÆibøti⁄Ö¨am†f‹Ñf_chaö %d:\n", 
k
);

239 
i
 = 0; i < 
txgaö_lut
[
k
].
size
; i++) {

240 
	`¥ötf
(" --Öowî:%d\tdac:%u\tmix:%u\toff£t_i:%d\toff£t_q:%d\n", 
txgaö_lut
[
k
].
lut
[
i
].
rf_powî
,Åxgaö_lut[k].lut[i].
dac_gaö
,Åxgaö_lut[k].lut[i].
mix_gaö
,Åxgaö_lut[k].lut[i].
off£t_i
,Åxgaö_lut[k].lut[i].
off£t_q
);

243 
	`¥ötf
("-------------------------------------------------------------------\n");

245  
LGW_HAL_SUCCESS
;

246 
	}
}

250 
	$sx125x_ˇl_rx_image
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, 
boﬁ
 
u£_lo›back
, uöt8_à
ødio_ty≥
, 
lgw_sx125x_ˇl_rx_ªsu…_s
 * 
ªs
) {

251 
uöt8_t
 
rx
, 
tx
;

252 
uöt32_t
 
rx_‰eq_hz
, 
tx_‰eq_hz
;

253 
uöt32_t
 
rx_‰eq_öt
, 
rx_‰eq_‰ac
;

254 
uöt32_t
 
tx_‰eq_öt
, 
tx_‰eq_‰ac
;

255 
uöt8_t
 
rx_∂l_locked
, 
tx_∂l_locked
;

256 
uöt8_t
 
rx_thªshﬁd
 = 8;

258 
	`¥ötf
("\n%s:Ñf_chaö:%u, fªq_hz:%u,Üo›back:%d,Ñadio_ty≥:%d\n", 
__FUNCTION__
, 
rf_chaö
, 
‰eq_hz
, 
u£_lo›back
, 
ødio_ty≥
);

261 
rx
 = 
rf_chaö
;

262 i‡(
u£_lo›back
 =
åue
) {

263 
tx
 = 
rf_chaö
;

265 
tx
 = 1-
rf_chaö
;

269 
rx_‰eq_hz
 = 
‰eq_hz
;

270 
tx_‰eq_hz
 = 
‰eq_hz
 + 
CAL_TX_TONE_FREQ_HZ
;

271 
ødio_ty≥
) {

272 
LGW_RADIO_TYPE_SX1255
:

273 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

274 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

275 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

276 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

278 
LGW_RADIO_TYPE_SX1257
:

279 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

280 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

281 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

282 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

285 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
ødio_ty≥
);

286  
LGW_HAL_ERROR
;

288 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_MSB
, 0xFF & 
rx_‰eq_öt
, 
rx
);

289 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_MID
, 0xFF & (
rx_‰eq_‰ac
 >> 8), 
rx
);

290 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_LSB
, 0xFF & 
rx_‰eq_‰ac
, 
rx
);

291 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_MSB
, 0xFF & 
tx_‰eq_öt
, 
tx
);

292 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_MID
, 0xFF & (
tx_‰eq_‰ac
 >> 8), 
tx
);

293 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_LSB
, 0xFF & 
tx_‰eq_‰ac
, 
tx
);

299 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__BB_BW
, 0, 
rx
);

300 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_TRIM
, 6, 
rx
);

302 
	`sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__PLL_BW
, 0, 
rx
);

303 
	`sx125x_ªg_w
(
SX125x_REG_TX_BW__PLL_BW
, 0, 
tx
);

305 
	`sx125x_ªg_w
(
SX125x_REG_TX_DAC_BW
, 5, 
tx
);

307 i‡(
u£_lo›back
 =
åue
) {

308 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 3, 
tx
);

309 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 10, 
tx
);

310 
	`sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__RF_LOOPBACK_EN
, 1, 
tx
);

311 
	`sx125x_ªg_w
(
SX125x_REG_MODE
, 15, 
tx
);

313 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 3, 
tx
);

314 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 15, 
tx
);

315 
	`sx125x_ªg_w
(
SX125x_REG_MODE
, 3, 
rx
);

316 
	`sx125x_ªg_w
(
SX125x_REG_MODE
, 13, 
tx
);

318 
	`waô_ms
(10);

319 
	`sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__RX_PLL_LOCKED
, &
rx_∂l_locked
, 
rx
);

320 
	`sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__TX_PLL_LOCKED
, &
tx_∂l_locked
, 
tx
);

321 i‡((
rx_∂l_locked
 =0Ë|| (
tx_∂l_locked
 == 0)) {

322 
	`DEBUG_MSG
("ERROR: PLL failedÅoÜock\n");

323  
LGW_HAL_ERROR
;

329 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL
, (
rf_chaö
 == 0) ? 1 : 0);

332 
	`sx1302_agc_maûbox_wrôe
(2, 
rf_chaö
);

333 
	`sx1302_agc_maûbox_wrôe
(1, 
CAL_TX_TONE_FREQ_HZ
 * 64e-6);

334 
	`sx1302_agc_maûbox_wrôe
(0, 
CAL_TX_CORR_DURATION
);

336 
	`sx1302_agc_maûbox_wrôe
(3, 0x00);

337 
	`sx1302_agc_maûbox_wrôe
(3, 0x01);

338 
	`sx1302_agc_waô_°©us
(0x01);

340 
	`sx1302_agc_maûbox_wrôe
(3, 0x02);

341 
	`sx1302_agc_waô_°©us
(0x02);

343 
	`sx1302_agc_maûbox_wrôe
(3, 0x03);

344 
	`sx1302_agc_waô_°©us
(0x03);

346 
	`sx1302_agc_maûbox_wrôe
(2, 0);

347 
	`sx1302_agc_maûbox_wrôe
(1, 
rx_thªshﬁd
);

349 
	`sx1302_agc_maûbox_wrôe
(3, 0x04);

352 
	`sx1302_agc_waô_°©us
(0x06);

353 
uöt8_t
 
thªshﬁd
, 
ˇl_dec_gaö
, 
rx_sig_1
, 
rx_sig_0
;

354 
	`sx1302_agc_maûbox_ªad
(3, &
thªshﬁd
);

355 
	`sx1302_agc_maûbox_ªad
(2, &
ˇl_dec_gaö
);

356 
	`sx1302_agc_maûbox_ªad
(1, &
rx_sig_1
);

357 
	`sx1302_agc_maûbox_ªad
(0, &
rx_sig_0
);

358 
	`DEBUG_PRINTF
("thªshﬁd:%u, cÆ_dec_gaö:%u,Ñx_sig:%u\n", 
thªshﬁd
 * 256, 
ˇl_dec_gaö
, 
rx_sig_1
 * 256 + 
rx_sig_0
);

359 
	`sx1302_agc_maûbox_wrôe
(3, 0x06);

361 
	`sx1302_agc_waô_°©us
(0x07);

362 
uöt8_t
 
rx_img_öô_0
, 
rx_img_öô_1
, 
amp
, 
phi
;

363 
	`sx1302_agc_maûbox_ªad
(3, &
rx_img_öô_1
);

364 
	`sx1302_agc_maûbox_ªad
(2, &
rx_img_öô_0
);

365 
	`sx1302_agc_maûbox_ªad
(1, &
amp
);

366 
	`sx1302_agc_maûbox_ªad
(0, &
phi
);

367 
	`DEBUG_PRINTF
("rx_img_öô_0:%u,Ñx_img_öô_1:%u,ámp:%d,Öhi:%d\n", 
rx_img_öô_0
, 
rx_img_öô_1
, (
öt8_t
)
amp
, (öt8_t)
phi
);

368 
	`sx1302_agc_maûbox_wrôe
(3, 0x07);

370 
	`sx1302_agc_waô_°©us
(0x08);

371 
uöt8_t
 
rx_img_0
, 
rx_img_1
, 
rx_noi£_øw_0
, 
rx_noi£_øw_1
;

372 
rx_img
, 
rx_noi£_øw
, 
rx_img_öô
, 
rx_sig
;

373 
	`sx1302_agc_maûbox_ªad
(3, &
rx_img_1
);

374 
	`sx1302_agc_maûbox_ªad
(2, &
rx_img_0
);

375 
	`sx1302_agc_maûbox_ªad
(1, &
rx_noi£_øw_1
);

376 
	`sx1302_agc_maûbox_ªad
(0, &
rx_noi£_øw_0
);

377 
	`DEBUG_PRINTF
("rx_img_1:%u,Ñx_img_0:%u,Ñx_noi£_øw_1:%u,Ñx_noi£_øw_0:%u\n", 
rx_img_1
, 
rx_img_0
, 
rx_noi£_øw_1
, 
rx_noi£_øw_0
);

378 
rx_sig
 = ()
rx_sig_1
 * 256 + ()
rx_sig_0
;

379 
rx_noi£_øw
 = ()
rx_noi£_øw_1
 * 256 + ()
rx_noi£_øw_0
;

380 
rx_img_öô
 = ()
rx_img_öô_1
 * 256 + ()
rx_img_öô_0
;

381 
rx_img
 = ()
rx_img_1
 * 256 + ()
rx_img_0
;

382 
	`DEBUG_PRINTF
("rx_img:%u,Ñx_noi£_øw:%u\n", (
uöt16_t
)
rx_img
, (uöt16_t)
rx_noi£_øw
);

383 
	`sx1302_agc_maûbox_wrôe
(3, 0x08);

385 
ªs
->
amp
 = (
öt8_t
)amp;

386 
ªs
->
phi
 = (
öt8_t
)phi;

387 
ªs
->
¢r
 = (
uöt16_t
)(20 * 
	`log10
(
rx_sig
/
rx_noi£_øw
));

388 
ªs
->
ªj_öô
 = (
uöt16_t
)(20 * 
	`log10
(
rx_sig
/
rx_img_öô
));

389 
ªs
->
ªj
 = (
uöt16_t
)(20 * 
	`log10
(
rx_sig
/
rx_img
));

390 
	`DEBUG_PRINTF
("¢r:%u,Ñej:%u,Ñej_öô:%u\n", 
ªs
->
¢r
,Ñes->
ªj
,Ñes->
ªj_öô
);

393 
	`DEBUG_MSG
(" CAL: waiting for RX calibrationÅo complete...\n");

394 
	`sx1302_agc_waô_°©us
((
rf_chaö
 == 0) ? 0x11 : 0x22);

395 
	`DEBUG_MSG
("CAL: RX Calibration Done\n");

397 
	`¥ötf
("%s, RESULT:Ñf_chaö:%uámp:%dÖhi:%d\n", 
__FUNCTION__
, 
rf_chaö
, 
ªs
->
amp
,Ñes->
phi
);

399  
LGW_HAL_SUCCESS
;

400 
	}
}

404 
	$sx125x_ˇl_tx_dc_off£t
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, uöt8_à
dac_gaö
, uöt8_à
mix_gaö
, uöt8_à
ødio_ty≥
, 
lgw_sx125x_ˇl_tx_ªsu…_s
 * 
ªs
) {

406 
uöt32_t
 
rx_‰eq_hz
, 
tx_‰eq_hz
;

407 
uöt32_t
 
rx_‰eq_öt
, 
rx_‰eq_‰ac
;

408 
uöt32_t
 
tx_‰eq_öt
, 
tx_‰eq_‰ac
;

409 
uöt8_t
 
rx_∂l_locked
, 
tx_∂l_locked
;

410 
uöt16_t
 
ªg
;

411 
uöt8_t
 
tx_thªshﬁd
 = 64;

412 
i
;

414 
	`¥ötf
("\n%s:Ñf_chaö:%u, fªq_hz:%u, dac_gaö:%u, mix_gaö:%u,Ñadio_ty≥:%d\n", 
__FUNCTION__
, 
rf_chaö
, 
‰eq_hz
, 
dac_gaö
, 
mix_gaö
, 
ødio_ty≥
);

417 
rx_‰eq_hz
 = 
‰eq_hz
 - 
CAL_TX_TONE_FREQ_HZ
;

418 
tx_‰eq_hz
 = 
‰eq_hz
;

419 
ødio_ty≥
) {

420 
LGW_RADIO_TYPE_SX1255
:

421 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

422 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

423 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

424 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

426 
LGW_RADIO_TYPE_SX1257
:

427 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

428 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

429 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

430 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

433 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
ødio_ty≥
);

434  
LGW_HAL_ERROR
;

436 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_MSB
, 0xFF & 
rx_‰eq_öt
, 
rf_chaö
);

437 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_MID
, 0xFF & (
rx_‰eq_‰ac
 >> 8), 
rf_chaö
);

438 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_LSB
, 0xFF & 
rx_‰eq_‰ac
, 
rf_chaö
);

439 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_MSB
, 0xFF & 
tx_‰eq_öt
, 
rf_chaö
);

440 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_MID
, 0xFF & (
tx_‰eq_‰ac
 >> 8), 
rf_chaö
);

441 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_LSB
, 0xFF & 
tx_‰eq_‰ac
, 
rf_chaö
);

447 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__BB_BW
, 0, 
rf_chaö
);

448 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_TRIM
, 6, 
rf_chaö
);

450 
	`sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__PLL_BW
, 0, 
rf_chaö
);

451 
	`sx125x_ªg_w
(
SX125x_REG_TX_BW__PLL_BW
, 0, 
rf_chaö
);

453 
	`sx125x_ªg_w
(
SX125x_REG_TX_DAC_BW
, 5, 
rf_chaö
);

454 
	`sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__DAC_CLK_SELECT
, 1, 
rf_chaö
);

455 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 
dac_gaö
, 
rf_chaö
);

456 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 
mix_gaö
, 
rf_chaö
);

457 
	`sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__RF_LOOPBACK_EN
, 1, 
rf_chaö
);

458 
	`sx125x_ªg_w
(
SX125x_REG_MODE
, 15, 
rf_chaö
);

459 
	`waô_ms
(1);

460 
	`sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__RX_PLL_LOCKED
, &
rx_∂l_locked
, 
rf_chaö
);

461 
	`sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__TX_PLL_LOCKED
, &
tx_∂l_locked
, 
rf_chaö
);

462 i‡((
rx_∂l_locked
 =0Ë|| (
tx_∂l_locked
 == 0)) {

463 
	`DEBUG_MSG
("ERROR: PLL failedÅoÜock\n");

464  
LGW_HAL_ERROR
;

470 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL
, (
rf_chaö
 == 0) ? 1 : 0);

472 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
,

473 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
);

474 
	`lgw_ªg_w
(
ªg
, 0);

476 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
,

477 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
);

478 
	`lgw_ªg_w
(
ªg
, 1);

479 
	`lgw_ªg_w
(
ªg
, 0);

481 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
,

482 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
);

483 
	`lgw_ªg_w
(
ªg
, 1);

485 #i‡
TX_CALIB_DONE_BY_HAL


487 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
, 1);

488 
	`agc_ˇl_tx_dc_off£t
(
rf_chaö
, 
CAL_TX_TONE_FREQ_HZ
 * 64e-6, 
rf_rx_image_amp
[rf_chaö], 
rf_rx_image_phi
[rf_chaö], 
tx_thªshﬁd
, 0, &(
ªs
->
off£t_i
), &‘es->
off£t_q
), &‘es->
ªj
));

489 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
, 0);

494 
	`sx1302_agc_maûbox_wrôe
(2, 
rf_chaö
 + 2);

495 
	`sx1302_agc_maûbox_wrôe
(1, 
CAL_TX_TONE_FREQ_HZ
 * 64e-6);

496 
	`sx1302_agc_maûbox_wrôe
(0, 0);

498 
	`sx1302_agc_maûbox_wrôe
(3, 0x00);

499 
	`sx1302_agc_maûbox_wrôe
(3, 0x01);

500 
	`sx1302_agc_waô_°©us
(0x01);

502 
	`sx1302_agc_maûbox_wrôe
(2, 
rf_rx_image_amp
[
rf_chaö
]);

503 
	`sx1302_agc_maûbox_wrôe
(1, 
rf_rx_image_phi
[
rf_chaö
]);

505 
	`sx1302_agc_maûbox_wrôe
(3, 0x02);

506 
	`sx1302_agc_waô_°©us
(0x02);

508 
	`sx1302_agc_maûbox_wrôe
(2, 0);

509 
	`sx1302_agc_maûbox_wrôe
(1, 0);

511 
	`sx1302_agc_maûbox_wrôe
(3, 0x03);

512 
	`sx1302_agc_waô_°©us
(0x03);

514 
	`sx1302_agc_maûbox_wrôe
(2, 0);

515 
	`sx1302_agc_maûbox_wrôe
(1, 
tx_thªshﬁd
);

517 
	`sx1302_agc_maûbox_wrôe
(3, 0x04);

520 
	`sx1302_agc_waô_°©us
(0x06);

521 
uöt8_t
 
thªshﬁd
, 
ˇl_dec_gaö
, 
tx_sig_0
, 
tx_sig_1
;

522 
	`sx1302_agc_maûbox_ªad
(3, &
thªshﬁd
);

523 
	`sx1302_agc_maûbox_ªad
(2, &
ˇl_dec_gaö
);

524 
	`sx1302_agc_maûbox_ªad
(1, &
tx_sig_1
);

525 
	`sx1302_agc_maûbox_ªad
(0, &
tx_sig_0
);

526 
	`DEBUG_PRINTF
("thªshﬁd:%u, cÆ_dec_gaö:%u,Åx_sig:%u\n", 
thªshﬁd
 * 256, 
ˇl_dec_gaö
, 
tx_sig_0
 * 256 + 
tx_sig_1
);

527 
	`sx1302_agc_maûbox_wrôe
(3, 0x06);

529 
	`sx1302_agc_waô_°©us
(0x07);

530 
uöt8_t
 
tx_dc_0
, 
tx_dc_1
, 
off£t_i
, 
off£t_q
;

531 
tx_sig
, 
tx_dc
;

532 
	`sx1302_agc_maûbox_ªad
(3, &
tx_dc_1
);

533 
	`sx1302_agc_maûbox_ªad
(2, &
tx_dc_0
);

534 
	`sx1302_agc_maûbox_ªad
(1, &
off£t_i
);

535 
	`sx1302_agc_maûbox_ªad
(0, &
off£t_q
);

536 
tx_sig
 = ()
tx_sig_1
 * 256 + ()
tx_sig_0
;

537 
tx_dc
 = ()
tx_dc_1
 * 256 + ()
tx_dc_0
;

538 
ªs
->
ªj
 = (
uöt16_t
)(20 * 
	`log10
(
tx_sig
/
tx_dc
));

539 
ªs
->
off£t_i
 = (
öt8_t
)offset_i;

540 
ªs
->
off£t_q
 = (
öt8_t
)offset_q;

541 
	`DEBUG_PRINTF
("tx_dc:%u, off£t_i:%d, off£t_q:%d\n", 
tx_dc_0
 * 256 + 
tx_dc_1
, (
öt8_t
)
off£t_i
, (öt8_t)
off£t_q
);

542 
	`sx1302_agc_maûbox_wrôe
(3, 0x07);

546 
uöt8_t
 
ödex
[12];

548 
	`sx1302_agc_waô_°©us
(0x08);

549 
	`sx1302_agc_maûbox_ªad
(3, &
ödex
[0]);

550 
	`sx1302_agc_maûbox_ªad
(2, &
ödex
[1]);

551 
	`sx1302_agc_maûbox_ªad
(1, &
ödex
[2]);

552 
	`sx1302_agc_maûbox_ªad
(0, &
ödex
[3]);

553 
	`sx1302_agc_maûbox_wrôe
(3, 0x08);

555 
	`sx1302_agc_waô_°©us
(0x09);

556 
	`sx1302_agc_maûbox_ªad
(3, &
ödex
[4]);

557 
	`sx1302_agc_maûbox_ªad
(2, &
ödex
[5]);

558 
	`sx1302_agc_maûbox_ªad
(1, &
ödex
[6]);

559 
	`sx1302_agc_maûbox_ªad
(0, &
ödex
[7]);

560 
	`sx1302_agc_maûbox_wrôe
(3, 0x09);

562 
	`sx1302_agc_waô_°©us
(0x0a);

563 
	`sx1302_agc_maûbox_ªad
(3, &
ödex
[8]);

564 
	`sx1302_agc_maûbox_ªad
(2, &
ödex
[9]);

565 
	`sx1302_agc_maûbox_ªad
(1, &
ödex
[10]);

566 
	`sx1302_agc_maûbox_ªad
(0, &
ödex
[11]);

567 
	`sx1302_agc_maûbox_wrôe
(3, 0x0a);

569 #i‡
DEBUG_CAL
 == 1

570 
öt16_t
 
lut_ˇlib
[9] = {64, 43, 28, 19, 13, 8, 6, 4, 2};

571 
öt16_t
 
off£t_i_tmp
 = 0;

572 
öt16_t
 
off£t_q_tmp
 = 0;

574 
	`¥ötf
("IQ sequence:\n");

575 
i
 = 0; i < 9; i++) {

576 i‡(
ödex
[
i
] == 0) {

577 
off£t_i_tmp
 = offset_i_tmp + 0;

578 
off£t_q_tmp
 = offset_q_tmp + 0;

580 }if(
ödex
[
i
] == 1) {

581 
off£t_i_tmp
 = off£t_i_tm∞+ 
lut_ˇlib
[
i
];

582 
off£t_q_tmp
 = off£t_q_tm∞+ 
lut_ˇlib
[
i
];

583 }if(
ödex
[
i
] == 2) {

584 
off£t_i_tmp
 = off£t_i_tm∞+ 
lut_ˇlib
[
i
];

585 
off£t_q_tmp
 = off£t_q_tm∞- 
lut_ˇlib
[
i
];

586 }if(
ödex
[
i
] == 3) {

587 
off£t_i_tmp
 = off£t_i_tm∞- 
lut_ˇlib
[
i
];

588 
off£t_q_tmp
 = off£t_q_tm∞+ 
lut_ˇlib
[
i
];

589 }if(
ödex
[
i
] == 4) {

590 
off£t_i_tmp
 = off£t_i_tm∞- 
lut_ˇlib
[
i
];

591 
off£t_q_tmp
 = off£t_q_tm∞- 
lut_ˇlib
[
i
];

593 
	`¥ötf
("i:%d q:%d\n", 
off£t_i_tmp
, 
off£t_q_tmp
);

595 
	`¥ötf
("\n");

602 
uöt8_t
 
msb
[40];

603 
uöt8_t
 
lsb
[40];

605 
i
 = 0; i < 20; i++) {

606 
	`sx1302_agc_waô_°©us
(0x0¯+ 
i
);

607 
	`sx1302_agc_maûbox_ªad
(3, &
msb
[2*
i
]);

608 
	`sx1302_agc_maûbox_ªad
(2, &
lsb
[2*
i
]);

609 
	`sx1302_agc_maûbox_ªad
(1, &
msb
[2*
i
+1]);

610 
	`sx1302_agc_maûbox_ªad
(0, &
lsb
[2*
i
+1]);

611 
	`sx1302_agc_maûbox_wrôe
(3, 0x0¯+ 
i
);

613 
	`sx1302_agc_waô_°©us
(0x0c + 20);

615 #i‡
DEBUG_CAL
 == 1

616 
	`¥ötf
("TX_SIG valuesÑeturned by signalánalyzer:");

617 
i
 = 0; i < 40; i++) {

618 i‡(
i
%5 == 0) {

619 
	`¥ötf
("\n");

621 
	`¥ötf
("%u ", 
msb
[
i
] * 256 + 
lsb
[i]);

623 
	`¥ötf
("\n");

626 
	`sx1302_agc_maûbox_wrôe
(3, 0x0c + 20);

629 
	`¥ötf
("%s: RESULT: off£t_i:%d off£t_q:%dÑej:%u\n", 
__FUNCTION__
, 
ªs
->
off£t_i
,Ñes->
off£t_q
,Ñes->
ªj
);

632 
	`DEBUG_MSG
("waiting for TX calibrationÅo complete...\n");

633 
	`sx1302_agc_waô_°©us
((
rf_chaö
 == 0) ? 0x33 : 0x44);

637 
	`DEBUG_MSG
("TX Calibration Done\n");

639  
LGW_HAL_SUCCESS
;

640 
	}
}

644 
	$ˇl_rx_ªsu…_öô
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
) {

645 
ªs_rx_mö
->
amp
 = 31;

646 
ªs_rx_mö
->
phi
 = 31;

647 
ªs_rx_mö
->
ªj
 = 255;

648 
ªs_rx_mö
->
ªj_öô
 = 255;

649 
ªs_rx_mö
->
¢r
 = 255;

651 
ªs_rx_max
->
amp
 = -32;

652 
ªs_rx_max
->
phi
 = -32;

653 
ªs_rx_max
->
ªj
 = 0;

654 
ªs_rx_max
->
ªj_öô
 = 0;

655 
ªs_rx_max
->
¢r
 = 0;

656 
	}
}

660 
	$ˇl_rx_ªsu…_s‹t
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
) {

661 i‡(
ªs_rx
->
amp
 < 
ªs_rx_mö
->amp)

662 
ªs_rx_mö
->
amp
 = 
ªs_rx
->amp;

663 i‡(
ªs_rx
->
phi
 < 
ªs_rx_mö
->phi)

664 
ªs_rx_mö
->
phi
 = 
ªs_rx
->phi;

665 i‡(
ªs_rx
->
ªj
 < 
ªs_rx_mö
->rej)

666 
ªs_rx_mö
->
ªj
 = 
ªs_rx
->rej;

667 i‡(
ªs_rx
->
ªj_öô
 < 
ªs_rx_mö
->rej_init)

668 
ªs_rx_mö
->
ªj_öô
 = 
ªs_rx
->rej_init;

669 i‡(
ªs_rx
->
¢r
 < 
ªs_rx_mö
->snr)

670 
ªs_rx_mö
->
¢r
 = 
ªs_rx
->snr;

672 i‡(
ªs_rx
->
amp
 > 
ªs_rx_max
->amp)

673 
ªs_rx_max
->
amp
 = 
ªs_rx
->amp;

674 i‡(
ªs_rx
->
phi
 > 
ªs_rx_max
->phi)

675 
ªs_rx_max
->
phi
 = 
ªs_rx
->phi;

676 i‡(
ªs_rx
->
ªj
 > 
ªs_rx_max
->rej)

677 
ªs_rx_max
->
ªj
 = 
ªs_rx
->rej;

678 i‡(
ªs_rx
->
ªj_öô
 > 
ªs_rx_max
->rej_init)

679 
ªs_rx_max
->
ªj_öô
 = 
ªs_rx
->rej_init;

680 i‡(
ªs_rx
->
¢r
 > 
ªs_rx_max
->snr)

681 
ªs_rx_max
->
¢r
 = 
ªs_rx
->snr;

682 
	}
}

686 
boﬁ
 
	$ˇl_rx_ªsu…_as£π
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
) {

687 i‡–((
ªs_rx_max
->
amp
 - 
ªs_rx_mö
->amp) > 4)

688 || ((
ªs_rx_max
->
phi
 - 
ªs_rx_mö
->phi) > 4)

689 || (
ªs_rx_mö
->
ªj
 < 50)

690 || (
ªs_rx_mö
->
¢r
 < 50) )

691  
Ál£
;

693  
åue
;

694 
	}
}

698 
	$ˇl_tx_ªsu…_öô
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
) {

699 
ªs_tx_mö
->
off£t_i
 = 127;

700 
ªs_tx_mö
->
off£t_q
 = 127;

701 
ªs_tx_mö
->
ªj
 = 255;

702 
ªs_tx_mö
->
sig
 = 255;

704 
ªs_tx_max
->
off£t_i
 = -128;

705 
ªs_tx_max
->
off£t_q
 = -128;

706 
ªs_tx_max
->
ªj
 = 0;

707 
ªs_tx_max
->
sig
 = 0;

708 
	}
}

712 
	$ˇl_tx_ªsu…_s‹t
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
) {

713 i‡(
ªs_tx
->
off£t_i
 < 
ªs_tx_mö
->offset_i)

714 
ªs_tx_mö
->
off£t_i
 = 
ªs_tx
->offset_i;

715 i‡(
ªs_tx
->
off£t_q
 < 
ªs_tx_mö
->offset_q)

716 
ªs_tx_mö
->
off£t_q
 = 
ªs_tx
->offset_q;

717 i‡(
ªs_tx
->
ªj
 < 
ªs_tx_mö
->rej)

718 
ªs_tx_mö
->
ªj
 = 
ªs_tx
->rej;

719 i‡(
ªs_tx
->
sig
 < 
ªs_tx_mö
->sig)

720 
ªs_tx_mö
->
sig
 = 
ªs_tx
->sig;

722 i‡(
ªs_tx
->
off£t_i
 > 
ªs_tx_max
->offset_i)

723 
ªs_tx_max
->
off£t_i
 = 
ªs_tx
->offset_i;

724 i‡(
ªs_tx
->
off£t_q
 > 
ªs_tx_max
->offset_q)

725 
ªs_tx_max
->
off£t_q
 = 
ªs_tx
->offset_q;

726 i‡(
ªs_tx
->
ªj
 > 
ªs_tx_max
->rej)

727 
ªs_tx_max
->
ªj
 = 
ªs_tx
->rej;

728 i‡(
ªs_tx
->
sig
 > 
ªs_tx_max
->sig)

729 
ªs_tx_max
->
sig
 = 
ªs_tx
->sig;

730 
	}
}

732 
boﬁ
 
	$ˇl_tx_ªsu…_as£π
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
) {

733 i‡–((
ªs_tx_max
->
off£t_i
 - 
ªs_tx_mö
->offset_i) > 4)

734 || ((
ªs_tx_max
->
off£t_q
 - 
ªs_tx_mö
->offset_q) > 4)

735 || (
ªs_tx_mö
->
ªj
 < 10) )

736  
Ál£
;

738  
åue
;

739 
	}
}

743 #i‡
TX_CALIB_DONE_BY_HAL


745 
öt8_t
 
	$˛ù_8b
(
öt8_t
 
vÆ1
, i¡8_à
vÆ2
) {

746 
öt16_t
 
a
, 
b
;

748 
a
 = (
öt16_t
)
vÆ1
;

749 
b
 = (
öt16_t
)
vÆ2
;

751 i‡–(
a
 + 
b
) > 127 ) {

753 } i‡–(
a
+
b
) < -128 ) {

756  (
öt8_t
)(
a
+
b
);

758 
	}
}

761 
	$agc_ˇl_tx_dc_off£t
(
uöt8_t
 
rf_chaö
, sig√d 
‰eq
, 
amp_hÆ
, 
phi_hÆ
, 
Àvñ_ªqúed
, 
¥ecisi⁄
, 
öt8_t
 * 
off£t_i_ªs
, i¡8_à* 
off£t_q_ªs
, 
uöt16_t
 * 
ªj
) {

762 sig√d 
off£t_i_£t
[9];

763 sig√d 
off£t_q_£t
[9];

764 sig√d 
off£t_i
;

765 sig√d 
off£t_q
;

766 c⁄° sig√d 
•™
[] = {64, 43, 28, 19, 13, 8, 6, 4, 2};

767 
dec_gaö
;

768 
i
, 
j
;

769 
idx
;

770 
uöt16_t
 
ªg
;

771 
öt32_t
 
abs_c‹r_max_i16
;

772 
öt32_t
 
abs_c‹r_mö_i16
;

773 
öt32_t
 
abs_c‹r_i16
;

774 
öt32_t
 
tx_sig_i16
;

775 
öt32_t
 
tx_dc_i16
;

776 
DEC_GAIN_MAX
 = 11;

777 
DEC_GAIN_MIN
 = 7;

778 
öt32_t
 
vÆ
;

779 
öt32_t
 
abs_lsb
, 
abs_msb
;

781 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_A_AMP_COEFF
,

782 
SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_B_AMP_COEFF
);

783 
	`lgw_ªg_w
(
ªg
, 
amp_hÆ
);

785 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_A_PHI_COEFF
,

786 
SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_B_PHI_COEFF
);

787 
	`lgw_ªg_w
(
ªg
, 
phi_hÆ
);

789 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_FREQ_FREQ
, 
‰eq
);

791 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_DURATION
, 
¥ecisi⁄
);

792 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_EN
, 1);

795 
off£t_i_£t
[0] = 0;

796 
off£t_q_£t
[0] = 0;

797 
off£t_i_£t
[1] = -
•™
[0];

798 
off£t_q_£t
[1] = -
•™
[0];

799 
off£t_i_£t
[2] = -
•™
[0];

800 
off£t_q_£t
[2] = 
•™
[0];

801 
off£t_i_£t
[3] = 
•™
[0];

802 
off£t_q_£t
[3] = -
•™
[0];

803 
off£t_i_£t
[4] = 
•™
[0];

804 
off£t_q_£t
[4] = 
•™
[0];

805 
i
 = 
DEC_GAIN_MAX
; i >
DEC_GAIN_MIN
; i--) {

806 
dec_gaö
 = 
i
;

808 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
,

809 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
);

810 
	`lgw_ªg_w
(
ªg
, 
dec_gaö
);

813 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

814 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

815 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[0]);

817 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

818 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

819 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[0]);

822 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

823 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

826 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

827 
	`waô_ms
(1);

829 } 
vÆ
 == 0);

831 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

832 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

835 
abs_c‹r_max_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

837 
idx
 = 0;

838 
j
 = 1; j < 5; j++) {

839 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

840 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

841 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[
j
]);

843 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

844 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

845 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[
j
]);

847 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

848 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

851 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

852 
	`waô_ms
(1);

853 } 
vÆ
 == 0);

855 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

856 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

858 
abs_c‹r_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

860 i‡(
abs_c‹r_i16
 > 
abs_c‹r_max_i16
) {

861 
abs_c‹r_max_i16
 = 
abs_c‹r_i16
;

862 
idx
 = 
j
;

866 i‡(
abs_c‹r_max_i16
 > (
Àvñ_ªqúed
 * 256)) {

871 
	`¥ötf
("dec_gaö:%d\n", 
dec_gaö
);

874 
tx_sig_i16
 = 
abs_c‹r_max_i16
;

875 
	`¥ötf
("tx_sig:%d\n", 
tx_sig_i16
);

878 
off£t_i
 = 0;

879 
off£t_q
 = 0;

880 
i
 = 0; i< (
•™
); i++) {

882 
off£t_i_£t
[0] = 
off£t_i
;

883 
off£t_q_£t
[0] = 
off£t_q
;

884 
off£t_i_£t
[1] = 
	`˛ù_8b
(
off£t_i
, 
•™
[
i
]);

885 
off£t_q_£t
[1] = 
	`˛ù_8b
(
off£t_q
, 
•™
[
i
]);

886 
off£t_i_£t
[2] = 
	`˛ù_8b
(
off£t_i
, 
•™
[
i
]);

887 
off£t_q_£t
[2] = 
	`˛ù_8b
(
off£t_q
, -
•™
[
i
]);

888 
off£t_i_£t
[3] = 
	`˛ù_8b
(
off£t_i
, -
•™
[
i
]);

889 
off£t_q_£t
[3] = 
	`˛ù_8b
(
off£t_q
, 
•™
[
i
]);

890 
off£t_i_£t
[4] = 
	`˛ù_8b
(
off£t_i
, -
•™
[
i
]);

891 
off£t_q_£t
[4] = 
	`˛ù_8b
(
off£t_q
, -
•™
[
i
]);

894 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

895 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

896 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[0]);

898 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

899 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

900 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[0]);

902 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

903 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

906 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

907 
	`waô_ms
(1);

908 } 
vÆ
 == 0);

910 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

911 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

913 
abs_c‹r_mö_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

914 
	`¥ötf
("abs_c‹r_mö_i16:%d ", 
abs_c‹r_mö_i16
);

916 
idx
 = 0;

919 
j
 = 1; j < 5; j++) {

920 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

921 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

922 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[
j
]);

924 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

925 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

926 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[
j
]);

928 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

929 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

932 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

933 
	`waô_ms
(1);

934 } 
vÆ
 == 0);

936 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

937 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

939 
abs_c‹r_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

940 
	`¥ötf
("abs_c‹r_i16:%d ", 
abs_c‹r_i16
);

942 i‡(
abs_c‹r_i16
 < 
abs_c‹r_mö_i16
) {

943 
abs_c‹r_mö_i16
 = 
abs_c‹r_i16
;

944 
idx
 = 
j
;

948 
	`¥ötf
("\n");

949 
off£t_i
 = 
off£t_i_£t
[
idx
];

950 
off£t_q
 = 
off£t_q_£t
[
idx
];

953 
off£t_i_£t
[0] = 
	`˛ù_8b
(
off£t_i
, -1);

954 
off£t_q_£t
[0] = 
	`˛ù_8b
(
off£t_q
, -1);

955 
off£t_i_£t
[1] = 
	`˛ù_8b
(
off£t_i
, -1);

956 
off£t_q_£t
[1] = 
off£t_q
;

957 
off£t_i_£t
[2] = 
	`˛ù_8b
(
off£t_i
, -1);

958 
off£t_q_£t
[2] = 
	`˛ù_8b
(
off£t_q
, 1);

959 
off£t_i_£t
[3] = 
off£t_i
;

960 
off£t_q_£t
[3] = 
	`˛ù_8b
(
off£t_q
, -1);

961 
off£t_i_£t
[4] = 
off£t_i
;

962 
off£t_q_£t
[4] = 
off£t_q
;

963 
off£t_i_£t
[5] = 
off£t_i
;

964 
off£t_q_£t
[5] = 
	`˛ù_8b
(
off£t_q
, 1);

965 
off£t_i_£t
[6] = 
	`˛ù_8b
(
off£t_i
, 1);

966 
off£t_q_£t
[6] = 
	`˛ù_8b
(
off£t_q
, -1);

967 
off£t_i_£t
[7] = 
	`˛ù_8b
(
off£t_i
, 1);

968 
off£t_q_£t
[7] = 
off£t_q
;

969 
off£t_i_£t
[8] = 
	`˛ù_8b
(
off£t_i
, 1);

970 
off£t_q_£t
[8] = 
	`˛ù_8b
(
off£t_q
, 1);

973 
idx
 = 0;

974 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

975 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

976 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[0]);

978 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

979 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

980 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[0]);

982 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

983 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

986 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

987 
	`waô_ms
(1);

988 } 
vÆ
 == 0);

990 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

991 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

993 
abs_c‹r_mö_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

996 
j
 = 1; j < 9; j++) {

997 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

998 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

999 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[
j
]);

1001 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

1002 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

1003 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[
j
]);

1005 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

1006 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

1009 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

1010 
	`waô_ms
(1);

1011 } 
vÆ
 == 0);

1013 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

1014 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

1016 
abs_c‹r_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

1017 i‡(
abs_c‹r_i16
 < 
abs_c‹r_mö_i16
) {

1018 
abs_c‹r_mö_i16
 = 
abs_c‹r_i16
;

1019 
idx
 = 
j
;

1022 
off£t_i
 = 
off£t_i_£t
[
idx
];

1023 
off£t_q
 = 
off£t_q_£t
[
idx
];

1025 
tx_dc_i16
 = 
abs_c‹r_mö_i16
;

1026 
	`¥ötf
("tx_dc:%d\n", 
tx_dc_i16
);

1029 *
ªj
 = 20 * 
	`log10
(
tx_sig_i16
/(
tx_dc_i16
 + 1));

1030 *
off£t_i_ªs
 = (
öt8_t
)
off£t_i
;

1031 *
off£t_q_ªs
 = (
öt8_t
)
off£t_q
;

1032 
	`¥ötf
("off£t_i:%d off£t_q:%dÑej:%u\n", 
off£t_i
, 
off£t_q
, *
ªj
);

1033 
	}
}

	@libloragw/src/loragw_com.c

21 
	~<°döt.h
>

22 
	~<°dio.h
>

24 
	~"l‹agw_com.h
"

25 
	~"l‹agw_usb.h
"

26 
	~"l‹agw_•i.h
"

27 
	~"l‹agw_aux.h
"

32 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

33 #i‡
DEBUG_COM
 == 1

34 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

35 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

36 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_COM_ERROR
;}

	)

38 
	#DEBUG_MSG
(
°r
)

	)

39 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

40 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_COM_ERROR
;}

	)

52 
lgw_com_ty≥_t
 
	g_lgw_com_ty≥
 = 
LGW_COM_UNKNOWN
;

57 * 
	g_lgw_com_èrgë
 = 
NULL
;

62 
	$lgw_com_›í
(
lgw_com_ty≥_t
 
com_ty≥
, c⁄° * 
com_∑th
) {

63 
com_°©
;

66 
	`CHECK_NULL
(
com_∑th
);

67 i‡((
com_ty≥
 !
LGW_COM_SPI
Ë&& (com_ty≥ !
LGW_COM_USB
)) {

68 
	`DEBUG_MSG
("ERROR: COMMUNICATION INTERFACE TYPE IS NOT SUPPORTED\n");

69  
LGW_COM_ERROR
;

72 i‡(
_lgw_com_èrgë
 !
NULL
) {

73 
	`DEBUG_MSG
("WARNING: CONCENTRATOR WAS ALREADY CONNECTED\n");

74 
	`lgw_com_˛o£
();

78 
_lgw_com_ty≥
 = 
com_ty≥
;

80 
com_ty≥
) {

81 
LGW_COM_SPI
:

82 
	`¥ötf
("Opening SPI communication interface\n");

83 
com_°©
 = 
	`lgw_•i_›í
(
com_∑th
, &
_lgw_com_èrgë
);

85 
LGW_COM_USB
:

86 
	`¥ötf
("Opening USB communication interface\n");

87 
com_°©
 = 
	`lgw_usb_›í
(
com_∑th
, &
_lgw_com_èrgë
);

90 
com_°©
 = 
LGW_COM_ERROR
;

94  
com_°©
;

95 
	}
}

100 
	$lgw_com_˛o£
() {

101 
com_°©
;

103 i‡(
_lgw_com_èrgë
 =
NULL
) {

104 
	`¥ötf
("ERROR: concentrator isÇot connected\n");

108 
_lgw_com_ty≥
) {

109 
LGW_COM_SPI
:

110 
	`¥ötf
("Closing SPI communication interface\n");

111 
com_°©
 = 
	`lgw_•i_˛o£
(
_lgw_com_èrgë
);

113 
LGW_COM_USB
:

114 
	`¥ötf
("Closing USB communication interface\n");

115 
com_°©
 = 
	`lgw_usb_˛o£
(
_lgw_com_èrgë
);

118 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

119 
com_°©
 = 
LGW_COM_ERROR
;

123 
_lgw_com_èrgë
 = 
NULL
;

125  
com_°©
;

126 
	}
}

131 
	$lgw_com_w
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
d©a
) {

132 
com_°©
;

134 
timevÆ
 
tm
;

137 
	`_mós_time_°¨t
(&
tm
);

140 
	`CHECK_NULL
(
_lgw_com_èrgë
);

142 
_lgw_com_ty≥
) {

143 
LGW_COM_SPI
:

144 
com_°©
 = 
	`lgw_•i_w
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
);

146 
LGW_COM_USB
:

147 
com_°©
 = 
	`lgw_usb_w
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
);

150 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

151 
com_°©
 = 
LGW_COM_ERROR
;

156 
	`_mós_time_°›
(5, 
tm
, 
__FUNCTION__
);

158  
com_°©
;

159 
	}
}

164 
	$lgw_com_r
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
) {

165 
com_°©
;

167 
timevÆ
 
tm
;

170 
	`_mós_time_°¨t
(&
tm
);

173 
	`CHECK_NULL
(
_lgw_com_èrgë
);

174 
	`CHECK_NULL
(
d©a
);

176 
_lgw_com_ty≥
) {

177 
LGW_COM_SPI
:

178 
com_°©
 = 
	`lgw_•i_r
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
);

180 
LGW_COM_USB
:

181 
com_°©
 = 
	`lgw_usb_r
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
);

184 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

185 
com_°©
 = 
LGW_COM_ERROR
;

190 
	`_mós_time_°›
(5, 
tm
, 
__FUNCTION__
);

192  
com_°©
;

193 
	}
}

197 
	$lgw_com_rmw
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
offs
, uöt8_à
Àng
, uöt8_à
d©a
) {

198 
com_°©
;

200 
timevÆ
 
tm
;

203 
	`_mós_time_°¨t
(&
tm
);

206 
	`CHECK_NULL
(
_lgw_com_èrgë
);

208 
_lgw_com_ty≥
) {

209 
LGW_COM_SPI
:

210 
com_°©
 = 
	`lgw_•i_rmw
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
offs
, 
Àng
, 
d©a
);

212 
LGW_COM_USB
:

213 
com_°©
 = 
	`lgw_usb_rmw
(
_lgw_com_èrgë
, 
addªss
, 
offs
, 
Àng
, 
d©a
);

216 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

217 
com_°©
 = 
LGW_COM_ERROR
;

222 
	`_mós_time_°›
(5, 
tm
, 
__FUNCTION__
);

224  
com_°©
;

225 
	}
}

230 
	$lgw_com_wb
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, c⁄° uöt8_à*
d©a
, uöt16_à
size
) {

231 
com_°©
;

233 
timevÆ
 
tm
;

236 
	`_mós_time_°¨t
(&
tm
);

239 
	`CHECK_NULL
(
_lgw_com_èrgë
);

240 
	`CHECK_NULL
(
d©a
);

242 
_lgw_com_ty≥
) {

243 
LGW_COM_SPI
:

244 
com_°©
 = 
	`lgw_•i_wb
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
, 
size
);

246 
LGW_COM_USB
:

247 
com_°©
 = 
	`lgw_usb_wb
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
, 
size
);

250 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

251 
com_°©
 = 
LGW_COM_ERROR
;

256 
	`_mós_time_°›
(5, 
tm
, 
__FUNCTION__
);

258  
com_°©
;

259 
	}
}

264 
	$lgw_com_rb
(
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
, uöt16_à
size
) {

265 
com_°©
;

267 
timevÆ
 
tm
;

270 
	`_mós_time_°¨t
(&
tm
);

273 
	`CHECK_NULL
(
_lgw_com_èrgë
);

274 
	`CHECK_NULL
(
d©a
);

276 
_lgw_com_ty≥
) {

277 
LGW_COM_SPI
:

278 
com_°©
 = 
	`lgw_•i_rb
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
, 
size
);

280 
LGW_COM_USB
:

281 
com_°©
 = 
	`lgw_usb_rb
(
_lgw_com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
, 
size
);

284 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

285 
com_°©
 = 
LGW_COM_ERROR
;

290 
	`_mós_time_°›
(5, 
tm
, 
__FUNCTION__
);

292  
com_°©
;

293 
	}
}

297 
	$lgw_com_£t_wrôe_mode
(
lgw_com_wrôe_mode_t
 
wrôe_mode
) {

298 
com_°©
 = 
LGW_COM_SUCCESS
;

300 
_lgw_com_ty≥
) {

301 
LGW_COM_SPI
:

304 
LGW_COM_USB
:

305 
com_°©
 = 
	`lgw_usb_£t_wrôe_mode
(
wrôe_mode
);

308 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

309 
com_°©
 = 
LGW_COM_ERROR
;

313  
com_°©
;

314 
	}
}

318 
	$lgw_com_Êush
() {

319 
com_°©
 = 
LGW_COM_SUCCESS
;

321 
_lgw_com_ty≥
) {

322 
LGW_COM_SPI
:

325 
LGW_COM_USB
:

326 
com_°©
 = 
	`lgw_usb_Êush
(
_lgw_com_èrgë
);

329 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

330 
com_°©
 = 
LGW_COM_ERROR
;

334  
com_°©
;

335 
	}
}

339 
uöt16_t
 
	$lgw_com_chunk_size
() {

340 
_lgw_com_ty≥
) {

341 
LGW_COM_SPI
:

342  
	`lgw_•i_chunk_size
();

343 
LGW_COM_USB
:

344  
	`lgw_usb_chunk_size
();

347 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

350 
	}
}

354 
	$lgw_com_gë_ãm≥øtuª
(* 
ãm≥øtuª
) {

356 
	`CHECK_NULL
(
_lgw_com_èrgë
);

357 
	`CHECK_NULL
(
ãm≥øtuª
);

359 
_lgw_com_ty≥
) {

360 
LGW_COM_SPI
:

361 
	`¥ötf
("ERROR(%s:%d):ÇŸ suµ‹ãd f‹ SPI com\n", 
__FUNCTION__
, 
__LINE__
);

363 
LGW_COM_USB
:

364  
	`lgw_usb_gë_ãm≥øtuª
(
_lgw_com_èrgë
, 
ãm≥øtuª
);

366 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

367  
LGW_COM_ERROR
;

369 
	}
}

373 * 
	$lgw_com_èrgë
() {

374  
_lgw_com_èrgë
;

375 
	}
}

379 
lgw_com_ty≥_t
 
	$lgw_com_ty≥
() {

380  
_lgw_com_ty≥
;

381 
	}
}

	@libloragw/src/loragw_debug.c

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<time.h
>

25 
	~"l‹agw_aux.h
"

26 
	~"l‹agw_ªg.h
"

27 
	~"l‹agw_hÆ.h
"

28 
	~"l‹agw_debug.h
"

30 
	~"töymt32.h
"

44 
töymt32_t
 
	gtöymt
;

55 
	$dbg_öô_øndom
() {

56 
töymt
.
m©1
 = 0x8f7011ee;

57 
töymt
.
m©2
 = 0xfc78ff1f;

58 
töymt
.
tm©
 = 0x3793fdff;

59 
	}
}

63 
	$dbg_log_buf„r_to_fûe
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf„r
, 
uöt16_t
 
size
) {

64 
i
;

65 
°©_time°amp
[24];

66 
time_t
 
t
;

68 
t
 = 
	`time
(
NULL
);

69 
	`°r·ime
(
°©_time°amp
,  sèt_time°amp, "%F %T %Z", 
	`gmtime
(&
t
));

70 
	`Ârötf
(
fûe
, "---------(%s)------------\n", 
°©_time°amp
);

71 
i
 = 0; i < 
size
; i++) {

72 
	`Ârötf
(
fûe
, "%02X ", 
buf„r
[
i
]);

74 
	`Ârötf
(
fûe
, "\n");

76 
	`fÊush
(
fûe
);

77 
	}
}

81 
	$dbg_log_∑ylﬂd_diff_to_fûe
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf„r1
, uöt8_à* 
buf„r2
, 
uöt16_t
 
size
) {

82 
i
, 
j
;

83 
uöt16_t
 
nb_bôs_diff
 = 0;

84 
uöt8_t
 
debug_∑ylﬂd_diff
[255];

86 
	`Ârötf
(
fûe
, "Diff: ");

88 
j
 = 0; j < 
size
; j++) {

89 
debug_∑ylﬂd_diff
[
j
] = 
buf„r1
[j] ^ 
buf„r2
[j];

90 
	`Ârötf
(
fûe
, "%02X ", 
debug_∑ylﬂd_diff
[
j
]);

92 
	`Ârötf
(
fûe
, "\n");

95 
j
 = 0; j < 
size
; j++) {

96 
i
 = 7; i >= 0; i--) {

97 
	`Ârötf
(
fûe
, "%u", 
	`TAKE_N_BITS_FROM
(
debug_∑ylﬂd_diff
[
j
], 
i
, 1));

98 i‡(
	`TAKE_N_BITS_FROM
(
debug_∑ylﬂd_diff
[
j
], 
i
, 1) == 1) {

99 
nb_bôs_diff
 += 1;

102 
	`Ârötf
(
fûe
, " ");

104 
	`Ârötf
(
fûe
, "\n");

105 
	`Ârötf
(
fûe
, "%u bô†Êù≥d\n", 
nb_bôs_diff
);

107 
	`fÊush
(
fûe
);

108 
	}
}

112 
	$dbg_gíî©e_øndom_∑ylﬂd
(
uöt32_t
 
pkt_˙t
, 
uöt8_t
 * 
buf„r_ex≥˘ed
, uöt8_à
size
) {

113 
k
;

116 
	`töymt32_öô
(&
töymt
, ()
pkt_˙t
);

117 
buf„r_ex≥˘ed
[4] = (
uöt8_t
)(
pkt_˙t
 >> 24);

118 
buf„r_ex≥˘ed
[5] = (
uöt8_t
)(
pkt_˙t
 >> 16);

119 
buf„r_ex≥˘ed
[6] = (
uöt8_t
)(
pkt_˙t
 >> 8);

120 
buf„r_ex≥˘ed
[7] = (
uöt8_t
)(
pkt_˙t
 >> 0);

121 
	`töymt32_gíî©e_uöt32
(&
töymt
);

122 
k
 = 8; k < ()
size
; k++) {

123 
buf„r_ex≥˘ed
[
k
] = (
uöt8_t
)
	`töymt32_gíî©e_uöt32
(&
töymt
);

125 
	}
}

129 
	$dbg_check_∑ylﬂd
(
lgw_c⁄f_debug_s
 * 
c⁄ãxt
, 
FILE
 * 
fûe
, 
uöt8_t
 * 
∑ylﬂd_ª˚ived
, uöt8_à
size
, uöt8_à
ªf_∑ylﬂd_idx
, uöt8_à
sf
) {

130 
k
;

131 
uöt32_t
 
debug_∑ylﬂd_˙t
;

134 i‡(
	`memcmp
((*)
∑ylﬂd_ª˚ived
, (*)(
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
∑ylﬂd
), 4) == 0) {

136 
debug_∑ylﬂd_˙t
 = ()(
∑ylﬂd_ª˚ived
[4] << 24) | ()(payload_received[5] << 16) | ()(payload_received[6] << 8) | ()(payload_received[7] << 0);

139 i‡(
debug_∑ylﬂd_˙t
 > (
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
¥ev_˙t
 + 1)) {

140 
	`¥ötf
("ERROR: 0x%08X mis£d %uÖkàbef‹ê%u (SF%u, size:%u)\n", 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
id
, 
debug_∑ylﬂd_˙t
 - c⁄ãxt->ªf_∑ylﬂd[ªf_∑ylﬂd_idx].
¥ev_˙t
 - 1, debug_∑ylﬂd_˙t, 
sf
, 
size
);

141 i‡(
fûe
 !
NULL
) {

142 
	`Ârötf
(
fûe
, "ERROR: 0x%08X mis£d %uÖkàbef‹ê%u (SF%u, size:%u)\n", 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
id
, 
debug_∑ylﬂd_˙t
 - c⁄ãxt->ªf_∑ylﬂd[ªf_∑ylﬂd_idx].
¥ev_˙t
 - 1, debug_∑ylﬂd_˙t, 
sf
, 
size
);

143 
	`fÊush
(
fûe
);

145 } i‡(
debug_∑ylﬂd_˙t
 < 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
¥ev_˙t
) {

146 i‡(
fûe
 !
NULL
) {

147 
	`Ârötf
(
fûe
, "INFO: 0x%08X gŸ missögÖkà%u (SF%u, size:%uË?\n", 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
id
, 
debug_∑ylﬂd_˙t
, 
sf
, 
size
);

148 
	`fÊush
(
fûe
);

152 i‡(
fûe
 !
NULL
) {

153 
	`Ârötf
(
fûe
, "0x%08X %u (SF%u, size:%u)\n", 
c⁄ãxt
.
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
id
, 
debug_∑ylﬂd_˙t
, 
sf
, 
size
);

157 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
¥ev_˙t
 = 
debug_∑ylﬂd_˙t
;

160 
	`dbg_gíî©e_øndom_∑ylﬂd
(
debug_∑ylﬂd_˙t
, 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
∑ylﬂd
, 
size
);

163 i‡(
	`memcmp
((*)
∑ylﬂd_ª˚ived
, (*)(
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
∑ylﬂd
), 
size
) != 0) {

164 i‡(
fûe
 !
NULL
) {

165 
	`Ârötf
(
fûe
, "RECEIVED:");

166 
k
 = 0; k < ()
size
; k++) {

167 
	`Ârötf
(
fûe
, "%02X ", 
∑ylﬂd_ª˚ived
[
k
]);

169 
	`Ârötf
(
fûe
, "\n");

170 
	`Ârötf
(
fûe
, "EXPECTED:");

171 
k
 = 0; k < ()
size
; k++) {

172 
	`Ârötf
(
fûe
, "%02X ", 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
∑ylﬂd
[
k
]);

174 
	`Ârötf
(
fûe
, "\n");

183 
	}
}

	@libloragw/src/loragw_gps.c

21 
	#_GNU_SOURCE


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

28 
	~<time.h
>

29 
	~<f˙é.h
>

30 
	~<ãrmios.h
>

31 
	~<m©h.h
>

33 
	~"l‹agw_gps.h
"

38 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

39 #i‡
DEBUG_GPS
 == 1

40 
	#DEBUG_MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgs)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

42 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dîr
,"%x.",c[a]);Ârötf(°dîr,"íd\n")

	)

43 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_GPS_ERROR
;}

	)

45 
	#DEBUG_MSG
(
¨gs
...)

	)

46 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

47 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

48 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_GPS_ERROR
;}

	)

50 
	#TRACE
(Ë
	`Ârötf
(
°dîr
, "@ %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

55 
	#TS_CPS
 1E6

	)

56 
	#PLUS_10PPM
 1.00001

	)

57 
	#MINUS_10PPM
 0.99999

	)

58 
	#DEFAULT_BAUDRATE
 
B9600


	)

60 
	#UBX_MSG_NAVTIMEGPS_LEN
 16

	)

67 
	ggps_yó
 = 0;

68 
	ggps_m⁄
 = 0;

69 
	ggps_day
 = 0;

70 
	ggps_hou
 = 0;

71 
	ggps_mö
 = 0;

72 
	ggps_£c
 = 0;

73 
	ggps_‰a
 = 0.0;

74 
boﬁ
 
	ggps_time_ok
 = 
Ál£
;

75 
öt16_t
 
	ggps_wìk
 = 0;

76 
uöt32_t
 
	ggps_iTOW
 = 0;

77 
öt32_t
 
	ggps_fTOW
 = 0;

79 
	ggps_dœ
 = 0;

80 
	ggps_mœ
 = 0.0;

81 
	ggps_ﬁa
 = 0;

82 
	ggps_dlo
 = 0;

83 
	ggps_mlo
 = 0.0;

84 
	ggps_ﬁo
 = 0;

85 
	ggps_Æt
 = 0;

86 
boﬁ
 
	ggps_pos_ok
 = 
Ál£
;

88 
	ggps_mod
 = 'N';

89 
	ggps_ßt
 = 0;

91 
ãrmios
 
	gây›t_ª°‹e
;

96 
nmó_checksum
(c⁄° *
nmó_°rög
, 
buff_size
, *
checksum
);

98 
nibbÀ_to_hexch¨
(
uöt8_t
 
a
);

100 
boﬁ
 
vÆid©e_nmó_checksum
(c⁄° *
£rül_buff
, 
buff_size
);

102 
boﬁ
 
m©ch_œbñ
(c⁄° *
s
, *
œbñ
, 
size
, 
wûdˇrd
);

104 
°r_ch›
(*
s
, 
buff_size
, 
£∑øt‹
, *
idx_¨y
, 
max_idx
);

116 
	$nmó_checksum
(c⁄° *
nmó_°rög
, 
buff_size
, *
checksum
) {

117 
i
 = 0;

118 
uöt8_t
 
check_num
 = 0;

121 i‡((
nmó_°rög
 =
NULL
Ë|| (
checksum
 =NULLË|| (
buff_size
 <= 1)) {

122 
	`DEBUG_MSG
("InvalidÖarameters forÇmea_checksum\n");

127 i‡(
nmó_°rög
[
i
] == '$') {

128 
i
 += 1;

132 
nmó_°rög
[
i
] != '*') {

133 
check_num
 ^
nmó_°rög
[
i
];

134 
i
 += 1;

135 i‡(
i
 >
buff_size
) {

136 
	`DEBUG_MSG
("MaximumÜengthÑeached forÇmea_checksum\n");

142 
checksum
[0] = 
	`nibbÀ_to_hexch¨
(
check_num
 / 16);

143 
checksum
[1] = 
	`nibbÀ_to_hexch¨
(
check_num
 % 16);

145  
i
 + 1;

146 
	}
}

150 
	$nibbÀ_to_hexch¨
(
uöt8_t
 
a
) {

151 i‡(
a
 < 10) {

152  '0' + 
a
;

153 } i‡(
a
 < 16) {

154  'A' + (
a
-10);

158 
	}
}

167 
boﬁ
 
	$vÆid©e_nmó_checksum
(c⁄° *
£rül_buff
, 
buff_size
) {

168 
checksum_ödex
;

169 
checksum
[2];

171 
checksum_ödex
 = 
	`nmó_checksum
(
£rül_buff
, 
buff_size
, 
checksum
);

174 i‡(
checksum_ödex
 < 0) {

175 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO PARSE NMEA SENTENCE\n");

176  
Ál£
;

180 i‡(
checksum_ödex
 >(
buff_size
 - 2)) {

181 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO READ NMEA SENTENCE CHECKSUM\n");

182  
Ál£
;

186 i‡((
£rül_buff
[
checksum_ödex
] =
checksum
[0]) && (serial_buff[checksum_index+1] == checksum[1])) {

187  
åue
;

189 
	`DEBUG_MSG
("ERROR: NMEA CHECKSUM %c%¯DOESN'T MATCH VERIFICATION CHECKSUM %c%c\n", 
£rül_buff
[
checksum_ödex
], sîül_buff[checksum_ödex+1], 
checksum
[0], checksum[1]);

190  
Ál£
;

192 
	}
}

200 
boﬁ
 
	$m©ch_œbñ
(c⁄° *
s
, *
œbñ
, 
size
, 
wûdˇrd
) {

201 
i
;

203 
i
=0; i < 
size
; i++) {

204 i‡(
œbñ
[
i
] =
wûdˇrd
) ;

205 i‡(
œbñ
[
i
] !
s
[i]Ë 
Ál£
;

207  
åue
;

208 
	}
}

221 
	$°r_ch›
(*
s
, 
buff_size
, 
£∑øt‹
, *
idx_¨y
, 
max_idx
) {

222 
i
 = 0;

223 
j
 = 0;

225 i‡((
s
 =
NULL
Ë|| (
buff_size
 < 0Ë|| (
£∑øt‹
 =0Ë|| (
idx_¨y
 =NULLË|| (
max_idx
 < 0)) {

229 i‡((
buff_size
 =0Ë|| (
max_idx
 == 0)) {

233 
s
[
buff_size
 - 1] = 0;

234 
idx_¨y
[
j
] = 0;

235 
j
 += 1;

237 
s
[
i
] != 0) {

238 i‡(
s
[
i
] =
£∑øt‹
) {

239 
s
[
i
] = 0;

240 i‡(
j
 >
max_idx
) {

241  
j
;

243 
idx_¨y
[
j
] = 
i
+1;

244 ++
j
;

246 ++
i
;

248  
j
;

249 
	}
}

254 
	$lgw_gps_íabÀ
(*
ây_∑th
, *
gps_Ámûy
, 
•ìd_t
 
èrgë_bøã
, *
fd_±r
) {

255 
i
;

256 
ãrmios
 
ây›t
;

257 
gps_ây_dev
;

258 
uöt8_t
 
ubx_cmd_timegps
[
UBX_MSG_NAVTIMEGPS_LEN
] = {

264 
ssize_t
 
num_wrôãn
;

267 
	`CHECK_NULL
(
ây_∑th
);

268 
	`CHECK_NULL
(
fd_±r
);

271 
gps_ây_dev
 = 
	`›í
(
ây_∑th
, 
O_RDWR
 | 
O_NOCTTY
);

272 i‡(
gps_ây_dev
 <= 0) {

273 
	`DEBUG_MSG
("ERROR: TTY PORT FAIL TO OPEN, CHECK PATH AND ACCESS RIGHTS\n");

274  
LGW_GPS_ERROR
;

276 *
fd_±r
 = 
gps_ây_dev
;

279 i‡(
gps_Ámûy
 =
NULL
) {

280 
	`DEBUG_MSG
("WARNING:Åhis version of GPS module mayÇot be supported\n");

281 } i‡(
	`°∫cmp
(
gps_Ámûy
, "ubx7", 4) != 0) {

287 
	`DEBUG_MSG
("WARNING:Åhis version of GPS module mayÇot be supported\n");

291 i‡(
èrgë_bøã
 != 0) {

292 
	`DEBUG_MSG
("WARNING:Åarget_brateÖarameter ignored forÇow\n");

296 
i
 = 
	`tcgë©å
(
gps_ây_dev
, &
ây›t
);

297 i‡(
i
 != 0) {

298 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO GET TTY PORT CONFIGURATION\n");

299  
LGW_GPS_ERROR
;

303 
	`mem˝y
(&
ây›t_ª°‹e
, &
ây›t
, Åtyopt);

306 
	`cf£ti•ìd
(&
ây›t
, 
DEFAULT_BAUDRATE
);

307 
	`cf£to•ìd
(&
ây›t
, 
DEFAULT_BAUDRATE
);

317 
ây›t
.
c_cÊag
 |
CLOCAL
;

318 
ây›t
.
c_cÊag
 |
CREAD
;

319 
ây›t
.
c_cÊag
 |
CS8
;

320 
ây›t
.
c_cÊag
 &~
PARENB
;

321 
ây›t
.
c_cÊag
 &~
CSTOPB
;

323 
ây›t
.
c_iÊag
 |
IGNPAR
;

324 
ây›t
.
c_iÊag
 &~
ICRNL
;

325 
ây›t
.
c_iÊag
 &~
IGNCR
;

326 
ây›t
.
c_iÊag
 &~
IXON
;

327 
ây›t
.
c_iÊag
 &~
IXOFF
;

329 
ây›t
.
c_oÊag
 = 0;

331 
ây›t
.
c_lÊag
 &~
ICANON
;

332 
ây›t
.
c_lÊag
 &~
ISIG
;

333 
ây›t
.
c_lÊag
 &~
IEXTEN
;

334 
ây›t
.
c_lÊag
 &~
ECHO
;

335 
ây›t
.
c_lÊag
 &~
ECHOE
;

336 
ây›t
.
c_lÊag
 &~
ECHOK
;

340 
ây›t
.
c_cc
[
VMIN
] = 
LGW_GPS_MIN_MSG_SIZE
;

341 
ây›t
.
c_cc
[
VTIME
] = 0;

344 
i
 = 
	`tc£èâr
(
gps_ây_dev
, 
TCSANOW
, &
ây›t
);

345 i‡(
i
 != 0){

346 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO UPDATE TTY PORT CONFIGURATION\n");

347  
LGW_GPS_ERROR
;

349 
	`tcÊush
(
gps_ây_dev
, 
TCIOFLUSH
);

353 
num_wrôãn
 = 
	`wrôe
 (
gps_ây_dev
, 
ubx_cmd_timegps
, 
UBX_MSG_NAVTIMEGPS_LEN
);

354 i‡(
num_wrôãn
 !
UBX_MSG_NAVTIMEGPS_LEN
) {

355 
	`DEBUG_MSG
("ERROR: FaûedÅÿwrôê⁄ sîü»p‹à(wrôãn=%d)\n", (Ë
num_wrôãn
);

359 
	`tz£t
();

362 
gps_time_ok
 = 
Ál£
;

363 
gps_pos_ok
 = 
Ál£
;

364 
gps_mod
 = 'N';

366  
LGW_GPS_SUCCESS
;

367 
	}
}

371 
	$lgw_gps_dißbÀ
(
fd
) {

372 
i
;

375 
i
 = 
	`tc£èâr
(
fd
, 
TCSANOW
, &
ây›t_ª°‹e
);

376 i‡(
i
 != 0){

377 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO RESTORE TTY PORT CONFIGURATION - %s\n", 
	`°ªº‹
(
î∫o
));

378  
LGW_GPS_ERROR
;

380 
	`tcÊush
(
fd
, 
TCIOFLUSH
);

382 
i
 = 
	`˛o£
(
fd
);

383 i‡(
i
 != 0) {

384 
	`DEBUG_PRINTF
("ERROR: TTY PORT FAIL TO CLOSE - %s\n", 
	`°ªº‹
(
î∫o
));

385  
LGW_GPS_ERROR
;

388  
LGW_GPS_SUCCESS
;

389 
	}
}

393 
gps_msg
 
	$lgw_∑r£_ubx
(c⁄° *
£rül_buff
, 
size_t
 
buff_size
, size_à*
msg_size
) {

394 
boﬁ
 
vÆid
 = 0;

395 
∑ylﬂd_Àngth
;

396 
uöt8_t
 
ck_a
, 
ck_b
;

397 
uöt8_t
 
ck_a_rcv
, 
ck_b_rcv
;

398 
i
;

400 *
msg_size
 = 0;

403 i‡(
£rül_buff
 =
NULL
) {

404  
IGNORED
;

406 i‡(
buff_size
 < 8) {

407 
	`DEBUG_MSG
("ERROR: TOO SHORT TO BE A VALID UBX MESSAGE\n");

408  
IGNORED
;

412 
	`DEBUG_MSG
("Note:Öarsing UBX frame> ");

413 
i
=0; i<
buff_size
; i++) {

414 
	`DEBUG_MSG
("%02x ", 
£rül_buff
[
i
]);

416 
	`DEBUG_MSG
("\n");

419 i‡((
£rül_buff
[0] == ()0xB5) && (serial_buff[1] == ()0x62)) {

422 
∑ylﬂd_Àngth
 = (
uöt8_t
)
£rül_buff
[4];

423 
∑ylﬂd_Àngth
 |(
uöt8_t
)
£rül_buff
[5] << 8;

424 *
msg_size
 = 6 + 
∑ylﬂd_Àngth
 + 2;

427 if(*
msg_size
 <
buff_size
) {

429 
ck_a_rcv
 = 
£rül_buff
[*
msg_size
-2];

430 
ck_b_rcv
 = 
£rül_buff
[*
msg_size
-1];

432 
ck_a
 = 0; 
ck_b
 = 0;

433 
i
=0; i<(4 + 
∑ylﬂd_Àngth
); i++) {

434 
ck_a
 = ck_®+ 
£rül_buff
[
i
+2];

435 
ck_b
 = ck_b + 
ck_a
;

439 i‡((
ck_a
 =
ck_a_rcv
Ë&& (
ck_b
 =
ck_b_rcv
)) {

441 i‡((
£rül_buff
[2] == 0x01) && (serial_buff[3] == 0x20)) {

443 
vÆid
 = 
£rül_buff
[17] & 0x3;

444 i‡(
vÆid
) {

447 
gps_iTOW
 = (
uöt8_t
)
£rül_buff
[6];

448 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[7] << 8;

449 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[8] << 16;

450 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[9] << 24;

452 
gps_fTOW
 = (
uöt8_t
)
£rül_buff
[10];

453 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[11] << 8;

454 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[12] << 16;

455 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[13] << 24;

457 
gps_wìk
 = (
uöt8_t
)
£rül_buff
[14];

458 
gps_wìk
 |(
uöt8_t
)
£rül_buff
[15] << 8;

460 
gps_time_ok
 = 
åue
;

464 
ubx_gps_hou
 = 0;

465 
ubx_gps_mö
 = 0;

466 
ubx_gps_£c
 = 0;

469 
ubx_gps_£c
 = (
gps_iTOW
 / 1000) % 60;

470 
ubx_gps_mö
 = (
gps_iTOW
 / 1000 / 60) % 60;

471 
ubx_gps_hou
 = (
gps_iTOW
 / 1000 / 60 / 60) % 24;

472 
	`¥ötf
(" GPSÅimê%02d:%02d:%02d\n", 
ubx_gps_hou
, 
ubx_gps_mö
, 
ubx_gps_£c
);

476 
gps_time_ok
 = 
Ál£
;

479  
UBX_NAV_TIMEGPS
;

480 } i‡((
£rül_buff
[2] == 0x05) && (serial_buff[3] == 0x00)) {

481 
	`DEBUG_MSG
("NOTE: UBX ACK-NAKÑeceived\n");

482  
IGNORED
;

483 } i‡((
£rül_buff
[2] == 0x05) && (serial_buff[3] == 0x01)) {

484 
	`DEBUG_MSG
("NOTE: UBX ACK-ACKÑeceived\n");

485  
IGNORED
;

487 
	`DEBUG_MSG
("ERROR: UBX mesßgêi†nŸ suµ‹ãd (%02x %02x)\n", 
£rül_buff
[2], serial_buff[3]);

488  
IGNORED
;

491 
	`DEBUG_MSG
("ERROR: UBX message is corrupted, checksum failed\n");

492  
INVALID
;

495 
	`DEBUG_MSG
("ERROR: UBX message incomplete\n");

496  
INCOMPLETE
;

500  
IGNORED
;

502 
	}
}

506 
gps_msg
 
	$lgw_∑r£_nmó
(c⁄° *
£rül_buff
, 
buff_size
) {

507 
i
, 
j
, 
k
;

508 
°r_ödex
[30];

509 
nb_fõlds
;

510 
∑r£r_buf
[256];

513 i‡(
£rül_buff
 =
NULL
) {

514  
UNKNOWN
;

517 if(
buff_size
 > ()((
∑r£r_buf
) - 1)) {

518 
	`DEBUG_MSG
("Note: input stringÅo big forÖarsing\n");

519  
INVALID
;

523 i‡(
buff_size
 < 8) {

524 
	`DEBUG_MSG
("ERROR: TOO SHORT TO BE A VALID NMEA SENTENCE\n");

525  
UNKNOWN
;

526 } i‡(!
	`vÆid©e_nmó_checksum
(
£rül_buff
, 
buff_size
)) {

527 
	`DEBUG_MSG
("Warning: invalid NMEA sentence (bad checksum)\n");

528  
INVALID
;

529 } i‡(
	`m©ch_œbñ
(
£rül_buff
, "$G?RMC", 6, '?')) {

535 
	`mem˝y
(
∑r£r_buf
, 
£rül_buff
, 
buff_size
);

536 
∑r£r_buf
[
buff_size
] = '\0';

537 
nb_fõlds
 = 
	`°r_ch›
(
∑r£r_buf
, 
buff_size
, ',', 
°r_ödex
, 
	`ARRAY_SIZE
(str_index));

538 i‡(
nb_fõlds
 != 13) {

539 
	`DEBUG_MSG
("Warning: invalid RMC sentence (number of fields)\n");

540  
IGNORED
;

543 
gps_mod
 = *(
∑r£r_buf
 + 
°r_ödex
[12]);

544 i‡((
gps_mod
 != 'N') && (gps_mod != 'A') && (gps_mod != 'D')) {

545 
gps_mod
 = 'N';

548 
i
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[1], "%2hd%2hd%2hd%4f", &
gps_hou
, &
gps_mö
, &
gps_£c
, &
gps_‰a
);

549 
j
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[9], "%2hd%2hd%2hd", &
gps_day
, &
gps_m⁄
, &
gps_yó
);

550 i‡((
i
 =4Ë&& (
j
 == 3)) {

551 i‡((
gps_mod
 == 'A') || (gps_mod == 'D')) {

552 
gps_time_ok
 = 
åue
;

553 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚, GPSÜocked, d©e: 20%02d-%02d-%02dT%02d:%02d:%06.3fZ\n", 
gps_yó
, 
gps_m⁄
, 
gps_day
, 
gps_hou
, 
gps_mö
, 
gps_‰a
 + ()
gps_£c
);

555 
gps_time_ok
 = 
Ál£
;

556 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚,ÇÿßãŒôêfix,É°im©ed d©e: 20%02d-%02d-%02dT%02d:%02d:%06.3fZ\n", 
gps_yó
, 
gps_m⁄
, 
gps_day
, 
gps_hou
, 
gps_mö
, 
gps_‰a
 + ()
gps_£c
);

560 
gps_time_ok
 = 
Ál£
;

561 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚, modê%c,Çÿd©e\n", 
gps_mod
);

563  
NMEA_RMC
;

564 } i‡(
	`m©ch_œbñ
(
£rül_buff
, "$G?GGA", 6, '?')) {

569 
	`mem˝y
(
∑r£r_buf
, 
£rül_buff
, 
buff_size
);

570 
∑r£r_buf
[
buff_size
] = '\0';

571 
nb_fõlds
 = 
	`°r_ch›
(
∑r£r_buf
, 
buff_size
, ',', 
°r_ödex
, 
	`ARRAY_SIZE
(str_index));

572 i‡(
nb_fõlds
 != 15) {

573 
	`DEBUG_MSG
("Warning: invalid GGA sentence (number of fields)\n");

574  
IGNORED
;

577 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[7], "%hd", &
gps_ßt
);

579 
i
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[2], "%2hd%10lf", &
gps_dœ
, &
gps_mœ
);

580 
gps_ﬁa
 = *(
∑r£r_buf
 + 
°r_ödex
[3]);

581 
j
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[4], "%3hd%10lf", &
gps_dlo
, &
gps_mlo
);

582 
gps_ﬁo
 = *(
∑r£r_buf
 + 
°r_ödex
[5]);

583 
k
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[9], "%hd", &
gps_Æt
);

584 i‡((
i
 =2Ë&& (
j
 =2Ë&& (
k
 =1Ë&& ((
gps_ﬁa
=='N')||(gps_ﬁa=='S')Ë&& ((
gps_ﬁo
=='E')||(gps_olo=='W'))) {

585 
gps_pos_ok
 = 
åue
;

586 
	`DEBUG_MSG
("NŸe: VÆid GGA síãn˚, %d s©,Ü© %02ddeg %06.3fmö %c,Ü⁄ %03ddeg%06.3fmö %c,á… %d\n", 
gps_ßt
, 
gps_dœ
, 
gps_mœ
, 
gps_ﬁa
, 
gps_dlo
, 
gps_mlo
, 
gps_ﬁo
, 
gps_Æt
);

589 
gps_pos_ok
 = 
Ál£
;

590 
	`DEBUG_MSG
("NŸe: VÆid GGA síãn˚, %d s©,Çÿco‹dö©es\n", 
gps_ßt
);

592  
NMEA_GGA
;

594 
	`DEBUG_MSG
("Note: ignored NMEA sentence\n");

595  
IGNORED
;

597 
	}
}

601 
	$lgw_gps_gë
(
time•ec
 *
utc
, time•e¯*
gps_time
, 
co‹d_s
 *
loc
, co‹d_†*
îr
) {

602 
tm
 
x
;

603 
time_t
 
y
;

604 
öç¨t
, 
‰a˘∑π
;

606 i‡(
utc
 !
NULL
) {

607 i‡(!
gps_time_ok
) {

608 
	`DEBUG_MSG
("ERROR: NO VALID TIME TO RETURN\n");

609  
LGW_GPS_ERROR
;

611 
	`mem£t
(&
x
, 0, (x));

612 i‡(
gps_yó
 < 100) {

613 
x
.
tm_yór
 = 
gps_yó
 + 100;

615 
x
.
tm_yór
 = 
gps_yó
 - 1900;

617 
x
.
tm_m⁄
 = 
gps_m⁄
 - 1;

618 
x
.
tm_mday
 = 
gps_day
;

619 
x
.
tm_hour
 = 
gps_hou
;

620 
x
.
tm_mö
 = 
gps_mö
;

621 
x
.
tm_£c
 = 
gps_£c
;

622 
y
 = 
	`mktime
(&
x
Ë- 
timez⁄e
;

623 i‡(
y
 =(
time_t
)(-1)) {

624 
	`DEBUG_MSG
("ERROR: FAILED TO CONVERT BROKEN-DOWN TIME\n");

625  
LGW_GPS_ERROR
;

627 
utc
->
tv_£c
 = 
y
;

628 
utc
->
tv_n£c
 = (
öt32_t
)(
gps_‰a
 * 1e9);

630 i‡(
gps_time
 !
NULL
) {

631 i‡(!
gps_time_ok
) {

632 
	`DEBUG_MSG
("ERROR: NO VALID TIME TO RETURN\n");

633  
LGW_GPS_ERROR
;

635 
‰a˘∑π
 = 
	`modf
((()
gps_iTOW
 / 1E3Ë+ (()
gps_fTOW
 / 1E9), &
öç¨t
);

637 
gps_time
->
tv_£c
 = (
time_t
)
öç¨t
;

639 
gps_time
->
tv_£c
 +(
time_t
)
gps_wìk
 * 604800;

641 
gps_time
->
tv_n£c
 = ()(
‰a˘∑π
 * 1E9);

643 i‡(
loc
 !
NULL
) {

644 i‡(!
gps_pos_ok
) {

645 
	`DEBUG_MSG
("ERROR: NO VALID POSITION TO RETURN\n");

646  
LGW_GPS_ERROR
;

648 
loc
->
œt
 = (()
gps_dœ
 + (
gps_mœ
/60.0)Ë* ((
gps_ﬁa
 == 'N')?1.0:-1.0);

649 
loc
->
l⁄
 = (()
gps_dlo
 + (
gps_mlo
/60.0)Ë* ((
gps_ﬁo
 == 'E')?1.0:-1.0);

650 
loc
->
Æt
 = 
gps_Æt
;

652 i‡(
îr
 !
NULL
) {

653 
	`DEBUG_MSG
("Warning:ÜocalizationÉrrorÖrocessingÇot implemented yet\n");

654 
îr
->
œt
 = 0.0;

655 
îr
->
l⁄
 = 0.0;

656 
îr
->
Æt
 = 0;

659  
LGW_GPS_SUCCESS
;

660 
	}
}

664 
	$lgw_gps_sync
(
åef
 *
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 
utc
, time•e¯
gps_time
) {

665 
˙t_diff
;

666 
utc_diff
;

667 
¶›e
;

669 
boﬁ
 
abî_n0
;

670 
boﬁ
 
abî_mö1
 = 
Ál£
;

671 
boﬁ
 
abî_mö2
 = 
Ál£
;

673 
	`CHECK_NULL
(
ªf
);

677 
˙t_diff
 = ()(
cou¡_us
 - 
ªf
->cou¡_usË/ ()(
TS_CPS
);

678 
utc_diff
 = ()(
utc
.
tv_£c
 - (
ªf
->utc).tv_£cË+ (1E-9 * ()(utc.
tv_n£c
 - (ref->utc).tv_nsec));

681 i‡(
utc_diff
 != 0) {

682 
¶›e
 = 
˙t_diff
/
utc_diff
;

683 i‡((
¶›e
 > 
PLUS_10PPM
Ë|| (¶›ê< 
MINUS_10PPM
)) {

684 
	`DEBUG_MSG
("Warning: correctionÑangeÉxceeded\n");

685 
abî_n0
 = 
åue
;

687 
abî_n0
 = 
Ál£
;

690 
	`DEBUG_MSG
("Warning:áberrant UTC value for synchronization\n");

691 
abî_n0
 = 
åue
;

695 i‡(
abî_n0
 =
Ál£
) {

697 
ªf
->
sy°ime
 = 
	`time
(
NULL
);

698 
ªf
->
cou¡_us
 = count_us;

699 
ªf
->
utc
.
tv_£c
 = utc.tv_sec;

700 
ªf
->
utc
.
tv_n£c
 = utc.tv_nsec;

701 
ªf
->
gps
.
tv_£c
 = 
gps_time
.tv_sec;

702 
ªf
->
gps
.
tv_n£c
 = 
gps_time
.tv_nsec;

703 
ªf
->
xèl_îr
 = 
¶›e
;

704 
abî_mö2
 = 
abî_mö1
;

705 
abî_mö1
 = 
abî_n0
;

706  
LGW_GPS_SUCCESS
;

707 } i‡(
abî_n0
 && 
abî_mö1
 && 
abî_mö2
) {

709 
ªf
->
sy°ime
 = 
	`time
(
NULL
);

710 
ªf
->
cou¡_us
 = count_us;

711 
ªf
->
utc
.
tv_£c
 = utc.tv_sec;

712 
ªf
->
utc
.
tv_n£c
 = utc.tv_nsec;

713 
ªf
->
gps
.
tv_£c
 = 
gps_time
.tv_sec;

714 
ªf
->
gps
.
tv_n£c
 = 
gps_time
.tv_nsec;

716 i‡((
ªf
->
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf->xèl_î∏< 
MINUS_10PPM
)) {

717 
ªf
->
xèl_îr
 = 1.0;

719 
	`DEBUG_MSG
("Warning: 3 successiveáberrant syncáttempts, syncÑeset\n");

720 
abî_mö2
 = 
abî_mö1
;

721 
abî_mö1
 = 
abî_n0
;

722  
LGW_GPS_SUCCESS
;

725 
abî_mö2
 = 
abî_mö1
;

726 
abî_mö1
 = 
abî_n0
;

727  
LGW_GPS_ERROR
;

730  
LGW_GPS_SUCCESS
;

731 
	}
}

735 
	$lgw_˙t2utc
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 *
utc
) {

736 
dñè_£c
;

737 
öç¨t
, 
‰a˘∑π
;

738 
tmp
;

740 
	`CHECK_NULL
(
utc
);

741 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

742 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR CNT -> UTC CONVERSION\n");

743  
LGW_GPS_ERROR
;

747 
dñè_£c
 = ()(
cou¡_us
 - 
ªf
.cou¡_usË/ (
TS_CPS
 *Ñef.
xèl_îr
);

750 
‰a˘∑π
 = 
	`modf
 (
dñè_£c
 , &
öç¨t
);

751 
tmp
 = 
ªf
.
utc
.
tv_n£c
 + ()(
‰a˘∑π
 * 1E9);

752 i‡(
tmp
 < ()1E9) {

753 
utc
->
tv_£c
 = 
ªf
.utc.tv_£¯+ (
time_t
)
öç¨t
;

754 
utc
->
tv_n£c
 = 
tmp
;

756 
utc
->
tv_£c
 = 
ªf
.utc.tv_£¯+ (
time_t
)
öç¨t
 + 1;

757 
utc
->
tv_n£c
 = 
tmp
 - ()1E9;

760  
LGW_GPS_SUCCESS
;

761 
	}
}

765 
	$lgw_utc2˙t
(
åef
 
ªf
, 
time•ec
 
utc
, 
uöt32_t
 *
cou¡_us
) {

766 
dñè_£c
;

768 
	`CHECK_NULL
(
cou¡_us
);

769 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

770 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR UTC -> CNT CONVERSION\n");

771  
LGW_GPS_ERROR
;

775 
dñè_£c
 = ()(
utc
.
tv_£c
 - 
ªf
.utc.tv_sec);

776 
dñè_£c
 +1E-9 * ()(
utc
.
tv_n£c
 - 
ªf
.utc.tv_nsec);

779 *
cou¡_us
 = 
ªf
.cou¡_u†+ (
uöt32_t
)(
dñè_£c
 * 
TS_CPS
 *Ñef.
xèl_îr
);

781  
LGW_GPS_SUCCESS
;

782 
	}
}

786 
	$lgw_˙t2gps
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 *
gps_time
) {

787 
dñè_£c
;

788 
öç¨t
, 
‰a˘∑π
;

789 
tmp
;

791 
	`CHECK_NULL
(
gps_time
);

792 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

793 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR CNT -> GPS CONVERSION\n");

794  
LGW_GPS_ERROR
;

798 
dñè_£c
 = ()(
cou¡_us
 - 
ªf
.cou¡_usË/ (
TS_CPS
 *Ñef.
xèl_îr
);

801 
‰a˘∑π
 = 
	`modf
 (
dñè_£c
 , &
öç¨t
);

802 
tmp
 = 
ªf
.
gps
.
tv_n£c
 + ()(
‰a˘∑π
 * 1E9);

803 i‡(
tmp
 < ()1E9) {

804 
gps_time
->
tv_£c
 = 
ªf
.
gps
.tv_£¯+ (
time_t
)
öç¨t
;

805 
gps_time
->
tv_n£c
 = 
tmp
;

807 
gps_time
->
tv_£c
 = 
ªf
.
gps
.tv_£¯+ (
time_t
)
öç¨t
 + 1;

808 
gps_time
->
tv_n£c
 = 
tmp
 - ()1E9;

811  
LGW_GPS_SUCCESS
;

812 
	}
}

816 
	$lgw_gps2˙t
(
åef
 
ªf
, 
time•ec
 
gps_time
, 
uöt32_t
 *
cou¡_us
) {

817 
dñè_£c
;

819 
	`CHECK_NULL
(
cou¡_us
);

820 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

821 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR GPS -> CNT CONVERSION\n");

822  
LGW_GPS_ERROR
;

826 
dñè_£c
 = ()(
gps_time
.
tv_£c
 - 
ªf
.
gps
.tv_sec);

827 
dñè_£c
 +1E-9 * ()(
gps_time
.
tv_n£c
 - 
ªf
.
gps
.tv_nsec);

830 *
cou¡_us
 = 
ªf
.cou¡_u†+ (
uöt32_t
)(
dñè_£c
 * 
TS_CPS
 *Ñef.
xèl_îr
);

832  
LGW_GPS_SUCCESS
;

833 
	}
}

	@libloragw/src/loragw_hal.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	#_GNU_SOURCE


	)

27 
	~<°dlib.h
>

29 
	~<°döt.h
>

30 
	~<°dboﬁ.h
>

31 
	~<°dio.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~<öây≥s.h
>

36 
	~"l‹agw_ªg.h
"

37 
	~"l‹agw_hÆ.h
"

38 
	~"l‹agw_aux.h
"

39 
	~"l‹agw_com.h
"

40 
	~"l‹agw_i2c.h
"

41 
	~"l‹agw_lbt.h
"

42 
	~"l‹agw_sx1250.h
"

43 
	~"l‹agw_sx125x.h
"

44 
	~"l‹agw_sx1261.h
"

45 
	~"l‹agw_sx1302.h
"

46 
	~"l‹agw_sx1302_time°amp.h
"

47 
	~"l‹agw_°ts751.h
"

48 
	~"l‹agw_ad5338r.h
"

49 
	~"l‹agw_debug.h
"

54 
	#HAL_DEBUG_FILE_LOG
 0

	)

59 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

60 #i‡
DEBUG_HAL
 == 1

61 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

62 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

63 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dout
,"%x.",c[a]);Ârötf(°dout,"íd\n")

	)

64 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_HAL_ERROR
;}

	)

66 
	#DEBUG_MSG
(
°r
)

	)

67 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

68 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

69 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_HAL_ERROR
;}

	)

72 
	#TRACE
(Ë
	`Ârötf
(
°dîr
, "@ %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

74 
	#CONTEXT_STARTED
 
lgw_c⁄ãxt
.
is_°¨ãd


	)

75 
	#CONTEXT_COM_TYPE
 
lgw_c⁄ãxt
.
bﬂrd_cfg
.
com_ty≥


	)

76 
	#CONTEXT_COM_PATH
 
lgw_c⁄ãxt
.
bﬂrd_cfg
.
com_∑th


	)

77 
	#CONTEXT_LWAN_PUBLIC
 
lgw_c⁄ãxt
.
bﬂrd_cfg
.
l‹aw™_public


	)

78 
	#CONTEXT_BOARD
 
lgw_c⁄ãxt
.
bﬂrd_cfg


	)

79 
	#CONTEXT_RF_CHAIN
 
lgw_c⁄ãxt
.
rf_chaö_cfg


	)

80 
	#CONTEXT_IF_CHAIN
 
lgw_c⁄ãxt
.
if_chaö_cfg


	)

81 
	#CONTEXT_DEMOD
 
lgw_c⁄ãxt
.
demod_cfg


	)

82 
	#CONTEXT_LORA_SERVICE
 
lgw_c⁄ãxt
.
l‹a_£rvi˚_cfg


	)

83 
	#CONTEXT_FSK
 
lgw_c⁄ãxt
.
fsk_cfg


	)

84 
	#CONTEXT_TX_GAIN_LUT
 
lgw_c⁄ãxt
.
tx_gaö_lut


	)

85 
	#CONTEXT_FINE_TIMESTAMP
 
lgw_c⁄ãxt
.
·ime_cfg


	)

86 
	#CONTEXT_SX1261
 
lgw_c⁄ãxt
.
sx1261_cfg


	)

87 
	#CONTEXT_DEBUG
 
lgw_c⁄ãxt
.
debug_cfg


	)

92 
	#FW_VERSION_AGC_SX1250
 10

	)

94 
	#FW_VERSION_AGC_SX125X
 6

	)

95 
	#FW_VERSION_ARB
 2

	)

99 
	#LGW_RF_RX_BANDWIDTH_125KHZ
 1600000

	)

100 
	#LGW_RF_RX_BANDWIDTH_250KHZ
 1600000

	)

101 
	#LGW_RF_RX_BANDWIDTH_500KHZ
 1600000

	)

103 
	#LGW_RF_RX_FREQ_MIN
 100E6

	)

104 
	#LGW_RF_RX_FREQ_MAX
 1E9

	)

107 c⁄° 
	glgw_vîsi⁄_°rög
[] = "Vîsi⁄: " 
LIBLORAGW_VERSION
 ";";

112 
	~"¨b_fw.v¨
"

113 
	~"agc_fw_sx1250.v¨
"

114 
	~"agc_fw_sx1257.v¨
"

123 
lgw_c⁄ãxt_t
 
	glgw_c⁄ãxt
 = {

124 .
is_°¨ãd
 = 
Ál£
,

125 .
	gbﬂrd_cfg
.
	gcom_ty≥
 = 
LGW_COM_SPI
,

126 .
	gbﬂrd_cfg
.
	gcom_∑th
 = "/dev/spidev0.0",

127 .
	gbﬂrd_cfg
.
	gl‹aw™_public
 = 
åue
,

128 .
	gbﬂrd_cfg
.
	g˛k§c
 = 0,

129 .
	gbﬂrd_cfg
.
	gfuŒ_du∂ex
 = 
Ál£
,

130 .
	grf_chaö_cfg
 = {{0}},

131 .
	gif_chaö_cfg
 = {{0}},

132 .
	gdemod_cfg
 = {

133 .
mu…isf_d©¨©e
 = 
LGW_MULTI_SF_EN


135 .
	gl‹a_£rvi˚_cfg
 = {

136 .
íabÀ
 = 0,

137 .
	grf_chaö
 = 0,

138 .
	g‰eq_hz
 = 0,

139 .
	gb™dwidth
 = 
BW_250KHZ
,

140 .
	gd©¨©e
 = 
DR_LORA_SF7
,

141 .
	gim∂icô_hdr
 = 
Ál£
,

142 .
	gim∂icô_∑ylﬂd_Àngth
 = 0,

143 .
	gim∂icô_¸c_í
 = 0,

144 .
	gim∂icô_codî©e
 = 0

146 .
	gfsk_cfg
 = {

147 .
íabÀ
 = 0,

148 .
	grf_chaö
 = 0,

149 .
	g‰eq_hz
 = 0,

150 .
	gb™dwidth
 = 
BW_125KHZ
,

151 .
	gd©¨©e
 = 50000,

152 .
	gsync_w‹d_size
 = 3,

153 .
	gsync_w‹d
 = 0xC194C1

155 .
	gtx_gaö_lut
 = {

157 .
size
 = 1,

158 .
	glut
[0] = {

159 .
rf_powî
 = 14,

160 .
	gdig_gaö
 = 0,

161 .
	g∑_gaö
 = 2,

162 .
	gdac_gaö
 = 3,

163 .
	gmix_gaö
 = 10,

164 .
	goff£t_i
 = 0,

165 .
	goff£t_q
 = 0,

166 .
	gpwr_idx
 = 0

169 .
	gsize
 = 1,

170 .
	glut
[0] = {

171 .
rf_powî
 = 14,

172 .
	gdig_gaö
 = 0,

173 .
	g∑_gaö
 = 2,

174 .
	gdac_gaö
 = 3,

175 .
	gmix_gaö
 = 10,

176 .
	goff£t_i
 = 0,

177 .
	goff£t_q
 = 0,

178 .
	gpwr_idx
 = 0

182 .
	g·ime_cfg
 = {

183 .
íabÀ
 = 
Ál£
,

184 .
	gmode
 = 
LGW_FTIME_MODE_ALL_SF


186 .
	gsx1261_cfg
 = {

187 .
íabÀ
 = 
Ál£
,

188 .
	g•i_∑th
 = "/dev/spidev0.1",

189 .
	grssi_off£t
 = 0,

190 .
	glbt_c⁄f
 = {

191 .
rssi_èrgë
 = 0,

192 .
	gnb_ch™√l
 = 0,

193 .
	gch™√ls
 = {{ 0 }}

196 .
	gdebug_cfg
 = {

197 .
nb_ªf_∑ylﬂd
 = 0,

198 .
	glog_fûe_«me
 = "loragw_hal.log"

203 
FILE
 * 
	glog_fûe
 = 
NULL
;

206 
	gts_fd
 = -1;

207 
uöt8_t
 
	gts_addr
 = 0xFF;

210 
	gad_fd
 = -1;

215 
öt32_t
 
lgw_sf_gëvÆ
(
x
);

216 
öt32_t
 
lgw_bw_gëvÆ
(
x
);

218 
boﬁ
 
is_ßme_pkt
(
lgw_pkt_rx_s
 *
p1
, lgw_pkt_rx_†*
p2
);

219 
ªmove_pkt
(
lgw_pkt_rx_s
 * 
p
, 
uöt8_t
 * 
nb_pkt
, uöt8_à
pkt_ödex
);

220 
mîge_∑ckës
(
lgw_pkt_rx_s
 * 
p
, 
uöt8_t
 * 
nb_pkt
);

225 
öt32_t
 
	$lgw_bw_gëvÆ
(
x
) {

226 
x
) {

227 
BW_500KHZ
:  500000;

228 
BW_250KHZ
:  250000;

229 
BW_125KHZ
:  125000;

232 
	}
}

236 
öt32_t
 
	$lgw_sf_gëvÆ
(
x
) {

237 
x
) {

238 
DR_LORA_SF5
:  5;

239 
DR_LORA_SF6
:  6;

240 
DR_LORA_SF7
:  7;

241 
DR_LORA_SF8
:  8;

242 
DR_LORA_SF9
:  9;

243 
DR_LORA_SF10
:  10;

244 
DR_LORA_SF11
:  11;

245 
DR_LORA_SF12
:  12;

248 
	}
}

252 
boﬁ
 
	$is_ßme_pkt
(
lgw_pkt_rx_s
 *
p1
, lgw_pkt_rx_†*
p2
) {

253 i‡((
p1
 !
NULL
Ë&& (
p2
 != NULL)) {

260 i‡((
	`abs
(
p1
->
cou¡_us
 - 
p2
->count_us) <= 24) &&

261 (
p1
->
if_chaö
 =
p2
->if_chain) &&

262 (
p1
->
d©¨©e
 =
p2
->datarate) &&

263 (
p1
->
size
 =
p2
->size) &&

264 (
	`memcmp
(
p1
->
∑ylﬂd
, 
p2
->∑ylﬂd,Ö1->
size
) == 0)) {

266  
åue
;

270  
Ál£
;

271 
	}
}

275 
	$ªmove_pkt
(
lgw_pkt_rx_s
 * 
p
, 
uöt8_t
 * 
nb_pkt
, uöt8_à
pkt_ödex
) {

277 
	`CHECK_NULL
(
p
);

278 
	`CHECK_NULL
(
nb_pkt
);

279 i‡(
pkt_ödex
 > ((*
nb_pkt
) - 1)) {

280 
	`¥ötf
("ERROR: faûedÅÿªmovê∑ckë index %u\n", 
pkt_ödex
);

285 i‡(
pkt_ödex
 =((*
nb_pkt
) - 1)) {

290 
	`mem˝y
(
p
 + 
pkt_ödex
,Ö + (*
nb_pkt
Ë- 1, (
lgw_pkt_rx_s
));

293 *
nb_pkt
 -= 1;

296 
	}
}

300 
	$com∑ª_pkt_tm°
(c⁄° *
a
, c⁄° *
b
, *
¨g
)

302 
lgw_pkt_rx_s
 *
p
 = (lgw_pkt_rx_†*)
a
;

303 
lgw_pkt_rx_s
 *
q
 = (lgw_pkt_rx_†*)
b
;

304 *
cou¡î
 = (*)
¨g
;

305 
p_cou¡
, 
q_cou¡
;

307 
p_cou¡
 = 
p
->
cou¡_us
;

308 
q_cou¡
 = 
q
->
cou¡_us
;

310 i‡(
p_cou¡
 > 
q_cou¡
) {

311 *
cou¡î
 = *counter + 1;

314  (
p_cou¡
 - 
q_cou¡
);

315 
	}
}

319 
	$mîge_∑ckës
(
lgw_pkt_rx_s
 * 
p
, 
uöt8_t
 * 
nb_pkt
) {

320 
uöt8_t
 
˝t
;

321 
j
, 
k
, 
pkt_dup_idx
, 
x
;

322 #i‡
DEBUG_HAL
 == 1

323 
pkt_idx
;

325 
boﬁ
 
dup_ª°¨t
 = 
Ál£
;

326 
cou¡î_qs‹t_sw≠
 = 0;

329 
	`CHECK_NULL
(
p
);

330 
	`CHECK_NULL
(
nb_pkt
);

333 
˝t
 = *
nb_pkt
;

337 i‡(
˝t
 > 0) {

338 
	`DEBUG_MSG
("<----- Searching for DUPLICATEs ------\n");

340 
j
 = 0; j < 
˝t
; j++) {

341 
	`DEBUG_PRINTF
(" %d:Åm°=%u SF=%u CRC_°©us=%d fªq=%u ch™=%u", 
j
, 
p
[j].
cou¡_us
,Ö[j].
d©¨©e
,Ö[j].
°©us
,Ö[j].
‰eq_hz
,Ö[j].
if_chaö
);

342 i‡(
p
[
j
].
·ime_ª˚ived
 =
åue
) {

343 
	`DEBUG_PRINTF
(" ftime=%u\n", 
p
[
j
].
·ime
);

345 
	`DEBUG_MSG
 (" ftime=NONE\n");

352 
j
 = 0;

353 
j
 < 
˝t
) {

354 
k
 = (
j
+1); k < 
˝t
; k++) {

361 i‡(
	`is_ßme_pkt
–&
p
[
j
], &p[
k
])) {

363 i‡((
p
[
j
].
°©us
 =
STAT_CRC_OK
Ë&& (p[
k
].°©u†=
STAT_CRC_BAD
)) {

364 
pkt_dup_idx
 = 
k
;

365 #i‡
DEBUG_HAL
 == 1

366 
pkt_idx
 = 
j
;

368 } i‡((
p
[
j
].
°©us
 =
STAT_CRC_BAD
Ë&& (p[
k
].°©u†=
STAT_CRC_OK
)) {

369 
pkt_dup_idx
 = 
j
;

370 #i‡
DEBUG_HAL
 == 1

371 
pkt_idx
 = 
k
;

375 i‡(
p
[
j
].
·ime_ª˚ived
 =
åue
) {

376 
pkt_dup_idx
 = 
k
;

377 #i‡
DEBUG_HAL
 == 1

378 
pkt_idx
 = 
j
;

381 
pkt_dup_idx
 = 
j
;

382 #i‡
DEBUG_HAL
 == 1

383 
pkt_idx
 = 
k
;

387 i‡(((
p
[
j
].
·ime_ª˚ived
 =
åue
Ë&& (p[
k
].ftime_received ==Årue)) ||

388 ((
p
[
j
].
·ime_ª˚ived
 =
Ál£
Ë&& (p[
k
].ftime_received == false))) {

389 
	`DEBUG_MSG
("WARNING: both duplicates have fineÅimestamps, orÇone has ? TBC\n");

393 
	`DEBUG_PRINTF
("du∂iˇã found %d:%d, dñëög %d\n", 
pkt_idx
, 
pkt_dup_idx
,Ökt_dup_idx);

395 
x
 = 
	`ªmove_pkt
(
p
, &
˝t
, 
pkt_dup_idx
);

396 i‡(
x
 != 0) {

397 
	`¥ötf
("ERROR: faûedÅÿªmovê∑ckë fromáºay (%d)\n", 
x
);

399 
dup_ª°¨t
 = 
åue
;

403 i‡(
dup_ª°¨t
 =
åue
) {

405 
j
 = 0;

406 
dup_ª°¨t
 = 
Ál£
;

408 
	`¥ötf
( "restarting search for duplicate\n" );

412 
j
 += 1;

414 
	`¥ötf
( "no duplicate found\n" );

420 
	`qs‹t_r
(
p
, 
˝t
, ’[0]), 
com∑ª_pkt_tm°
, &
cou¡î_qs‹t_sw≠
);

421 
	`DEBUG_PRINTF
("%dÉÀmít†sw≠≥d durög s‹tög...\n", 
cou¡î_qs‹t_sw≠
);

425 i‡(
˝t
 > 0) {

426 
	`DEBUG_MSG
("--\n");

428 
j
 = 0; j < 
˝t
; j++) {

429 
	`DEBUG_PRINTF
(" %d:Åm°=%u SF=%d CRC_°©us=%d fªq=%u ch™=%u", 
j
, 
p
[j].
cou¡_us
,Ö[j].
d©¨©e
,Ö[j].
°©us
,Ö[j].
‰eq_hz
,Ö[j].
if_chaö
);

430 i‡(
p
[
j
].
·ime_ª˚ived
 =
åue
) {

431 
	`DEBUG_PRINTF
(" ftime=%u\n", 
p
[
j
].
·ime
);

433 
	`DEBUG_MSG
 (" ftime=NONE\n");

436 i‡(
˝t
 > 0) {

437 
	`DEBUG_MSG
( " ------------------------------------>\n\n" );

443 *
nb_pkt
 = 
˝t
;

446 
	}
}

451 
	$lgw_bﬂrd_£tc⁄f
(
lgw_c⁄f_bﬂrd_s
 * 
c⁄f
) {

452 
	`CHECK_NULL
(
c⁄f
);

455 i‡(
CONTEXT_STARTED
 =
åue
) {

456 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

457  
LGW_HAL_ERROR
;

461 i‡((
c⁄f
->
com_ty≥
 !
LGW_COM_SPI
Ë&& (c⁄f->com_ty≥ !
LGW_COM_USB
)) {

462 
	`DEBUG_MSG
("ERROR: WRONG COM TYPE\n");

463  
LGW_HAL_ERROR
;

467 
CONTEXT_LWAN_PUBLIC
 = 
c⁄f
->
l‹aw™_public
;

468 
CONTEXT_BOARD
.
˛k§c
 = 
c⁄f
->clksrc;

469 
CONTEXT_BOARD
.
fuŒ_du∂ex
 = 
c⁄f
->full_duplex;

470 
CONTEXT_COM_TYPE
 = 
c⁄f
->
com_ty≥
;

471 
	`°∫˝y
(
CONTEXT_COM_PATH
, 
c⁄f
->
com_∑th
,  CONTEXT_COM_PATH);

472 
CONTEXT_COM_PATH
[ CONTEXT_COM_PATH - 1] = '\0';

474 
	`DEBUG_PRINTF
("NŸe: bﬂrd c⁄figuøti⁄: com_ty≥: %s, com_∑th: %s,Ü‹aw™_public:%d, clk§c:%d, fuŒ_du∂ex:%d\n", (
CONTEXT_COM_TYPE
 =
LGW_COM_SPI
) ? "SPI" : "USB",

475 
CONTEXT_COM_PATH
,

476 
CONTEXT_LWAN_PUBLIC
,

477 
CONTEXT_BOARD
.
˛k§c
,

478 
CONTEXT_BOARD
.
fuŒ_du∂ex
);

480  
LGW_HAL_SUCCESS
;

481 
	}
}

485 
	$lgw_rxrf_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_c⁄f_rxrf_s
 * 
c⁄f
) {

486 
	`CHECK_NULL
(
c⁄f
);

489 i‡(
CONTEXT_STARTED
 =
åue
) {

490 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

491  
LGW_HAL_ERROR
;

494 i‡(
c⁄f
->
íabÀ
 =
Ál£
) {

496 
	`DEBUG_PRINTF
("NŸe:Ñf_chaö %d dißbÀd\n", 
rf_chaö
);

497  
LGW_HAL_SUCCESS
;

501 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

502 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

503  
LGW_HAL_ERROR
;

507 i‡((
c⁄f
->
ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (c⁄f->ty≥ !
LGW_RADIO_TYPE_SX1257
Ë&& (c⁄f->ty≥ !
LGW_RADIO_TYPE_SX1250
)) {

508 
	`DEBUG_PRINTF
("ERROR: NOT A VALID RADIO TYPE (%d)\n", 
c⁄f
->
ty≥
);

509  
LGW_HAL_ERROR
;

513 i‡((
c⁄f
->
‰eq_hz
 < 
LGW_RF_RX_FREQ_MIN
Ë|| (c⁄f->‰eq_hz > 
LGW_RF_RX_FREQ_MAX
)) {

514 
	`DEBUG_PRINTF
("ERROR: NOT A VALID RADIO CENTER FREQUENCY, PLEASE CHECK IF IT HAS BEEN GIVEN IN HZ (%u)\n", 
c⁄f
->
‰eq_hz
);

515  
LGW_HAL_ERROR
;

519 
CONTEXT_RF_CHAIN
[
rf_chaö
].
íabÀ
 = 
c⁄f
->enable;

520 
CONTEXT_RF_CHAIN
[
rf_chaö
].
‰eq_hz
 = 
c⁄f
->freq_hz;

521 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_off£t
 = 
c⁄f
->rssi_offset;

522 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_a
 = 
c⁄f
->rssi_tcomp.coeff_a;

523 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_b
 = 
c⁄f
->rssi_tcomp.coeff_b;

524 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_c
 = 
c⁄f
->rssi_tcomp.coeff_c;

525 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_d
 = 
c⁄f
->rssi_tcomp.coeff_d;

526 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_e
 = 
c⁄f
->rssi_tcomp.coeff_e;

527 
CONTEXT_RF_CHAIN
[
rf_chaö
].
ty≥
 = 
c⁄f
->type;

528 
CONTEXT_RF_CHAIN
[
rf_chaö
].
tx_íabÀ
 = 
c⁄f
->tx_enable;

529 
CONTEXT_RF_CHAIN
[
rf_chaö
].
sögÀ_öput_mode
 = 
c⁄f
->single_input_mode;

531 
	`DEBUG_PRINTF
("NŸe:Ñf_chaö %d c⁄figuøti⁄;Én:%d fªq:%dÑssi_off£t:%‡ødio_ty≥:%dÅx_íabÀ:%d sögÀ_öput_mode:%d\n", 
rf_chaö
,

532 
CONTEXT_RF_CHAIN
[
rf_chaö
].
íabÀ
,

533 
CONTEXT_RF_CHAIN
[
rf_chaö
].
‰eq_hz
,

534 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_off£t
,

535 
CONTEXT_RF_CHAIN
[
rf_chaö
].
ty≥
,

536 
CONTEXT_RF_CHAIN
[
rf_chaö
].
tx_íabÀ
,

537 
CONTEXT_RF_CHAIN
[
rf_chaö
].
sögÀ_öput_mode
);

539  
LGW_HAL_SUCCESS
;

540 
	}
}

544 
	$lgw_rxif_£tc⁄f
(
uöt8_t
 
if_chaö
, 
lgw_c⁄f_rxif_s
 * 
c⁄f
) {

545 
öt32_t
 
bw_hz
;

546 
uöt32_t
 
rf_rx_b™dwidth
;

548 
	`CHECK_NULL
(
c⁄f
);

551 i‡(
CONTEXT_STARTED
 =
åue
) {

552 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

553  
LGW_HAL_ERROR
;

557 i‡(
if_chaö
 >
LGW_IF_CHAIN_NB
) {

558 
	`DEBUG_PRINTF
("ERROR: %d NOT A VALID IF_CHAIN NUMBER\n", 
if_chaö
);

559  
LGW_HAL_ERROR
;

563 i‡(
c⁄f
->
íabÀ
 =
Ál£
) {

564 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
 = 
Ál£
;

565 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
 = 0;

566 
	`DEBUG_PRINTF
("NŸe: if_chaö %d dißbÀd\n", 
if_chaö
);

567  
LGW_HAL_SUCCESS
;

571 i‡(
	`sx1302_gë_ifmod_c⁄fig
(
if_chaö
Ë=
IF_UNDEFINED
) {

572 
	`DEBUG_PRINTF
("ERROR: IF CHAIN %d NOT CONFIGURABLE\n", 
if_chaö
);

574 i‡(
c⁄f
->
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

575 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN TO ASSOCIATE WITH A LORA_STD IF CHAIN\n");

576  
LGW_HAL_ERROR
;

579 
c⁄f
->
b™dwidth
) {

580 
BW_250KHZ
:

581 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_250KHZ
;

583 
BW_500KHZ
:

584 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_500KHZ
;

588 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_125KHZ
;

591 
bw_hz
 = 
	`lgw_bw_gëvÆ
(
c⁄f
->
b™dwidth
);

592 i‡((
c⁄f
->
‰eq_hz
 + ((
bw_hz
==-1)?
LGW_REF_BW
:bw_hz)/2Ë> ((
öt32_t
)
rf_rx_b™dwidth
/2)) {

593 
	`DEBUG_PRINTF
("ERROR: IF FREQUENCY %d TOO HIGH\n", 
c⁄f
->
‰eq_hz
);

594  
LGW_HAL_ERROR
;

595 } i‡((
c⁄f
->
‰eq_hz
 - ((
bw_hz
==-1)?
LGW_REF_BW
:bw_hz)/2Ë< -((
öt32_t
)
rf_rx_b™dwidth
/2)) {

596 
	`DEBUG_PRINTF
("ERROR: IF FREQUENCY %d TOO LOW\n", 
c⁄f
->
‰eq_hz
);

597  
LGW_HAL_ERROR
;

602 
	`sx1302_gë_ifmod_c⁄fig
(
if_chaö
)) {

603 
IF_LORA_STD
:

605 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

606 
c⁄f
->
b™dwidth
 = 
BW_250KHZ
;

608 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

609 
c⁄f
->
d©¨©e
 = 
DR_LORA_SF7
;

612 i‡(!
	`IS_LORA_BW
(
c⁄f
->
b™dwidth
)) {

613 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA_STD IF CHAIN\n");

614  
LGW_HAL_ERROR
;

616 i‡(!
	`IS_LORA_DR
(
c⁄f
->
d©¨©e
)) {

617 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY LORA_STD IF CHAIN\n");

618  
LGW_HAL_ERROR
;

621 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
 = 
c⁄f
->enable;

622 
CONTEXT_IF_CHAIN
[
if_chaö
].
rf_chaö
 = 
c⁄f
->rf_chain;

623 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
 = 
c⁄f
->freq_hz;

624 
CONTEXT_LORA_SERVICE
.
b™dwidth
 = 
c⁄f
->bandwidth;

625 
CONTEXT_LORA_SERVICE
.
d©¨©e
 = 
c⁄f
->datarate;

626 
CONTEXT_LORA_SERVICE
.
im∂icô_hdr
 = 
c⁄f
->implicit_hdr;

627 
CONTEXT_LORA_SERVICE
.
im∂icô_∑ylﬂd_Àngth
 = 
c⁄f
->implicit_payload_length;

628 
CONTEXT_LORA_SERVICE
.
im∂icô_¸c_í
 = 
c⁄f
->implicit_crc_en;

629 
CONTEXT_LORA_SERVICE
.
im∂icô_codî©e
 = 
c⁄f
->implicit_coderate;

631 
	`DEBUG_PRINTF
("NŸe: LoR®'°d' if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d bw:%d dr:%d\n", 
if_chaö
,

632 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
,

633 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
,

634 
CONTEXT_LORA_SERVICE
.
b™dwidth
,

635 
CONTEXT_LORA_SERVICE
.
d©¨©e
);

638 
IF_LORA_MULTI
:

640 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

641 
c⁄f
->
b™dwidth
 = 
BW_125KHZ
;

643 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

644 
c⁄f
->
d©¨©e
 = 
DR_LORA_SF7
;

647 i‡(
c⁄f
->
b™dwidth
 !
BW_125KHZ
) {

648 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA_MULTI IF CHAIN\n");

649  
LGW_HAL_ERROR
;

651 i‡(!
	`IS_LORA_DR
(
c⁄f
->
d©¨©e
)) {

652 
	`DEBUG_MSG
("ERROR: DATARATE(S) NOT SUPPORTED BY LORA_MULTI IF CHAIN\n");

653  
LGW_HAL_ERROR
;

656 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
 = 
c⁄f
->enable;

657 
CONTEXT_IF_CHAIN
[
if_chaö
].
rf_chaö
 = 
c⁄f
->rf_chain;

658 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
 = 
c⁄f
->freq_hz;

660 
	`DEBUG_PRINTF
("NŸe: LoR®'mu…i' if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d\n", 
if_chaö
,

661 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
,

662 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
);

665 
IF_FSK_STD
:

667 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

668 
c⁄f
->
b™dwidth
 = 
BW_250KHZ
;

670 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

671 
c⁄f
->
d©¨©e
 = 64000;

674 if(!
	`IS_FSK_BW
(
c⁄f
->
b™dwidth
)) {

675 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY FSK IF CHAIN\n");

676  
LGW_HAL_ERROR
;

678 if(!
	`IS_FSK_DR
(
c⁄f
->
d©¨©e
)) {

679 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY FSK IF CHAIN\n");

680  
LGW_HAL_ERROR
;

683 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
 = 
c⁄f
->enable;

684 
CONTEXT_IF_CHAIN
[
if_chaö
].
rf_chaö
 = 
c⁄f
->rf_chain;

685 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
 = 
c⁄f
->freq_hz;

686 
CONTEXT_FSK
.
b™dwidth
 = 
c⁄f
->bandwidth;

687 
CONTEXT_FSK
.
d©¨©e
 = 
c⁄f
->datarate;

688 i‡(
c⁄f
->
sync_w‹d
 > 0) {

689 
CONTEXT_FSK
.
sync_w‹d_size
 = 
c⁄f
->sync_word_size;

690 
CONTEXT_FSK
.
sync_w‹d
 = 
c⁄f
->sync_word;

692 
	`DEBUG_PRINTF
("NŸe: FSK if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d bw:%d dr:%d (%dÑó»drËsync:0x%0*" 
PRIu64
 "\n", 
if_chaö
,

693 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
,

694 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
,

695 
CONTEXT_FSK
.
b™dwidth
,

696 
CONTEXT_FSK
.
d©¨©e
,

697 
LGW_XTAL_FREQU
/(LGW_XTAL_FREQU/
CONTEXT_FSK
.
d©¨©e
),

698 2*
CONTEXT_FSK
.
sync_w‹d_size
,

699 
CONTEXT_FSK
.
sync_w‹d
);

703 
	`DEBUG_PRINTF
("ERROR: IF CHAIN %d TYPE NOT SUPPORTED\n", 
if_chaö
);

704  
LGW_HAL_ERROR
;

707  
LGW_HAL_SUCCESS
;

708 
	}
}

712 
	$lgw_demod_£tc⁄f
(
lgw_c⁄f_demod_s
 * 
c⁄f
) {

713 
	`CHECK_NULL
(
c⁄f
);

715 
CONTEXT_DEMOD
.
mu…isf_d©¨©e
 = 
c⁄f
->multisf_datarate;

717  
LGW_HAL_SUCCESS
;

718 
	}
}

722 
	$lgw_txgaö_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_tx_gaö_lut_s
 * 
c⁄f
) {

723 
i
;

725 
	`CHECK_NULL
(
c⁄f
);

728 i‡((
c⁄f
->
size
 < 1Ë|| (c⁄f->sizê> 
TX_GAIN_LUT_SIZE_MAX
)) {

729 
	`DEBUG_PRINTF
("ERROR: TX gaö LUT mu° havê©Üó° o√É¡ryánd maximum %dÉ¡rõs\n", 
TX_GAIN_LUT_SIZE_MAX
);

730  
LGW_HAL_ERROR
;

733 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
size
 = 
c⁄f
->size;

735 
i
 = 0; i < 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
size
; i++) {

737 i‡(
c⁄f
->
lut
[
i
].
dig_gaö
 > 3) {

738 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1302 digital gain must be between 0ánd 3\n");

739  
LGW_HAL_ERROR
;

741 i‡(
c⁄f
->
lut
[
i
].
dac_gaö
 > 3) {

742 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1257 DAC gains mustÇotÉxceed 3\n");

743  
LGW_HAL_ERROR
;

745 i‡((
c⁄f
->
lut
[
i
].
mix_gaö
 < 5) || (conf->lut[i].mix_gain > 15)) {

746 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1257 mixer gain must be betwen [5..15]\n");

747  
LGW_HAL_ERROR
;

749 i‡(
c⁄f
->
lut
[
i
].
∑_gaö
 > 3) {

750 
	`DEBUG_MSG
("ERROR: TX gain LUT: External PA gain mustÇotÉxceed 3\n");

751  
LGW_HAL_ERROR
;

753 i‡(
c⁄f
->
lut
[
i
].
pwr_idx
 > 22) {

754 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1250Öower index mustÇotÉxceed 22\n");

755  
LGW_HAL_ERROR
;

759 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
rf_powî
 = 
c⁄f
->lut[i].rf_power;

760 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
dig_gaö
 = 
c⁄f
->lut[i].dig_gain;

761 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
∑_gaö
 = 
c⁄f
->lut[i].pa_gain;

763 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
dac_gaö
 = 
c⁄f
->lut[i].dac_gain;

764 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
mix_gaö
 = 
c⁄f
->lut[i].mix_gain;

765 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
off£t_i
 = 0;

766 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
off£t_q
 = 0;

769 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
pwr_idx
 = 
c⁄f
->lut[i].pwr_idx;

772  
LGW_HAL_SUCCESS
;

773 
	}
}

777 
	$lgw_·ime_£tc⁄f
(
lgw_c⁄f_·ime_s
 * 
c⁄f
) {

778 
	`CHECK_NULL
(
c⁄f
);

780 
CONTEXT_FINE_TIMESTAMP
.
íabÀ
 = 
c⁄f
->enable;

781 
CONTEXT_FINE_TIMESTAMP
.
mode
 = 
c⁄f
->mode;

783  
LGW_HAL_SUCCESS
;

784 
	}
}

788 
	$lgw_sx1261_£tc⁄f
(
lgw_c⁄f_sx1261_s
 * 
c⁄f
) {

789 
i
;

791 
	`CHECK_NULL
(
c⁄f
);

794 
CONTEXT_SX1261
.
íabÀ
 = 
c⁄f
->enable;

795 
	`°∫˝y
(
CONTEXT_SX1261
.
•i_∑th
, 
c⁄f
->spi_path,  CONTEXT_SX1261.spi_path);

796 
CONTEXT_SX1261
.
•i_∑th
[ CONTEXT_SX1261.spi_path - 1] = '\0';

797 
CONTEXT_SX1261
.
rssi_off£t
 = 
c⁄f
->rssi_offset;

800 
CONTEXT_SX1261
.
lbt_c⁄f
.
íabÀ
 = 
c⁄f
->lbt_conf.enable;

801 
CONTEXT_SX1261
.
lbt_c⁄f
.
rssi_èrgë
 = 
c⁄f
->lbt_conf.rssi_target;

802 
CONTEXT_SX1261
.
lbt_c⁄f
.
nb_ch™√l
 = 
c⁄f
->lbt_conf.nb_channel;

803 
i
 = 0; i < 
CONTEXT_SX1261
.
lbt_c⁄f
.
nb_ch™√l
; i++) {

804 i‡(
c⁄f
->
lbt_c⁄f
.
ch™√ls
[
i
].
b™dwidth
 !
BW_125KHZ
 && c⁄f->lbt_c⁄f.ch™√ls[i].b™dwidth !
BW_250KHZ
) {

805 
	`¥ötf
("ERROR: b™dwidthÇŸ suµ‹ãd f‹ LBT ch™√»%d\n", 
i
);

806  
LGW_HAL_ERROR
;

808 i‡(
c⁄f
->
lbt_c⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 !
LGW_LBT_SCAN_TIME_128_US
 && c⁄f->lbt_c⁄f.ch™√ls[i].sˇn_time_u†!
LGW_LBT_SCAN_TIME_5000_US
) {

809 
	`¥ötf
("ERROR: sˇn_time_u†nŸ suµ‹ãd f‹ LBT ch™√»%d\n", 
i
);

810  
LGW_HAL_ERROR
;

812 
CONTEXT_SX1261
.
lbt_c⁄f
.
ch™√ls
[
i
] = 
c⁄f
->lbt_conf.channels[i];

815  
LGW_HAL_SUCCESS
;

816 
	}
}

820 
	$lgw_debug_£tc⁄f
(
lgw_c⁄f_debug_s
 * 
c⁄f
) {

821 
i
;

823 
	`CHECK_NULL
(
c⁄f
);

825 
CONTEXT_DEBUG
.
nb_ªf_∑ylﬂd
 = 
c⁄f
->nb_ref_payload;

826 
i
 = 0; i < 
CONTEXT_DEBUG
.
nb_ªf_∑ylﬂd
; i++) {

828 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
id
 = 
c⁄f
->ref_payload[i].id;

831 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
¥ev_˙t
 = 0;

832 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
∑ylﬂd
[0] = (
uöt8_t
)(CONTEXT_DEBUG.ªf_∑ylﬂd[i].
id
 >> 24);

833 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
∑ylﬂd
[1] = (
uöt8_t
)(CONTEXT_DEBUG.ªf_∑ylﬂd[i].
id
 >> 16);

834 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
∑ylﬂd
[2] = (
uöt8_t
)(CONTEXT_DEBUG.ªf_∑ylﬂd[i].
id
 >> 8);

835 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
∑ylﬂd
[3] = (
uöt8_t
)(CONTEXT_DEBUG.ªf_∑ylﬂd[i].
id
 >> 0);

838 i‡(
c⁄f
->
log_fûe_«me
 !
NULL
) {

839 
	`°∫˝y
(
CONTEXT_DEBUG
.
log_fûe_«me
, 
c⁄f
->log_file_name,  CONTEXT_DEBUG.log_file_name);

840 
CONTEXT_DEBUG
.
log_fûe_«me
[ CONTEXT_DEBUG.log_file_name - 1] = '\0';

843  
LGW_HAL_SUCCESS
;

844 
	}
}

848 
	$lgw_°¨t
() {

849 
i
, 
îr
;

850 
uöt8_t
 
fw_vîsi⁄_agc
;

852 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

854 i‡(
CONTEXT_STARTED
 =
åue
) {

855 
	`DEBUG_MSG
("Note: LoRa concentratorálready started,Ñestarting itÇow\n");

858 
îr
 = 
	`lgw_c⁄√˘
(
CONTEXT_COM_TYPE
, 
CONTEXT_COM_PATH
);

859 i‡(
îr
 =
LGW_REG_ERROR
) {

860 
	`DEBUG_MSG
("ERROR: FAIL TO CONNECT BOARD\n");

861  
LGW_HAL_ERROR
;

865 
îr
 = 
	`sx1302_£t_gpio
(0x00);

866 i‡(
îr
 !
LGW_REG_SUCCESS
) {

867 
	`¥ötf
("ERROR: failedÅo setáll GPIOsÅo 0\n");

868  
LGW_HAL_ERROR
;

872 
îr
 = 
	`sx1302_ødio_ˇlibøã
(&
CONTEXT_RF_CHAIN
[0], 
CONTEXT_BOARD
.
˛k§c
, &
CONTEXT_TX_GAIN_LUT
[0]);

873 i‡(
îr
 !
LGW_REG_SUCCESS
) {

874 
	`¥ötf
("ERROR:Ñadio calibration failed\n");

875  
LGW_HAL_ERROR
;

879 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

880 i‡(
CONTEXT_RF_CHAIN
[
i
].
íabÀ
 =
åue
) {

882 
îr
 = 
	`sx1302_ødio_ª£t
(
i
, 
CONTEXT_RF_CHAIN
[i].
ty≥
);

883 i‡(
îr
 !
LGW_REG_SUCCESS
) {

884 
	`¥ötf
("ERROR: faûedÅÿª£àødiÿ%d\n", 
i
);

885  
LGW_HAL_ERROR
;

889 
CONTEXT_RF_CHAIN
[
i
].
ty≥
) {

890 
LGW_RADIO_TYPE_SX1250
:

891 
îr
 = 
	`sx1250_£tup
(
i
, 
CONTEXT_RF_CHAIN
[i].
‰eq_hz
, CONTEXT_RF_CHAIN[i].
sögÀ_öput_mode
);

893 
LGW_RADIO_TYPE_SX1255
:

894 
LGW_RADIO_TYPE_SX1257
:

895 
îr
 = 
	`sx125x_£tup
(
i
, 
CONTEXT_BOARD
.
˛k§c
, 
åue
, 
CONTEXT_RF_CHAIN
[i].
ty≥
, CONTEXT_RF_CHAIN[i].
‰eq_hz
);

898 
	`¥ötf
("ERROR: RADIO TYPE NOT SUPPORTED (RF_CHAIN %d)\n", 
i
);

899  
LGW_HAL_ERROR
;

901 i‡(
îr
 !
LGW_REG_SUCCESS
) {

902 
	`¥ötf
("ERROR: faûedÅÿ£tu∞ødiÿ%d\n", 
i
);

903  
LGW_HAL_ERROR
;

907 
îr
 = 
	`sx1302_ødio_£t_mode
(
i
, 
CONTEXT_RF_CHAIN
[i].
ty≥
);

908 i‡(
îr
 !
LGW_REG_SUCCESS
) {

909 
	`¥ötf
("ERROR: faûedÅÿ£àmodêf‹Ñadiÿ%d\n", 
i
);

910  
LGW_HAL_ERROR
;

916 
îr
 = 
	`sx1302_ødio_˛ock_£À˘
(
CONTEXT_BOARD
.
˛k§c
);

917 i‡(
îr
 !
LGW_REG_SUCCESS
) {

918 
	`¥ötf
("ERROR: faûedÅÿgë clock fromÑadiÿ%u\n", 
CONTEXT_BOARD
.
˛k§c
);

919  
LGW_HAL_ERROR
;

923 
îr
 = 
	`sx1302_ødio_ho°_˘æ
(
Ál£
);

924 i‡(
îr
 !
LGW_REG_SUCCESS
) {

925 
	`¥ötf
("ERROR: failedÅoÑelease control overÑadios\n");

926  
LGW_HAL_ERROR
;

930 
îr
 = 
	`sx1302_öô
(&
CONTEXT_FINE_TIMESTAMP
);

931 i‡(
îr
 !
LGW_REG_SUCCESS
) {

932 
	`¥ötf
("ERROR: failedÅo initialize SX1302\n");

933  
LGW_HAL_ERROR
;

937 
îr
 = 
	`sx1302_∑_ a_lut_c⁄figuª
(&
CONTEXT_BOARD
);

938 i‡(
îr
 !
LGW_REG_SUCCESS
) {

939 
	`¥ötf
("ERROR: failedÅo configure SX1302 PA/LNA LUT\n");

940  
LGW_HAL_ERROR
;

944 
îr
 = 
	`sx1302_ødio_„_c⁄figuª
();

945 i‡(
îr
 !
LGW_REG_SUCCESS
) {

946 
	`¥ötf
("ERROR: failedÅo configure SX1302Ñadio frontend\n");

947  
LGW_HAL_ERROR
;

951 
îr
 = 
	`sx1302_ch™√lizî_c⁄figuª
(
CONTEXT_IF_CHAIN
, 
Ál£
);

952 i‡(
îr
 !
LGW_REG_SUCCESS
) {

953 
	`¥ötf
("ERROR: failedÅo configure SX1302 channelizer\n");

954  
LGW_HAL_ERROR
;

958 
îr
 = 
	`sx1302_l‹a_c‹ªœt‹_c⁄figuª
(
CONTEXT_IF_CHAIN
, &(
CONTEXT_DEMOD
));

959 i‡(
îr
 !
LGW_REG_SUCCESS
) {

960 
	`¥ötf
("ERROR: failedÅo configure SX1302 LoRa modem correlators\n");

961  
LGW_HAL_ERROR
;

963 
îr
 = 
	`sx1302_l‹a_modem_c⁄figuª
(
CONTEXT_RF_CHAIN
[0].
‰eq_hz
);

964 i‡(
îr
 !
LGW_REG_SUCCESS
) {

965 
	`¥ötf
("ERROR: failedÅo configure SX1302 LoRa modems\n");

966  
LGW_HAL_ERROR
;

970 i‡(
CONTEXT_IF_CHAIN
[8].
íabÀ
 =
åue
) {

971 
îr
 = 
	`sx1302_l‹a_£rvi˚_c‹ªœt‹_c⁄figuª
(&(
CONTEXT_LORA_SERVICE
));

972 i‡(
îr
 !
LGW_REG_SUCCESS
) {

973 
	`¥ötf
("ERROR: failedÅo configure SX1302 LoRa Service modem correlators\n");

974  
LGW_HAL_ERROR
;

976 
îr
 = 
	`sx1302_l‹a_£rvi˚_modem_c⁄figuª
(&(
CONTEXT_LORA_SERVICE
), 
CONTEXT_RF_CHAIN
[0].
‰eq_hz
);

977 i‡(
îr
 !
LGW_REG_SUCCESS
) {

978 
	`¥ötf
("ERROR: failedÅo configure SX1302 LoRa Service modem\n");

979  
LGW_HAL_ERROR
;

984 i‡(
CONTEXT_IF_CHAIN
[9].
íabÀ
 =
åue
) {

985 
îr
 = 
	`sx1302_fsk_c⁄figuª
(&(
CONTEXT_FSK
));

986 i‡(
îr
 !
LGW_REG_SUCCESS
) {

987 
	`¥ötf
("ERROR: failedÅo configure SX1302 FSK modem\n");

988  
LGW_HAL_ERROR
;

993 
îr
 = 
	`sx1302_l‹a_syncw‹d
(
CONTEXT_LWAN_PUBLIC
, 
CONTEXT_LORA_SERVICE
.
d©¨©e
);

994 i‡(
îr
 !
LGW_REG_SUCCESS
) {

995 
	`¥ötf
("ERROR: failedÅo configure SX1302 LoRa syncword\n");

996  
LGW_HAL_ERROR
;

1000 
îr
 = 
	`sx1302_modem_íabÀ
();

1001 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1002 
	`¥ötf
("ERROR: failedÅoÉnable SX1302 modems\n");

1003  
LGW_HAL_ERROR
;

1007 
CONTEXT_RF_CHAIN
[
CONTEXT_BOARD
.
˛k§c
].
ty≥
) {

1008 
LGW_RADIO_TYPE_SX1250
:

1009 
	`DEBUG_MSG
("Loading AGC fw for sx1250\n");

1010 
îr
 = 
	`sx1302_agc_lﬂd_fúmw¨e
(
agc_fúmw¨e_sx1250
);

1011 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1012 
	`¥ötf
("ERROR: failedÅoÜoad AGC firmware for sx1250\n");

1013  
LGW_HAL_ERROR
;

1015 
fw_vîsi⁄_agc
 = 
FW_VERSION_AGC_SX1250
;

1017 
LGW_RADIO_TYPE_SX1255
:

1018 
LGW_RADIO_TYPE_SX1257
:

1019 
	`DEBUG_MSG
("Loading AGC fw for sx125x\n");

1020 
îr
 = 
	`sx1302_agc_lﬂd_fúmw¨e
(
agc_fúmw¨e_sx125x
);

1021 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1022 
	`¥ötf
("ERROR: failedÅoÜoad AGC firmware for sx125x\n");

1023  
LGW_HAL_ERROR
;

1025 
fw_vîsi⁄_agc
 = 
FW_VERSION_AGC_SX125X
;

1028 
	`¥ötf
("ERROR: faûedÅÿlﬂd AGC fúmw¨e,Ñadiÿty≥ÇŸ suµ‹ãd (%d)\n", 
CONTEXT_RF_CHAIN
[
CONTEXT_BOARD
.
˛k§c
].
ty≥
);

1029  
LGW_HAL_ERROR
;

1031 
îr
 = 
	`sx1302_agc_°¨t
(
fw_vîsi⁄_agc
, 
CONTEXT_RF_CHAIN
[
CONTEXT_BOARD
.
˛k§c
].
ty≥
, 
SX1302_AGC_RADIO_GAIN_AUTO
, SX1302_AGC_RADIO_GAIN_AUTO, CONTEXT_BOARD.
fuŒ_du∂ex
, 
CONTEXT_SX1261
.
lbt_c⁄f
.
íabÀ
);

1032 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1033 
	`¥ötf
("ERROR: failedÅo start AGC firmware\n");

1034  
LGW_HAL_ERROR
;

1038 
	`DEBUG_MSG
("Loading ARB fw\n");

1039 
îr
 = 
	`sx1302_¨b_lﬂd_fúmw¨e
(
¨b_fúmw¨e
);

1040 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1041 
	`¥ötf
("ERROR: failedÅoÜoad ARB firmware\n");

1042  
LGW_HAL_ERROR
;

1044 
îr
 = 
	`sx1302_¨b_°¨t
(
FW_VERSION_ARB
, &
CONTEXT_FINE_TIMESTAMP
);

1045 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1046 
	`¥ötf
("ERROR: failedÅo start ARB firmware\n");

1047  
LGW_HAL_ERROR
;

1051 
îr
 = 
	`sx1302_tx_c⁄figuª
(
CONTEXT_RF_CHAIN
[
CONTEXT_BOARD
.
˛k§c
].
ty≥
);

1052 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1053 
	`¥ötf
("ERROR: failedÅo configure SX1302 TXÖath\n");

1054  
LGW_HAL_ERROR
;

1058 
îr
 = 
	`sx1302_gps_íabÀ
(
åue
);

1059 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1060 
	`¥ötf
("ERROR: failedÅoÉnable GPS on sx1302\n");

1061  
LGW_HAL_ERROR
;

1065 #i‡
HAL_DEBUG_FILE_LOG


1066 
time°amp_°r
[40];

1067 
tm
 *
timíow
;

1070 
time_t
 
now
 = 
	`time
(
NULL
);

1071 
timíow
 = 
	`gmtime
(&
now
);

1072 
	`°r·ime
(
time°amp_°r
, —ime°amp_°r), ".%Y-%m-%d_%H%M%S", 
timíow
);

1073 
	`°∫ˇt
(
CONTEXT_DEBUG
.
log_fûe_«me
, 
time°amp_°r
,  CONTEXT_DEBUG.log_file_name);

1076 
log_fûe
 = 
	`f›í
(
CONTEXT_DEBUG
.
log_fûe_«me
, "w+");

1077 i‡(
log_fûe
 =
NULL
) {

1078 
	`¥ötf
("ERROR: impossibÀÅÿ¸óãÜog fûê%s\n", 
CONTEXT_DEBUG
.
log_fûe_«me
);

1079  
LGW_HAL_ERROR
;

1081 
	`¥ötf
("INFO: %†fûê›íed f‹ debugÜog\n", 
CONTEXT_DEBUG
.
log_fûe_«me
);

1084 
	`u∆ök
("loragw_hal.log");

1085 
i
 = 
	`symlök
(
CONTEXT_DEBUG
.
log_fûe_«me
, "loragw_hal.log");

1086 i‡(
i
 < 0) {

1087 
	`¥ötf
("ERROR: impossibÀÅÿ¸óã symlökÅÿlog fûê%s\n", 
CONTEXT_DEBUG
.
log_fûe_«me
);

1093 
	`dbg_öô_øndom
();

1095 i‡(
CONTEXT_COM_TYPE
 =
LGW_COM_SPI
) {

1098 
i
 = 0; i < ()( 
I2C_PORT_TEMP_SENSOR
); i++) {

1099 
ts_addr
 = 
I2C_PORT_TEMP_SENSOR
[
i
];

1100 
îr
 = 
	`i2c_löuxdev_›í
(
I2C_DEVICE
, 
ts_addr
, &
ts_fd
);

1101 i‡(
îr
 !
LGW_I2C_SUCCESS
) {

1102 
	`¥ötf
("ERROR: faûedÅÿ›í I2C f‹Åem≥øtuª sís‹ o¿p‹à0x%02X\n", 
ts_addr
);

1103  
LGW_HAL_ERROR
;

1106 
îr
 = 
	`°ts751_c⁄figuª
(
ts_fd
, 
ts_addr
);

1107 i‡(
îr
 !
LGW_I2C_SUCCESS
) {

1108 
	`¥ötf
("INFO:Çÿãm≥øtuª sís‹ found o¿p‹à0x%02X\n", 
ts_addr
);

1109 
	`i2c_löuxdev_˛o£
(
ts_fd
);

1110 
ts_fd
 = -1;

1112 
	`¥ötf
("INFO: foundÅem≥øtuª sís‹ o¿p‹à0x%02X\n", 
ts_addr
);

1116 i‡(
i
 = 
I2C_PORT_TEMP_SENSOR
) {

1117 
	`¥ötf
("ERROR:ÇoÅemperature sensor found.\n");

1118  
LGW_HAL_ERROR
;

1121 i‡(
CONTEXT_BOARD
.
fuŒ_du∂ex
 =
åue
) {

1122 
îr
 = 
	`i2c_löuxdev_›í
(
I2C_DEVICE
, 
I2C_PORT_DAC_AD5338R
, &
ad_fd
);

1123 i‡(
îr
 !
LGW_I2C_SUCCESS
) {

1124 
	`¥ötf
("ERROR: failedÅo open I2C forád5338r\n");

1125  
LGW_HAL_ERROR
;

1128 
îr
 = 
	`ad5338r_c⁄figuª
(
ad_fd
, 
I2C_PORT_DAC_AD5338R
);

1129 i‡(
îr
 !
LGW_I2C_SUCCESS
) {

1130 
	`¥ötf
("ERROR: failedÅo configureád5338r\n");

1131 
	`i2c_löuxdev_˛o£
(
ad_fd
);

1132 
ad_fd
 = -1;

1133  
LGW_HAL_ERROR
;

1137 
uöt8_t
 
vﬁt_vÆ
[
AD5338R_CMD_SIZE
] = { 0x39, (uöt8_t)
	`VOLTAGE2HEX_H
(0), (uöt8_t)
	`VOLTAGE2HEX_L
(0) };

1138 
îr
 = 
	`ad5338r_wrôe
(
ad_fd
, 
I2C_PORT_DAC_AD5338R
, 
vﬁt_vÆ
);

1139 i‡(
îr
 !
LGW_I2C_SUCCESS
) {

1140 
	`¥ötf
("ERROR: AD5338R: failedÅo set DAC outputÅo 0V\n");

1141  
LGW_HAL_ERROR
;

1143 
	`¥ötf
("INFO: AD5338R: Së DAC ouçuàtÿ0x%02X 0x%02X\n", (
uöt8_t
)
	`VOLTAGE2HEX_H
(0), (uöt8_t)
	`VOLTAGE2HEX_L
(0));

1149 i‡(
CONTEXT_SX1261
.
íabÀ
 =
åue
) {

1150 
îr
 = 
	`sx1261_c⁄√˘
(
CONTEXT_COM_TYPE
, (CONTEXT_COM_TYPE =
LGW_COM_SPI
Ë? 
CONTEXT_SX1261
.
•i_∑th
 : 
NULL
);

1151 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1152 
	`¥ötf
("ERROR: failedÅo connectÅoÅhe sx1261Ñadio (LBT/Spectral Scan)\n");

1153  
LGW_HAL_ERROR
;

1156 
îr
 = 
	`sx1261_lﬂd_¥am
();

1157 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1158 
	`¥ötf
("ERROR: failedÅoÖatch sx1261Ñadio for LBT/Spectral Scan\n");

1159  
LGW_HAL_ERROR
;

1162 
îr
 = 
	`sx1261_ˇlibøã
(
CONTEXT_RF_CHAIN
[0].
‰eq_hz
);

1163 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1164 
	`¥ötf
("ERROR: failedÅo calibrate sx1261Ñadio\n");

1165  
LGW_HAL_ERROR
;

1168 
îr
 = 
	`sx1261_£tup
();

1169 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1170 
	`¥ötf
("ERROR: failedÅo setup sx1261Ñadio\n");

1171  
LGW_HAL_ERROR
;

1176 
îr
 = 
	`sx1302_£t_gpio
(0x01);

1177 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1178 
	`¥ötf
("ERROR: failedÅo set CONFIG_DONE GPIO\n");

1179  
LGW_HAL_ERROR
;

1183 
CONTEXT_STARTED
 = 
åue
;

1185 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1187  
LGW_HAL_SUCCESS
;

1188 
	}
}

1192 
	$lgw_°›
() {

1193 
i
, 
x
, 
îr
 = 
LGW_HAL_SUCCESS
;

1195 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1197 i‡(
CONTEXT_STARTED
 =
Ál£
) {

1198 
	`DEBUG_MSG
("Note: LoRa concentrator wasÇot started...\n");

1199  
LGW_HAL_SUCCESS
;

1203 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

1204 
	`DEBUG_PRINTF
("INFO:áb‹tög TX o¿chaö %u\n", 
i
);

1205 
x
 = 
	`lgw_ab‹t_tx
(
i
);

1206 i‡(
x
 !
LGW_HAL_SUCCESS
) {

1207 
	`¥ötf
("WARNING: faûedÅÿgëáb‹àTX o¿chaö %u\n", 
i
);

1208 
îr
 = 
LGW_HAL_ERROR
;

1213 i‡(
log_fûe
 !
NULL
) {

1214 
	`f˛o£
(
log_fûe
);

1215 
log_fûe
 = 
NULL
;

1218 
	`DEBUG_MSG
("INFO: Disconnecting\n");

1219 
x
 = 
	`lgw_disc⁄√˘
();

1220 i‡(
x
 !
LGW_HAL_SUCCESS
) {

1221 
	`¥ötf
("ERROR: failedÅo disconnect concentrator\n");

1222 
îr
 = 
LGW_HAL_ERROR
;

1225 i‡(
CONTEXT_COM_TYPE
 =
LGW_COM_SPI
) {

1227 
	`DEBUG_MSG
("INFO: Closing I2C forÅemperature sensor\n");

1228 
x
 = 
	`i2c_löuxdev_˛o£
(
ts_fd
);

1229 i‡(
x
 != 0) {

1230 
	`¥ötf
("ERROR: faûedÅÿ˛o£ I2CÅem≥øtuª sís‹ devi˚ (îr=%i)\n", 
x
);

1231 
îr
 = 
LGW_HAL_ERROR
;

1234 i‡(
CONTEXT_BOARD
.
fuŒ_du∂ex
 =
åue
) {

1235 
	`DEBUG_MSG
("INFO: Closing I2C for AD5338R\n");

1236 
x
 = 
	`i2c_löuxdev_˛o£
(
ad_fd
);

1237 i‡(
x
 != 0) {

1238 
	`¥ötf
("ERROR: faûedÅÿ˛o£ I2C AD5338R devi˚ (îr=%i)\n", 
x
);

1239 
îr
 = 
LGW_HAL_ERROR
;

1245 
CONTEXT_STARTED
 = 
Ál£
;

1247 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1249  
îr
;

1250 
	}
}

1254 
	$lgw_ª˚ive
(
uöt8_t
 
max_pkt
, 
lgw_pkt_rx_s
 *
pkt_d©a
) {

1255 
ªs
;

1256 
uöt8_t
 
nb_pkt_„tched
 = 0;

1257 
uöt8_t
 
nb_pkt_found
 = 0;

1258 
uöt8_t
 
nb_pkt_À·
 = 0;

1259 
cuºít_ãm≥øtuª
 = 0.0, 
rssi_ãm≥øtuª_off£t
 = 0.0;

1261 
timevÆ
 
tm
;

1263 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1266 
	`_mós_time_°¨t
(&
tm
);

1269 
ªs
 = 
	`sx1302_„tch
(&
nb_pkt_„tched
);

1270 i‡(
ªs
 !
LGW_REG_SUCCESS
) {

1271 
	`¥ötf
("ERROR: failedÅo fetchÖackets from SX1302\n");

1272  
LGW_HAL_ERROR
;

1277 
ªs
 = 
	`sx1302_upd©e
();

1278 i‡(
ªs
 !
LGW_REG_SUCCESS
) {

1279  
LGW_HAL_ERROR
;

1283 i‡(
nb_pkt_„tched
 == 0) {

1284 
	`_mós_time_°›
(1, 
tm
, 
__FUNCTION__
);

1287 i‡(
nb_pkt_„tched
 > 
max_pkt
) {

1288 
nb_pkt_À·
 = 
nb_pkt_„tched
 - 
max_pkt
;

1289 
	`¥ötf
("WARNING:ÇŸÉnough s∑˚áŒoˇãd, fëched %dÖackë(s), %d wû»bêÀ· i¿RX buf„r\n", 
nb_pkt_„tched
, 
nb_pkt_À·
);

1294 
ªs
 = 
	`lgw_gë_ãm≥øtuª
(&
cuºít_ãm≥øtuª
);

1295 i‡(
ªs
 !
LGW_I2C_SUCCESS
) {

1296 
	`¥ötf
("ERROR: failedÅo get currentÅemperature\n");

1297  
LGW_HAL_ERROR
;

1302 
nb_pkt_found
 = 0;Çb_pkt_found < ((
nb_pkt_„tched
 <
max_pkt
) ?Çb_pkt_fetched : max_pkt);Çb_pkt_found++) {

1304 
ªs
 = 
	`sx1302_∑r£
(&
lgw_c⁄ãxt
, &
pkt_d©a
[
nb_pkt_found
]);

1305 i‡(
ªs
 =
LGW_REG_WARNING
) {

1306 
	`¥ötf
("WARNING:Ö¨sögÉº‹ o¿∑ckë %d, disˇrdög fëchedÖackës\n", 
nb_pkt_found
);

1307  
LGW_HAL_SUCCESS
;

1308 } i‡(
ªs
 =
LGW_REG_ERROR
) {

1309 
	`¥ötf
("ERROR: f©ÆÖ¨sögÉº‹ o¿∑ckë %d,áb‹tög...\n", 
nb_pkt_found
);

1310  
LGW_HAL_ERROR
;

1314 
pkt_d©a
[
nb_pkt_found
].
rssic
 +
CONTEXT_RF_CHAIN
[pkt_d©a[nb_pkt_found].
rf_chaö
].
rssi_off£t
;

1315 
pkt_d©a
[
nb_pkt_found
].
rssis
 +
CONTEXT_RF_CHAIN
[pkt_d©a[nb_pkt_found].
rf_chaö
].
rssi_off£t
;

1317 
rssi_ãm≥øtuª_off£t
 = 
	`sx1302_rssi_gë_ãm≥øtuª_off£t
(&
CONTEXT_RF_CHAIN
[
pkt_d©a
[
nb_pkt_found
].
rf_chaö
].
rssi_tcomp
, 
cuºít_ãm≥øtuª
);

1318 
pkt_d©a
[
nb_pkt_found
].
rssic
 +
rssi_ãm≥øtuª_off£t
;

1319 
pkt_d©a
[
nb_pkt_found
].
rssis
 +
rssi_ãm≥øtuª_off£t
;

1320 
	`DEBUG_PRINTF
("INFO: RSSIÅem≥øtuª off£à≠∂õd: %.3‡dB (cuºíàãm≥øtuª %.1‡C)\n", 
rssi_ãm≥øtuª_off£t
, 
cuºít_ãm≥øtuª
);

1323 
	`DEBUG_PRINTF
("INFO:ÇbÖkàfound:%uÜe·:%u\n", 
nb_pkt_found
, 
nb_pkt_À·
);

1326 i‡((
nb_pkt_found
 > 0Ë&& (
CONTEXT_FINE_TIMESTAMP
.
íabÀ
 =
åue
)) {

1327 
ªs
 = 
	`mîge_∑ckës
(
pkt_d©a
, &
nb_pkt_found
);

1328 i‡(
ªs
 != 0) {

1329 
	`¥ötf
("WARNING: failedÅoÑemove duplicatedÖackets\n");

1332 
	`DEBUG_PRINTF
("INFO:ÇbÖkàfound:%u (a·î de-du∂iˇtög)\n", 
nb_pkt_found
);

1335 
	`_mós_time_°›
(1, 
tm
, 
__FUNCTION__
);

1337 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1339  
nb_pkt_found
;

1340 
	}
}

1344 
	$lgw_£nd
(
lgw_pkt_tx_s
 * 
pkt_d©a
) {

1345 
îr
;

1346 
boﬁ
 
lbt_tx_Ælowed
;

1348 
timevÆ
 
tm
;

1350 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1353 
	`_mós_time_°¨t
(&
tm
);

1356 i‡(
CONTEXT_STARTED
 =
Ál£
) {

1357 
	`¥ötf
("ERROR: CONCENTRATOR IS NOT RUNNING, START IT BEFORE SENDING\n");

1358  
LGW_HAL_ERROR
;

1361 
	`CHECK_NULL
(
pkt_d©a
);

1364 i‡(
pkt_d©a
->
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

1365 
	`¥ötf
("ERROR: INVALID RF_CHAIN TO SEND PACKETS\n");

1366  
LGW_HAL_ERROR
;

1370 i‡(
CONTEXT_RF_CHAIN
[
pkt_d©a
->
rf_chaö
].
tx_íabÀ
 =
Ál£
) {

1371 
	`¥ötf
("ERROR: SELECTED RF_CHAIN IS DISABLED FOR TX ON SELECTED BOARD\n");

1372  
LGW_HAL_ERROR
;

1374 i‡(
CONTEXT_RF_CHAIN
[
pkt_d©a
->
rf_chaö
].
íabÀ
 =
Ál£
) {

1375 
	`¥ötf
("ERROR: SELECTED RF_CHAIN IS DISABLED\n");

1376  
LGW_HAL_ERROR
;

1378 i‡(!
	`IS_TX_MODE
(
pkt_d©a
->
tx_mode
)) {

1379 
	`¥ötf
("ERROR: TX_MODE NOT SUPPORTED\n");

1380  
LGW_HAL_ERROR
;

1382 i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_LORA
) {

1383 i‡(!
	`IS_LORA_BW
(
pkt_d©a
->
b™dwidth
)) {

1384 
	`¥ötf
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA TX\n");

1385  
LGW_HAL_ERROR
;

1387 i‡(!
	`IS_LORA_DR
(
pkt_d©a
->
d©¨©e
)) {

1388 
	`¥ötf
("ERROR: DATARATE NOT SUPPORTED BY LORA TX\n");

1389  
LGW_HAL_ERROR
;

1391 i‡(!
	`IS_LORA_CR
(
pkt_d©a
->
codî©e
)) {

1392 
	`¥ötf
("ERROR: CODERATE NOT SUPPORTED BY LORA TX\n");

1393  
LGW_HAL_ERROR
;

1395 i‡(
pkt_d©a
->
size
 > 255) {

1396 
	`¥ötf
("ERROR: PAYLOAD LENGTH TOO BIG FOR LORA TX\n");

1397  
LGW_HAL_ERROR
;

1399 } i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_FSK
) {

1400 if((
pkt_d©a
->
f_dev
 < 1) || (pkt_data->f_dev > 200)) {

1401 
	`¥ötf
("ERROR: TX FREQUENCY DEVIATION OUT OF ACCEPTABLE RANGE\n");

1402  
LGW_HAL_ERROR
;

1404 if(!
	`IS_FSK_DR
(
pkt_d©a
->
d©¨©e
)) {

1405 
	`¥ötf
("ERROR: DATARATE NOT SUPPORTED BY FSK IF CHAIN\n");

1406  
LGW_HAL_ERROR
;

1408 i‡(
pkt_d©a
->
size
 > 255) {

1409 
	`¥ötf
("ERROR: PAYLOAD LENGTH TOO BIG FOR FSK TX\n");

1410  
LGW_HAL_ERROR
;

1412 } i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_CW
) {

1415 
	`¥ötf
("ERROR: INVALID TX MODULATION\n");

1416  
LGW_HAL_ERROR
;

1421 i‡(
CONTEXT_BOARD
.
fuŒ_du∂ex
 =
åue
) {

1422 
uöt8_t
 
vﬁt_vÆ
[
AD5338R_CMD_SIZE
] = {0x39, 
	`VOLTAGE2HEX_H
(2.51), 
	`VOLTAGE2HEX_L
(2.51)};

1423 
îr
 = 
	`ad5338r_wrôe
(
ad_fd
, 
I2C_PORT_DAC_AD5338R
, 
vﬁt_vÆ
);

1424 i‡(
îr
 !
LGW_I2C_SUCCESS
) {

1425 
	`¥ötf
("ERROR: failedÅo set voltage byád5338r\n");

1426  
LGW_HAL_ERROR
;

1428 
	`¥ötf
("INFO: AD5338R: Së DAC ouçuàtÿ0x%02X 0x%02X\n", (
uöt8_t
)
	`VOLTAGE2HEX_H
(2.51), (uöt8_t)
	`VOLTAGE2HEX_L
(2.51));

1432 i‡(
CONTEXT_SX1261
.
lbt_c⁄f
.
íabÀ
 =
åue
) {

1433 
îr
 = 
	`lgw_lbt_°¨t
(&
CONTEXT_SX1261
, 
pkt_d©a
);

1434 i‡(
îr
 != 0) {

1435 
	`¥ötf
("ERROR: failedÅo start LBT\n");

1436  
LGW_HAL_ERROR
;

1441 
îr
 = 
	`sx1302_£nd
(
CONTEXT_RF_CHAIN
[
pkt_d©a
->
rf_chaö
].
ty≥
, &
CONTEXT_TX_GAIN_LUT
[pkt_d©a->rf_chaö], 
CONTEXT_LWAN_PUBLIC
, &
CONTEXT_FSK
,Ökt_data);

1442 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1443 
	`¥ötf
("ERROR: %s: FaûedÅÿ£ndÖackë\n", 
__FUNCTION__
);

1445 i‡(
CONTEXT_SX1261
.
lbt_c⁄f
.
íabÀ
 =
åue
) {

1446 
îr
 = 
	`lgw_lbt_°›
();

1447 i‡(
îr
 != 0) {

1448 
	`¥ötf
("ERROR: %s: FaûedÅÿ°› LBT\n", 
__FUNCTION__
);

1452  
LGW_HAL_ERROR
;

1455 
	`_mós_time_°›
(1, 
tm
, 
__FUNCTION__
);

1458 i‡(
CONTEXT_SX1261
.
lbt_c⁄f
.
íabÀ
 =
åue
) {

1459 
îr
 = 
	`lgw_lbt_tx_°©us
(
pkt_d©a
->
rf_chaö
, &
lbt_tx_Ælowed
);

1460 i‡(
îr
 != 0) {

1461 
	`¥ötf
("ERROR: %s: FaûedÅÿgë LBT TX sètus, TXáb‹ãd\n", 
__FUNCTION__
);

1462 
îr
 = 
	`sx1302_tx_ab‹t
(
pkt_d©a
->
rf_chaö
);

1463 i‡(
îr
 != 0) {

1464 
	`¥ötf
("ERROR: %s: FaûedÅÿab‹àTX\n", 
__FUNCTION__
);

1466 
îr
 = 
	`lgw_lbt_°›
();

1467 i‡(
îr
 != 0) {

1468 
	`¥ötf
("ERROR: %s: FaûedÅÿ°› LBT\n", 
__FUNCTION__
);

1470  
LGW_HAL_ERROR
;

1472 i‡(
lbt_tx_Ælowed
 =
åue
) {

1473 
	`¥ötf
("LBT:Öacket isállowedÅo beÅransmitted\n");

1475 
	`¥ötf
("LBT: (ERROR)Öacket is NOTállowedÅo beÅransmitted\n");

1478 
îr
 = 
	`lgw_lbt_°›
();

1479 i‡(
îr
 != 0) {

1480 
	`¥ötf
("ERROR: %s: FaûedÅÿ°› LBT\n", 
__FUNCTION__
);

1481  
LGW_HAL_ERROR
;

1485 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1487 i‡(
CONTEXT_SX1261
.
lbt_c⁄f
.
íabÀ
 =
åue
 && 
lbt_tx_Ælowed
 =
Ál£
) {

1488  
LGW_LBT_NOT_ALLOWED
;

1490  
LGW_HAL_SUCCESS
;

1492 
	}
}

1496 
	$lgw_°©us
(
uöt8_t
 
rf_chaö
, uöt8_à
£À˘
, uöt8_à*
code
) {

1497 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1500 
	`CHECK_NULL
(
code
);

1501 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

1502 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

1503  
LGW_HAL_ERROR
;

1507 i‡(
£À˘
 =
TX_STATUS
) {

1508 i‡(
CONTEXT_STARTED
 =
Ál£
) {

1509 *
code
 = 
TX_OFF
;

1511 *
code
 = 
	`sx1302_tx_°©us
(
rf_chaö
);

1513 } i‡(
£À˘
 =
RX_STATUS
) {

1514 i‡(
CONTEXT_STARTED
 =
Ál£
) {

1515 *
code
 = 
RX_OFF
;

1517 *
code
 = 
	`sx1302_rx_°©us
(
rf_chaö
);

1520 
	`DEBUG_MSG
("ERROR: SELECTION INVALID, NO STATUS TO RETURN\n");

1521  
LGW_HAL_ERROR
;

1524 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1527  
LGW_HAL_SUCCESS
;

1528 
	}
}

1532 
	$lgw_ab‹t_tx
(
uöt8_t
 
rf_chaö
) {

1533 
îr
;

1535 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1538 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

1539 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

1540  
LGW_HAL_ERROR
;

1544 
îr
 = 
	`sx1302_tx_ab‹t
(
rf_chaö
);

1546 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1548  
îr
;

1549 
	}
}

1553 
	$lgw_gë_åig˙t
(
uöt32_t
* 
åig_˙t_us
) {

1554 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1556 
	`CHECK_NULL
(
åig_˙t_us
);

1558 *
åig_˙t_us
 = 
	`sx1302_time°amp_cou¡î
(
åue
);

1560 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1562  
LGW_HAL_SUCCESS
;

1563 
	}
}

1567 
	$lgw_gë_ö°˙t
(
uöt32_t
* 
ö°_˙t_us
) {

1568 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1570 
	`CHECK_NULL
(
ö°_˙t_us
);

1572 *
ö°_˙t_us
 = 
	`sx1302_time°amp_cou¡î
(
Ál£
);

1574 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1576  
LGW_HAL_SUCCESS
;

1577 
	}
}

1581 
	$lgw_gë_eui
(
uöt64_t
* 
eui
) {

1582 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1584 
	`CHECK_NULL
(
eui
);

1586 i‡(
	`sx1302_gë_eui
(
eui
Ë!
LGW_REG_SUCCESS
) {

1587  
LGW_HAL_ERROR
;

1590 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1592  
LGW_HAL_SUCCESS
;

1593 
	}
}

1597 
	$lgw_gë_ãm≥øtuª
(* 
ãm≥øtuª
) {

1598 
îr
 = 
LGW_HAL_SUCCESS
;

1600 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1602 
	`CHECK_NULL
(
ãm≥øtuª
);

1604 
CONTEXT_COM_TYPE
) {

1605 
LGW_COM_SPI
:

1608 
LGW_COM_USB
:

1609 
îr
 = 
	`lgw_com_gë_ãm≥øtuª
(
ãm≥øtuª
);

1612 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

1616 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1618  
îr
;

1619 
	}
}

1623 c⁄° * 
	$lgw_vîsi⁄_öfo
() {

1624  
lgw_vîsi⁄_°rög
;

1625 
	}
}

1629 
uöt32_t
 
	$lgw_time_⁄_aú
(c⁄° 
lgw_pkt_tx_s
 *
∑ckë
) {

1630 
t_fsk
;

1631 
uöt32_t
 
tﬂ_ms
, 
tﬂ_us
;

1633 
	`DEBUG_PRINTF
(" --- %s\n", "IN");

1635 i‡(
∑ckë
 =
NULL
) {

1636 
	`¥ötf
("ERROR: FailedÅo computeÅime onáir, wrongÖarameter\n");

1640 i‡(
∑ckë
->
moduœti⁄
 =
MOD_LORA
) {

1641 
tﬂ_us
 = 
	`l‹a_∑ckë_time_⁄_aú
(
∑ckë
->
b™dwidth
,Öackë->
d©¨©e
,Öackë->
codî©e
,Öackë->
¥ómbÀ
,Öackë->
no_hódî
,Öackë->
no_¸c
,Öackë->
size
, 
NULL
, NULL, NULL);

1642 
tﬂ_ms
 = (
uöt32_t
)–()
tﬂ_us
 / 1000.0 + 0.5 );

1643 
	`DEBUG_PRINTF
("INFO: LoR®∑ckë ToA: %u ms\n", 
tﬂ_ms
);

1644 } i‡(
∑ckë
->
moduœti⁄
 =
MOD_FSK
) {

1652 
t_fsk
 = (8 * ()(
∑ckë
->
¥ómbÀ
 + 
CONTEXT_FSK
.
sync_w‹d_size
 + 1 +Öackë->
size
 + (’ackë->
no_¸c
 =
åue
Ë? 0 : 2)Ë/ (Ìackë->
d©¨©e
) * 1E3;

1655 
tﬂ_ms
 = (
uöt32_t
)
t_fsk
 + 1;

1657 
tﬂ_ms
 = 0;

1658 
	`¥ötf
("ERROR: C™nŸ compuãÅimê⁄áú f‹Åhi†∑ckë, unsuµ‹ãd moduœti⁄ (0x%02X)\n", 
∑ckë
->
moduœti⁄
);

1661 
	`DEBUG_PRINTF
(" --- %s\n", "OUT");

1663  
tﬂ_ms
;

1664 
	}
}

1668 
	$lgw_•e˘øl_sˇn_°¨t
(
uöt32_t
 
‰eq_hz
, 
uöt16_t
 
nb_sˇn
) {

1669 
îr
;

1671 i‡(
CONTEXT_SX1261
.
íabÀ
 !
åue
) {

1672 
	`¥ötf
("ERROR: sx1261 isÇotÉnabled,Ço spectral scan\n");

1673  
LGW_HAL_ERROR
;

1676 
îr
 = 
	`sx1261_£t_rx_∑øms
(
‰eq_hz
, 
BW_125KHZ
);

1677 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1678 
	`¥ötf
("ERROR: FailedÅo set RXÖarams for Spectral Scan\n");

1679  
LGW_HAL_ERROR
;

1682 
îr
 = 
	`sx1261_•e˘øl_sˇn_°¨t
(
nb_sˇn
);

1683 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1684 
	`¥ötf
("ERROR: start spectral scan failed\n");

1685  
LGW_HAL_ERROR
;

1688  
LGW_HAL_SUCCESS
;

1689 
	}
}

1693 
	$lgw_•e˘øl_sˇn_gë_°©us
(
lgw_•e˘øl_sˇn_°©us_t
 * 
°©us
) {

1694  
	`sx1261_•e˘øl_sˇn_°©us
(
°©us
);

1695 
	}
}

1699 
	$lgw_•e˘øl_sˇn_gë_ªsu…s
(
öt16_t
 
Àvñs_dbm
[
LGW_SPECTRAL_SCAN_RESULT_SIZE
], 
uöt16_t
 
ªsu…s
[LGW_SPECTRAL_SCAN_RESULT_SIZE]) {

1700  
	`sx1261_•e˘øl_sˇn_gë_ªsu…s
(
CONTEXT_SX1261
.
rssi_off£t
, 
Àvñs_dbm
, 
ªsu…s
);

1701 
	}
}

1705 
	$lgw_•e˘øl_sˇn_ab‹t
() {

1706  
	`sx1261_•e˘øl_sˇn_ab‹t
();

1707 
	}
}

	@libloragw/src/loragw_i2c.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<uni°d.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

25 
	~<sys/io˘l.h
>

26 
	~<löux/i2c.h
>

27 
	~<löux/i2c-dev.h
>

29 
	~"l‹agw_i2c.h
"

30 
	~"l‹agw_aux.h
"

35 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

36 #i‡
DEBUG_I2C
 == 1

37 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

38 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

39 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_I2C_ERROR
;}

	)

41 
	#DEBUG_MSG
(
°r
)

	)

42 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

43 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_I2C_ERROR
;}

	)

52 
	$i2c_löuxdev_›í
(c⁄° *
∑th
, 
uöt8_t
 
devi˚_addr
, *
i2c_fd
) {

53 
dev
;

56 i‡(
∑th
 =
NULL
) {

57 
	`DEBUG_MSG
("ERROR:ÇullÖointerÖath\n");

58  
LGW_I2C_ERROR
;

60 i‡(
i2c_fd
 =
NULL
) {

61 
	`DEBUG_MSG
("ERROR:ÇullÖointer i2c_fd\n");

62  
LGW_I2C_ERROR
;

66 
dev
 = 
	`›í
(
∑th
, 
O_RDWR
);

67 i‡(
dev
 < 0) {

68 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿ›í I2C %†- %s\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

69  
LGW_I2C_ERROR
;

73 i‡(
	`io˘l
(
dev
, 
I2C_SLAVE
, 
devi˚_addr
) < 0) {

74 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿacquúêbu†ac˚s†™d/‹ÅÆkÅÿ¶avê- %s\n", 
	`°ªº‹
(
î∫o
));

75  
LGW_I2C_ERROR
;

78 
	`DEBUG_PRINTF
("INFO: I2CÖ‹à›íed suc˚ssfuŒy (%s, 0x%02X)\n", 
∑th
, 
devi˚_addr
);

79 *
i2c_fd
 = 
dev
;

81  
LGW_I2C_SUCCESS
;

82 
	}
}

86 
	$i2c_löuxdev_ªad
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à*
d©a
) {

87 
uöt8_t
 *
öbuff
, 
outbuff
;

88 
i2c_rdwr_io˘l_d©a
 
∑ckës
;

89 
i2c_msg
 
mesßges
[2];

91 
outbuff
 = 
ªg_addr
;

92 
mesßges
[0].
addr
 = 
devi˚_addr
;

93 
mesßges
[0].
Êags
= 0;

94 
mesßges
[0].
Àn
 = (
outbuff
);

95 
mesßges
[0].
buf
 = &
outbuff
;

97 
öbuff
 = 
d©a
;

98 
mesßges
[1].
addr
 = 
devi˚_addr
;

99 
mesßges
[1].
Êags
 = 
I2C_M_RD
;

100 
mesßges
[1].
Àn
 = (*
öbuff
);

101 
mesßges
[1].
buf
 = 
öbuff
;

103 
∑ckës
.
msgs
 = 
mesßges
;

104 
∑ckës
.
nmsgs
 = 2;

106 i‡(
	`io˘l
(
i2c_fd
, 
I2C_RDWR
, &
∑ckës
) < 0) {

107 
	`DEBUG_PRINTF
("ERROR: Ród from I2C Devi˚ faûed (%d, 0x%02x, 0x%02xË- %s\n", 
i2c_fd
, 
devi˚_addr
, 
ªg_addr
, 
	`°ªº‹
(
î∫o
));

108  
LGW_I2C_ERROR
;

111  
LGW_I2C_SUCCESS
;

112 
	}
}

116 
	$i2c_löuxdev_wrôe
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à
d©a
) {

117 
buff
[2];

118 
i2c_rdwr_io˘l_d©a
 
∑ckës
;

119 
i2c_msg
 
mesßges
[1];

121 
buff
[0] = 
ªg_addr
;

122 
buff
[1] = 
d©a
;

124 
mesßges
[0].
addr
 = 
devi˚_addr
;

125 
mesßges
[0].
Êags
 = 0;

126 
mesßges
[0].
Àn
 = (
buff
);

127 
mesßges
[0].
buf
 = 
buff
;

129 
∑ckës
.
msgs
 = 
mesßges
;

130 
∑ckës
.
nmsgs
 = 1;

132 i‡(
	`io˘l
(
i2c_fd
, 
I2C_RDWR
, &
∑ckës
) < 0) {

133 
	`DEBUG_PRINTF
("ERROR: WrôêtÿI2C Devi˚ faûed (%d, 0x%02x, 0x%02xË- %s\n", 
i2c_fd
, 
devi˚_addr
, 
ªg_addr
, 
	`°ªº‹
(
î∫o
));

134  
LGW_I2C_ERROR
;

137  
LGW_I2C_SUCCESS
;

138 
	}
}

142 
	$i2c_löuxdev_wrôe_buf„r
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à*
buf„r
, uöt8_à
size
) {

143 
i2c_rdwr_io˘l_d©a
 
∑ckës
;

144 
i2c_msg
 
mesßges
[1];

147 
	`CHECK_NULL
(
buf„r
);

149 
mesßges
[0].
addr
 = 
devi˚_addr
;

150 
mesßges
[0].
Êags
 = 0;

151 
mesßges
[0].
Àn
 = 
size
;

152 
mesßges
[0].
buf
 = 
buf„r
;

154 
∑ckës
.
msgs
 = 
mesßges
;

155 
∑ckës
.
nmsgs
 = 1;

157 i‡(
	`io˘l
(
i2c_fd
, 
I2C_RDWR
, &
∑ckës
) < 0) {

158 
	`DEBUG_PRINTF
("ERROR: Wrôêbuf„∏tÿI2C Devi˚ faûed (%d, 0x%02xË- %s\n", 
i2c_fd
, 
devi˚_addr
, 
	`°ªº‹
(
î∫o
));

159  
LGW_I2C_ERROR
;

162  
LGW_I2C_SUCCESS
;

163 
	}
}

167 
	$i2c_löuxdev_˛o£
(
i2c_fd
) {

168 
i
;

170 
i
 = 
	`˛o£
(
i2c_fd
);

171 i‡(
i
 == 0) {

172 
	`DEBUG_MSG
("INFO: I2CÖort closed successfully\n");

173  
LGW_I2C_SUCCESS
;

175 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿ˛o£ I2C - %s\n", 
	`°ªº‹
(
î∫o
));

176  
LGW_I2C_ERROR
;

178 
	}
}

	@libloragw/src/loragw_lbt.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

29 
	~"l‹agw_aux.h
"

30 
	~"l‹agw_lbt.h
"

31 
	~"l‹agw_sx1261.h
"

32 
	~"l‹agw_sx1302.h
"

33 
	~"l‹agw_hÆ.h
"

38 #i‡
DEBUG_LBT
 == 1

39 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

42 
	#DEBUG_MSG
(
°r
)

	)

43 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

52 
boﬁ
 
	$is_equÆ_‰eq
(
uöt32_t
 
a
, uöt32_à
b
) {

53 
öt64_t
 
diff
;

54 
öt64_t
 
a64
 = (öt64_t)
a
;

55 
öt64_t
 
b64
 = (öt64_t)
b
;

58 
diff
 = 
	`Œabs
(
a64
 - 
b64
);

61  ((
diff
 <10000Ë? 
åue
 : 
Ál£
);

62 
	}
}

66 
	$is_lbt_ch™√l
(c⁄° 
lgw_c⁄f_lbt_s
 * 
lbt_c⁄ãxt
, 
uöt32_t
 
‰eq_hz
, 
uöt8_t
 
b™dwidth
) {

67 
i
;

68 
lbt_ch™√l_m©ch
 = -1;

70 
i
 = 0; i < 
lbt_c⁄ãxt
->
nb_ch™√l
; i++) {

71 i‡((
	`is_equÆ_‰eq
(
‰eq_hz
, 
lbt_c⁄ãxt
->
ch™√ls
[
i
].‰eq_hzË=
åue
Ë&& (
b™dwidth
 ==Übt_context->channels[i].bandwidth)) {

72 
	`DEBUG_PRINTF
("LBT: sñe˘ ch™√»%d (‰eq:%u Hz, bw:0x%02X)\n", 
i
, 
lbt_c⁄ãxt
->
ch™√ls
[i].
‰eq_hz
,Übt_c⁄ãxt->ch™√ls[i].
b™dwidth
);

73 
lbt_ch™√l_m©ch
 = 
i
;

79  
lbt_ch™√l_m©ch
;

80 
	}
}

85 
	$lgw_lbt_°¨t
(c⁄° 
lgw_c⁄f_sx1261_s
 * 
sx1261_c⁄ãxt
, c⁄° 
lgw_pkt_tx_s
 * 
pkt
) {

86 
îr
;

87 
lbt_ch™√l_£À˘ed
;

88 
uöt32_t
 
tﬂ_ms
;

90 
timevÆ
 
tm
;

93 
	`_mós_time_°¨t
(&
tm
);

96 
lbt_ch™√l_£À˘ed
 = 
	`is_lbt_ch™√l
(&(
sx1261_c⁄ãxt
->
lbt_c⁄f
), 
pkt
->
‰eq_hz
,Ökt->
b™dwidth
);

97 i‡(
lbt_ch™√l_£À˘ed
 == -1) {

98 
	`¥ötf
("ERROR: Cannot start LBT - wrong channel\n");

104 i‡(
sx1261_c⁄ãxt
->
lbt_c⁄f
.
ch™√ls
[
lbt_ch™√l_£À˘ed
].
å™smô_time_ms
 * 1000 <= 1500) {

105 
	`¥ötf
("ERROR: Cannot start LBT - channelÅransmit_time_ms must be > 1.5ms\n");

108 
tﬂ_ms
 = 
	`lgw_time_⁄_aú
(
pkt
);

109 i‡((
tﬂ_ms
 * 1000Ë> (
uöt32_t
)(
sx1261_c⁄ãxt
->
lbt_c⁄f
.
ch™√ls
[
lbt_ch™√l_£À˘ed
].
å™smô_time_ms
 * 1000 - 1500)) {

110 
	`¥ötf
("ERROR: C™nŸ sèπ LBT -ÖackëÅimê⁄áúÉx˚ed†ÆlowedÅønsmôÅimê—ﬂ:%ums, max:%ums)\n", 
tﬂ_ms
, 
sx1261_c⁄ãxt
->
lbt_c⁄f
.
ch™√ls
[
lbt_ch™√l_£À˘ed
].
å™smô_time_ms
);

115 
îr
 = 
	`sx1261_£t_rx_∑øms
(
pkt
->
‰eq_hz
,Ökt->
b™dwidth
);

116 i‡(
îr
 != 0) {

117 
	`¥ötf
("ERROR: Cannot start LBT - unableÅo set sx1261 RXÖarameters\n");

122 
îr
 = 
	`sx1261_lbt_°¨t
(
sx1261_c⁄ãxt
->
lbt_c⁄f
.
ch™√ls
[
lbt_ch™√l_£À˘ed
].
sˇn_time_us
, sx1261_c⁄ãxt->lbt_c⁄f.
rssi_èrgë
 + sx1261_c⁄ãxt->
rssi_off£t
);

123 i‡(
îr
 != 0) {

124 
	`¥ötf
("ERROR: Cannot start LBT - sx1261 LBT start\n");

128 
	`_mós_time_°›
(3, 
tm
, 
__FUNCTION__
);

131 
	}
}

135 
	$lgw_lbt_tx_°©us
(
uöt8_t
 
rf_chaö
, 
boﬁ
 * 
tx_ok
) {

136 
îr
;

137 
uöt8_t
 
°©us
;

138 
boﬁ
 
tx_timeout
 = 
Ál£
;

139 
timevÆ
 
tm_°¨t
;

141 
timevÆ
 
tm
;

144 
	`_mós_time_°¨t
(&
tm
);

149 
	`timeout_°¨t
(&
tm_°¨t
);

152 i‡(
	`timeout_check
(
tm_°¨t
, 500) != 0) {

153 
	`¥ötf
("ERROR: %s: TIMEOUT o¿TX sèπ,ÇŸ sèπed\n", 
__FUNCTION__
);

154 
tx_timeout
 = 
åue
;

160 
îr
 = 
	`sx1302_agc_°©us
(&
°©us
);

161 i‡(
îr
 != 0) {

162 
	`¥ötf
("ERROR: %s: faûedÅÿgë AGC sètus\n", 
__FUNCTION__
);

165 
	`waô_ms
(1);

166 } (
°©us
 & (1 << 
rf_chaö
)) == 0x00);

168 i‡(
tx_timeout
 =
Ál£
) {

172 i‡(
	`TAKE_N_BITS_FROM
(
°©us
, ((
rf_chaö
 == 0) ? 6 : 7), 1) == 0) {

173 *
tx_ok
 = 
åue
;

175 *
tx_ok
 = 
Ál£
;

180 
	`sx1302_agc_maûbox_wrôe
(0, 0xFF);

183 
	`timeout_°¨t
(&
tm_°¨t
);

186 i‡(
	`timeout_check
(
tm_°¨t
, 500) != 0) {

187 
	`¥ötf
("ERROR: %s: TIMEOUT o¿TX sèπ (AGC cÀ¨ sètus)\n", 
__FUNCTION__
);

188 
tx_timeout
 = 
åue
;

193 
îr
 = 
	`sx1302_agc_°©us
(&
°©us
);

194 i‡(
îr
 != 0) {

195 
	`¥ötf
("ERROR: %s: faûedÅÿgë AGC sètus\n", 
__FUNCTION__
);

198 
	`waô_ms
(1);

199 } 
°©us
 != 0x00);

202 
	`sx1302_agc_maûbox_wrôe
(0, 0x00);

204 
	`_mós_time_°›
(3, 
tm
, 
__FUNCTION__
);

206 i‡(
tx_timeout
 =
åue
) {

211 
	}
}

215 
	$lgw_lbt_°›
() {

216 
îr
;

219 
timevÆ
 
tm
;

222 
	`_mós_time_°¨t
(&
tm
);

224 
îr
 = 
	`sx1261_lbt_°›
();

225 i‡(
îr
 != 0) {

226 
	`¥ötf
("ERROR: Cannot stop LBT - failed\n");

230 
	`_mós_time_°›
(3, 
tm
, 
__FUNCTION__
);

233 
	}
}

	@libloragw/src/loragw_mcu.c

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<°rög.h
>

27 
	~<î∫o.h
>

28 
	~<ãrmios.h
>

30 
	~"l‹agw_mcu.h
"

31 
	~"l‹agw_aux.h
"

36 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

37 #i‡
DEBUG_MCU
 == 1

38 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

39 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
, fmt,árgs)

	)

40 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); -1;}

	)

42 
	#DEBUG_MSG
(
°r
)

	)

43 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

44 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ -1;}

	)

50 #i‡
DEBUG_MCU
 == 1

51 
	#DEBUG_VERBOSE
 0

	)

54 
	#HEADER_CMD_SIZE
 4

	)

59 
	s•i_ªq_bulk_s
 {

60 
uöt16_t
 
	msize
;

61 
uöt8_t
 
	mnb_ªq
;

62 
uöt8_t
 
	mbuf„r
[
LGW_USB_BURST_CHUNK
];

63 } 
	t•i_ªq_bulk_t
;

68 
uöt8_t
 
	gbuf_hdr
[
HEADER_CMD_SIZE
];

70 
•i_ªq_bulk_t
 
	g•i_bulk_buf„r
 = {

71 .
size
 = 0,

72 .
	gnb_ªq
 = 0,

73 .
	gbuf„r
 = { 0 }

79 
	$•i_ªq_bulk_ö£π
(
•i_ªq_bulk_t
 * 
bulk_buf„r
, 
uöt8_t
 * 
ªq
, 
uöt16_t
 
ªq_size
) {

81 
	`CHECK_NULL
(
bulk_buf„r
);

82 
	`CHECK_NULL
(
ªq
);

84 i‡(
bulk_buf„r
->
nb_ªq
 == 255) {

85 
	`¥ötf
("ERROR: cannot insertáÇew SPIÑequest in bulk buffer -Åoo manyÑequests\n");

89 i‡((
bulk_buf„r
->
size
 + 
ªq_size
Ë> 
LGW_USB_BURST_CHUNK
) {

90 
	`¥ötf
("ERROR: cannot insertáÇew SPIÑequest in bulk buffer - buffer full\n");

95 
	`mem˝y
(
bulk_buf„r
->
buf„r
 + bulk_buf„r->
size
, 
ªq
, 
ªq_size
);

97 
bulk_buf„r
->
nb_ªq
 += 1;

98 
bulk_buf„r
->
size
 +
ªq_size
;

101 
	}
}

105 
uöt32_t
 
	$byãs_be_to_uöt32_À
(c⁄° 
uöt8_t
 * 
byãs
) {

106 
uöt32_t
 
vÆ
 = 0;

108 i‡(
byãs
 !
NULL
) {

110 
vÆ
 = (
uöt32_t
)(
byãs
[0] << 24);

111 
vÆ
 |(
uöt32_t
)(
byãs
[1] << 16);

112 
vÆ
 |(
uöt32_t
)(
byãs
[2] << 8);

113 
vÆ
 |(
uöt32_t
)(
byãs
[3] << 0);

116  
vÆ
;

117 
	}
}

121 
öt32_t
 
	$byãs_be_to_öt32_À
(c⁄° 
uöt8_t
 * 
byãs
) {

122 
öt32_t
 
vÆ
 = 0;

124 i‡(
byãs
 !
NULL
) {

126 
vÆ
 = (
öt32_t
)(
byãs
[0] << 24);

127 
vÆ
 |(
öt32_t
)(
byãs
[1] << 16);

128 
vÆ
 |(
öt32_t
)(
byãs
[2] << 8);

129 
vÆ
 |(
öt32_t
)(
byãs
[3] << 0);

132  
vÆ
;

133 
	}
}

137 c⁄° * 
	$cmd_gë_°r
(c⁄° 
uöt8_t
 
cmd
) {

138 
cmd
) {

139 
ORDER_ID__REQ_PING
:

141 
ORDER_ID__REQ_GET_STATUS
:

143 
ORDER_ID__REQ_BOOTLOADER_MODE
:

145 
ORDER_ID__REQ_RESET
:

147 
ORDER_ID__REQ_WRITE_GPIO
:

149 
ORDER_ID__REQ_MULTIPLE_SPI
:

154 
	}
}

158 
uöt8_t
 
	$cmd_gë_id
(c⁄° 
uöt8_t
 * 
byãs
) {

159  
byãs
[0];

160 
	}
}

164 
uöt16_t
 
	$cmd_gë_size
(c⁄° 
uöt8_t
 * 
byãs
) {

165  (
uöt16_t
)(
byãs
[1] << 8) | bytes[2];

166 
	}
}

170 
uöt8_t
 
	$cmd_gë_ty≥
(c⁄° 
uöt8_t
 * 
byãs
) {

171  
byãs
[3];

172 
	}
}

176 c⁄° * 
	$•i_°©us_gë_°r
(c⁄° 
uöt8_t
 
°©us
) {

177 
°©us
) {

178 
SPI_STATUS_OK
:

180 
SPI_STATUS_FAIL
:

182 
SPI_STATUS_WRONG_PARAM
:

184 
SPI_STATUS_TIMEOUT
:

189 
	}
}

193 
	$wrôe_ªq
(
fd
, 
‹dî_id_t
 
cmd
, c⁄° 
uöt8_t
 * 
∑ylﬂd
, 
uöt16_t
 
∑ylﬂd_size
 ) {

194 
uöt8_t
 
buf_w
[
HEADER_CMD_SIZE
];

195 
n
;

197 
timevÆ
 
tm
;

199 #i‡
DEBUG_MCU
 == 1

200 
timevÆ
 
wrôe_tv
;

204 
	`_mós_time_°¨t
(&
tm
);

207 i‡(
∑ylﬂd_size
 > 
MAX_SIZE_COMMAND
) {

208 
	`¥ötf
("ERROR:Öaylﬂd sizêex˚ed†maximumÅøns„∏sizê‘eq:%u, max:%d)\n", 
∑ylﬂd_size
, 
MAX_SIZE_COMMAND
);

213 
buf_w
[0] = 
	`ønd
() % 255;

214 
buf_w
[1] = (
uöt8_t
)(
∑ylﬂd_size
 >> 8);

215 
buf_w
[2] = (
uöt8_t
)(
∑ylﬂd_size
 >> 0);

216 
buf_w
[3] = 
cmd
;

217 
n
 = 
	`wrôe
(
fd
, 
buf_w
, 
HEADER_CMD_SIZE
);

218 i‡(
n
 < 0) {

219 
	`¥ötf
("ERROR: failedÅo write command headerÅo comÖort\n");

224 i‡(
∑ylﬂd_size
 > 0) {

225 i‡(
∑ylﬂd
 =
NULL
) {

226 
	`¥ötf
("ERROR: invalidÖayload\n");

229 
n
 = 
	`wrôe
(
fd
, 
∑ylﬂd
, 
∑ylﬂd_size
);

230 i‡(
n
 < 0) {

231 
	`¥ötf
("ERROR: failedÅo write commandÖayloadÅo comÖort\n");

236 #i‡
DEBUG_MCU
 == 1

237 
	`gëtimeofday
(&
wrôe_tv
, 
NULL
);

239 
	`DEBUG_PRINTF
("\nINFO: %ld.%ld: wrôe_ªq 0x%02X (%sËd⁄e, id:0x%02X, size:%u\n", 
wrôe_tv
.
tv_£c
, wrôe_tv.
tv_u£c
, 
cmd
, 
	`cmd_gë_°r
(cmd), 
buf_w
[0], 
∑ylﬂd_size
);

241 #i‡
DEBUG_VERBOSE


242 
i
;

243 
i
 = 0; i < 4; i++) {

244 
	`¥ötf
("%02X ", 
buf_w
[
i
]);

246 
i
 = 0; i < 
∑ylﬂd_size
; i++) {

247 
	`¥ötf
("%02X ", 
∑ylﬂd
[
i
]);

249 
	`¥ötf
("\n");

253 
	`_mós_time_°›
(5, 
tm
, 
__FUNCTION__
);

256 
	}
}

260 
	$ªad_ack
(
fd
, 
uöt8_t
 * 
hdr
, uöt8_à* 
buf
, 
size_t
 
buf_size
) {

261 #i‡
DEBUG_VERBOSE


262 
i
;

264 
n
;

265 
size_t
 
size
;

266 
nb_ªad
 = 0;

268 
timevÆ
 
tm
;

270 #i‡
DEBUG_MCU
 == 1

271 
timevÆ
 
ªad_tv
;

275 
	`_mós_time_°¨t
(&
tm
);

279 
n
 = 
	`ªad
(
fd
, &
hdr
[0], (
size_t
)
HEADER_CMD_SIZE
);

280 } 
n
 =-1 && 
î∫o
 =
EINTR
);

282 i‡(
n
 == -1) {

283 
	`≥º‹
("ERROR: UnableÅoÑead /dev/ttyACMx - ");

286 #i‡
DEBUG_MCU
 == 1

287 
	`gëtimeofday
(&
ªad_tv
, 
NULL
);

289 
	`DEBUG_PRINTF
("INFO: %ld.%ld:Ñód %d byã†f‹ hódî from g©eway\n", 
ªad_tv
.
tv_£c
,Ñód_tv.
tv_u£c
, 
n
);

293 
	`_mós_time_°›
(5, 
tm
, "read_ack(hdr)");

295 #i‡
DEBUG_VERBOSE


296 
	`¥ötf
("read_ack(hdr):");

298 
i
 = 0; i < ()(
HEADER_CMD_SIZE
); i++) {

299 
	`¥ötf
("%02X ", 
hdr
[
i
]);

301 
	`¥ötf
("\n");

305 
	`_mós_time_°¨t
(&
tm
);

308 i‡((
	`cmd_gë_ty≥
(
hdr
) < 0x40) || (cmd_get_type(hdr) > 0x46)) {

309 
	`¥ötf
("ERROR:Ñe˚ived wr⁄g ACKÅy≥ (0x%02X)\n", 
	`cmd_gë_ty≥
(
hdr
));

314 
size
 = (
size_t
)
	`cmd_gë_size
(
hdr
);

315 i‡(
size
 > 
buf_size
) {

316 
	`¥ötf
("ERROR:ÇŸÉnough mem‹yÅÿ°‹êÆ»d©®(%zd)\n", 
size
);

321 i‡(
size
 > 0) {

325 
n
 = 
	`ªad
(
fd
, &
buf
[
nb_ªad
], 
size
 -Çb_read);

326 } 
n
 =-1 && 
î∫o
 =
EINTR
);

328 i‡(
n
 == -1) {

329 
	`≥º‹
("ERROR: UnableÅoÑead /dev/ttyACMx - ");

332 #i‡
DEBUG_MCU
 == 1

333 
	`gëtimeofday
(&
ªad_tv
, 
NULL
);

335 
	`DEBUG_PRINTF
("INFO: %ld.%ld:Ñód %d byã†‰om g©eway\n", 
ªad_tv
.
tv_£c
,Ñód_tv.
tv_u£c
, 
n
);

336 
nb_ªad
 +
n
;

338 } 
nb_ªad
 < ()
size
);

340 #i‡
DEBUG_VERBOSE


342 
	`¥ötf
("read_ack(pld):");

343 
i
 = 0; i < ()
size
; i++) {

344 
	`¥ötf
("%02X ", 
buf
[
i
]);

346 
	`¥ötf
("\n");

351 
	`_mós_time_°›
(5, 
tm
, "read_ack(payload)");

353  
nb_ªad
;

354 
	}
}

358 
	$decode_ack_pög
(c⁄° 
uöt8_t
 * 
hdr
, c⁄° uöt8_à* 
∑ylﬂd
, 
s_pög_öfo
 * 
öfo
) {

360 i‡((
hdr
 =
NULL
Ë|| (
∑ylﬂd
 =NULLË|| (
öfo
 == NULL)) {

361 
	`¥ötf
("ERROR: invalidÖarameter\n");

365 i‡(
	`cmd_gë_ty≥
(
hdr
Ë!
ORDER_ID__ACK_PING
) {

366 
	`¥ötf
("ERROR: wr⁄g ACKÅy≥ f‹ PING (ex≥˘ed:0x%02X, gŸ 0x%02X)\n", 
ORDER_ID__ACK_PING
, 
	`cmd_gë_ty≥
(
hdr
));

371 
öfo
->
unique_id_high
 = 
	`byãs_be_to_uöt32_À
(&
∑ylﬂd
[
ACK_PING__UNIQUE_ID_0
]);

372 
öfo
->
unique_id_mid
 = 
	`byãs_be_to_uöt32_À
(&
∑ylﬂd
[
ACK_PING__UNIQUE_ID_4
]);

373 
öfo
->
unique_id_low
 = 
	`byãs_be_to_uöt32_À
(&
∑ylﬂd
[
ACK_PING__UNIQUE_ID_8
]);

375 
	`mem˝y
(
öfo
->
vîsi⁄
, &
∑ylﬂd
[
ACK_PING__VERSION_0
], ( info->version) - 1);

376 
öfo
->
vîsi⁄
[( info->version) - 1] = '\0';

378 #i‡
DEBUG_VERBOSE


379 
	`DEBUG_MSG
 ("## ACK_PING\n");

380 
	`DEBUG_PRINTF
(" id: 0x%02X\n", 
	`cmd_gë_id
(
hdr
));

381 
	`DEBUG_PRINTF
(" size: %u\n", 
	`cmd_gë_size
(
hdr
));

382 
	`DEBUG_PRINTF
(" unique_id: 0x%08X%08X%08X\n", 
öfo
->
unique_id_high
, info->
unique_id_mid
, info->
unique_id_low
);

383 
	`DEBUG_PRINTF
(" FW vîsi⁄: %s\n", 
öfo
->
vîsi⁄
);

387 
	}
}

391 
	$decode_ack_boŸlﬂdî_mode
(c⁄° 
uöt8_t
 * 
hdr
) {

393 i‡(
hdr
 =
NULL
) {

394 
	`¥ötf
("ERROR: invalidÖarameter\n");

398 i‡(
	`cmd_gë_ty≥
(
hdr
Ë!
ORDER_ID__ACK_BOOTLOADER_MODE
) {

399 
	`¥ötf
("ERROR: wr⁄g ACKÅy≥ f‹ ACK_BOOTLOADER_MODE (ex≥˘ed:0x%02X, gŸ 0x%02X)\n", 
ORDER_ID__ACK_BOOTLOADER_MODE
, 
	`cmd_gë_ty≥
(
hdr
));

403 #i‡
DEBUG_VERBOSE


404 
	`DEBUG_MSG
 ("## ACK_BOOTLOADER_MODE\n");

405 
	`DEBUG_PRINTF
(" id: 0x%02X\n", 
	`cmd_gë_id
(
hdr
));

406 
	`DEBUG_PRINTF
(" size: %u\n", 
	`cmd_gë_size
(
hdr
));

410 
	}
}

414 
	$decode_ack_gë_°©us
(c⁄° 
uöt8_t
 * 
hdr
, c⁄° uöt8_à* 
∑ylﬂd
, 
s_°©us
 * 
°©us
) {

415 
öt16_t
 
ãm≥øtuª_£ns‹
;

418 i‡((
∑ylﬂd
 =
NULL
Ë|| (
°©us
 == NULL)) {

419 
	`¥ötf
("ERROR: invalidÖarameter\n");

423 i‡(
	`cmd_gë_ty≥
(
hdr
Ë!
ORDER_ID__ACK_GET_STATUS
) {

424 
	`¥ötf
("ERROR: wr⁄g ACKÅy≥ f‹ GET_STATUS (ex≥˘ed:0x%02X, gŸ 0x%02X)\n", 
ORDER_ID__ACK_GET_STATUS
, 
	`cmd_gë_ty≥
(
hdr
));

429 
°©us
->
sy°em_time_ms
 = 
	`byãs_be_to_uöt32_À
(&
∑ylﬂd
[
ACK_GET_STATUS__SYSTEM_TIME_31_24
]);

431 
ãm≥øtuª_£ns‹
 = (
öt16_t
)(
∑ylﬂd
[
ACK_GET_STATUS__TEMPERATURE_15_8
] << 8) |

432 (
öt16_t
)(
∑ylﬂd
[
ACK_GET_STATUS__TEMPERATURE_7_0
] << 0);

433 
°©us
->
ãm≥øtuª
 = ()
ãm≥øtuª_£ns‹
 / 100.0;

436 #i‡
DEBUG_VERBOSE


437 
	`DEBUG_MSG
 ("## ACK_GET_STATUS\n");

438 
	`DEBUG_PRINTF
(" id: 0x%02X\n", 
	`cmd_gë_id
(
hdr
));

439 
	`DEBUG_PRINTF
(" size: %u\n", 
	`cmd_gë_size
(
hdr
));

440 
	`DEBUG_PRINTF
(" sys_time: %u\n", 
°©us
->
sy°em_time_ms
);

441 
	`DEBUG_PRINTF
("Åem≥øtuª: %.1f\n", 
°©us
->
ãm≥øtuª
);

445 
	}
}

449 
	$decode_ack_gpio_ac˚ss
(c⁄° 
uöt8_t
 * 
hdr
, c⁄° uöt8_à* 
∑ylﬂd
, uöt8_à* 
wrôe_°©us
) {

450 i‡((
hdr
 =
NULL
Ë|| (
∑ylﬂd
 =NULLË|| (
wrôe_°©us
 == NULL)) {

451 
	`¥ötf
("ERROR: invalidÖarameter\n");

455 i‡(
	`cmd_gë_ty≥
(
hdr
Ë!
ORDER_ID__ACK_WRITE_GPIO
) {

456 
	`¥ötf
("ERROR: wr⁄g ACKÅy≥ f‹ WRITE_GPIO (ex≥˘ed:0x%02X, gŸ 0x%02X)\n", 
ORDER_ID__ACK_WRITE_GPIO
, 
	`cmd_gë_ty≥
(
hdr
));

461 *
wrôe_°©us
 = 
∑ylﬂd
[
ACK_GPIO_WRITE__STATUS
];

463 #i‡
DEBUG_VERBOSE


464 
	`DEBUG_MSG
 ("## ACK_WRITE_GPIO\n");

465 
	`DEBUG_PRINTF
(" id: 0x%02X\n", 
	`cmd_gë_id
(
hdr
));

466 
	`DEBUG_PRINTF
(" size: %u\n", 
	`cmd_gë_size
(
hdr
));

467 
	`DEBUG_PRINTF
(" sètus: %u\n", *
wrôe_°©us
);

471 
	}
}

475 
	$decode_ack_•i_bulk
(c⁄° 
uöt8_t
 * 
hdr
, c⁄° uöt8_à* 
∑ylﬂd
) {

476 
uöt8_t
 
ªq_id
, 
ªq_ty≥
, 
ªq_°©us
;

477 
uöt16_t
 
‰ame_size
;

478 
i
;

481 i‡((
hdr
 =
NULL
Ë|| (
∑ylﬂd
 == NULL)) {

482 
	`¥ötf
("ERROR: invalidÖarameter\n");

486 i‡(
	`cmd_gë_ty≥
(
hdr
Ë!
ORDER_ID__ACK_MULTIPLE_SPI
) {

487 
	`¥ötf
("ERROR: wr⁄g ACKÅy≥ f‹ ACK_MULTIPLE_SPI (ex≥˘ed:0x%02X, gŸ 0x%02X)\n", 
ORDER_ID__ACK_MULTIPLE_SPI
, 
	`cmd_gë_ty≥
(
hdr
));

491 #i‡
DEBUG_VERBOSE


492 
	`DEBUG_MSG
 ("## ACK_SPI_BULK\n");

493 
	`DEBUG_PRINTF
(" id: 0x%02X\n", 
	`cmd_gë_id
(
hdr
));

494 
	`DEBUG_PRINTF
(" size: %u\n", 
	`cmd_gë_size
(
hdr
));

497 
i
 = 0;

498 
i
 < 
	`cmd_gë_size
(
hdr
)) {

500 
ªq_id
 = 
∑ylﬂd
[
i
 + 0];

501 
ªq_ty≥
 = 
∑ylﬂd
[
i
 + 1];

502 i‡(
ªq_ty≥
 !
MCU_SPI_REQ_TYPE_READ_WRITE
 &&Ñeq_ty≥ !
MCU_SPI_REQ_TYPE_READ_MODIFY_WRITE
) {

503 
	`¥ötf
("ERROR: %s: wr⁄gÅy≥ f‹ SPIÑeque° %u (0x%02X)\n", 
__FUNCTION__
, 
ªq_id
, 
ªq_ty≥
);

506 
ªq_°©us
 = 
∑ylﬂd
[
i
 + 2];

507 i‡(
ªq_°©us
 != 0) {

509 
	`¥ötf
("ERROR: %s: SPIÑeque° %u faûed wôh %u - %s\n", 
__FUNCTION__
, 
ªq_id
, 
ªq_°©us
, 
	`•i_°©us_gë_°r
(req_status));

512 #i‡
DEBUG_VERBOSE


513 
	`DEBUG_PRINTF
(" ----- REQ_SPI %u -----\n", 
ªq_id
);

514 
	`DEBUG_PRINTF
("Åy≥ %s\n", (
ªq_ty≥
 =
MCU_SPI_REQ_TYPE_READ_WRITE
) ? "read/write" : "read-modify-write");

515 
	`DEBUG_PRINTF
(" sètu†%u\n", 
ªq_°©us
);

518 i‡(
ªq_ty≥
 =
MCU_SPI_REQ_TYPE_READ_WRITE
) {

519 
‰ame_size
 = (
uöt16_t
)(
∑ylﬂd
[
i
 + 3] << 8) | (uint16_t)(payload[i + 4]);

520 #i‡
DEBUG_VERBOSE


521 
j
;

522 
	`DEBUG_PRINTF
(" RAW SPI fømê(sz:%u): ", 
‰ame_size
);

523 
j
 = 0; j < 
‰ame_size
; j++) {

524 
	`DEBUG_PRINTF
(" %02X", 
∑ylﬂd
[
i
 + 5 + 
j
]);

526 
	`DEBUG_MSG
("\n");

528 
i
 +(5 + 
‰ame_size
);

530 #i‡
DEBUG_VERBOSE


531 
	`DEBUG_PRINTF
("Ñód vÆuê 0x%02X\n", 
∑ylﬂd
[
i
 + 3]);

532 
	`DEBUG_PRINTF
(" modifõd vÆuê0x%02X\n", 
∑ylﬂd
[
i
 + 4]);

534 
i
 += 5;

539 
	}
}

544 
	$mcu_pög
(
fd
, 
s_pög_öfo
 * 
öfo
) {

545 
uöt8_t
 
buf_ack
[
ACK_PING_SIZE
];

547 
	`CHECK_NULL
(
öfo
);

549 i‡(
	`wrôe_ªq
(
fd
, 
ORDER_ID__REQ_PING
, 
NULL
, 0) != 0) {

550 
	`¥ötf
("ERROR: failedÅo write PINGÑequest\n");

554 i‡(
	`ªad_ack
(
fd
, 
buf_hdr
, 
buf_ack
,  buf_ack) < 0) {

555 
	`¥ötf
("ERROR: failedÅoÑead PINGáck\n");

559 i‡(
	`decode_ack_pög
(
buf_hdr
, 
buf_ack
, 
öfo
) != 0) {

560 
	`¥ötf
("ERROR: invalid PINGáck\n");

565 
	}
}

569 
	$mcu_boŸ
(
fd
) {

570 i‡(
	`wrôe_ªq
(
fd
, 
ORDER_ID__REQ_BOOTLOADER_MODE
, 
NULL
, 0) != 0) {

571 
	`¥ötf
("ERROR: failedÅo write BOOTLOADER_MODEÑequest\n");

575 i‡(
	`ªad_ack
(
fd
, 
buf_hdr
, 
NULL
, 0) < 0) {

576 
	`¥ötf
("ERROR: failedÅoÑead BOOTLOADER_MODEáck\n");

580 i‡(
	`decode_ack_boŸlﬂdî_mode
(
buf_hdr
) != 0) {

581 
	`¥ötf
("ERROR: invalid BOOTLOADER_MODEáck\n");

586 
	}
}

590 
	$mcu_gë_°©us
(
fd
, 
s_°©us
 * 
°©us
) {

591 
uöt8_t
 
buf_ack
[
ACK_GET_STATUS_SIZE
];

593 
	`CHECK_NULL
(
°©us
);

595 i‡(
	`wrôe_ªq
(
fd
, 
ORDER_ID__REQ_GET_STATUS
, 
NULL
, 0) != 0) {

596 
	`¥ötf
("ERROR: failedÅo write GET_STATUSÑequest\n");

600 i‡(
	`ªad_ack
(
fd
, 
buf_hdr
, 
buf_ack
,  buf_ack) < 0) {

601 
	`¥ötf
("ERROR: failedÅoÑead GET_STATUSáck\n");

605 i‡(
	`decode_ack_gë_°©us
(
buf_hdr
, 
buf_ack
, 
°©us
) != 0) {

606 
	`¥ötf
("ERROR: invalid GET_STATUSáck\n");

611 
	}
}

615 
	$mcu_gpio_wrôe
(
fd
, 
uöt8_t
 
gpio_p‹t
, uöt8_à
gpio_id
, uöt8_à
gpio_vÆue
) {

616 
uöt8_t
 
°©us
;

617 
uöt8_t
 
buf_ªq
[
REQ_WRITE_GPIO_SIZE
];

618 
uöt8_t
 
buf_ack
[
ACK_GPIO_WRITE_SIZE
];

620 
buf_ªq
[
REQ_WRITE_GPIO__PORT
] = 
gpio_p‹t
;

621 
buf_ªq
[
REQ_WRITE_GPIO__PIN
] = 
gpio_id
;

622 
buf_ªq
[
REQ_WRITE_GPIO__STATE
] = 
gpio_vÆue
;

623 i‡(
	`wrôe_ªq
(
fd
, 
ORDER_ID__REQ_WRITE_GPIO
, 
buf_ªq
, 
REQ_WRITE_GPIO_SIZE
) != 0) {

624 
	`¥ötf
("ERROR: failedÅo write REQ_WRITE_GPIOÑequest\n");

628 i‡(
	`ªad_ack
(
fd
, 
buf_hdr
, 
buf_ack
,  buf_ack) < 0) {

629 
	`¥ötf
("ERROR: failedÅoÑead PINGáck\n");

633 i‡(
	`decode_ack_gpio_ac˚ss
(
buf_hdr
, 
buf_ack
, &
°©us
) != 0) {

634 
	`¥ötf
("ERROR: invalid REQ_WRITE_GPIOáck\n");

638 i‡(
°©us
 != 0) {

639 
	`¥ötf
("ERROR: FaûedÅÿwrôêGPIO (p‹t:%u id:%u vÆue:%u)\n", 
gpio_p‹t
, 
gpio_id
, 
gpio_vÆue
);

644 
	}
}

648 
	$mcu_•i_wrôe
(
fd
, 
uöt8_t
 * 
ö_out_buf
, 
size_t
 
buf_size
) {

650 
	`CHECK_NULL
(
ö_out_buf
);

652 i‡(
	`wrôe_ªq
(
fd
, 
ORDER_ID__REQ_MULTIPLE_SPI
, 
ö_out_buf
, 
buf_size
) != 0) {

653 
	`¥ötf
("ERROR: failedÅo write REQ_MULTIPLE_SPIÑequest\n");

657 i‡(
	`ªad_ack
(
fd
, 
buf_hdr
, 
ö_out_buf
, 
buf_size
) < 0) {

658 
	`¥ötf
("ERROR: failedÅoÑead REQ_MULTIPLE_SPIáck\n");

662 i‡(
	`decode_ack_•i_bulk
(
buf_hdr
, 
ö_out_buf
) != 0) {

663 
	`¥ötf
("ERROR: invalid REQ_MULTIPLE_SPIáck\n");

668 
	}
}

672 
	$mcu_•i_°‹e
(
uöt8_t
 * 
ö_out_buf
, 
size_t
 
buf_size
) {

673 
	`CHECK_NULL
(
ö_out_buf
);

675  
	`•i_ªq_bulk_ö£π
(&
•i_bulk_buf„r
, 
ö_out_buf
, 
buf_size
);

676 
	}
}

680 
	$mcu_•i_Êush
(
fd
) {

682 i‡(
	`mcu_•i_wrôe
(
fd
, 
•i_bulk_buf„r
.
buf„r
, spi_bulk_buf„r.
size
) != 0) {

683 
	`¥ötf
("ERROR: %s: faûedÅÿwrôêSPIÑeque°†tÿMCU\n", 
__FUNCTION__
);

688 
•i_bulk_buf„r
.
nb_ªq
 = 0;

689 
•i_bulk_buf„r
.
size
 = 0;

692 
	}
}

	@libloragw/src/loragw_reg.c

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

24 
	~<°dio.h
>

26 
	~"l‹agw_ªg.h
"

31 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

32 #i‡
DEBUG_REG
 == 1

33 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

34 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

35 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

37 
	#DEBUG_MSG
(
°r
)

	)

38 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

39 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

45 
	#SX1302_REG_EXT_MEM_PAGED_BASE_ADDR
 0x0

	)

46 
	#SX1302_REG_RX_BUFFER_BASE_ADDR
 0x4000

	)

47 
	#SX1302_REG_TX_TOP_A_BASE_ADDR
 0x5200

	)

48 
	#SX1302_REG_TX_TOP_B_BASE_ADDR
 0x5400

	)

49 
	#SX1302_REG_COMMON_BASE_ADDR
 0x5600

	)

50 
	#SX1302_REG_GPIO_BASE_ADDR
 0x5640

	)

51 
	#SX1302_REG_MBIST_BASE_ADDR
 0x56c0

	)

52 
	#SX1302_REG_RADIO_FE_BASE_ADDR
 0x5700

	)

53 
	#SX1302_REG_AGC_MCU_BASE_ADDR
 0x5780

	)

54 
	#SX1302_REG_CLK_CTRL_BASE_ADDR
 0x57c0

	)

55 
	#SX1302_REG_RX_TOP_BASE_ADDR
 0x5800

	)

56 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
 0x5b00

	)

57 
	#SX1302_REG_CAPTURE_RAM_BASE_ADDR
 0x6000

	)

58 
	#SX1302_REG_ARB_MCU_BASE_ADDR
 0x6080

	)

59 
	#SX1302_REG_TIMESTAMP_BASE_ADDR
 0x6100

	)

60 
	#SX1302_REG_OTP_BASE_ADDR
 0x6180

	)

62 c⁄° 
lgw_ªg_s
 
	gl‹egs
[
LGW_TOTALREGS
+1] = {

63 {0,
SX1302_REG_COMMON_BASE_ADDR
+0,0,0,2,0,1,0},

64 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,4,0,1,0,1,0},

65 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,3,0,1,0,1,1},

66 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,2,0,1,0,1,0},

67 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,1,0,1,0,1,1},

68 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,0,0,1,0,1,1},

69 {0,
SX1302_REG_COMMON_BASE_ADDR
+2,3,0,1,0,1,0},

70 {0,
SX1302_REG_COMMON_BASE_ADDR
+2,2,0,1,0,1,1},

71 {0,
SX1302_REG_COMMON_BASE_ADDR
+2,1,0,1,0,1,0},

72 {0,
SX1302_REG_COMMON_BASE_ADDR
+2,0,0,1,0,1,1},

73 {0,
SX1302_REG_COMMON_BASE_ADDR
+3,0,0,8,0,1,2},

74 {0,
SX1302_REG_COMMON_BASE_ADDR
+4,0,0,8,0,1,128},

75 {0,
SX1302_REG_COMMON_BASE_ADDR
+5,3,0,1,0,1,0},

76 {0,
SX1302_REG_COMMON_BASE_ADDR
+5,2,0,1,0,1,0},

77 {0,
SX1302_REG_COMMON_BASE_ADDR
+5,1,0,1,0,1,0},

78 {0,
SX1302_REG_COMMON_BASE_ADDR
+5,0,0,1,0,1,0},

79 {0,
SX1302_REG_COMMON_BASE_ADDR
+6,0,0,8,1,1,16},

80 {0,
SX1302_REG_COMMON_BASE_ADDR
+7,0,0,1,1,1,0},

81 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,4,0,1,0,1,1},

82 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,3,0,1,0,1,0},

83 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,2,0,1,0,1,1},

84 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,1,0,1,0,1,0},

85 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,0,0,1,1,1,0},

86 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+1,0,0,8,1,1,0},

87 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+2,2,0,2,0,1,0},

88 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+2,0,0,2,0,1,0},

89 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+3,3,0,1,0,1,0},

90 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+3,2,0,1,0,1,0},

91 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+3,1,0,1,0,1,0},

92 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+3,0,0,1,0,1,0},

93 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+4,3,0,1,0,1,0},

94 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+4,2,0,1,0,1,0},

95 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+4,1,0,1,0,1,0},

96 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+4,0,0,1,0,1,0},

97 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+5,4,0,4,0,1,0},

98 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+5,0,0,4,0,1,0},

99 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+6,4,0,4,0,1,0},

100 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+6,0,0,4,0,1,0},

101 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,5,0,1,0,1,0},

102 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,4,0,1,0,1,0},

103 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,3,0,1,0,1,0},

104 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,2,0,1,0,1,0},

105 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,1,0,1,0,1,0},

106 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,0,0,1,0,1,1},

107 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+8,0,0,8,0,1,0},

108 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+9,0,0,8,0,1,0},

109 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+10,0,0,8,0,1,0},

110 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+11,0,0,8,0,1,0},

111 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+12,0,0,8,0,1,0},

112 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+13,0,0,8,1,1,0},

113 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+14,0,0,8,1,1,0},

114 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+15,0,0,8,1,1,0},

115 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+16,0,0,8,1,1,0},

116 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+17,0,0,1,1,1,0},

117 {0,
SX1302_REG_CLK_CTRL_BASE_ADDR
+0,2,0,1,0,1,0},

118 {0,
SX1302_REG_CLK_CTRL_BASE_ADDR
+0,1,0,1,0,1,0},

119 {0,
SX1302_REG_CLK_CTRL_BASE_ADDR
+0,0,0,1,0,1,0},

120 {0,
SX1302_REG_CLK_CTRL_BASE_ADDR
+1,3,0,1,1,1,0},

121 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+0,3,0,1,0,0,0},

122 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+0,2,0,1,0,1,0},

123 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+0,1,0,1,0,1,0},

124 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+0,0,0,1,0,1,0},

125 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+1,0,0,8,0,1,0},

126 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+2,0,0,8,0,1,0},

127 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+3,0,0,8,0,1,0},

128 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+4,0,0,8,0,1,0},

129 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+5,0,0,8,0,1,187},

130 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+6,0,0,8,0,1,128},

131 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+7,0,0,1,0,1,0},

132 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+8,0,0,3,0,1,1},

133 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+9,0,0,1,0,1,0},

134 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+10,1,0,1,0,1,0},

135 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+10,0,0,1,0,1,0},

136 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+11,1,0,1,0,0,0},

137 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+11,0,0,1,0,0,0},

138 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+12,0,0,8,0,1,0},

139 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+13,0,0,8,0,1,0},

140 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+14,0,0,8,0,1,0},

141 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+15,0,0,8,0,1,0},

142 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+16,0,0,8,0,1,0},

143 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+17,0,0,8,1,1,0},

144 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+18,3,0,1,1,1,0},

145 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,5,0,3,0,1,0},

146 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,4,0,1,0,1,1},

147 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,3,0,1,0,1,1},

148 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,2,0,1,0,1,0},

149 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,0,0,2,0,1,0},

150 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+33,1,0,1,0,1,0},

151 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+33,0,0,1,0,1,0},

152 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+34,0,0,2,0,1,0},

153 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+35,0,0,8,0,1,0},

154 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+36,0,0,8,0,1,0},

155 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+37,0,0,8,0,1,108},

156 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+38,0,0,8,0,1,144},

157 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+39,0,0,8,0,1,0},

158 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+40,0,0,4,0,1,0},

159 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+41,0,0,8,0,1,0},

160 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+42,0,0,8,0,1,64},

161 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+43,3,0,1,1,1,0},

162 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+64,0,0,8,0,1,15},

163 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,5,0,1,0,1,0},

164 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,4,0,1,0,1,0},

165 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,2,0,2,0,1,0},

166 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,1,0,1,0,1,1},

167 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,0,0,1,0,1,0},

168 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+66,0,0,8,0,1,0},

169 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+67,0,0,8,0,1,20},

170 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+68,0,0,8,0,1,26},

171 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+69,0,0,8,0,1,11},

172 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,5,0,3,0,1,3},

173 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,4,0,1,0,1,0},

174 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,3,0,1,0,1,1},

175 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,1,0,2,0,1,0},

176 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,0,0,1,0,1,0},

177 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+71,0,0,8,0,1,151},

178 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+72,0,0,8,0,1,35},

179 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+73,0,0,8,0,1,82},

180 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+74,0,0,8,0,1,37},

181 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+75,0,0,8,0,1,86},

182 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+76,0,0,8,0,1,83},

183 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+77,0,0,8,0,1,101},

184 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+78,0,0,8,0,1,100},

185 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+79,3,0,1,1,1,0},

186 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+96,4,0,4,0,1,5},

187 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+96,0,0,4,0,1,7},

188 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+97,6,0,2,0,1,2},

189 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+97,4,0,2,0,1,0},

190 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+97,3,0,1,0,1,0},

191 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+97,0,0,3,0,1,2},

192 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,7,0,1,0,1,0},

193 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,6,0,1,0,1,0},

194 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,4,0,2,0,1,2},

195 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,1,0,1,0,1,0},

196 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,0,0,1,0,1,1},

197 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+99,0,0,8,0,1,12},

198 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+100,7,0,1,0,1,0},

199 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+100,0,0,6,0,1,0},

200 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+101,7,0,1,0,1,0},

201 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+101,6,0,1,0,1,0},

202 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+101,0,0,6,0,1,0},

203 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+102,0,0,8,0,1,8},

204 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+103,0,0,8,0,1,0},

205 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+104,6,0,1,0,1,1},

206 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+104,5,0,1,0,1,0},

207 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+104,4,0,1,0,1,0},

208 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,4,0,3,0,1,0},

209 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,3,0,1,0,1,0},

210 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,2,0,1,0,1,1},

211 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,1,0,1,0,1,1},

212 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,0,0,1,0,1,0},

213 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+106,0,0,6,0,1,20},

214 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+107,0,0,8,0,1,0},

215 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+108,5,0,2,0,1,0},

216 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+108,0,0,5,0,1,10},

217 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+109,7,0,1,0,1,1},

218 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+109,6,0,1,0,1,0},

219 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+109,5,0,1,0,1,1},

220 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+109,0,1,5,0,1,2},

221 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+110,7,0,1,0,1,0},

222 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+110,5,0,2,0,1,3},

223 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+110,0,1,5,0,1,4},

224 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+111,0,0,4,1,1,0},

225 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+112,2,0,1,0,0,0},

226 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+112,1,0,1,0,0,0},

227 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+112,0,0,1,0,0,0},

228 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+113,3,0,1,1,1,0},

229 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+0,3,0,1,0,0,0},

230 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+0,2,0,1,0,1,0},

231 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+0,1,0,1,0,1,0},

232 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+0,0,0,1,0,1,0},

233 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+1,0,0,8,0,1,0},

234 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+2,0,0,8,0,1,0},

235 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+3,0,0,8,0,1,0},

236 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+4,0,0,8,0,1,0},

237 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+5,0,0,8,0,1,187},

238 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+6,0,0,8,0,1,128},

239 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+7,0,0,1,0,1,0},

240 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+8,0,0,3,0,1,1},

241 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+9,0,0,1,0,1,0},

242 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+10,1,0,1,0,1,0},

243 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+10,0,0,1,0,1,0},

244 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+11,1,0,1,0,0,0},

245 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+11,0,0,1,0,0,0},

246 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+12,0,0,8,0,1,0},

247 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+13,0,0,8,0,1,0},

248 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+14,0,0,8,0,1,0},

249 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+15,0,0,8,0,1,0},

250 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+16,0,0,8,0,1,0},

251 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+17,0,0,8,1,1,0},

252 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+18,3,0,1,1,1,0},

253 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,5,0,3,0,1,0},

254 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,4,0,1,0,1,1},

255 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,3,0,1,0,1,1},

256 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,2,0,1,0,1,0},

257 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,0,0,2,0,1,0},

258 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+33,1,0,1,0,1,0},

259 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+33,0,0,1,0,1,0},

260 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+34,0,0,2,0,1,0},

261 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+35,0,0,8,0,1,0},

262 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+36,0,0,8,0,1,0},

263 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+37,0,0,8,0,1,108},

264 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+38,0,0,8,0,1,144},

265 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+39,0,0,8,0,1,0},

266 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+40,0,0,4,0,1,0},

267 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+41,0,0,8,0,1,0},

268 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+42,0,0,8,0,1,64},

269 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+43,3,0,1,1,1,0},

270 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+64,0,0,8,0,1,15},

271 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,5,0,1,0,1,0},

272 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,4,0,1,0,1,0},

273 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,2,0,2,0,1,0},

274 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,1,0,1,0,1,1},

275 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,0,0,1,0,1,0},

276 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+66,0,0,8,0,1,0},

277 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+67,0,0,8,0,1,20},

278 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+68,0,0,8,0,1,26},

279 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+69,0,0,8,0,1,11},

280 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,5,0,3,0,1,3},

281 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,4,0,1,0,1,0},

282 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,3,0,1,0,1,1},

283 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,1,0,2,0,1,0},

284 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,0,0,1,0,1,0},

285 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+71,0,0,8,0,1,151},

286 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+72,0,0,8,0,1,35},

287 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+73,0,0,8,0,1,82},

288 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+74,0,0,8,0,1,37},

289 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+75,0,0,8,0,1,86},

290 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+76,0,0,8,0,1,83},

291 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+77,0,0,8,0,1,101},

292 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+78,0,0,8,0,1,100},

293 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+79,3,0,1,1,1,0},

294 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+96,4,0,4,0,1,5},

295 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+96,0,0,4,0,1,7},

296 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+97,6,0,2,0,1,2},

297 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+97,4,0,2,0,1,0},

298 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+97,3,0,1,0,1,0},

299 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+97,0,0,3,0,1,2},

300 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,7,0,1,0,1,0},

301 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,6,0,1,0,1,0},

302 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,4,0,2,0,1,2},

303 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,1,0,1,0,1,0},

304 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,0,0,1,0,1,1},

305 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+99,0,0,8,0,1,12},

306 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+100,7,0,1,0,1,0},

307 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+100,0,0,6,0,1,0},

308 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+101,7,0,1,0,1,0},

309 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+101,6,0,1,0,1,0},

310 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+101,0,0,6,0,1,0},

311 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+102,0,0,8,0,1,8},

312 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+103,0,0,8,0,1,0},

313 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+104,6,0,1,0,1,1},

314 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+104,5,0,1,0,1,0},

315 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+104,4,0,1,0,1,0},

316 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,4,0,3,0,1,0},

317 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,3,0,1,0,1,0},

318 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,2,0,1,0,1,1},

319 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,1,0,1,0,1,1},

320 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,0,0,1,0,1,0},

321 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+106,0,0,6,0,1,20},

322 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+107,0,0,8,0,1,0},

323 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+108,5,0,2,0,1,0},

324 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+108,0,0,5,0,1,10},

325 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+109,7,0,1,0,1,1},

326 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+109,6,0,1,0,1,0},

327 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+109,5,0,1,0,1,1},

328 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+109,0,1,5,0,1,2},

329 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+110,7,0,1,0,1,0},

330 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+110,5,0,2,0,1,3},

331 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+110,0,1,5,0,1,4},

332 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+111,0,0,4,1,1,0},

333 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+112,2,0,1,0,0,0},

334 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+112,1,0,1,0,0,0},

335 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+112,0,0,1,0,0,0},

336 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+113,3,0,1,1,1,0},

337 {0,
SX1302_REG_GPIO_BASE_ADDR
+0,0,0,4,0,1,0},

338 {0,
SX1302_REG_GPIO_BASE_ADDR
+1,0,0,8,0,1,0},

339 {0,
SX1302_REG_GPIO_BASE_ADDR
+2,0,0,4,0,1,0},

340 {0,
SX1302_REG_GPIO_BASE_ADDR
+3,0,0,8,0,1,0},

341 {0,
SX1302_REG_GPIO_BASE_ADDR
+4,0,0,4,1,1,0},

342 {0,
SX1302_REG_GPIO_BASE_ADDR
+5,0,0,8,1,1,0},

343 {0,
SX1302_REG_GPIO_BASE_ADDR
+6,0,0,4,0,1,0},

344 {0,
SX1302_REG_GPIO_BASE_ADDR
+7,0,0,8,0,1,0},

345 {0,
SX1302_REG_GPIO_BASE_ADDR
+8,0,0,4,0,1,0},

346 {0,
SX1302_REG_GPIO_BASE_ADDR
+9,0,0,4,0,1,0},

347 {0,
SX1302_REG_GPIO_BASE_ADDR
+10,0,0,4,0,1,0},

348 {0,
SX1302_REG_GPIO_BASE_ADDR
+11,0,0,4,0,1,0},

349 {0,
SX1302_REG_GPIO_BASE_ADDR
+12,0,0,4,0,1,0},

350 {0,
SX1302_REG_GPIO_BASE_ADDR
+13,0,0,4,0,1,0},

351 {0,
SX1302_REG_GPIO_BASE_ADDR
+14,0,0,4,0,1,0},

352 {0,
SX1302_REG_GPIO_BASE_ADDR
+15,0,0,4,0,1,0},

353 {0,
SX1302_REG_GPIO_BASE_ADDR
+16,1,0,4,0,1,0},

354 {0,
SX1302_REG_GPIO_BASE_ADDR
+16,0,0,1,0,1,0},

355 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,5,0,1,0,0,0},

356 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,4,0,1,0,0,0},

357 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,3,0,1,0,0,0},

358 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,2,0,1,0,0,0},

359 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,1,0,1,0,0,0},

360 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,0,0,1,0,0,0},

361 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,5,0,1,0,1,0},

362 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,4,0,1,0,1,0},

363 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,3,0,1,0,1,0},

364 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,2,0,1,0,1,0},

365 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,1,0,1,0,1,0},

366 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,0,0,1,0,1,0},

367 {0,
SX1302_REG_GPIO_BASE_ADDR
+19,0,0,1,1,1,0},

368 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+0,1,0,1,0,1,0},

369 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+0,0,0,1,0,1,0},

370 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+1,0,0,8,1,1,0},

371 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+2,0,0,8,1,1,0},

372 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+3,0,0,8,1,1,0},

373 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+4,0,0,8,1,1,0},

374 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+5,0,0,8,1,1,0},

375 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+6,0,0,8,1,1,0},

376 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+7,0,0,8,1,1,0},

377 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+8,0,0,8,1,1,0},

378 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+9,0,0,8,0,1,0},

379 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+10,0,0,8,0,1,0},

380 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+11,0,0,8,0,1,0},

381 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+12,0,0,8,0,1,0},

382 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+13,0,0,8,0,1,0},

383 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+14,0,0,8,0,1,0},

384 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+15,0,0,8,0,1,0},

385 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+16,0,0,8,0,1,0},

386 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+17,0,0,1,1,1,0},

387 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+0,0,0,5,0,1,0},

388 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+1,0,0,8,0,1,128},

389 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+2,0,0,5,0,1,1},

390 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+3,0,0,8,0,1,128},

391 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+4,0,0,5,0,1,30},

392 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+5,0,0,8,0,1,128},

393 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+6,0,0,5,0,1,0},

394 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+7,0,0,8,0,1,128},

395 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+8,0,0,5,0,1,0},

396 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+9,0,0,8,0,1,50},

397 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+10,0,0,5,0,1,0},

398 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+11,0,0,8,0,1,60},

399 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+12,0,0,5,0,1,0},

400 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+13,0,0,8,0,1,70},

401 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+14,0,0,5,0,1,0},

402 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+15,0,0,8,0,1,80},

403 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+16,0,0,8,0,1,0},

404 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+17,3,0,5,0,1,7},

405 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+17,0,0,3,0,1,0},

406 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+18,0,0,8,0,1,0},

407 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+19,0,0,8,0,1,0},

408 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+20,0,0,8,0,1,0},

409 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+21,4,0,4,0,1,15},

410 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+21,0,0,4,0,1,0},

411 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+22,0,0,4,0,1,0},

412 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+23,0,0,2,0,1,0},

413 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+24,0,0,8,1,1,0},

414 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+25,4,0,1,0,1,0},

415 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+25,0,0,4,0,1,0},

416 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+26,0,0,1,0,1,1},

417 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+27,0,0,1,1,1,0},

418 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+32,0,0,8,0,1,255},

419 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+33,0,0,8,0,1,0},

420 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+34,0,0,8,0,1,255},

421 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+35,0,0,8,0,1,255},

422 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+36,0,0,8,0,1,255},

423 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,6,0,2,0,1,2},

424 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,5,0,1,0,1,1},

425 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,4,0,1,0,1,1},

426 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,2,0,2,0,1,2},

427 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,1,0,1,0,1,1},

428 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,0,0,1,0,1,1},

429 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+38,7,0,1,0,1,0},

430 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+38,0,0,7,0,1,55},

431 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+39,0,0,8,0,1,11},

432 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+40,0,0,7,0,1,32},

433 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+41,0,0,7,0,1,48},

434 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+42,3,0,3,0,1,5},

435 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+42,1,0,2,0,1,1},

436 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+42,0,0,1,0,1,1},

437 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+43,2,0,3,0,1,5},

438 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+43,0,0,2,0,1,2},

439 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,6,0,2,0,1,2},

440 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,5,0,1,0,1,1},

441 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,4,0,1,0,1,1},

442 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,2,0,2,0,1,2},

443 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,1,0,1,0,1,1},

444 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,0,0,1,0,1,1},

445 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+45,7,0,1,0,1,0},

446 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+45,0,0,7,0,1,55},

447 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+46,0,0,8,0,1,11},

448 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+47,0,0,7,0,1,32},

449 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+48,0,0,7,0,1,48},

450 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+49,3,0,3,0,1,4},

451 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+49,1,0,2,0,1,1},

452 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+49,0,0,1,0,1,1},

453 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+50,2,0,3,0,1,5},

454 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+50,0,0,2,0,1,2},

455 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,6,0,2,0,1,2},

456 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,5,0,1,0,1,1},

457 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,4,0,1,0,1,1},

458 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,2,0,2,0,1,2},

459 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,1,0,1,0,1,1},

460 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,0,0,1,0,1,1},

461 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+52,7,0,1,0,1,0},

462 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+52,0,0,7,0,1,55},

463 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+53,0,0,8,0,1,11},

464 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+54,0,0,7,0,1,32},

465 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+55,0,0,7,0,1,48},

466 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+56,3,0,3,0,1,3},

467 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+56,1,0,2,0,1,1},

468 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+56,0,0,1,0,1,1},

469 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+57,2,0,3,0,1,5},

470 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+57,0,0,2,0,1,2},

471 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,6,0,2,0,1,2},

472 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,5,0,1,0,1,1},

473 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,4,0,1,0,1,1},

474 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,2,0,2,0,1,2},

475 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,1,0,1,0,1,1},

476 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,0,0,1,0,1,1},

477 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+59,7,0,1,0,1,0},

478 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+59,0,0,7,0,1,56},

479 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+60,0,0,8,0,1,11},

480 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+61,0,0,7,0,1,32},

481 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+62,0,0,7,0,1,48},

482 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+63,3,0,3,0,1,3},

483 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+63,1,0,2,0,1,1},

484 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+63,0,0,1,0,1,1},

485 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+64,2,0,3,0,1,5},

486 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+64,0,0,2,0,1,2},

487 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,6,0,2,0,1,2},

488 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,5,0,1,0,1,1},

489 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,4,0,1,0,1,1},

490 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,2,0,2,0,1,2},

491 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,1,0,1,0,1,1},

492 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,0,0,1,0,1,1},

493 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+66,7,0,1,0,1,0},

494 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+66,0,0,7,0,1,58},

495 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+67,0,0,8,0,1,11},

496 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+68,0,0,7,0,1,32},

497 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+69,0,0,7,0,1,48},

498 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+70,3,0,3,0,1,3},

499 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+70,1,0,2,0,1,1},

500 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+70,0,0,1,0,1,1},

501 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+71,2,0,3,0,1,5},

502 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+71,0,0,2,0,1,2},

503 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,6,0,2,0,1,2},

504 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,5,0,1,0,1,1},

505 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,4,0,1,0,1,1},

506 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,2,0,2,0,1,2},

507 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,1,0,1,0,1,1},

508 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,0,0,1,0,1,1},

509 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+73,7,0,1,0,1,0},

510 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+73,0,0,7,0,1,60},

511 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+74,0,0,8,0,1,11},

512 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+75,0,0,7,0,1,32},

513 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+76,0,0,7,0,1,48},

514 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+77,3,0,3,0,1,3},

515 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+77,1,0,2,0,1,1},

516 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+77,0,0,1,0,1,1},

517 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+78,2,0,3,0,1,5},

518 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+78,0,0,2,0,1,2},

519 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,6,0,2,0,1,2},

520 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,5,0,1,0,1,1},

521 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,4,0,1,0,1,1},

522 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,2,0,2,0,1,2},

523 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,1,0,1,0,1,1},

524 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,0,0,1,0,1,1},

525 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+80,7,0,1,0,1,0},

526 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+80,0,0,7,0,1,60},

527 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+81,0,0,8,0,1,11},

528 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+82,0,0,7,0,1,32},

529 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+83,0,0,7,0,1,48},

530 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+84,3,0,3,0,1,3},

531 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+84,1,0,2,0,1,1},

532 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+84,0,0,1,0,1,1},

533 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+85,2,0,3,0,1,5},

534 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+85,0,0,2,0,1,2},

535 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,6,0,2,0,1,2},

536 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,5,0,1,0,1,1},

537 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,4,0,1,0,1,1},

538 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,2,0,2,0,1,2},

539 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,1,0,1,0,1,1},

540 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,0,0,1,0,1,1},

541 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+87,7,0,1,0,1,0},

542 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+87,0,0,7,0,1,60},

543 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+88,0,0,8,0,1,11},

544 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+89,0,0,7,0,1,32},

545 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+90,0,0,7,0,1,48},

546 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+91,3,0,3,0,1,3},

547 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+91,1,0,2,0,1,1},

548 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+91,0,0,1,0,1,1},

549 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+92,2,0,3,0,1,5},

550 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+92,0,0,2,0,1,2},

551 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+93,0,0,1,1,1,0},

552 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,4,0,3,0,1,0},

553 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,3,0,1,0,1,1},

554 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,2,0,1,0,1,0},

555 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,1,0,1,0,1,0},

556 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,0,0,1,0,1,0},

557 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+97,3,0,3,0,1,1},

558 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+97,0,0,3,0,1,5},

559 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+98,0,0,3,0,1,0},

560 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+99,0,0,8,0,1,0},

561 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+100,0,1,8,0,1,2},

562 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+101,0,1,8,0,1,3},

563 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+102,0,1,8,0,1,2},

564 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+103,0,1,8,0,1,3},

565 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+104,0,1,8,0,1,5},

566 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+105,0,1,8,0,1,8},

567 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+106,0,1,8,0,1,6},

568 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+107,0,1,8,0,1,4},

569 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+108,0,1,8,0,1,2},

570 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+109,0,1,8,0,1,-2},

571 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+110,0,1,8,0,1,-4},

572 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+111,0,1,8,0,1,-3},

573 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+112,0,1,8,0,1,3},

574 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+113,0,1,8,0,1,11},

575 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+114,0,1,8,0,1,19},

576 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+115,0,1,8,0,1,10},

577 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+116,7,0,1,0,1,0},

578 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+116,0,0,7,0,1,0},

579 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+117,4,0,1,0,1,0},

580 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+117,3,0,1,0,1,0},

581 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+117,2,0,1,0,1,1},

582 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+117,0,0,2,0,1,3},

583 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+118,6,0,1,0,1,0},

584 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+118,5,0,1,0,1,1},

585 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+118,3,0,2,0,1,1},

586 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+118,0,0,3,0,1,2},

587 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+119,7,0,1,0,1,0},

588 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+119,6,0,1,0,1,0},

589 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+119,4,0,2,0,1,3},

590 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+119,0,0,3,0,1,1},

591 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,6,0,2,0,1,0},

592 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,5,0,1,0,1,0},

593 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,4,0,1,0,1,0},

594 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,3,0,1,0,1,1},

595 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,2,0,1,0,1,0},

596 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,0,0,2,0,1,3},

597 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+121,0,0,8,0,1,60},

598 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+122,0,0,8,0,1,6},

599 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+123,0,0,8,0,1,25},

600 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+124,0,0,8,0,1,42},

601 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+125,4,0,4,0,1,8},

602 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+125,0,0,1,0,1,0},

603 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+126,6,0,2,0,1,2},

604 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+126,4,0,2,0,1,0},

605 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+126,3,0,1,0,1,0},

606 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+126,0,0,3,0,1,2},

607 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+127,4,0,1,0,0,0},

608 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+127,2,0,2,0,1,1},

609 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+127,1,0,1,0,1,0},

610 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+127,0,0,1,0,1,1},

611 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+128,0,0,8,0,1,12},

612 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+129,7,0,1,0,1,0},

613 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+129,0,0,6,0,1,0},

614 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+130,6,0,1,0,1,0},

615 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+130,0,0,6,0,1,0},

616 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+131,0,0,8,0,1,8},

617 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+132,0,0,8,0,1,0},

618 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+133,3,0,1,0,1,1},

619 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+133,2,0,1,0,1,0},

620 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+133,1,0,1,0,1,0},

621 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+133,0,0,1,0,1,0},

622 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,7,0,1,0,1,0},

623 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,6,0,1,0,1,0},

624 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,5,0,1,0,1,0},

625 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,4,0,1,0,1,0},

626 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,3,0,1,0,1,0},

627 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,2,0,1,0,1,0},

628 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,1,0,1,0,1,1},

629 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,0,0,1,0,1,1},

630 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+135,4,0,2,0,1,3},

631 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+135,2,0,1,0,1,1},

632 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+135,1,0,1,0,1,0},

633 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+135,0,0,1,0,1,0},

634 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+136,0,0,8,0,1,0},

635 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+137,4,0,1,0,1,1},

636 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+137,0,0,4,0,1,11},

637 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+138,0,1,5,0,1,2},

638 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+139,0,1,5,0,1,4},

639 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+140,0,1,5,0,1,2},

640 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+141,0,1,5,0,1,4},

641 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+142,0,1,5,0,1,2},

642 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+143,0,1,5,0,1,4},

643 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,5,0,1,0,1,0},

644 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,4,0,1,0,1,1},

645 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,3,0,1,0,1,0},

646 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,2,0,1,0,1,1},

647 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,0,0,2,0,1,3},

648 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,7,0,1,0,1,1},

649 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,6,0,1,0,1,0},

650 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,4,0,2,0,1,0},

651 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,2,0,2,0,1,0},

652 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,0,0,2,0,1,3},

653 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+146,6,0,2,0,1,1},

654 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+146,3,0,3,0,1,2},

655 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+146,0,0,3,0,1,6},

656 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+147,6,0,2,0,1,3},

657 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+147,3,0,3,0,1,1},

658 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+147,0,0,3,0,1,4},

659 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+148,7,0,1,0,1,0},

660 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+148,4,0,3,0,1,5},

661 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+149,6,0,2,0,1,0},

662 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+149,4,0,2,0,1,0},

663 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+149,2,0,2,0,1,0},

664 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+149,0,0,2,0,1,0},

665 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+150,6,0,2,0,1,0},

666 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+150,4,0,2,0,1,0},

667 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+150,2,0,2,0,1,0},

668 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+150,0,0,2,0,1,0},

669 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+151,4,0,3,0,1,7},

670 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+151,0,0,3,0,1,4},

671 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+152,4,0,3,0,1,0},

672 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+152,0,0,3,0,1,0},

673 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,7,0,1,0,1,1},

674 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,6,0,1,0,1,0},

675 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,4,0,2,0,1,0},

676 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,2,0,2,0,1,0},

677 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,0,0,2,0,1,3},

678 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+154,6,0,2,0,1,1},

679 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+154,3,0,3,0,1,2},

680 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+154,0,0,3,0,1,6},

681 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+155,6,0,2,0,1,3},

682 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+155,3,0,3,0,1,1},

683 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+155,0,0,3,0,1,4},

684 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+156,7,0,1,0,1,0},

685 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+156,4,0,3,0,1,5},

686 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+157,6,0,2,0,1,0},

687 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+157,4,0,2,0,1,0},

688 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+157,2,0,2,0,1,0},

689 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+157,0,0,2,0,1,0},

690 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+158,6,0,2,0,1,0},

691 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+158,4,0,2,0,1,0},

692 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+158,2,0,2,0,1,0},

693 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+158,0,0,2,0,1,0},

694 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+159,4,0,3,0,1,7},

695 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+159,0,0,3,0,1,4},

696 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+160,0,0,4,0,1,9},

697 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+161,0,0,8,0,1,112},

698 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+162,0,0,3,0,1,3},

699 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,5,0,1,0,1,0},

700 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,4,0,1,0,1,0},

701 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,3,0,1,0,1,1},

702 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,2,0,1,0,1,0},

703 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,1,0,1,0,1,0},

704 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,0,0,1,0,1,1},

705 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+164,0,0,8,0,1,33},

706 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+165,6,0,2,0,1,3},

707 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+165,4,0,2,0,1,3},

708 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+165,2,0,2,0,1,3},

709 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+165,0,0,2,0,1,3},

710 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+166,6,0,2,0,1,3},

711 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+166,4,0,2,0,1,3},

712 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+166,2,0,2,0,1,3},

713 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+166,0,0,2,0,1,3},

714 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+167,6,0,2,0,1,3},

715 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+167,4,0,2,0,1,3},

716 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+167,2,0,2,0,1,3},

717 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+167,0,0,2,0,1,3},

718 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+168,6,0,2,0,1,3},

719 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+168,4,0,2,0,1,3},

720 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+168,2,0,2,0,1,3},

721 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+168,0,0,2,0,1,3},

722 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+169,7,0,1,0,1,0},

723 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+169,4,0,3,0,1,4},

724 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+170,4,0,3,0,1,5},

725 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+170,0,0,4,0,1,3},

726 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+171,5,0,2,0,1,1},

727 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+171,4,0,1,0,1,0},

728 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+171,0,0,4,0,1,8},

729 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+172,0,0,7,0,1,32},

730 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+173,0,0,7,0,1,48},

731 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+174,4,0,3,0,1,5},

732 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+174,0,0,3,0,1,3},

733 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+175,6,0,1,0,1,0},

734 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+175,4,0,2,0,1,2},

735 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+175,2,0,1,0,1,1},

736 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+175,0,0,2,0,1,1},

737 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+176,7,0,1,0,1,0},

738 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+176,0,0,7,0,1,64},

739 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,6,0,2,0,1,2},

740 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,4,0,2,0,1,2},

741 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,3,0,1,0,1,1},

742 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,2,0,1,0,1,1},

743 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,1,0,1,0,1,1},

744 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,0,0,1,0,1,1},

745 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+178,0,0,8,0,1,11},

746 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+179,4,0,1,0,1,0},

747 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+179,3,0,1,0,1,0},

748 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+179,0,0,3,0,1,7},

749 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+180,0,0,8,1,1,0},

750 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+181,0,0,8,1,1,0},

751 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+182,4,0,4,1,1,0},

752 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+182,0,0,4,1,1,0},

753 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+183,6,0,2,0,1,2},

754 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+183,4,0,2,0,1,3},

755 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+183,3,0,1,0,1,1},

756 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+183,0,0,3,0,1,0},

757 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+184,0,0,8,0,1,127},

758 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+185,6,0,2,0,1,0},

759 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+185,4,0,2,0,1,0},

760 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+185,2,0,2,0,1,0},

761 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+185,0,0,2,0,1,0},

762 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+186,6,0,2,0,1,1},

763 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+186,4,0,2,0,1,1},

764 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+186,2,0,2,0,1,0},

765 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+186,0,0,2,0,1,0},

766 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+187,0,0,8,0,1,85},

767 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+188,0,0,8,0,1,85},

768 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+189,0,0,8,0,1,85},

769 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+190,0,0,8,0,1,85},

770 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+191,0,0,1,1,1,0},

771 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,4,0,1,0,1,0},

772 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,3,0,1,0,1,0},

773 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,2,0,1,0,1,0},

774 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,1,0,1,0,1,0},

775 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,0,0,1,0,1,0},

776 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+193,0,0,8,0,1,255},

777 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+194,0,0,5,0,1,0},

778 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+195,0,0,8,0,1,21},

779 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+196,0,0,4,1,1,0},

780 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+197,0,0,8,1,1,0},

781 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+198,0,0,4,1,1,0},

782 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+199,0,0,8,1,1,0},

783 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+200,0,0,5,1,1,0},

784 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+201,0,0,8,1,1,0},

785 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+202,0,0,8,1,1,0},

786 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+203,0,0,8,1,1,0},

787 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+204,0,0,8,1,1,0},

788 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+205,0,0,8,1,1,0},

789 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+206,0,0,8,1,1,0},

790 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+207,0,0,8,1,1,0},

791 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+208,0,0,8,1,1,0},

792 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+209,0,0,8,1,1,0},

793 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+210,0,0,8,1,1,0},

794 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+211,0,0,2,1,1,0},

795 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+212,0,0,8,1,1,0},

796 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+213,0,0,8,1,1,0},

797 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+214,0,0,2,1,1,0},

798 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+215,0,0,8,1,1,0},

799 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+216,0,0,8,1,1,0},

800 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+217,0,0,2,0,1,1},

801 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+218,0,0,8,1,1,0},

802 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+219,0,0,1,1,1,0},

803 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,5,0,1,0,1,1},

804 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,4,0,1,0,1,0},

805 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,3,0,1,0,1,0},

806 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,2,0,1,0,1,1},

807 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,1,0,1,0,1,0},

808 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,0,0,1,1,1,0},

809 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+1,0,0,8,1,1,0},

810 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,5,0,1,0,1,0},

811 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,4,0,1,0,1,0},

812 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,3,0,1,0,1,0},

813 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,2,0,1,0,1,0},

814 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,1,0,1,0,1,0},

815 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,0,0,1,0,1,1},

816 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+8,0,0,8,0,1,0},

817 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+9,0,0,8,0,1,0},

818 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+10,0,0,8,0,1,0},

819 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+11,0,0,8,0,1,0},

820 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+12,0,0,8,0,1,0},

821 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+13,0,0,8,1,1,0},

822 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+14,0,0,8,1,1,0},

823 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+15,0,0,8,1,1,0},

824 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+16,0,0,8,1,1,0},

825 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+17,0,0,8,1,1,0},

826 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+18,0,0,8,1,1,0},

827 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+19,0,0,8,1,1,0},

828 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+20,0,0,8,1,1,0},

829 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+21,0,0,8,1,1,0},

830 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+22,0,0,8,1,1,0},

831 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+23,0,0,8,1,1,0},

832 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+24,0,0,8,1,1,0},

833 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+25,0,0,8,1,1,0},

834 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+26,0,0,8,1,1,0},

835 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+27,0,0,8,1,1,0},

836 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+28,0,0,8,1,1,0},

837 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+29,4,0,4,0,1,0},

838 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+29,0,0,4,0,1,0},

839 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+30,4,0,4,0,1,0},

840 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+30,0,0,4,0,1,0},

841 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+31,4,0,4,0,1,0},

842 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+31,0,0,4,0,1,0},

843 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+32,4,0,4,0,1,0},

844 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+32,0,0,4,0,1,0},

845 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+33,0,0,1,1,1,0},

846 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+0,1,0,1,0,1,0},

847 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+0,0,0,1,0,1,0},

848 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+1,5,0,1,0,1,0},

849 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+1,4,0,1,0,1,0},

850 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+1,0,0,4,0,1,0},

851 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+2,0,0,8,0,1,0},

852 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+3,0,0,8,0,1,0},

853 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+4,0,0,8,1,1,0},

854 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+5,0,0,8,1,1,0},

855 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+6,0,0,4,1,1,0},

856 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+7,0,0,5,0,1,0},

857 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+8,0,0,5,0,1,0},

858 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+9,0,0,6,0,1,0},

859 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+10,0,0,6,0,1,0},

860 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+11,0,0,6,0,1,0},

861 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+12,0,0,6,0,1,0},

862 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+13,0,0,6,1,1,0},

863 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+14,5,0,1,0,1,0},

864 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+14,4,0,1,0,1,0},

865 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+14,0,0,4,0,1,0},

866 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+15,0,0,8,0,1,0},

867 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+16,0,0,8,0,1,0},

868 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+17,0,0,8,1,1,0},

869 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+18,0,0,8,1,1,0},

870 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+19,0,0,4,1,1,0},

871 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+20,0,0,5,0,1,0},

872 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+21,0,0,5,0,1,0},

873 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+22,0,0,6,0,1,0},

874 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+23,0,0,6,0,1,0},

875 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+24,0,0,6,0,1,0},

876 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+25,0,0,6,0,1,0},

877 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+26,0,0,6,1,1,0},

878 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,7,0,1,1,1,0},

879 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,6,0,1,1,1,0},

880 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,4,0,2,0,1,0},

881 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,3,0,1,0,1,0},

882 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,2,0,1,0,1,0},

883 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,1,0,1,0,1,0},

884 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,0,0,1,0,1,0},

885 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+28,0,0,8,0,1,0},

886 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+29,0,0,8,1,1,0},

887 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+30,0,0,8,1,1,0},

888 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+31,0,0,1,1,1,0},

889 {0,
SX1302_REG_OTP_BASE_ADDR
+0,0,0,8,0,1,0},

890 {0,
SX1302_REG_OTP_BASE_ADDR
+1,0,0,8,1,1,0},

891 {0,
SX1302_REG_OTP_BASE_ADDR
+2,4,0,4,1,1,0},

892 {0,
SX1302_REG_OTP_BASE_ADDR
+2,0,0,1,1,1,0},

893 {0,
SX1302_REG_OTP_BASE_ADDR
+3,0,0,2,0,1,0},

894 {0,
SX1302_REG_OTP_BASE_ADDR
+4,0,0,3,0,1,0},

895 {0,
SX1302_REG_OTP_BASE_ADDR
+5,4,0,4,0,1,0},

896 {0,
SX1302_REG_OTP_BASE_ADDR
+5,3,0,1,0,1,0},

897 {0,
SX1302_REG_OTP_BASE_ADDR
+5,2,0,1,0,1,0},

898 {0,
SX1302_REG_OTP_BASE_ADDR
+5,1,0,1,0,1,0},

899 {0,
SX1302_REG_OTP_BASE_ADDR
+5,0,0,1,0,1,0},

900 {0,
SX1302_REG_OTP_BASE_ADDR
+6,2,0,1,0,1,0},

901 {0,
SX1302_REG_OTP_BASE_ADDR
+6,1,0,1,0,1,0},

902 {0,
SX1302_REG_OTP_BASE_ADDR
+6,0,0,1,0,1,0},

903 {0,
SX1302_REG_OTP_BASE_ADDR
+7,0,0,1,1,1,0},

904 {0,
SX1302_REG_OTP_BASE_ADDR
+8,0,0,8,0,1,255},

905 {0,
SX1302_REG_OTP_BASE_ADDR
+9,0,0,8,0,1,255},

906 {0,
SX1302_REG_OTP_BASE_ADDR
+10,0,0,8,0,1,255},

907 {0,
SX1302_REG_OTP_BASE_ADDR
+11,0,0,1,0,1,1},

908 {0,
SX1302_REG_OTP_BASE_ADDR
+12,0,0,1,1,1,0},

909 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+0,0,0,5,0,1,0},

910 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+1,0,0,8,0,1,128},

911 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+2,0,0,1,0,1,0},

912 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,4,0,3,0,1,0},

913 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,3,0,1,0,1,1},

914 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,2,0,1,0,1,0},

915 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,1,0,1,0,1,0},

916 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,0,0,1,0,1,0},

917 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+4,3,0,3,0,1,1},

918 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+4,0,0,3,0,1,5},

919 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+5,0,0,3,0,1,0},

920 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+6,0,0,8,0,1,0},

921 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+7,0,1,8,0,1,2},

922 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+8,0,1,8,0,1,3},

923 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+9,0,1,8,0,1,2},

924 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+10,0,1,8,0,1,3},

925 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+11,0,1,8,0,1,5},

926 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+12,0,1,8,0,1,8},

927 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+13,0,1,8,0,1,6},

928 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+14,0,1,8,0,1,4},

929 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+15,0,1,8,0,1,2},

930 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+16,0,1,8,0,1,-2},

931 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+17,0,1,8,0,1,-4},

932 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+18,0,1,8,0,1,-3},

933 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+19,0,1,8,0,1,3},

934 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+20,0,1,8,0,1,11},

935 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+21,0,1,8,0,1,19},

936 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+22,0,1,8,0,1,10},

937 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+23,7,0,1,0,1,0},

938 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+23,0,0,7,0,1,0},

939 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+24,4,0,1,0,1,0},

940 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+24,3,0,1,0,1,0},

941 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+24,2,0,1,0,1,1},

942 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+24,0,0,2,0,1,3},

943 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+25,6,0,1,0,1,0},

944 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+25,5,0,1,0,1,1},

945 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+25,3,0,2,0,1,1},

946 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+25,0,0,3,0,1,2},

947 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+26,7,0,1,0,1,0},

948 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+26,6,0,1,0,1,0},

949 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+26,4,0,2,0,1,3},

950 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+26,0,0,3,0,1,1},

951 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,6,0,2,0,1,0},

952 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,5,0,1,0,1,0},

953 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,4,0,1,0,1,0},

954 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,3,0,1,0,1,1},

955 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,2,0,1,0,1,0},

956 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,0,0,2,0,1,3},

957 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+28,0,0,8,0,1,60},

958 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+29,0,0,8,0,1,6},

959 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+30,0,0,8,0,1,25},

960 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+31,0,0,8,0,1,42},

961 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+32,4,0,4,0,1,8},

962 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+32,0,0,1,0,1,0},

963 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+33,4,0,4,0,1,4},

964 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+33,0,0,4,0,1,7},

965 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+34,6,0,2,0,1,2},

966 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+34,4,0,2,0,1,0},

967 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+34,3,0,1,0,1,0},

968 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+34,0,0,3,0,1,2},

969 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,5,0,1,0,1,0},

970 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,4,0,1,0,1,0},

971 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,2,0,2,0,1,1},

972 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,1,0,1,0,1,0},

973 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,0,0,1,0,1,1},

974 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+36,0,0,8,0,1,12},

975 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+37,7,0,1,0,1,0},

976 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+37,0,0,6,0,1,0},

977 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+38,6,0,1,0,1,0},

978 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+38,0,0,6,0,1,0},

979 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+39,0,0,8,0,1,8},

980 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+40,0,0,8,0,1,0},

981 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+41,3,0,1,0,1,1},

982 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+41,2,0,1,0,1,0},

983 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+41,1,0,1,0,1,0},

984 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+41,0,0,1,0,1,0},

985 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+42,4,0,2,0,1,3},

986 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+42,2,0,1,0,1,1},

987 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+42,1,0,1,0,1,0},

988 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+42,0,0,1,0,1,0},

989 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+43,0,0,8,0,1,0},

990 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+44,5,0,2,0,1,2},

991 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+44,0,0,5,0,1,22},

992 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+45,5,0,1,0,1,1},

993 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+45,4,0,1,0,1,1},

994 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+45,0,0,4,0,1,11},

995 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+46,0,1,5,0,1,2},

996 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+47,0,1,5,0,1,4},

997 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,5,0,1,0,1,0},

998 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,4,0,1,0,1,1},

999 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,3,0,1,0,1,0},

1000 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,2,0,1,0,1,1},

1001 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,0,0,2,0,1,3},

1002 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,7,0,1,0,1,1},

1003 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,6,0,1,0,1,0},

1004 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,4,0,2,0,1,0},

1005 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,2,0,2,0,1,0},

1006 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,0,0,2,0,1,3},

1007 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+50,6,0,2,0,1,2},

1008 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+50,3,0,3,0,1,2},

1009 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+50,0,0,3,0,1,4},

1010 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+51,6,0,2,0,1,0},

1011 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+51,3,0,3,0,1,1},

1012 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+51,0,0,3,0,1,4},

1013 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+52,7,0,1,0,1,0},

1014 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+52,4,0,3,0,1,5},

1015 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+52,0,0,2,0,1,3},

1016 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+53,4,0,3,0,1,0},

1017 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+53,0,0,3,0,1,0},

1018 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+54,0,0,4,0,1,9},

1019 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+55,0,0,8,0,1,112},

1020 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+56,0,0,3,0,1,3},

1021 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,5,0,1,0,1,0},

1022 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,4,0,1,0,1,0},

1023 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,3,0,1,0,1,1},

1024 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,2,0,1,0,1,0},

1025 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,1,0,1,0,1,0},

1026 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,0,0,1,0,1,1},

1027 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+58,0,0,8,0,1,33},

1028 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+59,7,0,1,0,1,0},

1029 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+59,4,0,3,0,1,4},

1030 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+59,0,0,2,0,1,3},

1031 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+60,4,0,3,0,1,5},

1032 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+60,0,0,4,0,1,3},

1033 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+61,5,0,2,0,1,1},

1034 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+61,4,0,1,0,1,0},

1035 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+61,0,0,4,0,1,8},

1036 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+62,0,0,7,0,1,24},

1037 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+63,0,0,7,0,1,48},

1038 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+64,4,0,3,0,1,7},

1039 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+64,0,0,3,0,1,7},

1040 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+65,7,0,1,0,1,0},

1041 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+65,4,0,2,0,1,2},

1042 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+65,2,0,1,0,1,1},

1043 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+65,0,0,2,0,1,1},

1044 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+66,7,0,1,0,1,0},

1045 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+66,0,0,7,0,1,55},

1046 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,6,0,2,0,1,2},

1047 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,4,0,2,0,1,2},

1048 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,3,0,1,0,1,1},

1049 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,2,0,1,0,1,1},

1050 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,1,0,1,0,1,1},

1051 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,0,0,1,0,1,1},

1052 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+68,0,0,8,0,1,11},

1053 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+69,4,0,1,0,1,0},

1054 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+69,3,0,1,0,1,0},

1055 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+69,0,0,3,0,1,7},

1056 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+70,6,0,2,0,1,1},

1057 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+70,4,0,2,0,1,1},

1058 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+70,2,0,2,0,1,1},

1059 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+70,0,0,2,0,1,1},

1060 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+71,0,0,1,1,1,0},

1061 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+80,0,0,5,0,1,0},

1062 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+81,0,0,8,0,1,128},

1063 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+82,4,0,1,0,1,0},

1064 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+82,2,0,2,0,1,0},

1065 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+82,1,0,1,0,1,0},

1066 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+82,0,0,1,0,1,0},

1067 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+83,6,0,2,0,1,0},

1068 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+83,3,0,3,0,1,0},

1069 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+83,0,0,3,0,1,0},

1070 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+84,3,0,1,0,1,0},

1071 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+84,2,0,1,0,1,1},

1072 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+84,1,0,1,0,1,0},

1073 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+84,0,0,1,0,1,0},

1074 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+85,5,0,3,0,1,4},

1075 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+85,0,0,5,0,1,0},

1076 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+86,0,0,8,0,1,0},

1077 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+87,0,0,8,0,1,0},

1078 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+88,0,0,8,0,1,0},

1079 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+89,0,0,2,0,1,0},

1080 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+90,0,0,8,0,1,0},

1081 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+91,0,0,8,0,1,0},

1082 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+92,0,0,8,0,1,0},

1083 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+93,0,0,8,0,1,0},

1084 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+94,0,0,8,0,1,0},

1085 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+95,0,0,8,0,1,0},

1086 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+96,0,0,8,0,1,0},

1087 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+97,0,0,8,0,1,0},

1088 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+98,0,0,8,0,1,0},

1089 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+99,0,0,8,0,1,0},

1090 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+100,0,0,8,0,1,0},

1091 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+101,0,0,4,0,1,4},

1092 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+102,0,0,1,1,1,0},

1093 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,4,0,1,0,1,0},

1094 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,3,0,1,0,1,0},

1095 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,2,0,1,0,1,0},

1096 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,1,0,1,0,1,0},

1097 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,0,0,1,0,1,0},

1098 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+1,0,0,5,0,1,0},

1099 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+2,0,0,5,0,1,0},

1100 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+3,0,0,8,0,1,0},

1101 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+4,0,0,8,0,1,0},

1102 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+5,0,0,1,1,1,0},

1103 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+6,0,0,8,1,1,0},

1104 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+7,0,0,4,1,1,0},

1105 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+8,0,0,2,0,1,2},

1106 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+9,0,0,1,1,1,0},

1116 
	$ªg_w
(
uöt8_t
 
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 
ªg_vÆue
) {

1117 
com_°©
 = 
LGW_REG_SUCCESS
;

1119 i‡((
r
.
Àng
 =8Ë&& (r.
offs
 == 0)) {

1121 
com_°©
 = 
	`lgw_com_w
(
•i_mux_èrgë
, 
r
.
addr
, (
uöt8_t
)
ªg_vÆue
);

1122 
	`DEBUG_PRINTF
("==> DIRECT WRITE @ 0x%04X\n", 
r
.
addr
);

1123 } i‡((
r
.
offs
 +Ñ.
Àng
) <= 8) {

1125 
com_°©
 = 
	`lgw_com_rmw
(
•i_mux_èrgë
, 
r
.
addr
,Ñ.
offs
,Ñ.
Àng
, (
uöt8_t
)
ªg_vÆue
);

1126 
	`DEBUG_PRINTF
("==> READ MODIFY WRITE @ 0x%04X (offs:%uÜíg:%u)\n", 
r
.
addr
,Ñ.
offs
,Ñ.
Àng
);

1129 
	`DEBUG_MSG
("ERROR: REGISTER SIZE AND OFFSET ARE NOT SUPPORTED\n");

1130  
LGW_REG_ERROR
;

1133  
com_°©
;

1134 
	}
}

1138 
	$ªg_r
(
uöt8_t
 
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 *
ªg_vÆue
) {

1139 
com_°©
 = 
LGW_REG_SUCCESS
;

1140 
uöt8_t
 
bufu
[4] = "\x00\x00\x00\x00";

1141 
öt8_t
 *
bufs
 = (öt8_à*)
bufu
;

1143 i‡((
r
.
offs
 +Ñ.
Àng
) <= 8) {

1145 
com_°©
 = 
	`lgw_com_r
(
•i_mux_èrgë
, 
r
.
addr
, &
bufu
[0]);

1146 
bufu
[1] = bufu[0] << (8 - 
r
.
Àng
 -Ñ.
offs
);

1147 i‡(
r
.
sign
 =
åue
) {

1148 
bufs
[2] = bufs[1] >> (8 - 
r
.
Àng
);

1149 *
ªg_vÆue
 = (
öt32_t
)
bufs
[2];

1151 
bufu
[2] = bufu[1] >> (8 - 
r
.
Àng
);

1152 *
ªg_vÆue
 = (
öt32_t
)
bufu
[2];

1156 
	`DEBUG_MSG
("ERROR: REGISTER SIZE AND OFFSET ARE NOT SUPPORTED\n");

1157  
LGW_REG_ERROR
;

1160  
com_°©
;

1161 
	}
}

1167 
	$lgw_c⁄√˘
(c⁄° 
lgw_com_ty≥_t
 
com_ty≥
, c⁄° * 
com_∑th
) {

1168 
com_°©
 = 
LGW_COM_SUCCESS
;

1169 
uöt8_t
 
u
 = 0;

1172 i‡(
com_∑th
 =
NULL
) {

1173 
	`DEBUG_MSG
("ERROR: COM PATH IS NOT SET\n");

1174  
LGW_REG_ERROR
;

1178 
com_°©
 = 
	`lgw_com_›í
(
com_ty≥
, 
com_∑th
);

1179 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

1180 
	`DEBUG_MSG
("ERROR CONNECTING CONCENTRATOR\n");

1181  
LGW_REG_ERROR
;

1185 
com_°©
 = 
	`lgw_com_r
(
LGW_SPI_MUX_TARGET_SX1302
, 
l‹egs
[
SX1302_REG_COMMON_VERSION_VERSION
].
addr
, &
u
);

1186 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

1187 
	`DEBUG_MSG
("ERROR READING CHIP VERSION REGISTER\n");

1188  
LGW_REG_ERROR
;

1190 
	`¥ötf
("NŸe: chù vîsi⁄ i†0x%02X (v%u.%u)\n", 
u
, (u >> 4) & 0x0F, u & 0x0F) ;

1192 
	`DEBUG_MSG
("Note: success connectingÅhe concentrator\n");

1193  
LGW_REG_SUCCESS
;

1194 
	}
}

1199 
	$lgw_disc⁄√˘
() {

1200 
com_°©
;

1202 
com_°©
 = 
	`lgw_com_˛o£
();

1203 i‡(
com_°©
 =
LGW_COM_SUCCESS
) {

1204 
	`DEBUG_MSG
("Note: success disconnectingÅhe concentrator\n");

1205  
LGW_REG_SUCCESS
;

1207 
	`DEBUG_MSG
("ERROR: FailedÅo disconnectÅhe concentrator\n");

1208  
LGW_REG_ERROR
;

1210 
	}
}

1215 
	$lgw_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
) {

1216 
com_°©
 = 
LGW_COM_SUCCESS
;

1217 
lgw_ªg_s
 
r
;

1220 i‡(
ªgi°î_id
 >
LGW_TOTALREGS
) {

1221 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

1222  
LGW_REG_ERROR
;

1226 
r
 = 
l‹egs
[
ªgi°î_id
];

1229 i‡(
r
.
rd⁄
 == 1){

1230 
	`DEBUG_MSG
("ERROR: TRYING TO WRITE A READ-ONLY REGISTER\n");

1231  
LGW_REG_ERROR
;

1234 
com_°©
 = 
	`ªg_w
(
LGW_SPI_MUX_TARGET_SX1302
, 
r
, 
ªg_vÆue
);

1236 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

1237 
	`DEBUG_MSG
("ERROR: COM ERROR DURING REGISTER WRITE\n");

1238  
LGW_REG_ERROR
;

1240  
LGW_REG_SUCCESS
;

1242 
	}
}

1247 
	$lgw_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 *
ªg_vÆue
) {

1248 
com_°©
 = 
LGW_COM_SUCCESS
;

1249 
lgw_ªg_s
 
r
;

1252 
	`CHECK_NULL
(
ªg_vÆue
);

1253 i‡(
ªgi°î_id
 >
LGW_TOTALREGS
) {

1254 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

1255  
LGW_REG_ERROR
;

1259 
r
 = 
l‹egs
[
ªgi°î_id
];

1261 
com_°©
 = 
	`ªg_r
(
LGW_SPI_MUX_TARGET_SX1302
, 
r
, 
ªg_vÆue
);

1263 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

1264 
	`DEBUG_MSG
("ERROR: COM ERROR DURING REGISTER WRITE\n");

1265  
LGW_REG_ERROR
;

1267  
LGW_REG_SUCCESS
;

1269 
	}
}

1274 
	$lgw_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

1275 
com_°©
 = 
LGW_COM_SUCCESS
;

1276 
lgw_ªg_s
 
r
;

1279 
	`CHECK_NULL
(
d©a
);

1280 i‡(
size
 == 0) {

1281 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

1282  
LGW_REG_ERROR
;

1284 i‡(
ªgi°î_id
 >
LGW_TOTALREGS
) {

1285 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

1286  
LGW_REG_ERROR
;

1290 
r
 = 
l‹egs
[
ªgi°î_id
];

1293 i‡(
r
.
rd⁄
 == 1){

1294 
	`DEBUG_MSG
("ERROR: TRYING TO BURST WRITE A READ-ONLY REGISTER\n");

1295  
LGW_REG_ERROR
;

1299 
com_°©
 = 
	`lgw_com_wb
(
LGW_SPI_MUX_TARGET_SX1302
, 
r
.
addr
, 
d©a
, 
size
);

1301 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

1302 
	`DEBUG_MSG
("ERROR: COM ERROR DURING REGISTER BURST WRITE\n");

1303  
LGW_REG_ERROR
;

1305  
LGW_REG_SUCCESS
;

1307 
	}
}

1312 
	$lgw_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

1313 
com_°©
 = 
LGW_COM_SUCCESS
;

1314 
lgw_ªg_s
 
r
;

1317 
	`CHECK_NULL
(
d©a
);

1318 i‡(
size
 == 0) {

1319 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

1320  
LGW_REG_ERROR
;

1322 i‡(
ªgi°î_id
 >
LGW_TOTALREGS
) {

1323 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

1324  
LGW_REG_ERROR
;

1328 
r
 = 
l‹egs
[
ªgi°î_id
];

1331 
com_°©
 = 
	`lgw_com_rb
(
LGW_SPI_MUX_TARGET_SX1302
, 
r
.
addr
, 
d©a
, 
size
);

1333 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

1334 
	`DEBUG_MSG
("ERROR: COM ERROR DURING REGISTER BURST READ\n");

1335  
LGW_REG_ERROR
;

1337  
LGW_REG_SUCCESS
;

1339 
	}
}

1343 
	$lgw_mem_wb
(
uöt16_t
 
mem_addr
, c⁄° 
uöt8_t
 *
d©a
, uöt16_à
size
) {

1344 
com_°©
 = 
LGW_COM_SUCCESS
;

1345 
chunk_˙t
 = 0;

1346 
uöt16_t
 
addr
 = 
mem_addr
;

1347 
uöt16_t
 
sz_todo
 = 
size
;

1348 
uöt16_t
 
chunk_size
;

1349 c⁄° 
uöt16_t
 
CHUNK_SIZE_MAX
 = 
	`lgw_com_chunk_size
();

1352 
	`CHECK_NULL
(
d©a
);

1353 i‡(
size
 == 0) {

1354 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

1355  
LGW_REG_ERROR
;

1359 
sz_todo
 > 0) {

1361 
chunk_size
 = (
sz_todo
 > 
CHUNK_SIZE_MAX
) ? CHUNK_SIZE_MAX : sz_todo;

1364 
com_°©
 = 
	`lgw_com_wb
(
LGW_SPI_MUX_TARGET_SX1302
, 
addr
, &
d©a
[
chunk_˙t
 * 
CHUNK_SIZE_MAX
], 
chunk_size
);

1367 
addr
 +
chunk_size
;

1368 
sz_todo
 -
chunk_size
;

1369 
chunk_˙t
 += 1;

1372 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

1373 
	`DEBUG_MSG
("ERROR: COM ERROR DURING REGISTER BURST WRITE\n");

1374  
LGW_REG_ERROR
;

1376  
LGW_REG_SUCCESS
;

1378 
	}
}

1382 
	$lgw_mem_rb
(
uöt16_t
 
mem_addr
, 
uöt8_t
 *
d©a
, uöt16_à
size
, 
boﬁ
 
fifo_mode
) {

1383 
com_°©
 = 
LGW_COM_SUCCESS
;

1384 
chunk_˙t
 = 0;

1385 
uöt16_t
 
addr
 = 
mem_addr
;

1386 
uöt16_t
 
sz_todo
 = 
size
;

1387 
uöt16_t
 
chunk_size
;

1388 c⁄° 
uöt16_t
 
CHUNK_SIZE_MAX
 = 
	`lgw_com_chunk_size
();

1391 
	`CHECK_NULL
(
d©a
);

1392 i‡(
size
 == 0) {

1393 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

1394  
LGW_REG_ERROR
;

1398 
sz_todo
 > 0) {

1400 
chunk_size
 = (
sz_todo
 > 
CHUNK_SIZE_MAX
) ? CHUNK_SIZE_MAX : sz_todo;

1403 
com_°©
 = 
	`lgw_com_rb
(
LGW_SPI_MUX_TARGET_SX1302
, 
addr
, &
d©a
[
chunk_˙t
 * 
CHUNK_SIZE_MAX
], 
chunk_size
);

1406 i‡(
fifo_mode
 =
Ál£
) {

1407 
addr
 +
chunk_size
;

1411 
sz_todo
 -
chunk_size
;

1412 
chunk_˙t
 += 1;

1415 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

1416 
	`DEBUG_MSG
("ERROR: COM ERROR DURING REGISTER BURST READ\n");

1417  
LGW_REG_ERROR
;

1419  
LGW_REG_SUCCESS
;

1421 
	}
}

	@libloragw/src/loragw_spi.c

22 
	~<°döt.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<°rög.h
>

29 
	~<sys/io˘l.h
>

30 
	~<löux/•i/•idev.h
>

32 
	~"l‹agw_•i.h
"

33 
	~"l‹agw_aux.h
"

38 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

39 #i‡
DEBUG_COM
 == 1

40 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

44 
	#DEBUG_MSG
(
°r
)

	)

45 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

46 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

52 
	#READ_ACCESS
 0x00

	)

53 
	#WRITE_ACCESS
 0x80

	)

55 
	#LGW_BURST_CHUNK
 1024

	)

61 
	$lgw_•i_›í
(c⁄° * 
com_∑th
, **
com_èrgë_±r
) {

62 *
•i_devi˚
 = 
NULL
;

63 
dev
;

64 
a
=0, 
b
=0;

65 
i
;

68 
	`CHECK_NULL
(
com_∑th
);

69 
	`CHECK_NULL
(
com_èrgë_±r
);

72 
•i_devi˚
 = 
	`mÆloc
(());

73 i‡(
•i_devi˚
 =
NULL
) {

74 
	`DEBUG_MSG
("ERROR: MALLOC FAIL\n");

75  
LGW_SPI_ERROR
;

79 
dev
 = 
	`›í
(
com_∑th
, 
O_RDWR
);

80 i‡(
dev
 < 0) {

81 
	`DEBUG_PRINTF
("ERROR: faûedÅÿ›í SPI devi˚ %s\n", 
com_∑th
);

82  
LGW_SPI_ERROR
;

86 
i
 = 
SPI_MODE_0
;

87 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_MODE
, &
i
);

88 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_MODE
, &
i
);

89 i‡((
a
 < 0Ë|| (
b
 < 0)) {

90 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET IN MODE 0\n");

91 
	`˛o£
(
dev
);

92 
	`‰ì
(
•i_devi˚
);

93  
LGW_SPI_ERROR
;

97 
i
 = 
SPI_SPEED
;

98 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
i
);

99 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_MAX_SPEED_HZ
, &
i
);

100 i‡((
a
 < 0Ë|| (
b
 < 0)) {

101 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET MAX SPEED\n");

102 
	`˛o£
(
dev
);

103 
	`‰ì
(
•i_devi˚
);

104  
LGW_SPI_ERROR
;

108 
i
 = 0;

109 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_LSB_FIRST
, &
i
);

110 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_LSB_FIRST
, &
i
);

111 i‡((
a
 < 0Ë|| (
b
 < 0)) {

112 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET MSB FIRST\n");

113 
	`˛o£
(
dev
);

114 
	`‰ì
(
•i_devi˚
);

115  
LGW_SPI_ERROR
;

119 
i
 = 0;

120 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_BITS_PER_WORD
, &
i
);

121 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_BITS_PER_WORD
, &
i
);

122 i‡((
a
 < 0Ë|| (
b
 < 0)) {

123 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET 8 BITS-PER-WORD\n");

124 
	`˛o£
(
dev
);

125  
LGW_SPI_ERROR
;

128 *
•i_devi˚
 = 
dev
;

129 *
com_èrgë_±r
 = (*)
•i_devi˚
;

130 
	`DEBUG_MSG
("Note: SPIÖort openedánd configured ok\n");

131  
LGW_SPI_SUCCESS
;

132 
	}
}

137 
	$lgw_•i_˛o£
(*
com_èrgë
) {

138 
•i_devi˚
;

139 
a
;

142 
	`CHECK_NULL
(
com_èrgë
);

145 
•i_devi˚
 = *(*)
com_èrgë
;

146 
a
 = 
	`˛o£
(
•i_devi˚
);

147 
	`‰ì
(
com_èrgë
);

150 i‡(
a
 < 0) {

151 
	`DEBUG_MSG
("ERROR: SPI PORT FAILED TO CLOSE\n");

152  
LGW_SPI_ERROR
;

154 
	`DEBUG_MSG
("Note: SPIÖort closed\n");

155  
LGW_SPI_SUCCESS
;

157 
	}
}

162 
	$lgw_•i_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
d©a
) {

163 
•i_devi˚
;

164 
uöt8_t
 
out_buf
[4];

165 
uöt8_t
 
comm™d_size
;

166 
•i_ioc_å™s„r
 
k
;

167 
a
;

170 
	`CHECK_NULL
(
com_èrgë
);

172 
•i_devi˚
 = *(*)
com_èrgë
;

175 
out_buf
[0] = 
•i_mux_èrgë
;

176 
out_buf
[1] = 
WRITE_ACCESS
 | ((
addªss
 >> 8) & 0x7F);

177 
out_buf
[2] = ((
addªss
 >> 0) & 0xFF);

178 
out_buf
[3] = 
d©a
;

179 
comm™d_size
 = 4;

182 
	`mem£t
(&
k
, 0, (k));

183 
k
.
tx_buf
 = (Ë
out_buf
;

184 
k
.
Àn
 = 
comm™d_size
;

185 
k
.
•ìd_hz
 = 
SPI_SPEED
;

186 
k
.
cs_ch™ge
 = 0;

187 
k
.
bôs_≥r_w‹d
 = 8;

188 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

191 i‡(
a
 !()
k
.
Àn
) {

192 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

193  
LGW_SPI_ERROR
;

195 
	`DEBUG_MSG
("Note: SPI write success\n");

196  
LGW_SPI_SUCCESS
;

198 
	}
}

203 
	$lgw_•i_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
) {

204 
•i_devi˚
;

205 
uöt8_t
 
out_buf
[5];

206 
uöt8_t
 
comm™d_size
;

207 
uöt8_t
 
ö_buf
[
	`ARRAY_SIZE
(
out_buf
)];

208 
•i_ioc_å™s„r
 
k
;

209 
a
;

212 
	`CHECK_NULL
(
com_èrgë
);

213 
	`CHECK_NULL
(
d©a
);

215 
•i_devi˚
 = *(*)
com_èrgë
;

218 
out_buf
[0] = 
•i_mux_èrgë
;

219 
out_buf
[1] = 
READ_ACCESS
 | ((
addªss
 >> 8) & 0x7F);

220 
out_buf
[2] = ((
addªss
 >> 0) & 0xFF);

221 
out_buf
[3] = 0x00;

222 
out_buf
[4] = 0x00;

223 
comm™d_size
 = 5;

226 
	`mem£t
(&
k
, 0, (k));

227 
k
.
tx_buf
 = (Ë
out_buf
;

228 
k
.
rx_buf
 = (Ë
ö_buf
;

229 
k
.
Àn
 = 
comm™d_size
;

230 
k
.
cs_ch™ge
 = 0;

231 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

234 i‡(
a
 !()
k
.
Àn
) {

235 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

236  
LGW_SPI_ERROR
;

238 
	`DEBUG_MSG
("Note: SPIÑead success\n");

239 *
d©a
 = 
ö_buf
[
comm™d_size
 - 1];

240  
LGW_SPI_SUCCESS
;

242 
	}
}

247 
	$lgw_•i_rmw
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
offs
, uöt8_à
Àng
, uöt8_à
d©a
) {

248 
•i_°©
 = 
LGW_SPI_SUCCESS
;

249 
uöt8_t
 
buf
[4] = "\x00\x00\x00\x00";

252 
•i_°©
 +
	`lgw_•i_r
(
com_èrgë
, 
•i_mux_èrgë
, 
addªss
, &
buf
[0]);

255 
buf
[1] = ((1 << 
Àng
Ë- 1Ë<< 
offs
;

256 
buf
[2] = ((
uöt8_t
)
d©a
Ë<< 
offs
;

257 
buf
[3] = (~buf[1] & buf[0]) | (buf[1] & buf[2]);

260 
•i_°©
 +
	`lgw_•i_w
(
com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
buf
[3]);

262  
•i_°©
;

263 
	}
}

268 
	$lgw_•i_wb
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, c⁄° uöt8_à*
d©a
, uöt16_à
size
) {

269 
•i_devi˚
;

270 
uöt8_t
 
comm™d
[3];

271 
uöt8_t
 
comm™d_size
;

272 
•i_ioc_å™s„r
 
k
[2];

273 
size_to_do
, 
chunk_size
, 
off£t
;

274 
byã_å™s„ªd
 = 0;

275 
i
;

278 
	`CHECK_NULL
(
com_èrgë
);

279 
	`CHECK_NULL
(
d©a
);

280 i‡(
size
 == 0) {

281 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

282  
LGW_SPI_ERROR
;

285 
•i_devi˚
 = *(*)
com_èrgë
;

288 
comm™d
[0] = 
•i_mux_èrgë
;

289 
comm™d
[1] = 
WRITE_ACCESS
 | ((
addªss
 >> 8) & 0x7F);

290 
comm™d
[2] = ((
addªss
 >> 0) & 0xFF);

291 
comm™d_size
 = 3;

292 
size_to_do
 = 
size
;

295 
	`mem£t
(&
k
, 0, (k));

296 
k
[0].
tx_buf
 = (Ë&
comm™d
[0];

297 
k
[0].
Àn
 = 
comm™d_size
;

298 
k
[0].
cs_ch™ge
 = 0;

299 
k
[1].
cs_ch™ge
 = 0;

300 
i
=0; 
size_to_do
 > 0; ++i) {

301 
chunk_size
 = (
size_to_do
 < 
LGW_BURST_CHUNK
) ? size_to_do : LGW_BURST_CHUNK;

302 
off£t
 = 
i
 * 
LGW_BURST_CHUNK
;

303 
k
[1].
tx_buf
 = ()(
d©a
 + 
off£t
);

304 
k
[1].
Àn
 = 
chunk_size
;

305 
byã_å™s„ªd
 +(
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(2), &
k
Ë- k[0].
Àn
 );

306 
	`DEBUG_PRINTF
("BURST WRITE:Åÿå™†%d # chunk %d #Åøns„ºed %d \n", 
size_to_do
, 
chunk_size
, 
byã_å™s„ªd
);

307 
size_to_do
 -
chunk_size
;

311 i‡(
byã_å™s„ªd
 !
size
) {

312 
	`DEBUG_MSG
("ERROR: SPI BURST WRITE FAILURE\n");

313  
LGW_SPI_ERROR
;

315 
	`DEBUG_MSG
("Note: SPI burst write success\n");

316  
LGW_SPI_SUCCESS
;

318 
	}
}

323 
	$lgw_•i_rb
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
, uöt16_à
size
) {

324 
•i_devi˚
;

325 
uöt8_t
 
comm™d
[4];

326 
uöt8_t
 
comm™d_size
;

327 
•i_ioc_å™s„r
 
k
[2];

328 
size_to_do
, 
chunk_size
, 
off£t
;

329 
byã_å™s„ªd
 = 0;

330 
i
;

333 
	`CHECK_NULL
(
com_èrgë
);

334 
	`CHECK_NULL
(
d©a
);

335 i‡(
size
 == 0) {

336 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

337  
LGW_SPI_ERROR
;

340 
•i_devi˚
 = *(*)
com_èrgë
;

343 
comm™d
[0] = 
•i_mux_èrgë
;

344 
comm™d
[1] = 
READ_ACCESS
 | ((
addªss
 >> 8) & 0x7F);

345 
comm™d
[2] = ((
addªss
 >> 0) & 0xFF);

346 
comm™d
[3] = 0x00;

347 
comm™d_size
 = 4;

348 
size_to_do
 = 
size
;

351 
	`mem£t
(&
k
, 0, (k));

352 
k
[0].
tx_buf
 = (Ë&
comm™d
[0];

353 
k
[0].
Àn
 = 
comm™d_size
;

354 
k
[0].
cs_ch™ge
 = 0;

355 
k
[1].
cs_ch™ge
 = 0;

356 
i
=0; 
size_to_do
 > 0; ++i) {

357 
chunk_size
 = (
size_to_do
 < 
LGW_BURST_CHUNK
) ? size_to_do : LGW_BURST_CHUNK;

358 
off£t
 = 
i
 * 
LGW_BURST_CHUNK
;

359 
k
[1].
rx_buf
 = ()(
d©a
 + 
off£t
);

360 
k
[1].
Àn
 = 
chunk_size
;

361 
byã_å™s„ªd
 +(
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(2), &
k
Ë- k[0].
Àn
 );

362 
	`DEBUG_PRINTF
("BURST READ:Åÿå™†%d # chunk %d #Åøns„ºed %d \n", 
size_to_do
, 
chunk_size
, 
byã_å™s„ªd
);

363 
size_to_do
 -
chunk_size
;

367 i‡(
byã_å™s„ªd
 !
size
) {

368 
	`DEBUG_MSG
("ERROR: SPI BURST READ FAILURE\n");

369  
LGW_SPI_ERROR
;

371 
	`DEBUG_MSG
("Note: SPI burstÑead success\n");

372  
LGW_SPI_SUCCESS
;

374 
	}
}

378 
uöt16_t
 
	$lgw_•i_chunk_size
() {

379  (
uöt16_t
)
LGW_BURST_CHUNK
;

380 
	}
}

	@libloragw/src/loragw_stts751.c

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

23 
	~"l‹agw_i2c.h
"

24 
	~"l‹agw_°ts751.h
"

29 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

30 #i‡
DEBUG_I2C
 == 1

31 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

32 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

33 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

35 
	#DEBUG_MSG
(
°r
)

	)

36 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

37 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

43 
	#STTS751_REG_TEMP_H
 0x00

	)

44 
	#STTS751_REG_STATUS
 0x01

	)

45 
	#STTS751_STATUS_TRIPT
 
	`BIT
(0)

	)

46 
	#STTS751_STATUS_TRIPL
 
	`BIT
(5)

	)

47 
	#STTS751_STATUS_TRIPH
 
	`BIT
(6)

	)

48 
	#STTS751_REG_TEMP_L
 0x02

	)

49 
	#STTS751_REG_CONF
 0x03

	)

50 
	#STTS751_CONF_RES_MASK
 0x0C

	)

51 
	#STTS751_CONF_RES_SHIFT
 2

	)

52 
	#STTS751_CONF_EVENT_DIS
 
	`BIT
(7)

	)

53 
	#STTS751_CONF_STOP
 
	`BIT
(6)

	)

54 
	#STTS751_REG_RATE
 0x04

	)

55 
	#STTS751_REG_HLIM_H
 0x05

	)

56 
	#STTS751_REG_HLIM_L
 0x06

	)

57 
	#STTS751_REG_LLIM_H
 0x07

	)

58 
	#STTS751_REG_LLIM_L
 0x08

	)

59 
	#STTS751_REG_TLIM
 0x20

	)

60 
	#STTS751_REG_HYST
 0x21

	)

61 
	#STTS751_REG_SMBUS_TO
 0x22

	)

63 
	#STTS751_REG_PROD_ID
 0xFD

	)

64 
	#STTS751_REG_MAN_ID
 0xFE

	)

65 
	#STTS751_REG_REV_ID
 0xFF

	)

67 
	#STTS751_0_PROD_ID
 0x00

	)

68 
	#STTS751_1_PROD_ID
 0x01

	)

69 
	#ST_MAN_ID
 0x53

	)

80 
	$°ts751_c⁄figuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
) {

81 
îr
;

82 
uöt8_t
 
vÆ
;

85 i‡(
i2c_fd
 <= 0) {

86 
	`¥ötf
("ERROR: invalid I2C file descriptor\n");

87  
LGW_I2C_ERROR
;

90 
	`DEBUG_PRINTF
("INFO: c⁄figurög STTS751Åem≥øtuª sís‹ o¿0x%02X...\n", 
i2c_addr
);

93 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_PROD_ID
, &
vÆ
);

94 i‡(
îr
 != 0) {

95 
	`DEBUG_PRINTF
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

96  
LGW_I2C_ERROR
;

98 
vÆ
) {

99 
STTS751_0_PROD_ID
:

100 
	`DEBUG_MSG
("INFO: Product ID: STTS751-0\n");

102 
STTS751_1_PROD_ID
:

103 
	`DEBUG_MSG
("INFO: Product ID: STTS751-1\n");

106 
	`¥ötf
("ERROR: Product ID: UNKNOWN\n");

107  
LGW_I2C_ERROR
;

111 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_MAN_ID
, &
vÆ
);

112 i‡(
îr
 != 0) {

113 
	`DEBUG_PRINTF
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

114  
LGW_I2C_ERROR
;

116 i‡(
vÆ
 !
ST_MAN_ID
) {

117 
	`¥ötf
("ERROR: Manufacturer ID: UNKNOWN\n");

118  
LGW_I2C_ERROR
;

120 
	`DEBUG_PRINTF
("INFO: M™uÁ˘uª∏ID: 0x%02X\n", 
vÆ
);

124 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_REV_ID
, &
vÆ
);

125 i‡(
îr
 != 0) {

126 
	`DEBUG_PRINTF
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

127  
LGW_I2C_ERROR
;

129 
	`DEBUG_PRINTF
("INFO: Revisi⁄Çumbî: 0x%02X\n", 
vÆ
);

132 
îr
 = 
	`i2c_löuxdev_wrôe
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_CONF
, 0x8C);

133 i‡(
îr
 != 0) {

134 
	`DEBUG_PRINTF
("ERROR: faûedÅÿwrôêI2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

135  
LGW_I2C_ERROR
;

139 
îr
 = 
	`i2c_löuxdev_wrôe
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_RATE
, 0x04);

140 i‡(
îr
 != 0) {

141 
	`DEBUG_PRINTF
("ERROR: faûedÅÿwrôêI2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

142  
LGW_I2C_ERROR
;

145  
LGW_I2C_SUCCESS
;

146 
	}
}

150 
	$°ts751_gë_ãm≥øtuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
, * 
ãm≥øtuª
) {

151 
îr
;

152 
uöt8_t
 
high_byã
, 
low_byã
;

153 
öt8_t
 
h
;

156 i‡(
i2c_fd
 <= 0) {

157 
	`¥ötf
("ERROR: invalid I2C file descriptor\n");

158  
LGW_I2C_ERROR
;

162 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_TEMP_L
, &
low_byã
);

163 i‡(
îr
 != 0) {

164 
	`¥ötf
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

165  
LGW_I2C_ERROR
;

169 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_TEMP_H
, &
high_byã
);

170 i‡(
îr
 != 0) {

171 
	`¥ötf
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

172  
LGW_I2C_ERROR
;

175 
h
 = (
öt8_t
)
high_byã
;

176 *
ãm≥øtuª
 = ((
h
 << 8Ë| 
low_byã
) / 256.0;

178 
	`DEBUG_PRINTF
("Tem≥øtuª: %‡C (h:0x%02XÜ:0x%02X)\n", *
ãm≥øtuª
, 
high_byã
, 
low_byã
);

180  
LGW_I2C_SUCCESS
;

181 
	}
}

	@libloragw/src/loragw_sx1250.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

22 
	~"l‹agw_sx1250.h
"

23 
	~"l‹agw_com.h
"

24 
	~"l‹agw_aux.h
"

25 
	~"l‹agw_ªg.h
"

26 
	~"l‹agw_hÆ.h
"

28 
	~"sx1250_com.h
"

33 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

34 #i‡
DEBUG_RAD
 == 1

35 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

36 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

37 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

39 
	#DEBUG_MSG
(
°r
)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

41 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

50 
	$sx1250_ªg_w
(
sx1250_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
, uöt8_à
rf_chaö
) {

51 
com_°©
;

54 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

55 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

56  
LGW_REG_ERROR
;

59 
com_°©
 = 
	`sx1250_com_w
(
	`lgw_com_ty≥
(), 
	`lgw_com_èrgë
(), ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
›_code
, 
d©a
, 
size
);

61 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

62 
	`DEBUG_MSG
("ERROR: COM ERROR DURING RADIO REGISTER WRITE\n");

63  
LGW_REG_ERROR
;

65  
LGW_REG_SUCCESS
;

67 
	}
}

71 
	$sx1250_ªg_r
(
sx1250_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
, uöt8_à
rf_chaö
) {

72 
com_°©
;

75 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

76 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

77  
LGW_REG_ERROR
;

80 
com_°©
 = 
	`sx1250_com_r
(
	`lgw_com_ty≥
(), 
	`lgw_com_èrgë
(), ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
›_code
, 
d©a
, 
size
);

82 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

83 
	`DEBUG_MSG
("ERROR: COM ERROR DURING RADIO REGISTER READ\n");

84  
LGW_REG_ERROR
;

86  
LGW_REG_SUCCESS
;

88 
	}
}

92 
	$sx1250_ˇlibøã
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
) {

93 
îr
 = 
LGW_REG_SUCCESS
;

94 
uöt8_t
 
buff
[16];

96 
buff
[0] = 0x00;

97 
îr
 |
	`sx1250_ªg_r
(
GET_STATUS
, 
buff
, 1, 
rf_chaö
);

100 i‡((
‰eq_hz
 > 430E6) && (freq_hz < 440E6)) {

101 
buff
[0] = 0x6B;

102 
buff
[1] = 0x6F;

103 } i‡((
‰eq_hz
 > 470E6) && (freq_hz < 510E6)) {

104 
buff
[0] = 0x75;

105 
buff
[1] = 0x81;

106 } i‡((
‰eq_hz
 > 779E6) && (freq_hz < 787E6)) {

107 
buff
[0] = 0xC1;

108 
buff
[1] = 0xC5;

109 } i‡((
‰eq_hz
 > 863E6) && (freq_hz < 870E6)) {

110 
buff
[0] = 0xD7;

111 
buff
[1] = 0xDB;

112 } i‡((
‰eq_hz
 > 902E6) && (freq_hz < 928E6)) {

113 
buff
[0] = 0xE1;

114 
buff
[1] = 0xE9;

116 
	`¥ötf
("ERROR: faûedÅÿˇlibøã sx1250Ñadio, fªquícyÑ™gênŸ suµ‹ãd (%u)\n", 
‰eq_hz
);

117  
LGW_REG_ERROR
;

119 
îr
 |
	`sx1250_ªg_w
(
CALIBRATE_IMAGE
, 
buff
, 2, 
rf_chaö
);

122 
	`waô_ms
(10);

124 
buff
[0] = 0x00;

125 
buff
[1] = 0x00;

126 
buff
[2] = 0x00;

127 
îr
 |
	`sx1250_ªg_r
(
GET_DEVICE_ERRORS
, 
buff
, 3, 
rf_chaö
);

128 i‡(
	`TAKE_N_BITS_FROM
(
buff
[2], 4, 1) != 0) {

129 
	`¥ötf
("ERROR: sx1250 Image Calibration Error\n");

130  
LGW_REG_ERROR
;

133  
îr
;

134 
	}
}

138 
	$sx1250_£tup
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, 
boﬁ
 
sögÀ_öput_mode
) {

139 
öt32_t
 
‰eq_ªg
;

140 
uöt8_t
 
buff
[16];

141 
îr
 = 
LGW_REG_SUCCESS
;

144 
buff
[0] = (
uöt8_t
)
STDBY_RC
;

145 
îr
 |
	`sx1250_ªg_w
(
SET_STANDBY
, 
buff
, 1, 
rf_chaö
);

146 
	`waô_ms
(10);

149 
buff
[0] = 0x00;

150 
îr
 |
	`sx1250_ªg_r
(
GET_STATUS
, 
buff
, 1, 
rf_chaö
);

151 i‡((
uöt8_t
)(
	`TAKE_N_BITS_FROM
(
buff
[0], 4, 3)) != 0x02) {

152 
	`¥ötf
("ERROR: FaûedÅÿ£àSX1250_%u i¿STANDBY_RC mode\n", 
rf_chaö
);

153  
LGW_REG_ERROR
;

157 
buff
[0] = 0x7F;

158 
îr
 |
	`sx1250_ªg_w
(
CALIBRATE
, 
buff
, 1, 
rf_chaö
);

159 
	`waô_ms
(10);

162 
buff
[0] = (
uöt8_t
)
STDBY_XOSC
;

163 
îr
 |
	`sx1250_ªg_w
(
SET_STANDBY
, 
buff
, 1, 
rf_chaö
);

164 
	`waô_ms
(10);

167 
buff
[0] = 0x00;

168 
îr
 |
	`sx1250_ªg_r
(
GET_STATUS
, 
buff
, 1, 
rf_chaö
);

169 i‡((
uöt8_t
)(
	`TAKE_N_BITS_FROM
(
buff
[0], 4, 3)) != 0x03) {

170 
	`¥ötf
("ERROR: FaûedÅÿ£àSX1250_%u i¿STANDBY_XOSC mode\n", 
rf_chaö
);

171  
LGW_REG_ERROR
;

175 
buff
[0] = 0x06;

176 
buff
[1] = 0xA1;

177 
buff
[2] = 0x01;

178 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

179 
buff
[0] = 0x06;

180 
buff
[1] = 0xA2;

181 
buff
[2] = 0x00;

182 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

183 
buff
[0] = 0x06;

184 
buff
[1] = 0xA3;

185 
buff
[2] = 0x00;

186 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

189 
buff
[0] = 0x05;

190 
buff
[1] = 0x82;

191 
buff
[2] = 0x00;

192 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

193 
buff
[0] = 0x05;

194 
buff
[1] = 0x83;

195 
buff
[2] = 0x00;

196 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

197 
buff
[0] = 0x05;

198 
buff
[1] = 0x84;

199 
buff
[2] = 0x00;

200 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

201 
buff
[0] = 0x05;

202 
buff
[1] = 0x85;

203 
buff
[2] = 0x00;

204 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

205 
buff
[0] = 0x05;

206 
buff
[1] = 0x80;

207 
buff
[2] = 0x00;

208 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

211 
buff
[0] = 0x08;

212 
buff
[1] = 0xB6;

213 
buff
[2] = 0x2A;

214 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

217 
‰eq_ªg
 = 
	`SX1250_FREQ_TO_REG
(
‰eq_hz
);

218 
buff
[0] = (
uöt8_t
)(
‰eq_ªg
 >> 24);

219 
buff
[1] = (
uöt8_t
)(
‰eq_ªg
 >> 16);

220 
buff
[2] = (
uöt8_t
)(
‰eq_ªg
 >> 8);

221 
buff
[3] = (
uöt8_t
)(
‰eq_ªg
 >> 0);

222 
îr
 |
	`sx1250_ªg_w
(
SET_RF_FREQUENCY
, 
buff
, 4, 
rf_chaö
);

225 
buff
[0] = 0x08;

226 
buff
[1] = 0x8F;

227 
buff
[2] = 0x00;

228 
buff
[3] = 0x00;

229 
buff
[4] = 0x00;

230 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 5, 
rf_chaö
);

233 
buff
[0] = 0xFF;

234 
buff
[1] = 0xFF;

235 
buff
[2] = 0xFF;

236 
îr
 |
	`sx1250_ªg_w
(
SET_RX
, 
buff
, 3, 
rf_chaö
);

239 i‡(
sögÀ_öput_mode
 =
åue
) {

240 
	`¥ötf
("INFO: C⁄figurög SX1250_%u i¿sögÀ i≈uàmode\n", 
rf_chaö
);

241 
buff
[0] = 0x08;

242 
buff
[1] = 0xE2;

243 
buff
[2] = 0x0D;

244 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

247 
buff
[0] = 0x05;

248 
buff
[1] = 0x87;

249 
buff
[2] = 0x0B;

250 
îr
 |
	`sx1250_ªg_w
(
WRITE_REGISTER
, 
buff
, 3, 
rf_chaö
);

253 i‡(
îr
 !
LGW_REG_SUCCESS
) {

254 
	`¥ötf
("ERROR: faûedÅÿ£tu∞SX1250_%uÑadio\n", 
rf_chaö
);

255  
LGW_REG_ERROR
;

258  
LGW_REG_SUCCESS
;

259 
	}
}

	@libloragw/src/loragw_sx125x.c

18 
	~<°döt.h
>

19 
	~<°dboﬁ.h
>

20 
	~<°dio.h
>

22 
	~"sx125x_com.h
"

23 
	~"l‹agw_sx125x.h
"

24 
	~"l‹agw_com.h
"

25 
	~"l‹agw_aux.h
"

26 
	~"l‹agw_ªg.h
"

27 
	~"l‹agw_hÆ.h
"

32 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

33 #i‡
DEBUG_RAD
 == 1

34 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

35 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

36 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

38 
	#DEBUG_MSG
(
°r
)

	)

39 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

40 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

49 
	#PLL_LOCK_MAX_ATTEMPTS
 5

	)

51 c⁄° 
ødio_ªg_s
 
	gsx125x_ªgs
[
RADIO_TOTALREGS
] = {

114 
	$sx125x_ªg_w
(
ødio_ªg_t
 
idx
, 
uöt8_t
 
d©a
, uöt8_à
rf_chaö
) {

116 
com_°©
;

117 
ødio_ªg_s
 
ªg
;

118 
uöt8_t
 
mask
;

119 
uöt8_t
 
r
;

120 
uöt8_t
 
w
;

121 
uöt8_t
 
vÆ_check
;

124 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

125 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

126  
LGW_REG_ERROR
;

128 i‡(
idx
 >
RADIO_TOTALREGS
) {

129 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

130  
LGW_REG_ERROR
;

133 
ªg
 = 
sx125x_ªgs
[
idx
];

135 i‡((
ªg
.
Àng
 =8Ë&& (ªg.
offs
 == 0)){

137 
com_°©
 = 
	`sx125x_com_w
(
	`lgw_com_ty≥
(), 
	`lgw_com_èrgë
(), ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
ªg
.
addr
, 
d©a
);

140 
com_°©
 = 
	`sx125x_com_r
(
	`lgw_com_ty≥
(), 
	`lgw_com_èrgë
(), ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
ªg
.
addr
, &
r
);

141 
mask
 = ((1 << 
ªg
.
Àng
Ë- 1Ë<<Ñeg.
offs
;

142 
w
 = (
r
 & ~
mask
Ë| ((
d©a
 << 
ªg
.
offs
) & mask);

143 
com_°©
 |
	`sx125x_com_w
(
	`lgw_com_ty≥
(), 
	`lgw_com_èrgë
(), ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
ªg
.
addr
, 
w
);

147 
	`sx125x_ªg_r
(
idx
, &
vÆ_check
, 
rf_chaö
);

148 i‡(
vÆ_check
 !
d©a
) {

149 
	`¥ötf
("ERROR: sx125xÑegi°î %d wrôêÁûed (w:%uÑ:%u)!!\n", 
idx
, 
d©a
, 
vÆ_check
);

150 
com_°©
 = 
LGW_COM_ERROR
;

153 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

154 
	`DEBUG_MSG
("ERROR: COM ERROR DURING RADIO REGISTER WRITE\n");

155  
LGW_REG_ERROR
;

157  
LGW_REG_SUCCESS
;

159 
	}
}

163 
	$sx125x_ªg_r
(
ødio_ªg_t
 
idx
, 
uöt8_t
 *
d©a
, uöt8_à
rf_chaö
) {

165 
com_°©
;

166 
ødio_ªg_s
 
ªg
;

167 
uöt8_t
 
mask
;

168 
uöt8_t
 
r
;

171 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

172 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

173  
LGW_REG_ERROR
;

175 i‡(
idx
 >
RADIO_TOTALREGS
) {

176 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

177  
LGW_REG_ERROR
;

180 
ªg
 = 
sx125x_ªgs
[
idx
];

182 
com_°©
 = 
	`sx125x_com_r
(
	`lgw_com_ty≥
(), 
	`lgw_com_èrgë
(), ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
ªg
.
addr
, &
r
);

183 
mask
 = ((1 << 
ªg
.
Àng
Ë- 1Ë<<Ñeg.
offs
;

184 *
d©a
 = (
r
 & 
mask
Ë>> 
ªg
.
offs
;

186 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

187 
	`DEBUG_MSG
("ERROR: COM ERROR DURING RADIO REGISTER READ\n");

188  
LGW_REG_ERROR
;

190  
LGW_REG_SUCCESS
;

192 
	}
}

196 
	$sx125x_£tup
(
uöt8_t
 
rf_chaö
, uöt8_à
rf_˛kout
, 
boﬁ
 
rf_íabÀ
, uöt8_à
rf_ødio_ty≥
, 
uöt32_t
 
‰eq_hz
) {

197 
uöt32_t
 
∑π_öt
 = 0;

198 
uöt32_t
 
∑π_‰ac
 = 0;

199 
˝t_©ãm±s
 = 0;

200 
uöt8_t
 
vÆ
;

202 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

203 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

208 
	`sx125x_ªg_r
(
SX125x_REG_VERSION
, &
vÆ
, 
rf_chaö
);

209 
	`DEBUG_PRINTF
("NŸe: SX125x #%d vîsi⁄Ñegi°îÑëu∫ed 0x%02x\n", 
rf_chaö
, 
vÆ
);

212 i‡(
rf_˛kout
 =
rf_chaö
) {

213 
	`sx125x_ªg_w
(
SX125x_REG_CLK_SELECT
, 
SX125x_TX_DAC_CLK_SEL
 + 2, 
rf_chaö
);

214 
	`DEBUG_PRINTF
("NŸe: SX125x #%d clock ouçuàíabÀd\n", 
rf_chaö
);

216 
	`sx125x_ªg_w
(
SX125x_REG_CLK_SELECT
, 
SX125x_TX_DAC_CLK_SEL
, 
rf_chaö
);

217 
	`DEBUG_PRINTF
("NŸe: SX125x #%d clock ouçuàdißbÀd\n", 
rf_chaö
);

220 
rf_ødio_ty≥
) {

221 
LGW_RADIO_TYPE_SX1255
:

222 
	`sx125x_ªg_w
(
SX125x_REG_SX1255_XOSC_TEST__GM_STARTUP
, 
SX125x_XOSC_GM_STARTUP
, 
rf_chaö
);

223 
	`sx125x_ªg_w
(
SX125x_REG_SX1255_XOSC_TEST__DISABLE
, 
SX125x_XOSC_DISABLE
, 
rf_chaö
);

225 
LGW_RADIO_TYPE_SX1257
:

226 
	`sx125x_ªg_w
(
SX125x_REG_SX1257_XOSC_TEST__GM_STARTUP
, 
SX125x_XOSC_GM_STARTUP
, 
rf_chaö
);

227 
	`sx125x_ªg_w
(
SX125x_REG_SX1257_XOSC_TEST__DISABLE
, 
SX125x_XOSC_DISABLE
, 
rf_chaö
);

230 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
);

234 i‡(
rf_íabÀ
 =
åue
) {

236 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 
SX125x_TX_MIX_GAIN
, 
rf_chaö
);

237 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 
SX125x_TX_DAC_GAIN
, 
rf_chaö
);

239 
	`sx125x_ªg_w
(
SX125x_REG_TX_BW__ANA_BW
, 
SX125x_TX_ANA_BW
, 
rf_chaö
);

240 
	`sx125x_ªg_w
(
SX125x_REG_TX_BW__PLL_BW
, 
SX125x_TX_PLL_BW
, 
rf_chaö
);

242 
	`sx125x_ªg_w
(
SX125x_REG_TX_DAC_BW
, 
SX125x_TX_DAC_BW
, 
rf_chaö
);

245 
	`sx125x_ªg_w
(
SX125x_REG_RX_ANA_GAIN__LNA_ZIN
, 
SX125x_LNA_ZIN
, 
rf_chaö
);

246 
	`sx125x_ªg_w
(
SX125x_REG_RX_ANA_GAIN__BB_GAIN
, 
SX125x_RX_BB_GAIN
, 
rf_chaö
);

247 
	`sx125x_ªg_w
(
SX125x_REG_RX_ANA_GAIN__LNA_GAIN
, 
SX125x_RX_LNA_GAIN
, 
rf_chaö
);

249 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__BB_BW
, 
SX125x_RX_BB_BW
, 
rf_chaö
);

250 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_TRIM
, 
SX125x_RX_ADC_TRIM
, 
rf_chaö
);

251 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_BW
, 
SX125x_RX_ADC_BW
, 
rf_chaö
);

253 
	`sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__ADC_TEMP_EN
, 
SX125x_ADC_TEMP
, 
rf_chaö
);

254 
	`sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__PLL_BW
, 
SX125x_RX_PLL_BW
, 
rf_chaö
);

257 
rf_ødio_ty≥
) {

258 
LGW_RADIO_TYPE_SX1255
:

259 
∑π_öt
 = 
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

260 
∑π_‰ac
 = ((
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

262 
LGW_RADIO_TYPE_SX1257
:

263 
∑π_öt
 = 
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

264 
∑π_‰ac
 = ((
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

267 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
);

271 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_MSB
, 0xFF & 
∑π_öt
, 
rf_chaö
);

272 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_MID
, 0xFF & (
∑π_‰ac
 >> 8), 
rf_chaö
);

273 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_LSB
, 0xFF & 
∑π_‰ac
, 
rf_chaö
);

277 i‡(
˝t_©ãm±s
 >
PLL_LOCK_MAX_ATTEMPTS
) {

278 
	`DEBUG_MSG
("ERROR: FAIL TO LOCK PLL\n");

281 
	`sx125x_ªg_w
(
SX125x_REG_MODE
, 1, 
rf_chaö
);

282 
	`sx125x_ªg_w
(
SX125x_REG_MODE
, 3, 
rf_chaö
);

283 ++
˝t_©ãm±s
;

284 
	`DEBUG_PRINTF
("NŸe: SX125x #%d PLL sèπ (©ãm± %d)\n", 
rf_chaö
, 
˝t_©ãm±s
);

285 
	`waô_ms
(1);

286 
	`sx125x_ªg_r
(
SX125x_REG_MODE_STATUS
, &
vÆ
, 
rf_chaö
);

287 } (
vÆ
 & 0x02) == 0);

289 
	`DEBUG_PRINTF
("NŸe: SX125x #%d kïàö sèndby mode\n", 
rf_chaö
);

293 
	}
}

	@libloragw/src/loragw_sx1261.c

20 
	~<°döt.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"l‹agw_sx1261.h
"

25 
	~"l‹agw_•i.h
"

26 
	~"l‹agw_com.h
"

27 
	~"l‹agw_aux.h
"

28 
	~"l‹agw_ªg.h
"

29 
	~"l‹agw_hÆ.h
"

31 
	~"sx1261_com.h
"

33 
	~"sx1261_¥am.v¨
"

38 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

39 #i‡
DEBUG_LBT
 == 1

40 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

44 
	#DEBUG_MSG
(
°r
)

	)

45 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

46 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

49 
	#CHECK_ERR
(
a
Ëif◊==-1){ 
LGW_REG_ERROR
;}

	)

51 
	#DEBUG_SX1261_GET_STATUS
 0

	)

56 
	#SX1261_PRAM_VERSION_FULL_SIZE
 16

	)

64 
	$sx1261_¥am_gë_vîsi⁄
(* 
vîsi⁄_°r
) {

65 
uöt8_t
 
buff
[3 + 
SX1261_PRAM_VERSION_FULL_SIZE
] = { 0 };

66 
x
;

69 
	`CHECK_NULL
(
vîsi⁄_°r
);

72 
buff
[0] = 0x03;

73 
buff
[1] = 0x20;

74 
buff
[2] = 0x00;

75 
x
 = 
	`sx1261_ªg_r
(
SX1261_READ_REGISTER
, 
buff
, 18);

76 i‡(
x
 !
LGW_REG_SUCCESS
) {

77 
	`¥ötf
("ERROR: failedÅoÑead SX1261 PRAM version\n");

78  
x
;

82 
buff
[18] = '\0';

83 
	`°∫˝y
(
vîsi⁄_°r
, (*)(
buff
 + 3), 16);

84 
vîsi⁄_°r
[16] = '\0';

86  
LGW_REG_SUCCESS
;

87 
	}
}

91 
	$sx1261_gë_°©us
(
uöt8_t
 * 
°©us
) {

92 
uöt8_t
 
buff
[1];

94 
buff
[0] = 0x00;

95 
	`sx1261_ªg_r
(
SX1261_GET_STATUS
, 
buff
, 1);

97 *
°©us
 = 
buff
[0] & 0x7E;

99 
	`DEBUG_PRINTF
("SX1261: %s: gë_°©us: 0x%02X (0x%02X)\n", 
__FUNCTION__
, *
°©us
, 
buff
[0]);

101  
LGW_REG_SUCCESS
;

102 
	}
}

106 
	$sx1261_check_°©us
(
uöt8_t
 
ex≥˘ed_°©us
) {

107 
îr
;

108 
uöt8_t
 
°©us
;

110 
îr
 = 
	`sx1261_gë_°©us
(&
°©us
);

111 i‡(
îr
 !
LGW_REG_SUCCESS
) {

112 
	`¥ötf
("ERROR: %s: faûedÅÿgë sètus\n", 
__FUNCTION__
);

113  
LGW_REG_ERROR
;

116 i‡(
°©us
 !
ex≥˘ed_°©us
) {

117 
	`¥ötf
("ERROR: %s: SX1261 sètu†i†nŸá†ex≥˘ed: gŸ:0x%02XÉx≥˘ed:0x%02X\n", 
__FUNCTION__
, 
°©us
, 
ex≥˘ed_°©us
);

118  
LGW_REG_ERROR
;

121  
LGW_REG_SUCCESS
;

122 
	}
}

126 c⁄° * 
	$gë_sˇn_°©us_°r
(c⁄° 
lgw_•e˘øl_sˇn_°©us_t
 
°©us
) {

127 
°©us
) {

128 
LGW_SPECTRAL_SCAN_STATUS_NONE
:

130 
LGW_SPECTRAL_SCAN_STATUS_ON_GOING
:

132 
LGW_SPECTRAL_SCAN_STATUS_ABORTED
:

134 
LGW_SPECTRAL_SCAN_STATUS_COMPLETED
:

139 
	}
}

144 
	$sx1261_c⁄√˘
(
lgw_com_ty≥_t
 
com_ty≥
, c⁄° *
com_∑th
) {

145 i‡(
com_ty≥
 =
LGW_COM_SPI
 && 
com_∑th
 =
NULL
) {

146 
	`¥ötf
("ERROR: %s: un•ecifõd COMÖ©hÅÿc⁄√˘Åÿsx1261Ñadio\n", 
__FUNCTION__
);

147  
LGW_REG_ERROR
;

149  
	`sx1261_com_›í
(
com_ty≥
, 
com_∑th
);

150 
	}
}

154 
	$sx1261_disc⁄√˘
() {

155  
	`sx1261_com_˛o£
();

156 
	}
}

160 
	$sx1261_ªg_w
(
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
) {

161 
com_°©
;

164 
	`CHECK_NULL
(
d©a
);

166 
com_°©
 = 
	`sx1261_com_w
(
›_code
, 
d©a
, 
size
);

167 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

168 
	`¥ötf
("ERROR: COM ERROR DURING SX1261 RADIO REGISTER WRITE\n");

169  
LGW_REG_ERROR
;

171  
LGW_REG_SUCCESS
;

173 
	}
}

177 
	$sx1261_ªg_r
(
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
) {

178 
com_°©
;

181 
	`CHECK_NULL
(
d©a
);

183 
com_°©
 = 
	`sx1261_com_r
(
›_code
, 
d©a
, 
size
);

184 i‡(
com_°©
 !
LGW_COM_SUCCESS
) {

185 
	`¥ötf
("ERROR: COM ERROR DURING SX1261 RADIO REGISTER READ\n");

186  
LGW_REG_ERROR
;

188  
LGW_REG_SUCCESS
;

190 
	}
}

194 
	$sx1261_lﬂd_¥am
() {

195 
i
, 
îr
;

196 
uöt8_t
 
buff
[32];

197 
¥am_vîsi⁄
[
SX1261_PRAM_VERSION_FULL_SIZE
];

198 
uöt32_t
 
vÆ
, 
addr
;

201 
buff
[0] = (
uöt8_t
)
SX1261_STDBY_RC
;

202 
	`sx1261_ªg_w
(
SX1261_SET_STANDBY
, 
buff
, 1);

205 
îr
 = 
	`sx1261_check_°©us
(
SX1261_STATUS_MODE_STBY_RC
 | 
SX1261_STATUS_READY
);

206 i‡(
îr
 !
LGW_REG_SUCCESS
) {

207 
	`¥ötf
("ERROR: %s: SX1261 sètu†îr‹\n", 
__FUNCTION__
);

211 
îr
 = 
	`sx1261_¥am_gë_vîsi⁄
(
¥am_vîsi⁄
);

212 i‡(
îr
 !
LGW_REG_SUCCESS
) {

213 
	`¥ötf
("ERROR: %s: SX1261 faûedÅÿgëÖøm vîsi⁄\n", 
__FUNCTION__
);

216 
	`¥ötf
("SX1261: PRAM vîsi⁄: %s\n", 
¥am_vîsi⁄
);

219 
buff
[0] = 0x06;

220 
buff
[1] = 0x10;

221 
buff
[2] = 0x10;

222 
îr
 = 
	`sx1261_ªg_w
–
SX1261_WRITE_REGISTER
, 
buff
, 3);

223 
	`CHECK_ERR
(
îr
);

226 
i
 = 0; i < ()
PRAM_COUNT
; i++) {

227 
vÆ
 = 
¥am
[
i
];

228 
addr
 = 0x8000 + 4*
i
;

230 
buff
[0] = (
addr
 >> 8) & 0xFF;

231 
buff
[1] = (
addr
 >> 0) & 0xFF;

232 
buff
[2] = (
vÆ
 >> 24) & 0xFF;

233 
buff
[3] = (
vÆ
 >> 16) & 0xFF;

234 
buff
[4] = (
vÆ
 >> 8) & 0xFF;

235 
buff
[5] = (
vÆ
 >> 0) & 0xFF;

236 
îr
 = 
	`sx1261_ªg_w
(
SX1261_WRITE_REGISTER
, 
buff
, 6);

237 
	`CHECK_ERR
(
îr
);

241 
buff
[0] = 0x06;

242 
buff
[1] = 0x10;

243 
buff
[2] = 0x00;

244 
îr
 = 
	`sx1261_ªg_w
–
SX1261_WRITE_REGISTER
, 
buff
, 3);

245 
	`CHECK_ERR
(
îr
);

248 
buff
[0] = 0;

249 
îr
 = 
	`sx1261_ªg_w
(0xd9, 
buff
, 0);

250 
	`CHECK_ERR
(
îr
);

252 
îr
 = 
	`sx1261_¥am_gë_vîsi⁄
(
¥am_vîsi⁄
);

253 i‡(
îr
 !
LGW_REG_SUCCESS
) {

254 
	`¥ötf
("ERROR: %s: SX1261 faûedÅÿgëÖøm vîsi⁄\n", 
__FUNCTION__
);

257 
	`¥ötf
("SX1261: PRAM vîsi⁄: %s\n", 
¥am_vîsi⁄
);

260 i‡(
	`°∫cmp
(
¥am_vîsi⁄
 + 11, 
sx1261_¥am_vîsi⁄_°rög
, 4) != 0) {

261 
	`¥ötf
("ERROR: SX1261 PRAM vîsi⁄ mism©ch (gŸ:%†ex≥˘ed:%s)\n", 
¥am_vîsi⁄
 + 11, 
sx1261_¥am_vîsi⁄_°rög
);

266 
	}
}

270 
	$sx1261_ˇlibøã
(
uöt32_t
 
‰eq_hz
) {

271 
îr
 = 
LGW_REG_SUCCESS
;

272 
uöt8_t
 
buff
[16];

274 
buff
[0] = 0x00;

275 
îr
 = 
	`sx1261_ªg_r
(
SX1261_GET_STATUS
, 
buff
, 1);

276 
	`CHECK_ERR
(
îr
);

279 i‡((
‰eq_hz
 > 430E6) && (freq_hz < 440E6)) {

280 
buff
[0] = 0x6B;

281 
buff
[1] = 0x6F;

282 } i‡((
‰eq_hz
 > 470E6) && (freq_hz < 510E6)) {

283 
buff
[0] = 0x75;

284 
buff
[1] = 0x81;

285 } i‡((
‰eq_hz
 > 779E6) && (freq_hz < 787E6)) {

286 
buff
[0] = 0xC1;

287 
buff
[1] = 0xC5;

288 } i‡((
‰eq_hz
 > 863E6) && (freq_hz < 870E6)) {

289 
buff
[0] = 0xD7;

290 
buff
[1] = 0xDB;

291 } i‡((
‰eq_hz
 > 902E6) && (freq_hz < 928E6)) {

292 
buff
[0] = 0xE1;

293 
buff
[1] = 0xE9;

295 
	`¥ötf
("ERROR: faûedÅÿˇlibøã sx1261Ñadio, fªquícyÑ™gênŸ suµ‹ãd (%u)\n", 
‰eq_hz
);

296  
LGW_REG_ERROR
;

298 
îr
 = 
	`sx1261_ªg_w
(
SX1261_CALIBRATE_IMAGE
, 
buff
, 2);

299 
	`CHECK_ERR
(
îr
);

302 
	`waô_ms
(10);

304 
buff
[0] = 0x00;

305 
buff
[1] = 0x00;

306 
buff
[2] = 0x00;

307 
îr
 = 
	`sx1261_ªg_r
(
SX1261_GET_DEVICE_ERRORS
, 
buff
, 3);

308 
	`CHECK_ERR
(
îr
);

309 i‡(
	`TAKE_N_BITS_FROM
(
buff
[2], 4, 1) != 0) {

310 
	`¥ötf
("ERROR: sx1261 Image Calibration Error\n");

311  
LGW_REG_ERROR
;

314  
îr
;

315 
	}
}

319 
	$sx1261_£tup
() {

320 
îr
;

321 
uöt8_t
 
buff
[32];

324 
buff
[0] = (
uöt8_t
)
SX1261_STDBY_RC
;

325 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_STANDBY
, 
buff
, 1);

326 
	`CHECK_ERR
(
îr
);

329 
îr
 = 
	`sx1261_check_°©us
(
SX1261_STATUS_MODE_STBY_RC
 | 
SX1261_STATUS_READY
);

330 
	`CHECK_ERR
(
îr
);

333 
buff
[0] = 0x80;

334 
buff
[1] = 0x80;

335 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_BUFFER_BASE_ADDRESS
, 
buff
, 2);

336 
	`CHECK_ERR
(
îr
);

339 
buff
[0] = 0x08;

340 
buff
[1] = 0xAC;

341 
buff
[2] = 0xCB;

342 
îr
 = 
	`sx1261_ªg_w
(
SX1261_WRITE_REGISTER
, 
buff
, 3);

343 
	`CHECK_ERR
(
îr
);

345 
	`DEBUG_MSG
("SX1261: setup for LBT / Spectral Scan done\n");

347  
LGW_REG_SUCCESS
;

348 
	}
}

352 
	$sx1261_£t_rx_∑øms
(
uöt32_t
 
‰eq_hz
, 
uöt8_t
 
b™dwidth
) {

353 
îr
;

354 
uöt8_t
 
buff
[16];

355 
öt32_t
 
‰eq_ªg
;

356 
uöt8_t
 
fsk_bw_ªg
;

358 
timevÆ
 
tm
;

361 
	`_mós_time_°¨t
(&
tm
);

364 
îr
 = 
	`sx1261_com_£t_wrôe_mode
(
LGW_COM_WRITE_MODE_BULK
);

365 
	`CHECK_ERR
(
îr
);

368 
îr
 = 
	`sx1261_•e˘øl_sˇn_ab‹t
();

369 
	`CHECK_ERR
(
îr
);

372 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_FS
, 
buff
, 0);

373 
	`CHECK_ERR
(
îr
);

375 #i‡
DEBUG_SX1261_GET_STATUS


377 
îr
 = 
	`sx1261_check_°©us
(
SX1261_STATUS_MODE_FS
 | 
SX1261_STATUS_READY
);

378 
	`CHECK_ERR
(
îr
);

382 
‰eq_ªg
 = 
	`SX1261_FREQ_TO_REG
(
‰eq_hz
);

383 
buff
[0] = (
uöt8_t
)(
‰eq_ªg
 >> 24);

384 
buff
[1] = (
uöt8_t
)(
‰eq_ªg
 >> 16);

385 
buff
[2] = (
uöt8_t
)(
‰eq_ªg
 >> 8);

386 
buff
[3] = (
uöt8_t
)(
‰eq_ªg
 >> 0);

387 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_RF_FREQUENCY
, 
buff
, 4);

388 
	`CHECK_ERR
(
îr
);

391 
buff
[0] = 0x08;

392 
buff
[1] = 0x9B;

393 
buff
[2] = 0x05 << 2;

394 
îr
 = 
	`sx1261_ªg_w
(
SX1261_WRITE_REGISTER
, 
buff
, 3);

395 
	`CHECK_ERR
(
îr
);

398 
buff
[0] = 0x00;

399 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_PACKET_TYPE
, 
buff
, 1);

400 
	`CHECK_ERR
(
îr
);

403 
b™dwidth
) {

404 
BW_125KHZ
:

405 
fsk_bw_ªg
 = 0x0A;

407 
BW_250KHZ
:

408 
fsk_bw_ªg
 = 0x09;

411 
	`¥ötf
("ERROR: %s: C™nŸ c⁄figuª sx1261 f‹ b™dwidth %u\n", 
__FUNCTION__
, 
b™dwidth
);

412  
LGW_REG_ERROR
;

416 
buff
[0] = 0;

417 
buff
[1] = 0x14;

418 
buff
[2] = 0x00;

419 
buff
[3] = 0x00;

420 
buff
[4] = 
fsk_bw_ªg
;

421 
buff
[5] = 0x02;

422 
buff
[6] = 0xE9;

423 
buff
[7] = 0x0F;

424 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_MODULATION_PARAMS
, 
buff
, 8);

425 
	`CHECK_ERR
(
îr
);

428 
buff
[0] = 0x00;

429 
buff
[1] = 0x20;

430 
buff
[2] = 0x05;

431 
buff
[3] = 0x20;

432 
buff
[4] = 0x00;

433 
buff
[5] = 0x01;

434 
buff
[6] = 0xff;

435 
buff
[7] = 0x00;

436 
buff
[8] = 0x00;

437 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_PACKET_PARAMS
, 
buff
, 9);

438 
	`CHECK_ERR
(
îr
);

441 
buff
[0] = 0xFF;

442 
buff
[1] = 0xFF;

443 
buff
[2] = 0xFF;

444 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_RX
, 
buff
, 3);

445 
	`CHECK_ERR
(
îr
);

448 
îr
 = 
	`sx1261_com_Êush
();

449 i‡(
îr
 != 0) {

450 
	`¥ötf
("ERROR: %s: FaûedÅÿÊush sx1261 SPI\n", 
__FUNCTION__
);

455 
îr
 = 
	`sx1261_com_£t_wrôe_mode
(
LGW_COM_WRITE_MODE_SINGLE
);

456 
	`CHECK_ERR
(
îr
);

458 #i‡
DEBUG_SX1261_GET_STATUS


460 
îr
 = 
	`sx1261_check_°©us
(
SX1261_STATUS_MODE_RX
 | 
SX1261_STATUS_READY
);

461 
	`CHECK_ERR
(
îr
);

464 
	`DEBUG_PRINTF
("SX1261: RXÖ¨am†£àtÿ%u Hz (bw:0x%02X)\n", 
‰eq_hz
, 
b™dwidth
);

466 
	`_mós_time_°›
(4, 
tm
, 
__FUNCTION__
);

468  
LGW_REG_SUCCESS
;

469 
	}
}

473 
	$sx1261_lbt_°¨t
(
lgw_lbt_sˇn_time_t
 
sˇn_time_us
, 
öt8_t
 
thªshﬁd_dbm
) {

474 
îr
;

475 
uöt8_t
 
buff
[16];

476 
uöt16_t
 
nb_sˇn
;

477 
uöt8_t
 
thªshﬁd_ªg
 = -2 * 
thªshﬁd_dbm
;

479 
timevÆ
 
tm
;

482 
	`_mós_time_°¨t
(&
tm
);

484 
sˇn_time_us
) {

485 
LGW_LBT_SCAN_TIME_128_US
:

486 
nb_sˇn
 = 24;

488 
LGW_LBT_SCAN_TIME_5000_US
:

489 
nb_sˇn
 = 715;

492 
	`¥ötf
("ERROR: wrong scan_time_us value\n");

496 #i‡
DEBUG_SX1261_GET_STATUS


498 
îr
 = 
	`sx1261_check_°©us
(
SX1261_STATUS_MODE_RX
 | 
SX1261_STATUS_READY
);

499 
	`CHECK_ERR
(
îr
);

503 
buff
[0] = 11;

504 
buff
[1] = (
nb_sˇn
 >> 8) & 0xFF;

505 
buff
[2] = (
nb_sˇn
 >> 0) & 0xFF;

506 
buff
[3] = 
thªshﬁd_ªg
;

507 
buff
[4] = 1;

508 
îr
 = 
	`sx1261_ªg_w
(0x9a, 
buff
, 5);

509 
	`CHECK_ERR
(
îr
);

512 
	`waô_us
((
uöt16_t
)
sˇn_time_us
);

514 
	`DEBUG_PRINTF
("SX1261: LBT sèπed: sˇ¿timê%uus,Åhªshﬁd = %ddBm\n", (
uöt16_t
)
sˇn_time_us
, 
thªshﬁd_dbm
);

516 
	`_mós_time_°›
(4, 
tm
, 
__FUNCTION__
);

518  
LGW_REG_SUCCESS
;

520 
	}
}

524 
	$sx1261_lbt_°›
() {

525 
îr
;

526 
uöt8_t
 
buff
[16];

528 
timevÆ
 
tm
;

531 
	`_mós_time_°¨t
(&
tm
);

534 
buff
[0] = 0x08;

535 
buff
[1] = 0x9B;

536 
buff
[2] = 0x00;

537 
îr
 = 
	`sx1261_ªg_w
(
SX1261_WRITE_REGISTER
, 
buff
, 3);

538 
	`CHECK_ERR
(
îr
);

541 
îr
 = 
	`sx1261_ªg_w
(
SX1261_SET_FS
, 
buff
, 0);

542 
	`CHECK_ERR
(
îr
);

544 
	`DEBUG_MSG
("SX1261: LBT stopped\n");

546 
	`_mós_time_°›
(4, 
tm
, 
__FUNCTION__
);

548  
LGW_REG_SUCCESS
;

549 
	}
}

553 
	$sx1261_•e˘øl_sˇn_°¨t
(
uöt16_t
 
nb_sˇn
) {

554 
îr
;

555 
uöt8_t
 
buff
[4];

557 
timevÆ
 
tm
;

560 
	`_mós_time_°¨t
(&
tm
);

563 
buff
[0] = (
nb_sˇn
 >> 8) & 0xFF;

564 
buff
[1] = (
nb_sˇn
 >> 0) & 0xFF;

565 
buff
[2] = 11;

566 
îr
 = 
	`sx1261_ªg_w
(0x9b, 
buff
, 9);

567 
	`CHECK_ERR
(
îr
);

569 
	`DEBUG_MSG
("INFO: Spectral Scan started...\n");

571 
	`_mós_time_°›
(4, 
tm
, 
__FUNCTION__
);

573  
LGW_REG_SUCCESS
;

574 
	}
}

578 
	$sx1261_•e˘øl_sˇn_gë_ªsu…s
(
öt8_t
 
rssi_off£t
, 
öt16_t
 * 
Àvñs_dbm
, 
uöt16_t
 * 
ªsu…s
) {

579 
îr
, 
i
;

580 
uöt8_t
 
buff
[69];

582 
timevÆ
 
tm
;

585 
	`_mós_time_°¨t
(&
tm
);

588 
	`CHECK_NULL
(
Àvñs_dbm
);

589 
	`CHECK_NULL
(
ªsu…s
);

592 
buff
[0] = 0x04;

593 
buff
[1] = 0x01;

594 
buff
[2] = 0x00;

595 
i
 = 3; i < (66 + 3) ; i++) {

596 
buff
[
i
] = 0x00;

598 
îr
 = 
	`sx1261_ªg_r
(
SX1261_READ_REGISTER
, 
buff
, 66 + 3);

599 
	`CHECK_ERR
(
îr
);

603 
i
 = 0; i < 32; i++) {

604 
Àvñs_dbm
[
i
] = -i*4 + 
rssi_off£t
;

605 
ªsu…s
[
i
] = (
uöt16_t
)((
buff
[3 + i*2] << 8) | buff[3 + i*2 + 1]);

608 
Àvñs_dbm
[32] = -31*4 + 
rssi_off£t
;

609 
ªsu…s
[32] = (
uöt16_t
)((
buff
[3 + 32*2] << 8) + buff[3 + 32*2 + 1]);

611 
	`_mós_time_°›
(4, 
tm
, 
__FUNCTION__
);

613  
LGW_REG_SUCCESS
;

614 
	}
}

618 
	$sx1261_•e˘øl_sˇn_°©us
(
lgw_•e˘øl_sˇn_°©us_t
 * 
°©us
) {

619 
îr
;

620 
uöt8_t
 
buff
[16];

622 
timevÆ
 
tm
;

624 
	`CHECK_NULL
(
°©us
);

627 
	`_mós_time_°¨t
(&
tm
);

630 
buff
[0] = 0x07;

631 
buff
[1] = 0xCD;

632 
buff
[2] = 0x00;

633 
buff
[3] = 0x00;

634 
îr
 = 
	`sx1261_ªg_r
(
SX1261_READ_REGISTER
, 
buff
, 4);

635 
	`CHECK_ERR
(
îr
);

637 
buff
[3]) {

639 *
°©us
 = 
LGW_SPECTRAL_SCAN_STATUS_NONE
;

642 *
°©us
 = 
LGW_SPECTRAL_SCAN_STATUS_ON_GOING
;

645 *
°©us
 = 
LGW_SPECTRAL_SCAN_STATUS_ABORTED
;

648 *
°©us
 = 
LGW_SPECTRAL_SCAN_STATUS_COMPLETED
;

651 *
°©us
 = 
LGW_SPECTRAL_SCAN_STATUS_UNKNOWN
;

655 
	`DEBUG_PRINTF
("INFO: %s: %s\n", 
__FUNCTION__
, 
	`gë_sˇn_°©us_°r
(*
°©us
));

657 
	`_mós_time_°›
(4, 
tm
, 
__FUNCTION__
);

659  
LGW_REG_SUCCESS
;

660 
	}
}

664 
	$sx1261_•e˘øl_sˇn_ab‹t
() {

665 
îr
;

666 
uöt8_t
 
buff
[16];

668 
timevÆ
 
tm
;

671 
	`_mós_time_°¨t
(&
tm
);

674 
buff
[0] = 0x08;

675 
buff
[1] = 0x9B;

676 
buff
[2] = 0x00;

677 
îr
 = 
	`sx1261_ªg_w
(
SX1261_WRITE_REGISTER
, 
buff
, 3);

678 
	`CHECK_ERR
(
îr
);

680 
	`DEBUG_MSG
("SX1261: spectral scanáborted\n");

682 
	`_mós_time_°›
(4, 
tm
, 
__FUNCTION__
);

684  
LGW_REG_SUCCESS
;

685 
	}
}

	@libloragw/src/loragw_sx1302.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

23 
	~<öây≥s.h
>

24 
	~<time.h
>

26 
	~"l‹agw_ªg.h
"

27 
	~"l‹agw_aux.h
"

28 
	~"l‹agw_hÆ.h
"

29 
	~"l‹agw_sx1302.h
"

30 
	~"l‹agw_sx1302_time°amp.h
"

31 
	~"l‹agw_sx1302_rx.h
"

32 
	~"l‹agw_sx1250.h
"

33 
	~"l‹agw_agc_∑øms.h
"

34 
	~"l‹agw_ˇl.h
"

35 
	~"l‹agw_debug.h
"

40 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

41 #i‡
DEBUG_SX1302
 == 1

42 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

43 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
, fmt,árgs)

	)

44 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

46 
	#DEBUG_MSG
(
°r
)

	)

47 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

48 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

50 
	#CHECK_ERR
(
a
Ëif◊==-1){ 
LGW_REG_ERROR
;}

	)

52 
	#IF_HZ_TO_REG
(
f
Ë((‡* 32Ë/ 15625)

	)

54 
	#SX1302_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 18Ë/ 32000000U)

	)

62 
	#AGC_RADIO_A_INIT_DONE
 0x80

	)

63 
	#AGC_RADIO_B_INIT_DONE
 0x20

	)

65 
	#MCU_AGC
 0x01

	)

66 
	#MCU_ARB
 0x02

	)

68 
	#AGC_MEM_ADDR
 0x0000

	)

69 
	#ARB_MEM_ADDR
 0x2000

	)

71 
	#MCU_FW_SIZE
 8192

	)

73 
	#FW_VERSION_CAL
 1

	)

75 
	#RSSI_FSK_POLY_0
 90.636423

	)

76 
	#RSSI_FSK_POLY_1
 0.420835

	)

77 
	#RSSI_FSK_POLY_2
 0.007129

	)

78 
	#RSSI_FSK_POLY_3
 -0.000026

	)

80 
	#FREQ_OFFSET_LSB_125KHZ
 0.11920929‡

	)

81 
	#FREQ_OFFSET_LSB_250KHZ
 0.238418579‡

	)

82 
	#FREQ_OFFSET_LSB_500KHZ
 0.476837158‡

	)

85 
	#LGW_IFMODEM_CONFIG
 {\

86 
IF_LORA_MULTI
, \

87 
IF_LORA_MULTI
, \

88 
IF_LORA_MULTI
, \

89 
IF_LORA_MULTI
, \

90 
IF_LORA_MULTI
, \

91 
IF_LORA_MULTI
, \

92 
IF_LORA_MULTI
, \

93 
IF_LORA_MULTI
, \

94 
IF_LORA_STD
, \

95 
IF_FSK_STD
 }

	)

98 c⁄° 
uöt8_t
 
	gifmod_c⁄fig
[
LGW_IF_CHAIN_NB
] = 
LGW_IFMODEM_CONFIG
;

100 
	#MIN_LORA_PREAMBLE
 6

	)

101 
	#STD_LORA_PREAMBLE
 8

	)

102 
	#MIN_FSK_PREAMBLE
 3

	)

103 
	#STD_FSK_PREAMBLE
 5

	)

105 
	#GPIO_CFG_REGISTER
 0x00

	)

106 
	#GPIO_CFG_AGC
 0x01

	)

107 
	#GPIO_CFG_ARB
 0x02

	)

108 
	#GPIO_CFG_SPI_EXP_1
 0x03

	)

109 
	#GPIO_CFG_CSN_SPI_EXP
 0x04

	)

110 
	#GPIO_CFG_SPI_EXP_2
 0x05

	)

111 
	#GPIO_CFG_UART
 0x06

	)

112 
	#GPIO_CFG_SX1255_IQ
 0x07

	)

113 
	#GPIO_CFG_SX1261_IQ
 0x08

	)

114 
	#GPIO_CFG_STATUS
 0x09

	)

115 
	#GPIO_CFG_MBIST
 0x0A

	)

116 
	#GPIO_CFG_OTP
 0x0B

	)

122 
	~"ˇl_fw.v¨
"

125 
rx_buf„r_t
 
	grx_buf„r
;

128 
time°amp_cou¡î_t
 
	gcou¡î_us
;

138 
öt32_t
 
lgw_sf_gëvÆ
(
x
);

145 
öt32_t
 
lgw_bw_gëvÆ
(
x
);

152 
l‹a_¸c16
(c⁄° 
d©a
, *
¸c
);

158 
FILE
 * 
log_fûe
;

163 
	$ˇlcuœã_‰eq_to_time_dri·
(
uöt32_t
 
‰eq_hz
, 
uöt8_t
 
bw
, 
uöt16_t
 * 
m™t
, uöt8_à* 
exp
) {

164 
uöt64_t
 
m™tisß_u64
;

165 
uöt8_t
 
exp⁄ít
 = 0;

166 
öt32_t
 
bw_hz
;

169 
	`CHECK_NULL
(
m™t
);

170 
	`CHECK_NULL
(
exp
);

172 
bw_hz
 = 
	`lgw_bw_gëvÆ
(
bw
);

173 i‡(
bw_hz
 < 0) {

174 
	`¥ötf
("ERROR: Unsupported bandwidth for frequencyÅoÅime drift calculation\n");

175  
LGW_REG_ERROR
;

178 
m™tisß_u64
 = (
uöt64_t
)
bw_hz
 * (2 << (20-1)Ë/ 
‰eq_hz
;

179 
m™tisß_u64
 < 2048) {

180 
exp⁄ít
 += 1;

181 
m™tisß_u64
 <<= 1;

184 *
m™t
 = (
uöt16_t
)
m™tisß_u64
;

185 *
exp
 = 
exp⁄ít
;

187  
LGW_REG_SUCCESS
;

188 
	}
}

192 
	$l‹a_¸c16
(c⁄° 
d©a
, *
¸c
) {

193 
√xt
 = 0;

194 
√xt
 = (((
d©a
>>0)&1Ë^ ((*
¸c
>>12)&1) ^ ((*crc>> 8)&1) ) ;

195 
√xt
 +((((
d©a
>>1)&1Ë^ ((*
¸c
>>13)&1) ^ ((*crc>> 9)&1) )<<1 ) ;

196 
√xt
 +((((
d©a
>>2)&1Ë^ ((*
¸c
>>14)&1) ^ ((*crc>>10)&1) )<<2 ) ;

197 
√xt
 +((((
d©a
>>3)&1Ë^ ((*
¸c
>>15)&1) ^ ((*crc>>11)&1) )<<3 ) ;

198 
√xt
 +((((
d©a
>>4)&1Ë^ ((*
¸c
>>12)&1) )<<4 ) ;

199 
√xt
 +((((
d©a
>>5)&1Ë^ ((*
¸c
>>13)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<5 ) ;

200 
√xt
 +((((
d©a
>>6)&1Ë^ ((*
¸c
>>14)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1))<<6 ) ;

201 
√xt
 +((((
d©a
>>7)&1Ë^ ((*
¸c
>>15)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1))<<7 ) ;

202 
√xt
 +((((*
¸c
>>0)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<8 ) ;

203 
√xt
 +((((*
¸c
>>1)&1) ^ ((*crc>>12)&1) )<<9 ) ;

204 
√xt
 +((((*
¸c
>>2)&1) ^ ((*crc>>13)&1) )<<10) ;

205 
√xt
 +((((*
¸c
>>3)&1) ^ ((*crc>>14)&1) )<<11) ;

206 
√xt
 +((((*
¸c
>>4)&1) ^ ((*crc>>15)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<12) ;

207 
√xt
 +((((*
¸c
>>5)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1) )<<13) ;

208 
√xt
 +((((*
¸c
>>6)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1) )<<14) ;

209 
√xt
 +((((*
¸c
>>7)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<15) ;

210 (*
¸c
Ë
√xt
;

211 
	}
}

215 
	$sx1302_c⁄fig_gpio
() {

216 
îr
;

218 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_0_SELECTION
, 
GPIO_CFG_REGISTER
);

219 
	`CHECK_ERR
(
îr
);

220 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_1_SELECTION
, 
GPIO_CFG_REGISTER
);

221 
	`CHECK_ERR
(
îr
);

222 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_2_SELECTION
, 
GPIO_CFG_STATUS
);

223 
	`CHECK_ERR
(
îr
);

224 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_3_SELECTION
, 
GPIO_CFG_REGISTER
);

225 
	`CHECK_ERR
(
îr
);

226 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_4_SELECTION
, 
GPIO_CFG_STATUS
);

227 
	`CHECK_ERR
(
îr
);

228 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_5_SELECTION
, 
GPIO_CFG_REGISTER
);

229 
	`CHECK_ERR
(
îr
);

230 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_6_SELECTION
, 
GPIO_CFG_REGISTER
);

231 
	`CHECK_ERR
(
îr
);

232 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_7_SELECTION
, 
GPIO_CFG_AGC
);

233 
	`CHECK_ERR
(
îr
);

234 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_DIR_L_DIRECTION
, 0x7F);

235 
	`CHECK_ERR
(
îr
);

237  
LGW_REG_SUCCESS
;

238 
	}
}

243 
	$sx1302_öô
(c⁄° 
lgw_c⁄f_·ime_s
 * 
·ime_c⁄ãxt
) {

244 
sx1302_modñ_id_t
 
modñ_id
;

245 
x
;

248 
	`CHECK_NULL
(
·ime_c⁄ãxt
);

251 
	`time°amp_cou¡î_√w
(&
cou¡î_us
);

254 
	`rx_buf„r_√w
(&
rx_buf„r
);

257 i‡(
·ime_c⁄ãxt
->
íabÀ
 =
åue
) {

258 
x
 = 
	`sx1302_gë_modñ_id
(&
modñ_id
);

259 i‡(
x
 !
LGW_REG_SUCCESS
) {

260 
	`¥ötf
("ERROR: failedÅo get Chip Model ID\n");

261  
LGW_REG_ERROR
;

264 i‡(
modñ_id
 !
CHIP_MODEL_ID_SX1303
) {

265 
	`¥ötf
("ERROR: FöêTime°ampög i†nŸ suµ‹ãd o¿thi†Chù Modñ ID 0x%02X\n", 
modñ_id
);

266  
LGW_REG_ERROR
;

269 
x
 = 
	`time°amp_cou¡î_mode
(
·ime_c⁄ãxt
->
íabÀ
);

270 i‡(
x
 !
LGW_REG_SUCCESS
) {

271 
	`¥ötf
("ERROR: failedÅo configureÅimestamp counter mode\n");

272  
LGW_REG_ERROR
;

275 
x
 = 
	`sx1302_c⁄fig_gpio
();

276 i‡(
x
 !
LGW_REG_SUCCESS
) {

277 
	`¥ötf
("ERROR: failedÅo configure sx1302 GPIOs\n");

278  
LGW_REG_ERROR
;

281  
LGW_REG_SUCCESS
;

282 
	}
}

286 
	$sx1302_gë_eui
(
uöt64_t
 * 
eui
) {

287 
i
, 
îr
;

288 
öt32_t
 
vÆ
;

290 *
eui
 = 0;

291 
i
 = 0; i < 8; i++) {

292 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_OTP_BYTE_ADDR_ADDR
, 
i
);

293 i‡(
îr
 !
LGW_REG_SUCCESS
) {

294  
LGW_REG_ERROR
;

296 
îr
 = 
	`lgw_ªg_r
(
SX1302_REG_OTP_RD_DATA_RD_DATA
, &
vÆ
);

297 i‡(
îr
 !
LGW_REG_SUCCESS
) {

298  
LGW_REG_ERROR
;

301 *
eui
 |(
uöt64_t
)((
uöt8_t
)
vÆ
Ë<< (56 - (
i
 * 8));

304  
LGW_REG_SUCCESS
;

305 
	}
}

309 
	$sx1302_gë_modñ_id
(
sx1302_modñ_id_t
 * 
modñ_id
) {

310 
îr
;

311 
öt32_t
 
vÆ
;

314 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_OTP_BYTE_ADDR_ADDR
, 0xD0);

315 i‡(
îr
 !
LGW_REG_SUCCESS
) {

316  
LGW_REG_ERROR
;

320 
îr
 = 
	`lgw_ªg_r
(
SX1302_REG_OTP_RD_DATA_RD_DATA
, &
vÆ
);

321 i‡(
îr
 !
LGW_REG_SUCCESS
) {

322  
LGW_REG_ERROR
;

324 *
modñ_id
 = (
sx1302_modñ_id_t
)
vÆ
;

326  
LGW_REG_SUCCESS
;

327 
	}
}

331 
	$sx1302_upd©e
() {

332 
uöt32_t
 
ö°
, 
µs
;

334 
timevÆ
 
tm
;

337 
	`_mós_time_°¨t
(&
tm
);

340 
öt32_t
 
vÆ
;

343 
	`lgw_ªg_r
(
SX1302_REG_AGC_MCU_CTRL_PARITY_ERROR
, &
vÆ
);

344 i‡(
vÆ
 != 0) {

345 
	`¥ötf
("ERROR: ParityÉrror check failed on AGC firmware\n");

346  
LGW_REG_ERROR
;

348 
	`lgw_ªg_r
(
SX1302_REG_ARB_MCU_CTRL_PARITY_ERROR
, &
vÆ
);

349 i‡(
vÆ
 != 0) {

350 
	`¥ötf
("ERROR: ParityÉrror check failed on ARB firmware\n");

351  
LGW_REG_ERROR
;

356 
	`time°amp_cou¡î_gë
(&
cou¡î_us
, &
ö°
, &
µs
);

358 
	`_mós_time_°›
(2, 
tm
, 
__FUNCTION__
);

360  
LGW_REG_SUCCESS
;

361 
	}
}

365 
	$sx1302_ødio_˛ock_£À˘
(
uöt8_t
 
rf_chaö
) {

366 
îr
 = 
LGW_REG_SUCCESS
;

369 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
)

371 
	`DEBUG_MSG
("ERROR: invalid RF chain\n");

372  
LGW_REG_ERROR
;

376 
rf_chaö
) {

378 
	`DEBUG_MSG
("Select Radio A clock\n");

379 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_A_SEL
, 0x01);

380 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_B_SEL
, 0x00);

383 
	`DEBUG_MSG
("Select Radio B clock\n");

384 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_A_SEL
, 0x00);

385 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_B_SEL
, 0x01);

388  
LGW_REG_ERROR
;

392 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLKDIV_EN
, 0x01);

395 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL
, 0x01);

398 i‡(
îr
 !
LGW_REG_SUCCESS
) {

399 
	`¥ötf
("ERROR: faûedÅÿ£À˘Ñadiÿ˛ock f‹Ñadio_%u\n", 
rf_chaö
);

400  
LGW_REG_ERROR
;

403  
LGW_REG_SUCCESS
;

404 
	}
}

408 
	$sx1302_ødio_ª£t
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ty≥
) {

409 
uöt16_t
 
ªg_ødio_í
;

410 
uöt16_t
 
ªg_ødio_r°
;

411 
îr
 = 
LGW_REG_SUCCESS
;

414 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
)

416 
	`DEBUG_MSG
("ERROR: invalid RF chain\n");

417  
LGW_REG_ERROR
;

419 i‡((
ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (ty≥ !
LGW_RADIO_TYPE_SX1257
Ë&& (ty≥ !
LGW_RADIO_TYPE_SX1250
)) {

420 
	`DEBUG_MSG
("ERROR: invalidÑadioÅype\n");

421  
LGW_REG_ERROR
;

425 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL
, 0x00);

428 
ªg_ødio_í
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_AGC_MCU_RF_EN_A_RADIO_EN
, 
SX1302_REG_AGC_MCU_RF_EN_B_RADIO_EN
);

429 
îr
 |
	`lgw_ªg_w
(
ªg_ødio_í
, 0x01);

432 
ªg_ødio_r°
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_AGC_MCU_RF_EN_A_RADIO_RST
, 
SX1302_REG_AGC_MCU_RF_EN_B_RADIO_RST
);

433 
îr
 |
	`lgw_ªg_w
(
ªg_ødio_r°
, 0x01);

434 
	`waô_ms
(500);

435 
îr
 |
	`lgw_ªg_w
(
ªg_ødio_r°
, 0x00);

436 
	`waô_ms
(10);

437 
ty≥
) {

438 
LGW_RADIO_TYPE_SX1255
:

439 
LGW_RADIO_TYPE_SX1257
:

441 
	`DEBUG_PRINTF
("INFO:Ñe£àsx125x (RADIO_%sËd⁄e\n", 
	`REG_SELECT
(
rf_chaö
, "A", "B"));

443 
LGW_RADIO_TYPE_SX1250
:

444 
îr
 |
	`lgw_ªg_w
(
ªg_ødio_r°
, 0x01);

445 
	`waô_ms
(10);

446 
	`DEBUG_PRINTF
("INFO:Ñe£àsx1250 (RADIO_%sËd⁄e\n", 
	`REG_SELECT
(
rf_chaö
, "A", "B"));

449  
LGW_REG_ERROR
;

453 i‡(
îr
 !
LGW_REG_SUCCESS
) {

454 
	`¥ötf
("ERROR: failedÅoÑesetÅheÑadios\n");

455  
LGW_REG_ERROR
;

458  
LGW_REG_SUCCESS
;

459 
	}
}

463 
	$sx1302_ødio_£t_mode
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ty≥
) {

464 
uöt16_t
 
ªg
;

465 
îr
;

468 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

469 
	`DEBUG_MSG
("ERROR: invalid RF chain\n");

470  
LGW_REG_ERROR
;

472 i‡((
ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (ty≥ !
LGW_RADIO_TYPE_SX1257
Ë&& (ty≥ !
LGW_RADIO_TYPE_SX1250
)) {

473 
	`DEBUG_MSG
("ERROR: invalidÑadioÅype\n");

474  
LGW_REG_ERROR
;

478 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_A
,

479 
SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_B
);

480 
ty≥
) {

481 
LGW_RADIO_TYPE_SX1250
:

482 
	`DEBUG_PRINTF
("SëtögÑf_chaö_%u i¿sx1250 mode\n", 
rf_chaö
);

483 
îr
 = 
	`lgw_ªg_w
(
ªg
, 0x01);

486 
	`DEBUG_PRINTF
("SëtögÑf_chaö_%u i¿sx125x mode\n", 
rf_chaö
);

487 
îr
 = 
	`lgw_ªg_w
(
ªg
, 0x00);

490 i‡(
îr
 !
LGW_REG_SUCCESS
) {

491 
	`¥ötf
("ERROR: faûedÅÿ£àmodêf‹Ñadiÿ%u\n", 
rf_chaö
);

492  
LGW_REG_ERROR
;

495  
LGW_REG_SUCCESS
;

496 
	}
}

500 
	$sx1302_ødio_ho°_˘æ
(
boﬁ
 
ho°_˘æ
) {

501  
	`lgw_ªg_w
(
SX1302_REG_COMMON_CTRL0_HOST_RADIO_CTRL
, (
ho°_˘æ
 =
Ál£
) ? 0x00 : 0x01);

502 
	}
}

506 
	$sx1302_ødio_ˇlibøã
(
lgw_c⁄f_rxrf_s
 * 
c⁄ãxt_rf_chaö
, 
uöt8_t
 
˛k§c
, 
lgw_tx_gaö_lut_s
 * 
txgaö_lut
) {

507 
i
;

508 
îr
 = 
LGW_REG_SUCCESS
;

511 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

512 i‡(
c⁄ãxt_rf_chaö
[
i
].
íabÀ
 =
åue
) {

513 
îr
 = 
	`sx1302_ødio_ª£t
(
i
, 
c⁄ãxt_rf_chaö
[i].
ty≥
);

514 i‡(
îr
 !
LGW_REG_SUCCESS
) {

515 
	`¥ötf
("ERROR: faûedÅÿª£àødiÿ%d\n", 
i
);

516  
LGW_REG_ERROR
;

519 
îr
 = 
	`sx1302_ødio_£t_mode
(
i
, 
c⁄ãxt_rf_chaö
[i].
ty≥
);

520 i‡(
îr
 !
LGW_REG_SUCCESS
) {

521 
	`¥ötf
("ERROR: faûedÅÿ£àødiÿ%d mode\n", 
i
);

522  
LGW_REG_ERROR
;

527 
îr
 = 
	`sx1302_ødio_˛ock_£À˘
(
˛k§c
);

528 i‡(
îr
 !
LGW_REG_SUCCESS
) {

529 
	`¥ötf
("ERROR: faûedÅÿgë sñe˘ clock fromÑadiÿ%u\n", 
˛k§c
);

530  
LGW_REG_ERROR
;

534 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
, 1);

535 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_RF_EN_A_PA_EN
, 0);

536 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_RF_EN_A_LNA_EN
, 0);

538 i‡((
c⁄ãxt_rf_chaö
[
˛k§c
].
ty≥
 =
LGW_RADIO_TYPE_SX1257
) ||

539 (
c⁄ãxt_rf_chaö
[
˛k§c
].
ty≥
 =
LGW_RADIO_TYPE_SX1255
)) {

540 
	`DEBUG_MSG
("Loading CAL fw for sx125x\n");

541 
îr
 = 
	`sx1302_agc_lﬂd_fúmw¨e
(
ˇl_fúmw¨e_sx125x
);

542 i‡(
îr
 !
LGW_REG_SUCCESS
) {

543 
	`¥ötf
("ERROR: FailedÅoÜoad calibration fw\n");

544  
LGW_REG_ERROR
;

546 
îr
 = 
	`sx1302_ˇl_°¨t
(
FW_VERSION_CAL
, 
c⁄ãxt_rf_chaö
, 
txgaö_lut
);

547 i‡(
îr
 !
LGW_REG_SUCCESS
) {

548 
	`¥ötf
("ERROR:Ñadio calibration failed\n");

549 
	`sx1302_ødio_ª£t
(0, 
c⁄ãxt_rf_chaö
[0].
ty≥
);

550 
	`sx1302_ødio_ª£t
(1, 
c⁄ãxt_rf_chaö
[1].
ty≥
);

551  
LGW_REG_ERROR
;

554 
	`DEBUG_MSG
("Calibrating sx1250Ñadios\n");

555 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

556 i‡(
c⁄ãxt_rf_chaö
[
i
].
íabÀ
 =
åue
) {

557 
îr
 = 
	`sx1250_ˇlibøã
(
i
, 
c⁄ãxt_rf_chaö
[i].
‰eq_hz
);

558 i‡(
îr
 !
LGW_REG_SUCCESS
) {

559 
	`¥ötf
("ERROR:Ñadio calibration failed\n");

560  
LGW_REG_ERROR
;

566 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
, 0);

568  
îr
;

569 
	}
}

573 
	$sx1302_∑_ a_lut_c⁄figuª
(
lgw_c⁄f_bﬂrd_s
 * 
c⁄ãxt_bﬂrd
) {

574 
îr
 = 
LGW_REG_SUCCESS
;

577 i‡(
c⁄ãxt_bﬂrd
->
fuŒ_du∂ex
 =
åue
) {

578 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_A_PA_LUT
, 0x0C);

579 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_A_LNA_LUT
, 0x0F);

581 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_A_PA_LUT
, 0x04);

582 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_A_LNA_LUT
, 0x02);

586 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_B_PA_LUT
, 0x04);

587 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_B_LNA_LUT
, 0x02);

589  
îr
;

590 
	}
}

594 
	$sx1302_ødio_„_c⁄figuª
() {

595 
îr
 = 
LGW_REG_SUCCESS
;

597 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_A_RSSI_BB_FILTER_ALPHA
, 0x03);

598 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_A_RSSI_DEC_FILTER_ALPHA
, 0x07);

599 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_B_RSSI_BB_FILTER_ALPHA
, 0x03);

600 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_B_RSSI_DEC_FILTER_ALPHA
, 0x07);

602 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_A_RSSI_DB_DEFAULT_VALUE
, 23);

603 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_A_RSSI_DEC_DEFAULT_VALUE
, 66);

604 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_B_RSSI_DB_DEFAULT_VALUE
, 23);

605 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_B_RSSI_DEC_DEFAULT_VALUE
, 66);

607 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
, 1);

608 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
, 0x0b);

609 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
, 1);

610 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
, 0x0b);

612  
îr
;

613 
	}
}

617 
uöt8_t
 
	$sx1302_gë_ifmod_c⁄fig
(
uöt8_t
 
if_chaö
) {

618  
ifmod_c⁄fig
[
if_chaö
];

619 
	}
}

623 
	$sx1302_ch™√lizî_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
if_cfg
, 
boﬁ
 
fix_gaö
) {

624 
öt32_t
 
if_‰eq
;

625 
uöt8_t
 
ch™√ls_mask
 = 0x00;

626 
i
;

627 
îr
 = 
LGW_REG_SUCCESS
;

630 
	`CHECK_NULL
(
if_cfg
);

633 
i
 = 0; i < 
LGW_MULTI_NB
; i++) {

634 
ch™√ls_mask
 |(
if_cfg
[
i
].
rf_chaö
 << i);

636 
	`DEBUG_PRINTF
("LoR®mu…i-SFÑadiÿ£À˘: 0x%02X\n", 
ch™√ls_mask
);

637 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RADIO_SELECT_RADIO_SELECT
, 
ch™√ls_mask
);

640 
	`DEBUG_PRINTF
("LoR®£rvi˚Ñadiÿ£À˘: 0x%02X\n", 
if_cfg
[8].
rf_chaö
);

641 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_RADIO_SEL_RADIO_SELECT
, 
if_cfg
[8].
rf_chaö
);

644 
	`DEBUG_PRINTF
("FSKÑadiÿ£À˘ %u\n", 
if_cfg
[9].
rf_chaö
);

645 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RADIO_SELECT
, 
if_cfg
[9].
rf_chaö
);

648 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[0].
‰eq_hz
);

649 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_0_MSB_IF_FREQ_0
, (
if_‰eq
 >> 8) & 0x0000001F);

650 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_0_LSB_IF_FREQ_0
, (
if_‰eq
 >> 0) & 0x000000FF);

652 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[1].
‰eq_hz
);

653 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_1_MSB_IF_FREQ_1
, (
if_‰eq
 >> 8) & 0x0000001F);

654 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_1_LSB_IF_FREQ_1
, (
if_‰eq
 >> 0) & 0x000000FF);

656 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[2].
‰eq_hz
);

657 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_2_MSB_IF_FREQ_2
, (
if_‰eq
 >> 8) & 0x0000001F);

658 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_2_LSB_IF_FREQ_2
, (
if_‰eq
 >> 0) & 0x000000FF);

660 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[3].
‰eq_hz
);

661 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_3_MSB_IF_FREQ_3
, (
if_‰eq
 >> 8) & 0x0000001F);

662 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_3_LSB_IF_FREQ_3
, (
if_‰eq
 >> 0) & 0x000000FF);

664 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[4].
‰eq_hz
);

665 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_4_MSB_IF_FREQ_4
, (
if_‰eq
 >> 8) & 0x0000001F);

666 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_4_LSB_IF_FREQ_4
, (
if_‰eq
 >> 0) & 0x000000FF);

668 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[5].
‰eq_hz
);

669 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_5_MSB_IF_FREQ_5
, (
if_‰eq
 >> 8) & 0x0000001F);

670 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_5_LSB_IF_FREQ_5
, (
if_‰eq
 >> 0) & 0x000000FF);

672 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[6].
‰eq_hz
);

673 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_6_MSB_IF_FREQ_6
, (
if_‰eq
 >> 8) & 0x0000001F);

674 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_6_LSB_IF_FREQ_6
, (
if_‰eq
 >> 0) & 0x000000FF);

676 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[7].
‰eq_hz
);

677 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_7_MSB_IF_FREQ_7
, (
if_‰eq
 >> 8) & 0x0000001F);

678 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_7_LSB_IF_FREQ_7
, (
if_‰eq
 >> 0) & 0x000000FF);

681 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[8].
‰eq_hz
);

682 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_MSB_IF_FREQ_0
, (
if_‰eq
 >> 8) & 0x0000001F);

683 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_LSB_IF_FREQ_0
, (
if_‰eq
 >> 0) & 0x000000FF);

686 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[9].
‰eq_hz
);

687 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_MSB_IF_FREQ_0
, (
if_‰eq
 >> 8) & 0x0000001F);

688 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_LSB_IF_FREQ_0
, (
if_‰eq
 >> 0) & 0x000000FF);

691 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RSSI_CONTROL_RSSI_FILTER_ALPHA
, 0x05);

694 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RSSI_DEF_VALUE_CHAN_RSSI_DEF_VALUE
, 85);

697 i‡(
fix_gaö
 =
åue
) {

698 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG5_CHAN_DAGC_MODE
, 0x00);

699 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_GAIN_CONTROL_CHAN_GAIN
, 5);

702 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG5_CHAN_DAGC_MODE
, 0x01);

704 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG1_CHAN_DAGC_THRESHOLD_HIGH
, 255 );

705 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG2_CHAN_DAGC_THRESHOLD_LOW
, 0 );

706 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MAX_ATTEN
, 15 );

707 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MIN_ATTEN
, 0 );

710  
îr
;

711 
	}
}

715 
	$sx1302_fsk_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
) {

716 
uöt64_t
 
fsk_sync_w‹d_ªg
;

717 
uöt32_t
 
fsk_br_ªg
;

718 
îr
 = 
LGW_REG_SUCCESS
;

720 
	`DEBUG_PRINTF
("FSK: syncw‹d:0x%" 
PRIx64
 ", syncw‹d_size:%u\n", 
cfg
->
sync_w‹d
, cfg->
sync_w‹d_size
);

722 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_PSIZE
, 
cfg
->
sync_w‹d_size
 - 1);

723 
fsk_sync_w‹d_ªg
 = 
cfg
->
sync_w‹d
 << (8 * (8 - cfg->
sync_w‹d_size
));

724 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 0));

725 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 8));

726 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 16));

727 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 24));

728 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 32));

729 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 40));

730 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 48));

731 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 56));

733 
fsk_br_ªg
 = 32000000 / 
cfg
->
d©¨©e
;

734 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_MSB_BIT_RATE
, (
uöt8_t
)(
fsk_br_ªg
 >> 8));

735 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_LSB_BIT_RATE
, (
uöt8_t
)(
fsk_br_ªg
 >> 0));

736 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_CH_BW_EXPO
, 0x03);

738 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RX_INVERT
, 0);

739 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_MODEM_INVERT_IQ
, 0);

741 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_RSSI_LENGTH
, 4);

742 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_PKT_MODE
, 1);

743 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_EN
, 1);

744 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_DCFREE_ENC
, 2);

745 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_IBM
, 0);

746 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_ERROR_OSR_TOL
, 10);

747 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_PKT_LENGTH_PKT_LENGTH
, 255);

748 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_NODE_ADRS_NODE_ADRS
, 0);

749 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_BROADCAST_BROADCAST
, 0);

750 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_AUTO_AFC
, 1);

751 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_MSB_TIMEOUT
, 0);

752 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_LSB_TIMEOUT
, 128);

754  
îr
;

755 
	}
}

759 
	$sx1302_l‹a_c‹ªœt‹_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
if_cfg
, 
lgw_c⁄f_demod_s
 * 
demod_cfg
) {

760 
i
, 
îr
 = 
LGW_REG_SUCCESS
;

761 
uöt8_t
 
ch™√ls_mask
 = 0x00;

764 
	`CHECK_NULL
(
if_cfg
);

766 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF5_CFG2_ACC_PNR
, 52);

767 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF5_CFG4_MSP_PNR
, 24);

768 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF5_CFG6_MSP_PEAK_NB
, 7);

769 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF5_CFG7_MSP2_PEAK_NB
, 5);

771 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF6_CFG2_ACC_PNR
, 52);

772 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF6_CFG4_MSP_PNR
, 24);

773 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF6_CFG6_MSP_PEAK_NB
, 7);

774 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF6_CFG7_MSP2_PEAK_NB
, 5);

776 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF7_CFG2_ACC_PNR
, 52);

777 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF7_CFG4_MSP_PNR
, 24);

778 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF7_CFG6_MSP_PEAK_NB
, 7);

779 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF7_CFG7_MSP2_PEAK_NB
, 5);

781 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF8_CFG2_ACC_PNR
, 52);

782 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF8_CFG4_MSP_PNR
, 24);

783 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF8_CFG6_MSP_PEAK_NB
, 7);

784 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF8_CFG7_MSP2_PEAK_NB
, 5);

786 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF9_CFG2_ACC_PNR
, 52);

787 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF9_CFG4_MSP_PNR
, 24);

788 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF9_CFG6_MSP_PEAK_NB
, 7);

789 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF9_CFG7_MSP2_PEAK_NB
, 5);

791 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF10_CFG2_ACC_PNR
, 52);

792 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF10_CFG4_MSP_PNR
, 24);

793 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF10_CFG6_MSP_PEAK_NB
, 7);

794 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF10_CFG7_MSP2_PEAK_NB
, 5);

796 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF11_CFG2_ACC_PNR
, 52);

797 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF11_CFG4_MSP_PNR
, 24);

798 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF11_CFG6_MSP_PEAK_NB
, 7);

799 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF11_CFG7_MSP2_PEAK_NB
, 5);

801 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF12_CFG2_ACC_PNR
, 52);

802 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF12_CFG4_MSP_PNR
, 24);

803 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF12_CFG6_MSP_PEAK_NB
, 7);

804 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_SF12_CFG7_MSP2_PEAK_NB
, 5);

806 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ONLY_FIRST_DET_EDGE_ENABLE_ONLY_FIRST_DET_EDGE
, 0xFF);

807 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ACC_CLEAR_ENABLE_CORR_ACC_CLEAR
, 0xFF);

810 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CORRELATOR_SF_EN_CORR_SF_EN
, 
demod_cfg
->
mu…isf_d©¨©e
);

811 
	`DEBUG_PRINTF
("INFO: LoR®mu…i-SF c‹ªœt‹ SFÉ«bÀ mask: 0x%02X\n", 
demod_cfg
->
mu…isf_d©¨©e
);

814 
i
 = 0; i < 
LGW_MULTI_NB
; i++) {

815 
ch™√ls_mask
 |(
if_cfg
[
i
].
íabÀ
 << i);

817 
	`DEBUG_PRINTF
("INFO: LoR®mu…i-SF ch™√»íabÀ mask: 0x%02X\n", 
ch™√ls_mask
);

818 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CORR_CLOCK_ENABLE_CLK_EN
, 
ch™√ls_mask
);

819 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_CORRELATOR_EN_CORR_EN
, 
ch™√ls_mask
);

823 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_STORE_SYNC_FAIL_META
, 0x01);

824 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_STORE_HEADER_ERR_META
, 0x01);

827  
îr
;

828 
	}
}

832 
	$sx1302_l‹a_£rvi˚_c‹ªœt‹_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
) {

833 
îr
 = 
LGW_REG_SUCCESS
;

836 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP_PEAK_NB
, 7);

837 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP2_PEAK_NB
, 5);

838 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_USE_GAIN_SYMB
, 1);

840 
cfg
->
d©¨©e
) {

842 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 1);

843 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

846 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 1);

847 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

850 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

851 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

854 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

855 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

858 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

859 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

862 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

863 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

866 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

867 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

870 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

871 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

874 
	`¥ötf
("ERROR: FailedÅo configure LoRa service modem correlators\n");

875  
LGW_REG_ERROR
;

878  
îr
;

879 
	}
}

883 
	$sx1302_l‹a_modem_c⁄figuª
(
uöt32_t
 
ødio_‰eq_hz
) {

884 
uöt16_t
 
m™tisß
 = 0;

885 
uöt8_t
 
exp⁄ít
 = 0;

886 
îr
 = 
LGW_REG_SUCCESS
;

888 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_DC_NOTCH_CFG1_ENABLE
, 0x00);

889 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_DFE_AGC1_FORCE_DEFAULT_FIR
, 0x01);

890 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_DAGC_CFG_GAIN_DROP_COMP
, 0x01);

891 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_DAGC_CFG_TARGET_LVL
, 0x01);

894 
	`DEBUG_MSG
("Configuring 8 full-SF modems\n");

895 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_OTP_MODEM_EN_0_MODEM_EN
, 0xFF);

898 
	`DEBUG_MSG
("Configuring 8Üimited-SF modems\n");

899 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_OTP_MODEM_EN_1_MODEM_EN
, 0xFF);

902 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_MODEM_SYNC_DELTA
, 0);

903 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_LSB_MODEM_SYNC_DELTA
, 126);

906 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_0_OFFSET
, 1);

907 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_1_OFFSET
, 5);

908 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_2_OFFSET
, 9);

909 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_3_OFFSET
, 13);

910 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_4_OFFSET
, 1);

911 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_5_OFFSET
, 5);

912 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_6_OFFSET
, 9);

913 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_7_OFFSET
, 13);

916 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF5
, 0x00);

917 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF6
, 0x00);

918 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF7
, 0x00);

919 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF8
, 0x00);

920 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF9
, 0x00);

921 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF10
, 0x00);

922 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF11
, 0x01);

923 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF12
, 0x01);

926 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_AUTO
, 3);

927 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_PAYLOAD
, 3);

930 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF11
, 1);

931 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF12
, 1);

934 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK4_FREQ_SYNCH_THR
, 15);

937 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF5
, 
RX_FREQ_TRACK_AUTO
);

938 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF6
, 
RX_FREQ_TRACK_AUTO
);

939 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF7
, 
RX_FREQ_TRACK_AUTO
);

940 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF8
, 
RX_FREQ_TRACK_AUTO
);

941 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF9
, 
RX_FREQ_TRACK_AUTO
);

942 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF10
, 
RX_FREQ_TRACK_AUTO
);

943 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF11
, 
RX_FREQ_TRACK_AUTO
);

944 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF12
, 
RX_FREQ_TRACK_AUTO
);

947 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF5
, 
RX_FREQ_TRACK_OFF
);

948 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF6
, 
RX_FREQ_TRACK_OFF
);

949 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF7
, 
RX_FREQ_TRACK_OFF
);

950 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF8
, 
RX_FREQ_TRACK_OFF
);

951 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF9
, 
RX_FREQ_TRACK_OFF
);

952 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF10
, 
RX_FREQ_TRACK_OFF
);

953 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF11
, 
RX_FREQ_TRACK_OFF
);

954 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF12
, 
RX_FREQ_TRACK_OFF
);

956 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF11
, 0);

957 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF12
, 0);

958 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_0_ROUNDING
, 1);

959 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_0_MODE
, 
RX_FINE_TIMING_MODE_LINEAR
);

961 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_AUTO
, 0);

962 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_PREAMB
, 6);

963 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_PAYLOAD
, 2);

965 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_AUTO
, 0);

966 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_PREAMB
, 1);

967 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_PAYLOAD
, 0);

970 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_TXRX_CFG7_PREAMBLE_SYMB_NB
, 0);

971 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_TXRX_CFG6_PREAMBLE_SYMB_NB
, 10);

974 i‡(
	`ˇlcuœã_‰eq_to_time_dri·
(
ødio_‰eq_hz
, 
BW_125KHZ
, &
m™tisß
, &
exp⁄ít
) != 0) {

975 
	`¥ötf
("ERROR: failedÅo calculate frequencyÅoÅime drift for LoRa modem\n");

976  
LGW_REG_ERROR
;

978 
	`DEBUG_PRINTF
("Fªq2TimeDri· Mu…iSF: M™tisß = %d (0x%02X, 0x%02X), Exp⁄íà%d (0x%02X)\n", 
m™tisß
, (m™tisß >> 8Ë& 0x00FF, (m™tisßË& 0x00FF, 
exp⁄ít
,Éxponent);

979 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
, (
m™tisß
 >> 8) & 0x00FF);

980 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
, (
m™tisß
) & 0x00FF);

981 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
, 
exp⁄ít
);

984 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
, 1);

987 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_CFG0_DFT_PEAK_EN
, 
RX_DFT_PEAK_MODE_AUTO
);

989  
îr
;

990 
	}
}

994 
	$sx1302_l‹a_£rvi˚_modem_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
, 
uöt32_t
 
ødio_‰eq_hz
) {

995 
uöt16_t
 
m™tisß
 = 0;

996 
uöt8_t
 
exp⁄ít
 = 0;

997 
uöt8_t
 
¥ómbÀ_nb_symb
;

998 
îr
 = 
LGW_REG_SUCCESS
;

1000 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_ENABLE
, 0x00);

1001 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FORCE_DEFAULT_FIR
, 0x01);

1002 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_DROP_COMP
, 0x01);

1003 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_TARGET_LVL
, 0x01);

1005 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_AUTO
, 0x03);

1006 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PAYLOAD
, 0x03);

1008 
cfg
->
d©¨©e
) {

1009 
DR_LORA_SF5
:

1010 
DR_LORA_SF6
:

1011 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
, 0x04);

1012 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x00);

1014 
DR_LORA_SF7
:

1015 
DR_LORA_SF8
:

1016 
DR_LORA_SF9
:

1017 
DR_LORA_SF10
:

1018 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
, 0x06);

1019 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x00);

1021 
DR_LORA_SF11
:

1022 
DR_LORA_SF12
:

1023 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
, 0x07);

1024 
cfg
->
b™dwidth
) {

1025 
BW_125KHZ
:

1026 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x01);

1028 
BW_250KHZ
:

1029 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x02);

1031 
BW_500KHZ
:

1032 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x03);

1035 
	`¥ötf
("ERROR: unsuµ‹ãd b™dwidth %u f‹ LoR®Sîvi˚ modem\n", 
cfg
->
b™dwidth
);

1040 
	`¥ötf
("ERROR: unsuµ‹ãd d©¨©ê%u f‹ LoR®Sîvi˚ modem\n", 
cfg
->
d©¨©e
);

1044 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_IMPLICIT_HEADER
, (
cfg
->
im∂icô_hdr
 =
åue
) ? 1 : 0);

1045 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CRC_EN
, (
cfg
->
im∂icô_¸c_í
 =
åue
) ? 1 : 0);

1046 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_CODING_RATE
, 
cfg
->
im∂icô_codî©e
);

1047 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG3_PAYLOAD_LENGTH
, 
cfg
->
im∂icô_∑ylﬂd_Àngth
);

1049 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_SF
, 
cfg
->
d©¨©e
);

1050 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_BW
, 
cfg
->
b™dwidth
);

1051 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET
, 
	`SET_PPM_ON
(
cfg
->
b™dwidth
, cfg->
d©¨©e
));

1054 i‡((
cfg
->
d©¨©e
 =
DR_LORA_SF5
Ë|| (cfg->d©¨©ê=
DR_LORA_SF6
)) {

1055 
¥ómbÀ_nb_symb
 = 12;

1057 
¥ómbÀ_nb_symb
 = 8;

1059 
	`¥ötf
("INFO: LoR®Sîvi˚ modem: c⁄figurögÖªambÀ sizêtÿ%u symbﬁs\n", 
¥ómbÀ_nb_symb
);

1060 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG7_PREAMBLE_SYMB_NB
, (
¥ómbÀ_nb_symb
 >> 8) & 0xFF);

1061 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG6_PREAMBLE_SYMB_NB
, (
¥ómbÀ_nb_symb
 >> 0) & 0xFF);

1064 i‡(
	`ˇlcuœã_‰eq_to_time_dri·
(
ødio_‰eq_hz
, 
cfg
->
b™dwidth
, &
m™tisß
, &
exp⁄ít
) != 0) {

1065 
	`¥ötf
("ERROR: failedÅo calculate frequencyÅoÅime drift for LoRa service modem\n");

1066  
LGW_REG_ERROR
;

1068 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
, (
m™tisß
 >> 8) & 0x00FF);

1069 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
, (
m™tisß
) & 0x00FF);

1070 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
, 
exp⁄ít
);

1071 
	`DEBUG_PRINTF
("Fªq2TimeDri· SögÀSF: M™tisß = %d (0x%02X, 0x%02X), Exp⁄íà%d (0x%02X)\n", 
m™tisß
, (m™tisß >> 8Ë& 0x00FF, (m™tisßË& 0x00FF, 
exp⁄ít
,Éxponent);

1074 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
, 1);

1076 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_IN_COMP
, 1);

1078 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_MODEM_EN
, 1);

1079 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CADRXTX
, 1);

1081 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_MODEM_START
, 1);

1084 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_DFT_PEAK_EN
, 
RX_DFT_PEAK_MODE_AUTO
);

1086  
îr
;

1087 
	}
}

1091 
	$sx1302_modem_íabÀ
() {

1092 
îr
 = 
LGW_REG_SUCCESS
;

1095 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_COMMON_GEN_CONCENTRATOR_MODEM_ENABLE
, 0x01);

1098 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_COMMON_GEN_MBWSSF_MODEM_ENABLE
, 0x01);

1101 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_COMMON_GEN_FSK_MODEM_ENABLE
, 0x01);

1104 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_COMMON_GEN_GLOBAL_EN
, 0x01);

1106  
îr
;

1107 
	}
}

1111 
	$sx1302_l‹a_syncw‹d
(
boﬁ
 
public
, 
uöt8_t
 
l‹a_£rvi˚_sf
) {

1112 
îr
 = 
LGW_REG_SUCCESS
;

1115 
	`DEBUG_MSG
("INFO: configuring LoRa (Multi-SF) SF5->SF6 with syncword PRIVATE (0x12)\n");

1116 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH0_SF5_PEAK1_POS_SF5
, 2);

1117 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH1_SF5_PEAK2_POS_SF5
, 4);

1118 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH0_SF6_PEAK1_POS_SF6
, 2);

1119 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH1_SF6_PEAK2_POS_SF6
, 4);

1120 i‡(
public
 =
åue
) {

1121 
	`DEBUG_MSG
("INFO: configuring LoRa (Multi-SF) SF7->SF12 with syncword PUBLIC (0x34)\n");

1122 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH0_SF7TO12_PEAK1_POS_SF7TO12
, 6);

1123 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH1_SF7TO12_PEAK2_POS_SF7TO12
, 8);

1125 
	`DEBUG_MSG
("INFO: configuring LoRa (Multi-SF) SF7->SF12 with syncword PRIVATE (0x12)\n");

1126 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH0_SF7TO12_PEAK1_POS_SF7TO12
, 2);

1127 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH1_SF7TO12_PEAK2_POS_SF7TO12
, 4);

1131 i‡((
public
 =
Ál£
Ë|| (
l‹a_£rvi˚_sf
 =
DR_LORA_SF5
Ë|| (l‹a_£rvi˚_s‡=
DR_LORA_SF6
)) {

1132 
	`DEBUG_PRINTF
("INFO: c⁄figurög LoR®(Sîvi˚ËSF%u wôh syncw‹d PRIVATE (0x12)\n", 
l‹a_£rvi˚_sf
);

1133 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH0_PEAK1_POS
, 2);

1134 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH1_PEAK2_POS
, 4);

1136 
	`DEBUG_PRINTF
("INFO: c⁄figurög LoR®(Sîvi˚ËSF%u wôh syncw‹d PUBLIC (0x34)\n", 
l‹a_£rvi˚_sf
);

1137 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH0_PEAK1_POS
, 6);

1138 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH1_PEAK2_POS
, 8);

1141  
îr
;

1142 
	}
}

1146 
uöt32_t
 
	$sx1302_time°amp_cou¡î
(
boﬁ
 
µs
) {

1147 
uöt32_t
 
ö°_˙t
, 
µs_˙t
;

1148 
	`time°amp_cou¡î_gë
(&
cou¡î_us
, &
ö°_˙t
, &
µs_˙t
);

1149  ((
µs
 =
åue
Ë? 
µs_˙t
 : 
ö°_˙t
);

1150 
	}
}

1154 
	$sx1302_gps_íabÀ
(
boﬁ
 
íabÀ
) {

1155 
îr
 = 
LGW_REG_SUCCESS
;

1157 i‡(
íabÀ
 =
åue
) {

1158 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_EN
, 1);

1159 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_POL
, 1);

1161 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_EN
, 0);

1164  
îr
;

1165 
	}
}

1169 
	$sx1302_agc_lﬂd_fúmw¨e
(c⁄° 
uöt8_t
 *
fúmw¨e
) {

1170 
öt32_t
 
vÆ
;

1171 
uöt8_t
 
fw_check
[
MCU_FW_SIZE
];

1172 
îr
 = 
LGW_REG_SUCCESS
;

1175 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_MCU_CLEAR
, 0x01);

1176 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_HOST_PROG
, 0x01);

1177 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_COMMON_PAGE_PAGE
, 0x00);

1180 
îr
 |
	`lgw_mem_wb
(
AGC_MEM_ADDR
, 
fúmw¨e
, 
MCU_FW_SIZE
);

1183 
îr
 |
	`lgw_mem_rb
(
AGC_MEM_ADDR
, 
fw_check
, 
MCU_FW_SIZE
, 
Ál£
);

1184 i‡(
	`memcmp
(
fúmw¨e
, 
fw_check
,  fw_check) != 0) {

1185 
	`¥ötf
("ERROR: AGC fwÑead/write check failed\n");

1186  
LGW_REG_ERROR
;

1190 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_HOST_PROG
, 0x00);

1191 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_MCU_CLEAR
, 0x00);

1193 
îr
 |
	`lgw_ªg_r
(
SX1302_REG_AGC_MCU_CTRL_PARITY_ERROR
, &
vÆ
);

1194 i‡(
vÆ
 != 0) {

1195 
	`¥ötf
("ERROR: FailedÅoÜoad AGC fw:ÖarityÉrror check failed\n");

1196  
LGW_REG_ERROR
;

1198 
	`DEBUG_MSG
("AGC fwÜoaded\n");

1200  
îr
;

1201 
	}
}

1205 
	$sx1302_agc_°©us
(
uöt8_t
* 
°©us
) {

1206 
öt32_t
 
vÆ
;

1207 
îr
 = 
LGW_REG_SUCCESS
;

1209 
îr
 = 
	`lgw_ªg_r
(
SX1302_REG_AGC_MCU_MCU_AGC_STATUS_MCU_AGC_STATUS
, &
vÆ
);

1210 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1211 
	`¥ötf
("ERROR: FailedÅo get AGC status\n");

1212  
LGW_REG_ERROR
;

1215 *
°©us
 = (
uöt8_t
)
vÆ
;

1217  
îr
;

1218 
	}
}

1222 
	$sx1302_agc_waô_°©us
(
uöt8_t
 
°©us
) {

1223 
uöt8_t
 
vÆ
;

1226 i‡(
	`sx1302_agc_°©us
(&
vÆ
Ë!
LGW_REG_SUCCESS
) {

1227  
LGW_REG_ERROR
;

1230 } 
vÆ
 !
°©us
);

1232  
LGW_REG_SUCCESS
;

1233 
	}
}

1237 
	$sx1302_agc_maûbox_ªad
(
uöt8_t
 
maûbox
, uöt8_t* 
vÆue
) {

1238 
uöt16_t
 
ªg
;

1239 
öt32_t
 
vÆ
;

1242 i‡(
maûbox
 > 3) {

1243 
	`¥ötf
("ERROR: invalid AGC mailbox ID\n");

1244  
LGW_REG_ERROR
;

1247 
ªg
 = 
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE0_MCU_MAIL_BOX_RD_DATA
 - 
maûbox
;

1248 i‡(
	`lgw_ªg_r
(
ªg
, &
vÆ
Ë!
LGW_REG_SUCCESS
) {

1249 
	`¥ötf
("ERROR: failedÅoÑead AGC mailbox\n");

1250  
LGW_REG_ERROR
;

1253 *
vÆue
 = (
uöt8_t
)
vÆ
;

1255  
LGW_REG_SUCCESS
;

1256 
	}
}

1260 
	$sx1302_agc_maûbox_wrôe
(
uöt8_t
 
maûbox
, uöt8_à
vÆue
) {

1261 
uöt16_t
 
ªg
;

1264 i‡(
maûbox
 > 3) {

1265 
	`¥ötf
("ERROR: invalid AGC mailbox ID\n");

1266  
LGW_REG_ERROR
;

1269 
ªg
 = 
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
 - 
maûbox
;

1270 i‡(
	`lgw_ªg_w
(
ªg
, (
öt32_t
)
vÆue
Ë!
LGW_REG_SUCCESS
) {

1271 
	`¥ötf
("ERROR: failedÅo write AGC mailbox\n");

1272  
LGW_REG_ERROR
;

1275  
LGW_REG_SUCCESS
;

1276 
	}
}

1280 
	$sx1302_agc_°¨t
(
uöt8_t
 
vîsi⁄
, 
lgw_ødio_ty≥_t
 
ødio_ty≥
, uöt8_à
™a_gaö
, uöt8_à
dec_gaö
, 
boﬁ
 
fuŒ_du∂ex
, boﬁ 
lbt_íabÀ
) {

1281 
uöt8_t
 
vÆ
;

1282 
agc_gaö_∑øms_s
 
agc_∑øms
;

1283 
uöt8_t
 
∑_°¨t_dñay
;

1284 
uöt8_t
 
fdd_mode
 = ((
fuŒ_du∂ex
 =
åue
) ? 1 : 0);

1287 i‡((
ødio_ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (ødio_ty≥ !
LGW_RADIO_TYPE_SX1257
Ë&& (ødio_ty≥ !
LGW_RADIO_TYPE_SX1250
)) {

1288 
	`DEBUG_MSG
("ERROR: invalidÑadioÅype\n");

1289  
LGW_REG_ERROR
;

1293 
	`sx1302_agc_waô_°©us
(0x01);

1295 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1296 i‡(
vÆ
 !
vîsi⁄
) {

1297 
	`¥ötf
("ERROR: wr⁄g AGC fw vîsi⁄ (%d)\n", 
vÆ
);

1298  
LGW_REG_ERROR
;

1300 
	`DEBUG_PRINTF
("AGC FW VERSION: %d\n", 
vÆ
);

1305 
	`sx1302_agc_maûbox_wrôe
(0, 
™a_gaö
);

1306 
	`sx1302_agc_maûbox_wrôe
(1, 
dec_gaö
);

1307 i‡(
ødio_ty≥
 !
LGW_RADIO_TYPE_SX1250
) {

1308 
	`¥ötf
("AGC: sëtög fdd_modêtÿ%u\n", 
fdd_mode
);

1309 
	`sx1302_agc_maûbox_wrôe
(2, 
fdd_mode
);

1313 
	`sx1302_agc_maûbox_wrôe
(3, 
AGC_RADIO_A_INIT_DONE
);

1316 
	`sx1302_agc_waô_°©us
(0x02);

1319 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1320 i‡(
vÆ
 !
™a_gaö
) {

1321 
	`¥ötf
("ERROR: Analog gain of Radio A hasÇot been setÖroperly\n");

1322  
LGW_REG_ERROR
;

1326 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1327 i‡(
vÆ
 !
dec_gaö
) {

1328 
	`¥ötf
("ERROR: Decimator gain of Radio A hasÇot been setÖroperly\n");

1329  
LGW_REG_ERROR
;

1333 
	`sx1302_agc_maûbox_ªad
(2, &
vÆ
);

1334 i‡(
vÆ
 !
fdd_mode
) {

1335 
	`¥ötf
("ERROR: FDD mode of Radio A hasÇot been setÖroperly\n");

1336  
LGW_REG_ERROR
;

1339 
	`DEBUG_MSG
("AGC: Radio A config done\n");

1344 
	`sx1302_agc_maûbox_wrôe
(0, 
™a_gaö
);

1345 
	`sx1302_agc_maûbox_wrôe
(1, 
dec_gaö
);

1346 i‡(
ødio_ty≥
 !
LGW_RADIO_TYPE_SX1250
) {

1347 
	`sx1302_agc_maûbox_wrôe
(2, 
fdd_mode
);

1351 
	`sx1302_agc_maûbox_wrôe
(3, 
AGC_RADIO_B_INIT_DONE
);

1354 
	`sx1302_agc_waô_°©us
(0x03);

1357 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1358 i‡(
vÆ
 !
™a_gaö
) {

1359 
	`¥ötf
("ERROR: Analog gain of Radio B hasÇot been setÖroperly\n");

1360  
LGW_REG_ERROR
;

1364 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1365 i‡(
vÆ
 !
dec_gaö
) {

1366 
	`¥ötf
("ERROR: Decimator gain of Radio B hasÇot been setÖroperly\n");

1367  
LGW_REG_ERROR
;

1371 
	`sx1302_agc_maûbox_ªad
(2, &
vÆ
);

1372 i‡(
vÆ
 !
fdd_mode
) {

1373 
	`¥ötf
("ERROR: FDD mode of Radio B hasÇot been setÖroperly\n");

1374  
LGW_REG_ERROR
;

1377 
	`DEBUG_MSG
("AGC: Radio B config done\n");

1382 
agc_∑øms
 = (
ødio_ty≥
 =
LGW_RADIO_TYPE_SX1250
Ë? 
agc_∑øms_sx1250
 : 
agc_∑øms_sx125x
;

1385 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
™a_mö
);

1386 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
™a_max
);

1389 
	`sx1302_agc_maûbox_wrôe
(3, 0x03);

1392 
	`sx1302_agc_waô_°©us
(0x04);

1395 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1396 i‡(
vÆ
 !
agc_∑øms
.
™a_mö
) {

1397 
	`¥ötf
("ERROR: wr⁄gá«_mö (w:%uÑ:%u)\n", 
agc_∑øms
.
™a_mö
, 
vÆ
);

1398  
LGW_REG_ERROR
;

1400 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1401 i‡(
vÆ
 !
agc_∑øms
.
™a_max
) {

1402 
	`¥ötf
("ERROR:á«_max (w:%uÑ:%u)\n", 
agc_∑øms
.
™a_max
, 
vÆ
);

1403  
LGW_REG_ERROR
;

1406 
	`DEBUG_MSG
("AGC: config ofánalog gain min/max done\n");

1411 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
™a_thªsh_l
);

1412 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
™a_thªsh_h
);

1415 
	`sx1302_agc_maûbox_wrôe
(3, 0x04);

1418 
	`sx1302_agc_waô_°©us
(0x05);

1421 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1422 i‡(
vÆ
 !
agc_∑øms
.
™a_thªsh_l
) {

1423 
	`¥ötf
("ERROR: wr⁄gá«_thªsh_»(w:%uÑ:%u)\n", 
agc_∑øms
.
™a_thªsh_l
, 
vÆ
);

1424  
LGW_REG_ERROR
;

1426 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1427 i‡(
vÆ
 !
agc_∑øms
.
™a_thªsh_h
) {

1428 
	`¥ötf
("ERROR: wr⁄gá«_thªsh_h (w:%uÑ:%u)\n", 
agc_∑øms
.
™a_thªsh_h
, 
vÆ
);

1429  
LGW_REG_ERROR
;

1432 
	`DEBUG_MSG
("AGC: config ofánalogÅhreshold done\n");

1437 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
dec_©ä_mö
);

1438 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
dec_©ä_max
);

1441 
	`sx1302_agc_maûbox_wrôe
(3, 0x05);

1444 
	`sx1302_agc_waô_°©us
(0x06);

1447 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1448 i‡(
vÆ
 !
agc_∑øms
.
dec_©ä_mö
) {

1449 
	`¥ötf
("ERROR: wr⁄g dec_©ä_mö (w:%uÑ:%u)\n", 
agc_∑øms
.
dec_©ä_mö
, 
vÆ
);

1450  
LGW_REG_ERROR
;

1452 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1453 i‡(
vÆ
 !
agc_∑øms
.
dec_©ä_max
) {

1454 
	`¥ötf
("ERROR: wr⁄g dec_©ä_max (w:%uÑ:%u)\n", 
agc_∑øms
.
dec_©ä_max
, 
vÆ
);

1455  
LGW_REG_ERROR
;

1458 
	`DEBUG_MSG
("AGC: config of decimatorátten min/max done\n");

1463 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
dec_thªsh_l
);

1464 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
dec_thªsh_h1
);

1465 
	`sx1302_agc_maûbox_wrôe
(2, 
agc_∑øms
.
dec_thªsh_h2
);

1468 
	`sx1302_agc_maûbox_wrôe
(3, 0x06);

1471 
	`sx1302_agc_waô_°©us
(0x07);

1474 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1475 i‡(
vÆ
 !
agc_∑øms
.
dec_thªsh_l
) {

1476 
	`¥ötf
("ERROR: wr⁄g dec_thªsh_»(w:%uÑ:%u)\n", 
agc_∑øms
.
dec_thªsh_l
, 
vÆ
);

1477  
LGW_REG_ERROR
;

1479 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1480 i‡(
vÆ
 !
agc_∑øms
.
dec_thªsh_h1
) {

1481 
	`¥ötf
("ERROR: wr⁄g dec_thªsh_h1 (w:%uÑ:%u)\n", 
agc_∑øms
.
dec_thªsh_h1
, 
vÆ
);

1482  
LGW_REG_ERROR
;

1484 
	`sx1302_agc_maûbox_ªad
(2, &
vÆ
);

1485 i‡(
vÆ
 !
agc_∑øms
.
dec_thªsh_h2
) {

1486 
	`¥ötf
("ERROR: wr⁄g dec_thªsh_h2 (w:%uÑ:%u)\n", 
agc_∑øms
.
dec_thªsh_h2
, 
vÆ
);

1487  
LGW_REG_ERROR
;

1490 
	`DEBUG_MSG
("AGC: config of decimatorÅhreshold done\n");

1495 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
ch™_©ä_mö
);

1496 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
ch™_©ä_max
);

1499 
	`sx1302_agc_maûbox_wrôe
(3, 0x07);

1502 
	`sx1302_agc_waô_°©us
(0x08);

1505 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1506 i‡(
vÆ
 !
agc_∑øms
.
ch™_©ä_mö
) {

1507 
	`¥ötf
("ERROR: wr⁄g ch™_©ä_mö (w:%uÑ:%u)\n", 
agc_∑øms
.
ch™_©ä_mö
, 
vÆ
);

1508  
LGW_REG_ERROR
;

1510 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1511 i‡(
vÆ
 !
agc_∑øms
.
ch™_©ä_max
) {

1512 
	`¥ötf
("ERROR: wr⁄g ch™_©ä_max (w:%uÑ:%u)\n", 
agc_∑øms
.
ch™_©ä_max
, 
vÆ
);

1513  
LGW_REG_ERROR
;

1516 
	`DEBUG_MSG
("AGC: config of channelátten min/max done\n");

1521 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
ch™_thªsh_l
);

1522 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
ch™_thªsh_h
);

1525 
	`sx1302_agc_maûbox_wrôe
(3, 0x08);

1528 
	`sx1302_agc_waô_°©us
(0x09);

1531 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1532 i‡(
vÆ
 !
agc_∑øms
.
ch™_thªsh_l
) {

1533 
	`¥ötf
("ERROR: wr⁄g ch™_thªsh_»(w:%uÑ:%u)\n", 
agc_∑øms
.
ch™_thªsh_l
, 
vÆ
);

1534  
LGW_REG_ERROR
;

1536 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1537 i‡(
vÆ
 !
agc_∑øms
.
ch™_thªsh_h
) {

1538 
	`¥ötf
("ERROR: wr⁄g ch™_thªsh_h (w:%uÑ:%u)\n", 
agc_∑øms
.
ch™_thªsh_h
, 
vÆ
);

1539  
LGW_REG_ERROR
;

1542 
	`DEBUG_MSG
("AGC: config of channeláttenÅhreshold done\n");

1547 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_SX1250
) {

1548 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
devi˚Sñ
);

1549 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
hpMax
);

1550 
	`sx1302_agc_maûbox_wrôe
(2, 
agc_∑øms
.
∑DutyCy˛e
);

1553 
	`sx1302_agc_maûbox_wrôe
(3, 0x09);

1556 
	`sx1302_agc_waô_°©us
(0x0A);

1559 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1560 i‡(
vÆ
 !
agc_∑øms
.
devi˚Sñ
) {

1561 
	`¥ötf
("ERROR: wr⁄g devi˚Sñ (w:%uÑ:%u)\n", 
agc_∑øms
.
devi˚Sñ
, 
vÆ
);

1562  
LGW_REG_ERROR
;

1564 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1565 i‡(
vÆ
 !
agc_∑øms
.
hpMax
) {

1566 
	`¥ötf
("ERROR: wr⁄g hpMax (w:%uÑ:%u)\n", 
agc_∑øms
.
hpMax
, 
vÆ
);

1567  
LGW_REG_ERROR
;

1569 
	`sx1302_agc_maûbox_ªad
(2, &
vÆ
);

1570 i‡(
vÆ
 !
agc_∑øms
.
∑DutyCy˛e
) {

1571 
	`¥ötf
("ERROR: wr⁄gÖaDutyCy˛ê(w:%uÑ:%u)\n", 
agc_∑øms
.
∑DutyCy˛e
, 
vÆ
);

1572  
LGW_REG_ERROR
;

1575 
	`DEBUG_MSG
("AGC: config of sx1250 PA optimal settings done\n");

1581 
∑_°¨t_dñay
 = 8;

1582 
	`sx1302_agc_maûbox_wrôe
(0, 
∑_°¨t_dñay
);

1585 
	`sx1302_agc_maûbox_wrôe
(3, 0x0A);

1588 
	`sx1302_agc_waô_°©us
(0x0B);

1591 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1592 i‡(
vÆ
 !
∑_°¨t_dñay
) {

1593 
	`¥ötf
("ERROR: wr⁄g PA sèπ dñay (w:%uÑ:%u)\n", 
∑_°¨t_dñay
, 
vÆ
);

1594  
LGW_REG_ERROR
;

1597 
	`DEBUG_MSG
("AGC: config of PA start delay done\n");

1602 
	`sx1302_agc_maûbox_wrôe
(0, (
lbt_íabÀ
 =
åue
) ? 1 : 0);

1605 
	`sx1302_agc_maûbox_wrôe
(3, 0x0B);

1608 
	`sx1302_agc_waô_°©us
(0x0F);

1611 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1612 i‡((
boﬁ
)
vÆ
 !
lbt_íabÀ
) {

1613 
	`¥ötf
("ERROR: wr⁄g LBT c⁄figuøti⁄ (w:%uÑ:%u)\n", 
lbt_íabÀ
, 
vÆ
);

1614  
LGW_REG_ERROR
;

1617 
	`DEBUG_PRINTF
("AGC: LBT i†%s\n", (
lbt_íabÀ
 =
åue
) ? "enabled" : "disabled");

1622 
	`sx1302_agc_maûbox_wrôe
(3, 0x0F);

1624 
	`DEBUG_MSG
("AGC: started\n");

1626  
LGW_REG_SUCCESS
;

1627 
	}
}

1631 
	$sx1302_¨b_lﬂd_fúmw¨e
(c⁄° 
uöt8_t
 *
fúmw¨e
) {

1632 
uöt8_t
 
fw_check
[
MCU_FW_SIZE
];

1633 
öt32_t
 
vÆ
;

1634 
îr
 = 
LGW_REG_SUCCESS
;

1637 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CTRL_MCU_CLEAR
, 0x01);

1638 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CTRL_HOST_PROG
, 0x01);

1639 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_COMMON_PAGE_PAGE
, 0x00);

1642 
îr
 |
	`lgw_mem_wb
(
ARB_MEM_ADDR
, &
fúmw¨e
[0], 
MCU_FW_SIZE
);

1645 
îr
 |
	`lgw_mem_rb
(
ARB_MEM_ADDR
, 
fw_check
, 
MCU_FW_SIZE
, 
Ál£
);

1646 i‡(
	`memcmp
(
fúmw¨e
, 
fw_check
,  fw_check) != 0) {

1647 
	`¥ötf
("ERROR: ARB fwÑead/write check failed\n");

1648  
LGW_REG_ERROR
;

1652 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CTRL_HOST_PROG
, 0x00);

1653 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_CTRL_MCU_CLEAR
, 0x00);

1655 
îr
 |
	`lgw_ªg_r
(
SX1302_REG_ARB_MCU_CTRL_PARITY_ERROR
, &
vÆ
);

1656 i‡(
vÆ
 != 0) {

1657 
	`¥ötf
("ERROR: FailedÅoÜoad ARB fw:ÖarityÉrror check failed\n");

1658  
LGW_REG_ERROR
;

1660 
	`DEBUG_MSG
("ARB fwÜoaded\n");

1662  
îr
;

1663 
	}
}

1667 
	$sx1302_¨b_°©us
(
uöt8_t
* 
°©us
) {

1668 
öt32_t
 
vÆ
;

1669 
îr
 = 
LGW_REG_SUCCESS
;

1671 
îr
 = 
	`lgw_ªg_r
(
SX1302_REG_ARB_MCU_MCU_ARB_STATUS_MCU_ARB_STATUS
, &
vÆ
);

1672 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1673 
	`¥ötf
("ERROR: FailedÅo get ARB status\n");

1674  
LGW_REG_ERROR
;

1677 *
°©us
 = (
uöt8_t
)
vÆ
;

1679  
îr
;

1680 
	}
}

1684 
	$sx1302_¨b_waô_°©us
(
uöt8_t
 
°©us
) {

1685 
uöt8_t
 
vÆ
;

1688 i‡(
	`sx1302_¨b_°©us
(&
vÆ
Ë!
LGW_REG_SUCCESS
) {

1689  
LGW_REG_ERROR
;

1692 } 
vÆ
 !
°©us
);

1694  
LGW_REG_SUCCESS
;

1695 
	}
}

1699 
	$sx1302_¨b_debug_ªad
(
uöt8_t
 
ªg_id
, uöt8_t* 
vÆue
) {

1700 
uöt16_t
 
ªg
;

1701 
öt32_t
 
vÆ
;

1704 i‡(
ªg_id
 > 15) {

1705 
	`¥ötf
("ERROR: invalid ARB debugÑegister ID\n");

1706  
LGW_REG_ERROR
;

1709 
ªg
 = 
SX1302_REG_ARB_MCU_ARB_DEBUG_STS_0_ARB_DEBUG_STS_0
 + 
ªg_id
;

1710 i‡(
	`lgw_ªg_r
(
ªg
, &
vÆ
Ë!
LGW_REG_SUCCESS
) {

1711 
	`¥ötf
("ERROR: failedÅoÑead ARB debugÑegister\n");

1712  
LGW_REG_ERROR
;

1715 *
vÆue
 = (
uöt8_t
)
vÆ
;

1717  
LGW_REG_SUCCESS
;

1718 
	}
}

1722 
	$sx1302_¨b_debug_wrôe
(
uöt8_t
 
ªg_id
, uöt8_à
vÆue
) {

1723 
uöt16_t
 
ªg
;

1726 i‡(
ªg_id
 > 3) {

1727 
	`¥ötf
("ERROR: invalid ARB debugÑegister ID\n");

1728  
LGW_REG_ERROR
;

1731 
ªg
 = 
SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_0_ARB_DEBUG_CFG_0
 + 
ªg_id
;

1732 i‡(
	`lgw_ªg_w
(
ªg
, (
öt32_t
)
vÆue
Ë!
LGW_REG_SUCCESS
) {

1733 
	`¥ötf
("ERROR: failedÅo write ARB debugÑegister ID\n");

1734  
LGW_REG_ERROR
;

1737  
LGW_REG_SUCCESS
;

1738 
	}
}

1742 
	$sx1302_¨b_£t_debug_°©s
(
boﬁ
 
íabÀ
, 
uöt8_t
 
sf
) {

1743 i‡(
íabÀ
 =
åue
) {

1744 
	`DEBUG_PRINTF
("ARB: Debug sèt†íabÀd f‹ SF%u\n", 
sf
);

1745 
	`lgw_ªg_w
(
SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_0_ARB_DEBUG_CFG_0
, 
sf
);

1747 
	`DEBUG_MSG
("ARB: Debug stats disabled\n");

1749 
	}
}

1753 
uöt8_t
 
	$sx1302_¨b_gë_debug_°©s_dëe˘
(
uöt8_t
 
ch™√l
) {

1754 
öt32_t
 
dbg_vÆ
;

1756 i‡(
ch™√l
 >= 8) {

1757 
	`¥ötf
("ERROR: wrong configuration, channelÇum must be < 8");

1760 
	`lgw_ªg_r
(
SX1302_REG_ARB_MCU_ARB_DEBUG_STS_0_ARB_DEBUG_STS_0
 + 
ch™√l
, &
dbg_vÆ
);

1762  (
uöt8_t
)
dbg_vÆ
;

1763 
	}
}

1767 
uöt8_t
 
	$sx1302_¨b_gë_debug_°©s_Æloc
(
uöt8_t
 
ch™√l
) {

1768 
öt32_t
 
dbg_vÆ
;

1770 i‡(
ch™√l
 >= 8) {

1771 
	`¥ötf
("ERROR: wrong configuration, channelÇum must be < 8");

1774 
	`lgw_ªg_r
(
SX1302_REG_ARB_MCU_ARB_DEBUG_STS_8_ARB_DEBUG_STS_8
 + 
ch™√l
, &
dbg_vÆ
);

1776  (
uöt8_t
)
dbg_vÆ
;

1777 
	}
}

1781 
	$sx1302_¨b_¥öt_debug_°©s
() {

1782 
i
;

1783 
uöt8_t
 
nb_dëe˘
;

1784 
uöt8_t
 
nb_Æloc
;

1785 
nb_dëe˘_tŸÆ
 = 0;

1786 
nb_Æloc_tŸÆ
 = 0;

1789 
nb_dëe˘_tŸÆ
 = 0;

1790 
	`DEBUG_MSG
("ARB:Çb_detect: [");

1791 
i
 = 0; i < 8; i++) {

1792 
nb_dëe˘
 = 
	`sx1302_¨b_gë_debug_°©s_dëe˘
(
i
);

1793 
	`DEBUG_PRINTF
("%u ", 
nb_dëe˘
);

1794 
nb_dëe˘_tŸÆ
 +
nb_dëe˘
;

1796 
	`DEBUG_MSG
("]\n");

1799 
nb_Æloc_tŸÆ
 = 0;

1800 
	`DEBUG_MSG
("ARB:Çb_alloc: [");

1801 
i
 = 0; i < 8; i++) {

1802 
nb_Æloc
 = 
	`sx1302_¨b_gë_debug_°©s_Æloc
(
i
);

1803 
	`DEBUG_PRINTF
("%u ", 
nb_Æloc
);

1804 
nb_Æloc_tŸÆ
 +
nb_Æloc
;

1806 
	`DEBUG_MSG
("]\n");

1807 
	}
}

1811 
	$sx1302_¨b_°¨t
(
uöt8_t
 
vîsi⁄
, c⁄° 
lgw_c⁄f_·ime_s
 * 
·ime_c⁄ãxt
) {

1812 
uöt8_t
 
vÆ
;

1815 
	`sx1302_¨b_waô_°©us
(0x01);

1818 
	`sx1302_¨b_debug_ªad
(0, &
vÆ
);

1819 i‡(
vÆ
 !
vîsi⁄
) {

1820 
	`¥ötf
("ERROR: wr⁄g ARB fw vîsi⁄ (%d)\n", 
vÆ
);

1821  
LGW_REG_ERROR
;

1823 
	`DEBUG_PRINTF
("ARB FW VERSION: %d\n", 
vÆ
);

1826 
	`sx1302_¨b_£t_debug_°©s
(
åue
, 
DR_LORA_SF7
);

1829 i‡(
·ime_c⁄ãxt
->
íabÀ
 =
Ál£
) {

1830 
	`¥ötf
("ARB: dual demodulation disabled foráll SF\n");

1831 
	`sx1302_¨b_debug_wrôe
(3, 0x00);

1833 i‡(
·ime_c⁄ãxt
->
mode
 =
LGW_FTIME_MODE_ALL_SF
) {

1834 
	`¥ötf
("ARB: dual demodulationÉnabled foráll SF\n");

1835 
	`sx1302_¨b_debug_wrôe
(3, 0xFF);

1836 } i‡(
·ime_c⁄ãxt
->
mode
 =
LGW_FTIME_MODE_HIGH_CAPACITY
) {

1837 
	`¥ötf
("ARB: dual demodulationÉnabled for SF5 -> SF10\n");

1838 
	`sx1302_¨b_debug_wrôe
(3, 0x3F);

1840 
	`¥ötf
("ERROR: föêtime°am∞modêi†nŸ suµ‹ãd (%d)\n", 
·ime_c⁄ãxt
->
mode
);

1841  
LGW_REG_ERROR
;

1846 
	`sx1302_¨b_debug_wrôe
(2, 3);

1849 
	`sx1302_¨b_debug_wrôe
(1, 1);

1852 
	`sx1302_¨b_waô_°©us
(0x00);

1854 
	`DEBUG_MSG
("ARB: started\n");

1856  
LGW_REG_SUCCESS
;

1857 
	}
}

1861 
	$sx1302_„tch
(
uöt8_t
 * 
nb_pkt
) {

1862 
îr
;

1863 
timevÆ
 
tm
;

1866 
	`_mós_time_°¨t
(&
tm
);

1869 i‡(
rx_buf„r
.
buf„r_pkt_nb
 == 0) {

1871 
îr
 = 
	`rx_buf„r_√w
(&
rx_buf„r
);

1872 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1873 
	`¥ötf
("ERROR: FailedÅo initialize RX buffer\n");

1874  
LGW_REG_ERROR
;

1878 
îr
 = 
	`rx_buf„r_„tch
(&
rx_buf„r
);

1879 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1880 
	`¥ötf
("ERROR: FailedÅo fetch RX buffer\n");

1881  
LGW_REG_ERROR
;

1884 
	`¥ötf
("NŸe:Ñemaöög %uÖackë†ö RX buf„r, dÿnŸ fëch sx1302 yë...\n", 
rx_buf„r
.
buf„r_pkt_nb
);

1888 *
nb_pkt
 = 
rx_buf„r
.
buf„r_pkt_nb
;

1890 
	`_mós_time_°›
(2, 
tm
, 
__FUNCTION__
);

1892  
LGW_REG_SUCCESS
;

1893 
	}
}

1897 
	$sx1302_∑r£
(
lgw_c⁄ãxt_t
 * 
c⁄ãxt
, 
lgw_pkt_rx_s
 * 
p
) {

1898 
îr
;

1899 
ifmod
;

1900 
öt32_t
 
if_‰eq_hz
;

1901 
öt32_t
 
if_‰eq_îr‹
;

1902 
pkt_‰eq_îr‹
;

1903 
uöt16_t
 
∑ylﬂd_¸c16_ˇlc
;

1904 
uöt8_t
 
¸
;

1905 
öt32_t
 
time°amp_c‹ª˘i⁄
;

1906 
rx_∑ckë_t
 
pkt
;

1907 
timevÆ
 
tm
;

1910 
	`_mós_time_°¨t
(&
tm
);

1913 
	`CHECK_NULL
(
c⁄ãxt
);

1914 
	`CHECK_NULL
(
p
);

1920 
	`sx1302_¨b_¥öt_debug_°©s
();

1924 
îr
 = 
	`rx_buf„r_p›
(&
rx_buf„r
, &
pkt
);

1925 i‡(
îr
 =
LGW_REG_WARNING
) {

1926 
	`rx_buf„r_dñ
(&
rx_buf„r
);

1927  
îr
;

1928 } i‡(
îr
 =
LGW_REG_ERROR
) {

1929  
îr
;

1933 
	`mem˝y
((*)
p
->
∑ylﬂd
, (*)(&(
pkt
.∑ylﬂd)),Ökt.
rxbyãnb_modem
);

1934 
p
->
size
 = 
pkt
.
rxbyãnb_modem
;

1937 
p
->
modem_id
 = 
pkt
.modem_id;

1938 
p
->
if_chaö
 = 
pkt
.
rx_ch™√l_ö
;

1939 i‡(
p
->
if_chaö
 >
LGW_IF_CHAIN_NB
) {

1940 
	`DEBUG_PRINTF
("WARNING: %u NOT A VALID IF_CHAIN NUMBER, ABORTING\n", 
p
->
if_chaö
);

1941  
LGW_REG_ERROR
;

1943 
ifmod
 = 
ifmod_c⁄fig
[
p
->
if_chaö
];

1944 
	`DEBUG_PRINTF
("[%d 0x%02X]\n", 
p
->
if_chaö
, 
ifmod
);

1946 
p
->
rf_chaö
 = (
uöt8_t
)
c⁄ãxt
->
if_chaö_cfg
[p->
if_chaö
].rf_chain;

1949 
p
->
‰eq_hz
 = (
uöt32_t
)((
öt32_t
)
c⁄ãxt
->
rf_chaö_cfg
[p->
rf_chaö
].‰eq_hz + c⁄ãxt->
if_chaö_cfg
[p->
if_chaö
].freq_hz);

1952 
p
->
rssic
 = ()(
pkt
.
rssi_ch™_avg
);

1953 
p
->
rssis
 = ()(
pkt
.
rssi_sig«l_avg
);

1956 i‡((
ifmod
 =
IF_LORA_MULTI
Ë|| (ifmod =
IF_LORA_STD
)) {

1957 
	`DEBUG_PRINTF
("NŸe: LoR®∑ckë (modem %u ch™ %u)\n", 
p
->
modem_id
,Ö->
if_chaö
);

1958 
p
->
moduœti⁄
 = 
MOD_LORA
;

1961 i‡(
pkt
.
¸c_í
 || ((
ifmod
 =
IF_LORA_STD
Ë&& (
c⁄ãxt
->
l‹a_£rvi˚_cfg
.
im∂icô_¸c_í
 =
åue
))) {

1963 i‡(
pkt
.
∑ylﬂd_¸c_îr‹
) {

1964 
p
->
°©us
 = 
STAT_CRC_BAD
;

1966 
p
->
°©us
 = 
STAT_CRC_OK
;

1969 i‡(
p
->
size
 > 0) {

1970 
∑ylﬂd_¸c16_ˇlc
 = 
	`sx1302_l‹a_∑ylﬂd_¸c
(
p
->
∑ylﬂd
,Ö->
size
);

1971 i‡(
∑ylﬂd_¸c16_ˇlc
 !
pkt
.
rx_¸c16_vÆue
) {

1972 
	`¥ötf
("ERROR: Paylﬂd CRC16 check faûed (gŸ:0x%04X cÆc:0x%04X)\n", 
pkt
.
rx_¸c16_vÆue
, 
∑ylﬂd_¸c16_ˇlc
);

1973 i‡(
log_fûe
 !
NULL
) {

1974 
	`Ârötf
(
log_fûe
, "ERROR: Paylﬂd CRC16 check faûed (gŸ:0x%04X cÆc:0x%04X)\n", 
pkt
.
rx_¸c16_vÆue
, 
∑ylﬂd_¸c16_ˇlc
);

1975 
	`dbg_log_buf„r_to_fûe
(
log_fûe
, 
rx_buf„r
.
buf„r
,Ñx_buf„r.
buf„r_size
);

1977  
LGW_REG_ERROR
;

1979 
	`DEBUG_PRINTF
("Paylﬂd CRC check OK (0x%04X)\n", 
pkt
.
rx_¸c16_vÆue
);

1985 
p
->
°©us
 = 
STAT_NO_CRC
;

1989 
i
;

1991 i‡(
p
->
°©us
 =
STAT_CRC_OK
 ||Ö->°©u†=
STAT_NO_CRC
) {

1997 
ªs
;

1998 
i
 = 0; i < 
c⁄ãxt
->
debug_cfg
.
nb_ªf_∑ylﬂd
; i++) {

1999 
ªs
 = 
	`dbg_check_∑ylﬂd
(&(
c⁄ãxt
->
debug_cfg
), 
log_fûe
, 
p
->
∑ylﬂd
,Ö->
size
, 
i
, 
pkt
.
rx_øã_sf
);

2000 i‡(
ªs
 == -1) {

2001 
	`¥ötf
("ERROR: 0x%08XÖaylﬂdÉº‹\n", 
c⁄ãxt
->
debug_cfg
.
ªf_∑ylﬂd
[
i
].
id
);

2002 i‡(
log_fûe
 !
NULL
) {

2003 
	`Ârötf
(
log_fûe
, "ERROR: 0x%08XÖaylﬂdÉº‹\n", 
c⁄ãxt
->
debug_cfg
.
ªf_∑ylﬂd
[
i
].
id
);

2004 
	`dbg_log_buf„r_to_fûe
(
log_fûe
, 
rx_buf„r
.
buf„r
,Ñx_buf„r.
buf„r_size
);

2005 
	`dbg_log_∑ylﬂd_diff_to_fûe
(
log_fûe
, 
p
->
∑ylﬂd
, 
c⁄ãxt
->
debug_cfg
.
ªf_∑ylﬂd
[
i
].∑ylﬂd,Ö->
size
);

2007  
LGW_REG_ERROR
;

2008 } i‡(
ªs
 == 1) {

2009 
	`DEBUG_PRINTF
("0x%08XÖaylﬂd m©ches\n", 
c⁄ãxt
->
debug_cfg
.
ªf_∑ylﬂd
[
i
].
id
);

2018 
p
->
¢r
 = ()(
pkt
.
¢r_avîage
) / 4;

2021 i‡(
ifmod
 =
IF_LORA_MULTI
) {

2022 
p
->
b™dwidth
 = 
BW_125KHZ
;

2024 
p
->
b™dwidth
 = 
c⁄ãxt
->
l‹a_£rvi˚_cfg
.bandwidth;

2028 
pkt
.
rx_øã_sf
) {

2029 5: 
p
->
d©¨©e
 = 
DR_LORA_SF5
; ;

2030 6: 
p
->
d©¨©e
 = 
DR_LORA_SF6
; ;

2031 7: 
p
->
d©¨©e
 = 
DR_LORA_SF7
; ;

2032 8: 
p
->
d©¨©e
 = 
DR_LORA_SF8
; ;

2033 9: 
p
->
d©¨©e
 = 
DR_LORA_SF9
; ;

2034 10: 
p
->
d©¨©e
 = 
DR_LORA_SF10
; ;

2035 11: 
p
->
d©¨©e
 = 
DR_LORA_SF11
; ;

2036 12: 
p
->
d©¨©e
 = 
DR_LORA_SF12
; ;

2037 : 
p
->
d©¨©e
 = 
DR_UNDEFINED
;

2041 i‡((
ifmod
 =
IF_LORA_MULTI
Ë|| (
c⁄ãxt
->
l‹a_£rvi˚_cfg
.
im∂icô_hdr
 =
Ál£
)) {

2042 
¸
 = 
pkt
.
codög_øã
;

2044 
¸
 = 
c⁄ãxt
->
l‹a_£rvi˚_cfg
.
im∂icô_codî©e
;

2046 
¸
) {

2047 1: 
p
->
codî©e
 = 
CR_LORA_4_5
; ;

2048 2: 
p
->
codî©e
 = 
CR_LORA_4_6
; ;

2049 3: 
p
->
codî©e
 = 
CR_LORA_4_7
; ;

2050 4: 
p
->
codî©e
 = 
CR_LORA_4_8
; ;

2051 : 
p
->
codî©e
 = 
CR_UNDEFINED
;

2055 
p
->
b™dwidth
) {

2056 
BW_125KHZ
:

2057 
p
->
‰eq_off£t
 = (
öt32_t
)(()(
pkt
.
‰equícy_off£t_îr‹
Ë* 
FREQ_OFFSET_LSB_125KHZ
);

2059 
BW_250KHZ
:

2060 
p
->
‰eq_off£t
 = (
öt32_t
)(()(
pkt
.
‰equícy_off£t_îr‹
Ë* 
FREQ_OFFSET_LSB_250KHZ
);

2062 
BW_500KHZ
:

2063 
p
->
‰eq_off£t
 = (
öt32_t
)(()(
pkt
.
‰equícy_off£t_îr‹
Ë* 
FREQ_OFFSET_LSB_500KHZ
);

2066 
p
->
‰eq_off£t
 = 0;

2067 
	`¥ötf
("Invalid frequency offset\n");

2075 
if_‰eq_hz
 = 
c⁄ãxt
->
if_chaö_cfg
[
p
->
if_chaö
].
‰eq_hz
;

2076 
if_‰eq_îr‹
 = 
if_‰eq_hz
 - (
	`IF_HZ_TO_REG
(if_freq_hz) * 15625 / 32);

2083 
p
->
‰eq_off£t
 +
if_‰eq_îr‹
;

2086 
time°amp_c‹ª˘i⁄
 = 
	`time°amp_cou¡î_c‹ª˘i⁄
(
c⁄ãxt
, 
p
->
b™dwidth
,Ö->
d©¨©e
,Ö->
codî©e
, 
pkt
.
¸c_í
,Ökt.
rxbyãnb_modem
, 
RX_DFT_PEAK_MODE_AUTO
);

2089 
p
->
·ime_ª˚ived
 = 
Ál£
;

2090 
p
->
·ime
 = 0;

2091 i‡((
pkt
.
num_ts_mërics_°‹ed
 > 0Ë&& (pkt.
timög_£t
 =
åue
Ë&& (
p
->
°©us
 =
STAT_CRC_OK
)) {

2093 
pkt_‰eq_îr‹
 = (()(
p
->
‰eq_hz
 +Ö->
‰eq_off£t
) / ()(p->freq_hz)) - 1.0;

2096 
îr
 = 
	`¥eci£_time°amp_ˇlcuœã
(
pkt
.
num_ts_mërics_°‹ed
, &pkt.
time°amp_avg
[0],Ökt.
time°amp_˙t
,Ökt.
rx_øã_sf
, 
c⁄ãxt
->
if_chaö_cfg
[
p
->
if_chaö
].
‰eq_hz
, 
pkt_‰eq_îr‹
, &’->
·ime
));

2097 i‡(
îr
 == 0) {

2098 
p
->
·ime_ª˚ived
 = 
åue
;

2101 } i‡(
ifmod
 =
IF_FSK_STD
) {

2102 
	`DEBUG_PRINTF
("NŸe: FSKÖackë (modem %u ch™ %u)\n", 
pkt
.
modem_id
, 
p
->
if_chaö
);

2103 
p
->
moduœti⁄
 = 
MOD_FSK
;

2106 i‡(
pkt
.
¸c_í
) {

2108 i‡(
pkt
.
∑ylﬂd_¸c_îr‹
) {

2109 
	`¥ötf
("FSK: CRC ERR\n");

2110 
p
->
°©us
 = 
STAT_CRC_BAD
;

2112 
	`¥ötf
("FSK: CRC OK\n");

2113 
p
->
°©us
 = 
STAT_CRC_OK
;

2117 
p
->
°©us
 = 
STAT_NO_CRC
;

2121 
p
->
b™dwidth
 = 
c⁄ãxt
->
fsk_cfg
.bandwidth;

2122 
p
->
d©¨©e
 = 
c⁄ãxt
->
fsk_cfg
.datarate;

2125 
time°amp_c‹ª˘i⁄
 = ((
uöt32_t
)680000 / 
c⁄ãxt
->
fsk_cfg
.
d©¨©e
) - 20;

2128 
p
->
rssic
 = 
RSSI_FSK_POLY_0
 + 
RSSI_FSK_POLY_1
 *Ö->rssi¯+ 
RSSI_FSK_POLY_2
 * 
	`pow
’->rssic, 2Ë+ 
RSSI_FSK_POLY_3
 *Öow(p->rssic, 3);

2131 
p
->
codî©e
 = 
CR_UNDEFINED
;

2132 
p
->
¢r
 = -128.0;

2133 
p
->
rssis
 = -128.0;

2135 
	`DEBUG_MSG
("ERROR: UNEXPECTED PACKET ORIGIN\n");

2136 
p
->
°©us
 = 
STAT_UNDEFINED
;

2137 
p
->
moduœti⁄
 = 
MOD_UNDEFINED
;

2138 
p
->
rssic
 = -128.0;

2139 
p
->
rssis
 = -128.0;

2140 
p
->
¢r
 = -128.0;

2141 
p
->
¢r_mö
 = -128.0;

2142 
p
->
¢r_max
 = -128.0;

2143 
p
->
b™dwidth
 = 
BW_UNDEFINED
;

2144 
p
->
d©¨©e
 = 
DR_UNDEFINED
;

2145 
p
->
codî©e
 = 
CR_UNDEFINED
;

2146 
time°amp_c‹ª˘i⁄
 = 0;

2150 
p
->
cou¡_us
 = 
pkt
.
time°amp_˙t
 / 32;

2153 
p
->
cou¡_us
 = 
	`time°amp_pkt_ex∑nd
(&
cou¡î_us
,Ö->count_us);

2158 
uöt32_t
 
œ°_vÆid
 = 0;

2159 
uöt32_t
 
œ°_us32
 = 0;

2160 
uöt32_t
 
œ°_pkt_num
;

2161 
öt32_t
 
diff
 = 
p
->
cou¡_us
 - 
œ°_us32
;

2162 
uöt32_t
 
pkt_num
 = (
p
->
∑ylﬂd
[4] << 24) | (p->payload[5] << 16) | (p->payload[6] << 8) | (p->payload[7] << 0);

2164 
	`¥ötf
("XXXXXXXXXXXXXXXX in° -Ñef=%u wøp=%u\n", 
cou¡î_us
.
ö°
.
cou¡î_us_27bôs_ªf
, cou¡î_us.ö°.
cou¡î_us_27bôs_wøp
);

2165 
	`¥ötf
("XXXXXXXXXXXXXXXXÖp† -Ñef=%u wøp=%u\n", 
cou¡î_us
.
µs
.
cou¡î_us_27bôs_ªf
, cou¡î_us.µs.
cou¡î_us_27bôs_wøp
);

2166 
	`¥ötf
("XXXXXXXXXXXXXXXXÖkt=%u (%uËœ°=%u diff=%d\n", 
p
->
cou¡_us
, 
pkt
.
time°amp_˙t
 / 32, 
œ°_us32
, 
diff
);

2167 
	`¥ötf
("XXXXXXXXXXXXXXXXÖkànum=%u\n", 
pkt_num
);

2168 i‡(
œ°_vÆid
 && (
diff
 > 30000000Ë&& (
pkt_num
 =(
œ°_pkt_num
 + 1))) {

2169 
	`¥ötf
("XXXXXXXXXXXXXXXX ERROR jumpáhead count_us\n");

2170 
	`exô
(1);

2172 
œ°_us32
 = 
p
->
cou¡_us
;

2173 
œ°_pkt_num
 = 
pkt_num
;

2174 
œ°_vÆid
 = 1;

2179 
p
->
cou¡_us
 =Ö->cou¡_u†+ 
time°amp_c‹ª˘i⁄
;

2182 
p
->
¸c
 = 
pkt
.
rx_¸c16_vÆue
;

2184 
	`_mós_time_°›
(2, 
tm
, 
__FUNCTION__
);

2186  
LGW_REG_SUCCESS
;

2187 
	}
}

2191 
uöt16_t
 
	$sx1302_l‹a_∑ylﬂd_¸c
(c⁄° 
uöt8_t
 * 
d©a
, uöt8_à
size
) {

2192 
i
;

2193 
¸c
 = 0;

2195 
i
 = 0; i < 
size
; i++) {

2196 
	`l‹a_¸c16
(
d©a
[
i
], &
¸c
);

2200  (
uöt16_t
)
¸c
;

2201 
	}
}

2205 
	$sx1302_tx_£t_°¨t_dñay
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ødio_ty≥
, uöt8_à
moduœti⁄
, uöt8_à
b™dwidth
, uöt8_à
chúp_low∑ss
, 
uöt16_t
 * 
dñay
) {

2206 
îr
;

2207 
uöt16_t
 
tx_°¨t_dñay
 = 
TX_START_DELAY_DEFAULT
 * 32;

2208 
uöt16_t
 
ødio_bw_dñay
 = 0;

2209 
uöt16_t
 
fûãr_dñay
 = 0;

2210 
uöt16_t
 
modem_dñay
 = 0;

2211 
öt32_t
 
bw_hz
 = 
	`lgw_bw_gëvÆ
(
b™dwidth
);

2212 
uöt8_t
 
buff
[2];

2214 
	`CHECK_NULL
(
dñay
);

2217 i‡(
moduœti⁄
 !
MOD_LORA
) {

2218 *
dñay
 = 0;

2219  
LGW_REG_SUCCESS
;

2223 
ødio_ty≥
) {

2224 
LGW_RADIO_TYPE_SX1250
:

2225 i‡(
b™dwidth
 =
BW_125KHZ
) {

2226 
ødio_bw_dñay
 = 19;

2227 } i‡(
b™dwidth
 =
BW_250KHZ
) {

2228 
ødio_bw_dñay
 = 24;

2229 } i‡(
b™dwidth
 =
BW_500KHZ
) {

2230 
ødio_bw_dñay
 = 21;

2232 
	`DEBUG_MSG
("ERROR: bandwidthÇot supported\n");

2233  
LGW_REG_ERROR
;

2236 
LGW_RADIO_TYPE_SX1255
:

2237 
LGW_RADIO_TYPE_SX1257
:

2238 
ødio_bw_dñay
 = 3*32 + 4;

2239 i‡(
b™dwidth
 =
BW_125KHZ
) {

2240 
ødio_bw_dñay
 += 0;

2241 } i‡(
b™dwidth
 =
BW_250KHZ
) {

2242 
ødio_bw_dñay
 += 6;

2243 } i‡(
b™dwidth
 =
BW_500KHZ
) {

2244 
ødio_bw_dñay
 += 0;

2246 
	`DEBUG_MSG
("ERROR: bandwidthÇot supported\n");

2247  
LGW_REG_ERROR
;

2251 
	`DEBUG_MSG
("ERROR:ÑadioÅypeÇot supported\n");

2252  
LGW_REG_ERROR
;

2256 
fûãr_dñay
 = ((1 << 
chúp_low∑ss
Ë- 1Ë* 1e6 / 
bw_hz
;

2257 
modem_dñay
 = 8 * (32e6 / (32 * 
bw_hz
));

2260 
tx_°¨t_dñay
 -(
ødio_bw_dñay
 + 
fûãr_dñay
 + 
modem_dñay
);

2262 
	`DEBUG_PRINTF
("INFO:Åx_°¨t_dñay=%u (%u,Ñadio_bw_dñay=%u, fûãr_dñay=%u, modem_dñay=%u)\n", (
uöt16_t
)
tx_°¨t_dñay
, 
TX_START_DELAY_DEFAULT
*32, 
ødio_bw_dñay
, 
fûãr_dñay
, 
modem_dñay
);

2264 
buff
[0] = (
uöt8_t
)(
tx_°¨t_dñay
 >> 8);

2265 
buff
[1] = (
uöt8_t
)(
tx_°¨t_dñay
 >> 0);

2266 
îr
 = 
	`lgw_ªg_wb
(
	`SX1302_REG_TX_TOP_TX_START_DELAY_MSB_TX_START_DELAY
(
rf_chaö
), 
buff
, 2);

2267 
	`CHECK_ERR
(
îr
);

2270 *
dñay
 = 
tx_°¨t_dñay
;

2272  
LGW_REG_SUCCESS
;

2273 
	}
}

2277 
	$sx1302_rssi_gë_ãm≥øtuª_off£t
(
lgw_rssi_tcomp_s
 * 
c⁄ãxt
, 
ãm≥øtuª
) {

2279 
	`CHECK_NULL
(
c⁄ãxt
);

2281 
	`DEBUG_MSG
 ("INFO: RSSIÅemperature compensation:\n");

2282 
	`DEBUG_PRINTF
(" c€ff_a: %.3f\n", 
c⁄ãxt
->
c€ff_a
);

2283 
	`DEBUG_PRINTF
(" c€ff_b: %.3f\n", 
c⁄ãxt
->
c€ff_b
);

2284 
	`DEBUG_PRINTF
(" c€ff_c: %.3f\n", 
c⁄ãxt
->
c€ff_c
);

2285 
	`DEBUG_PRINTF
(" c€ff_d: %.3f\n", 
c⁄ãxt
->
c€ff_d
);

2286 
	`DEBUG_PRINTF
(" c€ff_e: %.3f\n", 
c⁄ãxt
->
c€ff_e
);

2289  ((
c⁄ãxt
->
c€ff_a
 * 
	`pow
(
ãm≥øtuª
, 4)) +

2290 (
c⁄ãxt
->
c€ff_b
 * 
	`pow
(
ãm≥øtuª
, 3)) +

2291 (
c⁄ãxt
->
c€ff_c
 * 
	`pow
(
ãm≥øtuª
, 2)) +

2292 (
c⁄ãxt
->
c€ff_d
 * 
ãm≥øtuª
Ë+ c⁄ãxt->
c€ff_e
Ë/ 
	`pow
(2, 16);

2293 
	}
}

2297 
uöt8_t
 
	$sx1302_tx_°©us
(
uöt8_t
 
rf_chaö
) {

2298 
îr
;

2299 
öt32_t
 
ªad_vÆue
;

2301 
îr
 = 
	`lgw_ªg_r
(
	`SX1302_REG_TX_TOP_TX_FSM_STATUS_TX_STATUS
(
rf_chaö
), &
ªad_vÆue
);

2302 i‡(
îr
 !
LGW_REG_SUCCESS
) {

2303 
	`¥ötf
("ERROR: FailedÅoÑead TX STATUS\n");

2304  
TX_STATUS_UNKNOWN
;

2307 i‡(
ªad_vÆue
 == 0x80) {

2308  
TX_FREE
;

2309 } i‡((
ªad_vÆue
 == 0x30) || (read_value == 0x50) || (read_value == 0x60) || (read_value == 0x70)) {

2310  
TX_EMITTING
;

2311 } i‡((
ªad_vÆue
 == 0x91) || (read_value == 0x92)) {

2312  
TX_SCHEDULED
;

2314 
	`¥ötf
("ERROR: UNKNOWN TX STATUS 0x%02X\n", 
ªad_vÆue
);

2315  
TX_STATUS_UNKNOWN
;

2317 
	}
}

2321 
uöt8_t
 
	$sx1302_rx_°©us
(
uöt8_t
 
rf_chaö
) {

2322 i‡(
rf_chaö
) {};

2324  
RX_STATUS_UNKNOWN
;

2325 
	}
}

2329 
	$sx1302_tx_ab‹t
(
uöt8_t
 
rf_chaö
) {

2330 
îr
;

2331 
uöt8_t
 
tx_°©us
 = 
TX_STATUS_UNKNOWN
;

2332 
timevÆ
 
tm_°¨t
;

2334 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_IMMEDIATE
(
rf_chaö
), 0x00);

2335 
îr
 |
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_DELAYED
(
rf_chaö
), 0x00);

2336 
îr
 |
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_GPS
(
rf_chaö
), 0x00);

2337 i‡(
îr
 !
LGW_REG_SUCCESS
) {

2338 
	`¥ötf
("ERROR: FailedÅo stop TXÅrigger\n");

2339  
îr
;

2342 
	`timeout_°¨t
(&
tm_°¨t
);

2345 i‡(
	`timeout_check
(
tm_°¨t
, 1000) != 0) {

2346 
	`¥ötf
("ERROR: %s: TIMEOUT o¿TXáb‹t\n", 
__FUNCTION__
);

2347  
LGW_REG_ERROR
;

2351 
tx_°©us
 = 
	`sx1302_tx_°©us
(
rf_chaö
);

2352 
	`waô_ms
(1);

2353 } 
tx_°©us
 !
TX_FREE
);

2355  
LGW_REG_SUCCESS
;

2356 
	}
}

2360 
	$sx1302_tx_c⁄figuª
(
lgw_ødio_ty≥_t
 
ødio_ty≥
) {

2361 
îr
 = 
LGW_REG_SUCCESS
;

2364 
ødio_ty≥
) {

2365 
LGW_RADIO_TYPE_SX1250
:

2367 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
, 1);

2368 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
, 1);

2371 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
, 0x01);

2372 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
, 0x01);

2374 
LGW_RADIO_TYPE_SX1255
:

2375 
LGW_RADIO_TYPE_SX1257
:

2377 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
, 0x00);

2378 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
, 0x00);

2381 
	`DEBUG_MSG
("ERROR:ÑadioÅypeÇot supported\n");

2382  
LGW_REG_ERROR
;

2386 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
, 0x01);

2387 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
, 0x01);

2390 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_CLK_EDGE
, 0x00);

2391 
îr
 |
	`lgw_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_CLK_EDGE
, 0x00);

2393  
îr
;

2394 
	}
}

2398 
	$sx1302_£nd
(
lgw_ødio_ty≥_t
 
ødio_ty≥
, 
lgw_tx_gaö_lut_s
 * 
tx_lut
, 
boﬁ
 
lw™_public
, 
lgw_c⁄f_rxif_s
 * 
c⁄ãxt_fsk
, 
lgw_pkt_tx_s
 * 
pkt_d©a
) {

2399 
îr
;

2400 
uöt32_t
 
‰eq_ªg
, 
fdev_ªg
;

2401 
uöt32_t
 
‰eq_dev
;

2402 
uöt32_t
 
fsk_br_ªg
;

2403 
uöt64_t
 
fsk_sync_w‹d_ªg
;

2404 
uöt16_t
 
mem_addr
;

2405 
uöt32_t
 
cou¡_us
;

2406 
uöt8_t
 
powî
;

2407 
uöt8_t
 
pow_ödex
;

2408 
uöt8_t
 
mod_bw
;

2409 
uöt8_t
 
∑_í
;

2410 
uöt16_t
 
tx_°¨t_dñay
;

2411 
uöt8_t
 
chúp_low∑ss
 = 0;

2412 
uöt8_t
 
buff
[2];

2414 
timevÆ
 
tm
;

2417 
	`_mós_time_°¨t
(&
tm
);

2420 
	`CHECK_NULL
(
tx_lut
);

2421 
	`CHECK_NULL
(
pkt_d©a
);

2424 
îr
 = 
	`lgw_com_£t_wrôe_mode
(
LGW_COM_WRITE_MODE_BULK
);

2425 
	`CHECK_ERR
(
îr
);

2428 
pkt_d©a
->
moduœti⁄
) {

2429 
MOD_CW
:

2430 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_GEN_CFG_0_MODULATION_TYPE
(
pkt_d©a
->
rf_chaö
), 0x00);

2431 
	`CHECK_ERR
(
îr
);

2432 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_SRC
(
pkt_d©a
->
rf_chaö
), 0x00);

2433 
	`CHECK_ERR
(
îr
);

2435 
MOD_LORA
:

2436 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_GEN_CFG_0_MODULATION_TYPE
(
pkt_d©a
->
rf_chaö
), 0x00);

2437 
	`CHECK_ERR
(
îr
);

2438 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_SRC
(
pkt_d©a
->
rf_chaö
), 0x01);

2439 
	`CHECK_ERR
(
îr
);

2441 
MOD_FSK
:

2442 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_GEN_CFG_0_MODULATION_TYPE
(
pkt_d©a
->
rf_chaö
), 0x01);

2443 
	`CHECK_ERR
(
îr
);

2444 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_SRC
(
pkt_d©a
->
rf_chaö
), 0x02);

2445 
	`CHECK_ERR
(
îr
);

2448 
	`DEBUG_MSG
("ERROR: modulationÅypeÇot supported\n");

2449  
LGW_REG_ERROR
;

2453 
pow_ödex
 = 
tx_lut
->
size
-1;Öow_index > 0;Öow_index--) {

2454 i‡(
tx_lut
->
lut
[
pow_ödex
].
rf_powî
 <
pkt_d©a
->rf_power) {

2458 
	`DEBUG_PRINTF
("INFO: sñe˘ög TX Gaö LUT index %u\n", 
pow_ödex
);

2461 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_I_OFFSET_I_OFFSET
(
pkt_d©a
->
rf_chaö
), 
tx_lut
->
lut
[
pow_ödex
].
off£t_i
);

2462 
	`CHECK_ERR
(
îr
);

2463 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
(
pkt_d©a
->
rf_chaö
), 
tx_lut
->
lut
[
pow_ödex
].
off£t_q
);

2464 
	`CHECK_ERR
(
îr
);

2466 
	`DEBUG_PRINTF
("INFO: Aµlyög IQ off£à(i:%d, q:%d)\n", 
tx_lut
->
lut
[
pow_ödex
].
off£t_i
,Åx_lut->lut[pow_ödex].
off£t_q
);

2469 
ødio_ty≥
) {

2470 
LGW_RADIO_TYPE_SX1250
:

2471 
∑_í
 = (
tx_lut
->
lut
[
pow_ödex
].
∑_gaö
 > 0) ? 1 : 0;

2472 
powî
 = (
∑_í
 << 6Ë| 
tx_lut
->
lut
[
pow_ödex
].
pwr_idx
;

2474 
LGW_RADIO_TYPE_SX1255
:

2475 
LGW_RADIO_TYPE_SX1257
:

2476 
powî
 = (
tx_lut
->
lut
[
pow_ödex
].
∑_gaö
 << 6Ë| (tx_lut->lut[pow_ödex].
dac_gaö
 << 4Ë|Åx_lut->lut[pow_ödex].
mix_gaö
;

2479 
	`DEBUG_MSG
("ERROR:ÑadioÅypeÇot supported\n");

2480  
LGW_REG_ERROR
;

2482 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_AGC_TX_PWR_AGC_TX_PWR
(
pkt_d©a
->
rf_chaö
), 
powî
);

2483 
	`CHECK_ERR
(
îr
);

2486 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
(
pkt_d©a
->
rf_chaö
), 
tx_lut
->
lut
[
pow_ödex
].
dig_gaö
);

2487 
	`CHECK_ERR
(
îr
);

2490 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_SX1255
) {

2491 
‰eq_ªg
 = 
	`SX1302_FREQ_TO_REG
(
pkt_d©a
->
‰eq_hz
 * 2);

2493 
‰eq_ªg
 = 
	`SX1302_FREQ_TO_REG
(
pkt_d©a
->
‰eq_hz
);

2495 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
(
pkt_d©a
->
rf_chaö
), (
‰eq_ªg
 >> 16) & 0xFF);

2496 
	`CHECK_ERR
(
îr
);

2497 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
(
pkt_d©a
->
rf_chaö
), (
‰eq_ªg
 >> 8) & 0xFF);

2498 
	`CHECK_ERR
(
îr
);

2499 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
(
pkt_d©a
->
rf_chaö
), (
‰eq_ªg
 >> 0) & 0xFF);

2500 
	`CHECK_ERR
(
îr
);

2503 
pkt_d©a
->
moduœti⁄
) {

2504 
MOD_LORA
:

2505 
mod_bw
 = 
pkt_d©a
->
b™dwidth
;

2507 
MOD_CW
:

2508 
MOD_FSK
:

2509 
mod_bw
 = (0x01 << 7Ë| 
pkt_d©a
->
b™dwidth
;

2512 
	`¥ötf
("ERROR: ModulationÇot supported\n");

2513  
LGW_REG_ERROR
;

2515 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_AGC_TX_BW_AGC_TX_BW
(
pkt_d©a
->
rf_chaö
), 
mod_bw
);

2516 
	`CHECK_ERR
(
îr
);

2519 
pkt_d©a
->
moduœti⁄
) {

2520 
MOD_CW
:

2522 
‰eq_dev
 = 
	`˚û
(
	`Ábs
–()
pkt_d©a
->
‰eq_off£t
 / 10) ) * 10e3;

2523 
	`¥ötf
("CW: f_dev %d Hz\n", ()(
‰eq_dev
));

2524 
fdev_ªg
 = 
	`SX1302_FREQ_TO_REG
(
‰eq_dev
);

2525 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 8) & 0xFF);

2526 
	`CHECK_ERR
(
îr
);

2527 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 0) & 0xFF);

2528 
	`CHECK_ERR
(
îr
);

2531 
fdev_ªg
 = 
	`SX1250_FREQ_TO_REG
(
‰eq_dev
);

2532 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE2_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 16) & 0xFF);

2533 
	`CHECK_ERR
(
îr
);

2534 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE1_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 8) & 0xFF);

2535 
	`CHECK_ERR
(
îr
);

2536 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 0) & 0xFF);

2537 
	`CHECK_ERR
(
îr
);

2540 
	`¥ötf
("CW: IFÅe° mod fªq %d\n", ()((()
pkt_d©a
->
‰eq_off£t
*1e3*64/()
‰eq_dev
)));

2541 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_TEST_MOD_FREQ
(
pkt_d©a
->
rf_chaö
), ()(((Ìkt_d©a->
‰eq_off£t
*1e3*64/()
‰eq_dev
)));

2542 
	`CHECK_ERR
(
îr
);

2544 
MOD_LORA
:

2546 
‰eq_dev
 = 
	`lgw_bw_gëvÆ
(
pkt_d©a
->
b™dwidth
) / 2;

2547 
fdev_ªg
 = 
	`SX1302_FREQ_TO_REG
(
‰eq_dev
);

2548 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 8) & 0xFF);

2549 
	`CHECK_ERR
(
îr
);

2550 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 0) & 0xFF);

2551 
	`CHECK_ERR
(
îr
);

2552 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_0_MODEM_BW
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
b™dwidth
);

2553 
	`CHECK_ERR
(
îr
);

2556 i‡(
pkt_d©a
->
¥ómbÀ
 == 0) {

2557 
pkt_d©a
->
¥ómbÀ
 = 
STD_LORA_PREAMBLE
;

2558 } i‡(
pkt_d©a
->
¥ómbÀ
 < 
MIN_LORA_PREAMBLE
) {

2559 
pkt_d©a
->
¥ómbÀ
 = 
MIN_LORA_PREAMBLE
;

2560 
	`DEBUG_MSG
("Note:ÖreambleÜengthádjustedÅoÑespect minimum LoRaÖreamble size\n");

2562 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG1_3_PREAMBLE_SYMB_NB
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
¥ómbÀ
 >> 8) & 0xFF);

2563 
	`CHECK_ERR
(
îr
);

2564 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG1_2_PREAMBLE_SYMB_NB
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
¥ómbÀ
 >> 0) & 0xFF);

2565 
	`CHECK_ERR
(
îr
);

2568 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_0_MODEM_SF
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
d©¨©e
);

2569 
	`CHECK_ERR
(
îr
);

2572 
chúp_low∑ss
 = (
pkt_d©a
->
d©¨©e
 < 10) ? 6 : 7;

2573 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_LOWPASS
(
pkt_d©a
->
rf_chaö
), (
öt32_t
)
chúp_low∑ss
);

2574 
	`CHECK_ERR
(
îr
);

2577 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_1_CODING_RATE
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
codî©e
);

2578 
	`CHECK_ERR
(
îr
);

2581 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_MODEM_EN
(
pkt_d©a
->
rf_chaö
), 1);

2582 
	`CHECK_ERR
(
îr
);

2583 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_CADRXTX
(
pkt_d©a
->
rf_chaö
), 2);

2584 
	`CHECK_ERR
(
îr
);

2585 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG1_1_MODEM_START
(
pkt_d©a
->
rf_chaö
), 1);

2586 
	`CHECK_ERR
(
îr
);

2587 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CFG0_0_CONTINUOUS
(
pkt_d©a
->
rf_chaö
), 0);

2588 
	`CHECK_ERR
(
îr
);

2591 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_INVERT
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
övît_pﬁ
) ? 1 : 0);

2592 
	`CHECK_ERR
(
îr
);

2593 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_IMPLICIT_HEADER
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
no_hódî
) ? 1 : 0);

2594 
	`CHECK_ERR
(
îr
);

2595 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_CRC_EN
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
no_¸c
) ? 0 : 1);

2596 
	`CHECK_ERR
(
îr
);

2599 i‡((
lw™_public
 =
Ál£
Ë|| (
pkt_d©a
->
d©¨©e
 =
DR_LORA_SF5
Ë|| (pkt_d©a->d©¨©ê=
DR_LORA_SF6
)) {

2600 
	`DEBUG_MSG
("Setting LoRa syncword 0x12\n");

2601 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FRAME_SYNCH_0_PEAK1_POS
(
pkt_d©a
->
rf_chaö
), 2);

2602 
	`CHECK_ERR
(
îr
);

2603 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FRAME_SYNCH_1_PEAK2_POS
(
pkt_d©a
->
rf_chaö
), 4);

2604 
	`CHECK_ERR
(
îr
);

2606 
	`DEBUG_MSG
("Setting LoRa syncword 0x34\n");

2607 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FRAME_SYNCH_0_PEAK1_POS
(
pkt_d©a
->
rf_chaö
), 6);

2608 
	`CHECK_ERR
(
îr
);

2609 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FRAME_SYNCH_1_PEAK2_POS
(
pkt_d©a
->
rf_chaö
), 8);

2610 
	`CHECK_ERR
(
îr
);

2614 i‡((
pkt_d©a
->
d©¨©e
 =
DR_LORA_SF5
Ë|| (pkt_d©a->d©¨©ê=
DR_LORA_SF6
)) {

2615 
	`DEBUG_MSG
("Enable Fine Sync\n");

2616 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_FINE_SYNCH_EN
(
pkt_d©a
->
rf_chaö
), 1);

2617 
	`CHECK_ERR
(
îr
);

2619 
	`DEBUG_MSG
("Disable Fine Sync\n");

2620 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_FINE_SYNCH_EN
(
pkt_d©a
->
rf_chaö
), 0);

2621 
	`CHECK_ERR
(
îr
);

2625 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_3_PAYLOAD_LENGTH
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
size
);

2626 
	`CHECK_ERR
(
îr
);

2629 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
(
pkt_d©a
->
rf_chaö
), 0);

2630 
	`CHECK_ERR
(
îr
);

2631 i‡(
	`SET_PPM_ON
(
pkt_d©a
->
b™dwidth
,Ökt_d©a->
d©¨©e
)) {

2632 
	`DEBUG_MSG
("Low datarate optimization ENABLED\n");

2633 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET
(
pkt_d©a
->
rf_chaö
), 1);

2634 
	`CHECK_ERR
(
îr
);

2636 
	`DEBUG_MSG
("Low datarate optimization DISABLED\n");

2637 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET
(
pkt_d©a
->
rf_chaö
), 0);

2638 
	`CHECK_ERR
(
îr
);

2641 
MOD_FSK
:

2642 
	`CHECK_NULL
(
c⁄ãxt_fsk
);

2645 
‰eq_dev
 = 
pkt_d©a
->
f_dev
 * 1e3;

2646 
fdev_ªg
 = 
	`SX1302_FREQ_TO_REG
(
‰eq_dev
);

2647 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 8) & 0xFF);

2648 
	`CHECK_ERR
(
îr
);

2649 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 0) & 0xFF);

2650 
	`CHECK_ERR
(
îr
);

2653 
fdev_ªg
 = 
	`SX1250_FREQ_TO_REG
(
‰eq_dev
);

2654 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE2_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 16) & 0xFF);

2655 
	`CHECK_ERR
(
îr
);

2656 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE1_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 8) & 0xFF);

2657 
	`CHECK_ERR
(
îr
);

2658 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 0) & 0xFF);

2659 
	`CHECK_ERR
(
îr
);

2662 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_CFG_0_PKT_MODE
(
pkt_d©a
->
rf_chaö
), 1);

2663 
	`CHECK_ERR
(
îr
);

2664 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_CFG_0_CRC_EN
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
no_¸c
) ? 0 : 1);

2665 
	`CHECK_ERR
(
îr
);

2666 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_CFG_0_CRC_IBM
(
pkt_d©a
->
rf_chaö
), 0);

2667 
	`CHECK_ERR
(
îr
);

2668 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_CFG_0_DCFREE_ENC
(
pkt_d©a
->
rf_chaö
), 2);

2669 
	`CHECK_ERR
(
îr
);

2670 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_GAUSSIAN_EN
(
pkt_d©a
->
rf_chaö
), 1);

2671 
	`CHECK_ERR
(
îr
);

2672 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
(
pkt_d©a
->
rf_chaö
), 2);

2673 
	`CHECK_ERR
(
îr
);

2674 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_REF_PATTERN_EN
(
pkt_d©a
->
rf_chaö
), 1);

2675 
	`CHECK_ERR
(
îr
);

2676 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_REF_PATTERN_SIZE
(
pkt_d©a
->
rf_chaö
), 
c⁄ãxt_fsk
->
sync_w‹d_size
 - 1);

2677 
	`CHECK_ERR
(
îr
);

2680 
fsk_sync_w‹d_ªg
 = 
c⁄ãxt_fsk
->
sync_w‹d
 << (8 * (8 - c⁄ãxt_fsk->
sync_w‹d_size
));

2681 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 0));

2682 
	`CHECK_ERR
(
îr
);

2683 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 8));

2684 
	`CHECK_ERR
(
îr
);

2685 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 16));

2686 
	`CHECK_ERR
(
îr
);

2687 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 24));

2688 
	`CHECK_ERR
(
îr
);

2689 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 32));

2690 
	`CHECK_ERR
(
îr
);

2691 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 40));

2692 
	`CHECK_ERR
(
îr
);

2693 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 48));

2694 
	`CHECK_ERR
(
îr
);

2695 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 56));

2696 
	`CHECK_ERR
(
îr
);

2697 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_PREAMBLE_SEQ
(
pkt_d©a
->
rf_chaö
), 0);

2698 
	`CHECK_ERR
(
îr
);

2701 
fsk_br_ªg
 = 32000000 / 
pkt_d©a
->
d©¨©e
;

2702 
buff
[0] = (
uöt8_t
)(
fsk_br_ªg
 >> 8);

2703 
buff
[1] = (
uöt8_t
)(
fsk_br_ªg
 >> 0);

2704 
îr
 = 
	`lgw_ªg_wb
(
	`SX1302_REG_TX_TOP_FSK_BIT_RATE_MSB_BIT_RATE
(
pkt_d©a
->
rf_chaö
), 
buff
, 2);

2705 
	`CHECK_ERR
(
îr
);

2708 i‡(
pkt_d©a
->
¥ómbÀ
 == 0) {

2709 
pkt_d©a
->
¥ómbÀ
 = 
STD_FSK_PREAMBLE
;

2710 } i‡(
pkt_d©a
->
¥ómbÀ
 < 
MIN_FSK_PREAMBLE
) {

2711 
pkt_d©a
->
¥ómbÀ
 = 
MIN_FSK_PREAMBLE
;

2712 
	`DEBUG_MSG
("Note:ÖreambleÜengthádjustedÅoÑespect minimum FSKÖreamble size\n");

2714 
buff
[0] = (
uöt8_t
)(
pkt_d©a
->
¥ómbÀ
 >> 8);

2715 
buff
[1] = (
uöt8_t
)(
pkt_d©a
->
¥ómbÀ
 >> 0);

2716 
îr
 = 
	`lgw_ªg_wb
(
	`SX1302_REG_TX_TOP_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
(
pkt_d©a
->
rf_chaö
), 
buff
, 2);

2717 
	`CHECK_ERR
(
îr
);

2720 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_PKT_LEN_PKT_LENGTH
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
size
);

2721 
	`CHECK_ERR
(
îr
);

2724 
	`¥ötf
("ERROR: ModulationÇot supported\n");

2725  
LGW_REG_ERROR
;

2729 
îr
 = 
	`sx1302_tx_£t_°¨t_dñay
(
pkt_d©a
->
rf_chaö
, 
ødio_ty≥
,Ökt_d©a->
moduœti⁄
,Ökt_d©a->
b™dwidth
, 
chúp_low∑ss
, &
tx_°¨t_dñay
);

2730 
	`CHECK_ERR
(
îr
);

2733 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CTRL_WRITE_BUFFER
(
pkt_d©a
->
rf_chaö
), 0x01);

2734 
	`CHECK_ERR
(
îr
);

2735 
mem_addr
 = 
	`REG_SELECT
(
pkt_d©a
->
rf_chaö
, 0x5300, 0x5500);

2736 i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_FSK
) {

2737 
îr
 = 
	`lgw_mem_wb
(
mem_addr
, (
uöt8_t
 *)(&(
pkt_d©a
->
size
)), 1);

2738 
	`CHECK_ERR
(
îr
);

2739 
îr
 = 
	`lgw_mem_wb
(
mem_addr
+1, &(
pkt_d©a
->
∑ylﬂd
[0]),Ökt_d©a->
size
);

2740 
	`CHECK_ERR
(
îr
);

2742 
îr
 = 
	`lgw_mem_wb
(
mem_addr
, &(
pkt_d©a
->
∑ylﬂd
[0]),Ökt_d©a->
size
);

2743 
	`CHECK_ERR
(
îr
);

2745 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CTRL_WRITE_BUFFER
(
pkt_d©a
->
rf_chaö
), 0x00);

2746 
	`CHECK_ERR
(
îr
);

2749 
	`DEBUG_PRINTF
("Sèπ Tx: Fªq:%u %s%u size:%uÖªamb:%u\n", 
pkt_d©a
->
‰eq_hz
, (pkt_d©a->
moduœti⁄
 =
MOD_LORA
Ë? "SF" : "DR:",Ökt_d©a->
d©¨©e
,Ökt_d©a->
size
,Ökt_d©a->
¥ómbÀ
);

2750 
pkt_d©a
->
tx_mode
) {

2751 
IMMEDIATE
:

2752 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_IMMEDIATE
(
pkt_d©a
->
rf_chaö
), 0x00);

2753 
	`CHECK_ERR
(
îr
);

2754 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_IMMEDIATE
(
pkt_d©a
->
rf_chaö
), 0x01);

2755 
	`CHECK_ERR
(
îr
);

2757 
TIMESTAMPED
:

2758 
cou¡_us
 = 
pkt_d©a
->cou¡_u†* 32 - 
tx_°¨t_dñay
;

2759 
	`DEBUG_PRINTF
("-->ÖrogømmögÅrig dñayáà%u (%u)\n", 
pkt_d©a
->
cou¡_us
 - (
tx_°¨t_dñay
 / 32), count_us);

2761 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)((
cou¡_us
 >> 0) & 0x000000FF));

2762 
	`CHECK_ERR
(
îr
);

2763 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)((
cou¡_us
 >> 8) & 0x000000FF));

2764 
	`CHECK_ERR
(
îr
);

2765 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)((
cou¡_us
 >> 16) & 0x000000FF));

2766 
	`CHECK_ERR
(
îr
);

2767 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)((
cou¡_us
 >> 24) & 0x000000FF));

2768 
	`CHECK_ERR
(
îr
);

2770 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_DELAYED
(
pkt_d©a
->
rf_chaö
), 0x00);

2771 
	`CHECK_ERR
(
îr
);

2772 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_DELAYED
(
pkt_d©a
->
rf_chaö
), 0x01);

2773 
	`CHECK_ERR
(
îr
);

2775 
ON_GPS
:

2776 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_GPS
(
pkt_d©a
->
rf_chaö
), 0x00);

2777 
	`CHECK_ERR
(
îr
);

2778 
îr
 = 
	`lgw_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_GPS
(
pkt_d©a
->
rf_chaö
), 0x01);

2779 
	`CHECK_ERR
(
îr
);

2782 
	`¥ötf
("ERROR: TX modeÇot supported\n");

2783  
LGW_REG_ERROR
;

2787 
îr
 = 
	`lgw_com_Êush
();

2788 
	`CHECK_ERR
(
îr
);

2791 
îr
 = 
	`lgw_com_£t_wrôe_mode
(
LGW_COM_WRITE_MODE_SINGLE
);

2792 
	`CHECK_ERR
(
îr
);

2795 
	`_mós_time_°›
(2, 
tm
, 
__FUNCTION__
);

2797  
LGW_REG_SUCCESS
;

2798 
	}
}

2802 
	$sx1302_£t_gpio
(
uöt8_t
 
gpio_ªg_vÆ
) {

2803 
îr
;

2805 
îr
 = 
	`lgw_ªg_w
(
SX1302_REG_GPIO_GPIO_OUT_L_OUT_VALUE
, 
gpio_ªg_vÆ
);

2806 
	`CHECK_ERR
(
îr
);

2808  
LGW_REG_SUCCESS
;

2809 
	}
}

2813 
	$sx1302_dc_nŸch_dñay
(
if_‰eq_khz
) {

2814 
dñay
;

2816 i‡((
if_‰eq_khz
 < -75.0) || (if_freq_khz > 75.0)) {

2817 
dñay
 = 0.0;

2819 
dñay
 = 1.7e-6 * 
	`pow
(
if_‰eq_khz
, 4) + 2.4e-6 *Öow(if_freq_khz, 3) - 0.0101 *Öow(if_freq_khz, 2) - 0.01275 * if_freq_khz + 10.2922;

2823  
dñay
;

2824 
	}
}

	@libloragw/src/loragw_sx1302_rx.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<as£π.h
>

24 
	~"l‹agw_aux.h
"

25 
	~"l‹agw_ªg.h
"

26 
	~"l‹agw_sx1302_rx.h
"

27 
	~"l‹agw_sx1302_time°amp.h
"

32 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

33 #i‡
DEBUG_SX1302
 == 1

34 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

35 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
, fmt,árgs)

	)

36 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

38 
	#DEBUG_MSG
(
°r
)

	)

39 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

40 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

43 
	#SX1302_PKT_PAYLOAD_LENGTH
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 2], 0, 8)

	)

44 
	#SX1302_PKT_CHANNEL
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 3], 0, 8)

	)

45 
	#SX1302_PKT_CRC_EN
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 4], 0, 1)

	)

46 
	#SX1302_PKT_CODING_RATE
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 4], 1, 3)

	)

47 
	#SX1302_PKT_DATARATE
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 4], 4, 4)

	)

48 
	#SX1302_PKT_MODEM_ID
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 5], 0, 8)

	)

49 
	#SX1302_PKT_FREQ_OFFSET_7_0
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 6], 0, 8)

	)

50 
	#SX1302_PKT_FREQ_OFFSET_15_8
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 7], 0, 8)

	)

51 
	#SX1302_PKT_FREQ_OFFSET_19_16
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 8], 0, 4)

	)

52 
	#SX1302_PKT_CRC_ERROR
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 9], 0, 1)

	)

53 
	#SX1302_PKT_SYNC_ERROR
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 9], 2, 1)

	)

54 
	#SX1302_PKT_HEADER_ERROR
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 9], 3, 1)

	)

55 
	#SX1302_PKT_TIMING_SET
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 9], 4, 1)

	)

56 
	#SX1302_PKT_SNR_AVG
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 10], 0, 8)

	)

57 
	#SX1302_PKT_RSSI_CHAN
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 11], 0, 8)

	)

58 
	#SX1302_PKT_RSSI_SIG
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 12], 0, 8)

	)

59 
	#SX1302_PKT_RSSI_CHAN_MAX_NEG_DELTA
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 13], 0, 4)

	)

60 
	#SX1302_PKT_RSSI_CHAN_MAX_POS_DELTA
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 13], 4, 4)

	)

61 
	#SX1302_PKT_RSSI_SIG_MAX_NEG_DELTA
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 14], 0, 4)

	)

62 
	#SX1302_PKT_RSSI_SIG_MAX_POS_DELTA
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 14], 4, 4)

	)

63 
	#SX1302_PKT_TIMESTAMP_7_0
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 15], 0, 8)

	)

64 
	#SX1302_PKT_TIMESTAMP_15_8
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 16], 0, 8)

	)

65 
	#SX1302_PKT_TIMESTAMP_23_16
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 17], 0, 8)

	)

66 
	#SX1302_PKT_TIMESTAMP_31_24
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 18], 0, 8)

	)

67 
	#SX1302_PKT_CRC_PAYLOAD_7_0
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 19], 0, 8)

	)

68 
	#SX1302_PKT_CRC_PAYLOAD_15_8
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 20], 0, 8)

	)

69 
	#SX1302_PKT_NUM_TS_METRICS
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 21], 0, 8)

	)

78 
	#SX1302_PKT_SYNCWORD_BYTE_0
 0xA5

	)

79 
	#SX1302_PKT_SYNCWORD_BYTE_1
 0xC0

	)

80 
	#SX1302_PKT_HEAD_METADATA
 9

	)

81 
	#SX1302_PKT_TAIL_METADATA
 14

	)

84 
	#SX1302_LORA_MODEM_ID_MAX
 15

	)

85 
	#SX1302_LORA_STD_MODEM_ID
 16

	)

86 
	#SX1302_FSK_MODEM_ID
 17

	)

100 
	$rx_buf„r_√w
(
rx_buf„r_t
 * 
£lf
) {

102 
	`CHECK_NULL
(
£lf
);

105 
	`mem£t
(
£lf
->
buf„r
, 0,  self->buffer);

106 
£lf
->
buf„r_size
 = 0;

107 
£lf
->
buf„r_ödex
 = 0;

108 
£lf
->
buf„r_pkt_nb
 = 0;

110  
LGW_REG_SUCCESS
;

111 
	}
}

115 
	$rx_buf„r_dñ
(
rx_buf„r_t
 * 
£lf
) {

117 
	`CHECK_NULL
(
£lf
);

120 
£lf
->
buf„r_size
 = 0;

121 
£lf
->
buf„r_ödex
 = 0;

122 
£lf
->
buf„r_pkt_nb
 = 0;

124  
LGW_REG_SUCCESS
;

125 
	}
}

129 
	$rx_buf„r_„tch
(
rx_buf„r_t
 * 
£lf
) {

130 
i
, 
ªs
;

131 
uöt8_t
 
buff
[2];

132 
uöt8_t
 
∑ylﬂd_Àn
;

133 
uöt16_t
 
√xt_pkt_idx
;

134 
idx
;

135 
uöt16_t
 
nb_byãs_1
, 
nb_byãs_2
;

138 
	`CHECK_NULL
(
£lf
);

141 
	`lgw_ªg_rb
(
SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES
, 
buff
,  buff);

142 
nb_byãs_1
 = (
buff
[0] << 8) | (buff[1] << 0);

145 
	`lgw_ªg_rb
(
SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES
, 
buff
,  buff);

146 
nb_byãs_2
 = (
buff
[0] << 8) | (buff[1] << 0);

148 
£lf
->
buf„r_size
 = (
nb_byãs_2
 > 
nb_byãs_1
) ?Çb_bytes_2 :Çb_bytes_1;

151 i‡(
£lf
->
buf„r_size
 > 0) {

152 
	`DEBUG_MSG
 ("-----------------\n");

153 
	`DEBUG_PRINTF
("%s:Çb_byã†tÿbê„tched: %u (%u %u)\n", 
__FUNCTION__
, 
£lf
->
buf„r_size
, 
buff
[1], buff[0]);

155 
	`mem£t
(
£lf
->
buf„r
, 0,  self->buffer);

156 
ªs
 = 
	`lgw_mem_rb
(0x4000, 
£lf
->
buf„r
, sñf->
buf„r_size
, 
åue
);

157 i‡(
ªs
 !
LGW_REG_SUCCESS
) {

158 
	`¥ötf
("ERROR: FailedÅoÑead RX buffer, SPIÉrror\n");

159  
LGW_REG_ERROR
;

163 
	`DEBUG_MSG
("RX_BUFFER: ");

164 
i
 = 0; i < 
£lf
->
buf„r_size
; i++) {

165 
	`DEBUG_PRINTF
("%02X ", 
£lf
->
buf„r
[
i
]);

167 
	`DEBUG_MSG
("\n");

170 i‡(
£lf
->
buf„r_size
 < (
SX1302_PKT_HEAD_METADATA
 + 
SX1302_PKT_TAIL_METADATA
)) {

171 
	`¥ötf
("WARNING:ÇotÉnough dataÅo haveá completeÖacket, discardÑx_buffer\n");

172  
	`rx_buf„r_dñ
(
£lf
);

176 
idx
 = 0;

177 
idx
 <(
£lf
->
buf„r_size
 - 2)) {

178 i‡((
£lf
->
buf„r
[
idx
] =
SX1302_PKT_SYNCWORD_BYTE_0
Ë&& (£lf->buf„r[idx + 1] =
SX1302_PKT_SYNCWORD_BYTE_1
)) {

179 
	`DEBUG_PRINTF
("INFO: syncw‹d foundáàidx %d\n", 
idx
);

182 
	`¥ötf
("INFO: syncw‹dÇŸ foundáàidx %d\n", 
idx
);

183 
idx
 += 1;

186 i‡(
idx
 > 
£lf
->
buf„r_size
 - 2) {

187 
	`¥ötf
("WARNING:Ço syncword found, discardÑx_buffer\n");

188  
	`rx_buf„r_dñ
(
£lf
);

190 i‡(
idx
 != 0) {

191 
	`¥ötf
("INFO:Ñe-syn¯rx_buf„∏© idx %d\n", 
idx
);

192 
	`memmove
((*)(
£lf
->
buf„r
), (*)(£lf->buf„∏+ 
idx
), sñf->
buf„r_size
 - idx);

193 
£lf
->
buf„r_size
 -
idx
;

197 
idx
 = 0;

198 
idx
 < 
£lf
->
buf„r_size
) {

199 i‡((
£lf
->
buf„r
[
idx
] !
SX1302_PKT_SYNCWORD_BYTE_0
Ë|| (£lf->buf„r[idx + 1] !
SX1302_PKT_SYNCWORD_BYTE_1
)) {

200 
	`¥ötf
("WARNING: syncw‹dÇŸ foundáàidx %d, disˇrdÅhêrx_buf„r\n", 
idx
);

201  
	`rx_buf„r_dñ
(
£lf
);

204 
£lf
->
buf„r_pkt_nb
 += 1;

207 
∑ylﬂd_Àn
 = 
	`SX1302_PKT_PAYLOAD_LENGTH
(
£lf
->
buf„r
, 
idx
);

208 
√xt_pkt_idx
 = 
SX1302_PKT_HEAD_METADATA
 +

209 
∑ylﬂd_Àn
 +

210 
SX1302_PKT_TAIL_METADATA
 +

211 (2 * 
	`SX1302_PKT_NUM_TS_METRICS
(
£lf
->
buf„r
, 
idx
 + 
∑ylﬂd_Àn
));

214 
idx
 +()
√xt_pkt_idx
;

219 
£lf
->
buf„r_ödex
 = 0;

221  
LGW_REG_SUCCESS
;

222 
	}
}

226 
	$rx_buf„r_p›
(
rx_buf„r_t
 * 
£lf
, 
rx_∑ckë_t
 * 
pkt
) {

227 
i
;

228 
uöt8_t
 
checksum_rcv
, 
checksum_ˇlc
 = 0;

229 
uöt16_t
 
checksum_idx
;

230 
uöt16_t
 
pkt_num_byãs
;

233 
	`CHECK_NULL
(
£lf
);

234 
	`CHECK_NULL
(
pkt
);

237 i‡(
£lf
->
buf„r_ödex
 >£lf->
buf„r_size
) {

238 
	`DEBUG_MSG
("INFO: No more dataÅo beÖarsed\n");

239  
LGW_REG_ERROR
;

243 i‡((
£lf
->
buf„r
[£lf->
buf„r_ödex
] !
SX1302_PKT_SYNCWORD_BYTE_0
Ë|| (£lf->buf„r[£lf->buf„r_ödex + 1] !
SX1302_PKT_SYNCWORD_BYTE_1
)) {

244  
LGW_REG_ERROR
;

246 
	`DEBUG_PRINTF
("INFO:Ökàsyncw‹d foundáàödex %u\n", 
£lf
->
buf„r_ödex
);

249 
pkt
->
rxbyãnb_modem
 = 
	`SX1302_PKT_PAYLOAD_LENGTH
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

252 
pkt
->
num_ts_mërics_°‹ed
 = 
	`SX1302_PKT_NUM_TS_METRICS
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

255 
pkt_num_byãs
 = 
SX1302_PKT_HEAD_METADATA
 + 
pkt
->
rxbyãnb_modem
 + 
SX1302_PKT_TAIL_METADATA
 + (2 *Ökt->
num_ts_mërics_°‹ed
);

258 if((
£lf
->
buf„r_ödex
 + 
pkt_num_byãs
Ë> sñf->
buf„r_size
) {

259 
	`¥ötf
("WARNING:áb‹tögÅrunˇãd mesßgê(size=%u)\n", 
£lf
->
buf„r_size
);

260  
LGW_REG_WARNING
;

264 
checksum_idx
 = 
pkt_num_byãs
 - 1;

265 
checksum_rcv
 = 
£lf
->
buf„r
[£lf->
buf„r_ödex
 + 
pkt_num_byãs
 - 1];

268 
i
 = 0; i < ()
checksum_idx
; i++) {

269 
checksum_ˇlc
 +
£lf
->
buf„r
[£lf->
buf„r_ödex
 + 
i
];

273 i‡(
checksum_rcv
 !
checksum_ˇlc
) {

274 
	`¥ötf
("WARNING: checksum faûed (gŸ:0x%02X cÆc:0x%02X)\n", 
checksum_rcv
, 
checksum_ˇlc
);

275  
LGW_REG_WARNING
;

277 
	`DEBUG_PRINTF
("Packë checksum OK (0x%02X)\n", 
checksum_rcv
);

281 
pkt
->
modem_id
 = 
	`SX1302_PKT_MODEM_ID
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

282 
pkt
->
rx_ch™√l_ö
 = 
	`SX1302_PKT_CHANNEL
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

283 
pkt
->
¸c_í
 = 
	`SX1302_PKT_CRC_EN
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

284 
pkt
->
∑ylﬂd_¸c_îr‹
 = 
	`SX1302_PKT_CRC_ERROR
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

285 
pkt
->
sync_îr‹
 = 
	`SX1302_PKT_SYNC_ERROR
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

286 
pkt
->
hódî_îr‹
 = 
	`SX1302_PKT_HEADER_ERROR
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

287 
pkt
->
timög_£t
 = 
	`SX1302_PKT_TIMING_SET
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

288 
pkt
->
codög_øã
 = 
	`SX1302_PKT_CODING_RATE
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

289 
pkt
->
rx_øã_sf
 = 
	`SX1302_PKT_DATARATE
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

290 
pkt
->
rssi_ch™_avg
 = 
	`SX1302_PKT_RSSI_CHAN
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

291 
pkt
->
rssi_sig«l_avg
 = 
	`SX1302_PKT_RSSI_SIG
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

292 
pkt
->
rx_¸c16_vÆue
 = (
uöt16_t
)((
	`SX1302_PKT_CRC_PAYLOAD_7_0
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 0) & 0x00FF);

293 
pkt
->
rx_¸c16_vÆue
 |(
uöt16_t
)((
	`SX1302_PKT_CRC_PAYLOAD_15_8
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 8) & 0xFF00);

294 
pkt
->
¢r_avîage
 = (
öt8_t
)
	`SX1302_PKT_SNR_AVG
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

296 
pkt
->
‰equícy_off£t_îr‹
 = (
öt32_t
)((
	`SX1302_PKT_FREQ_OFFSET_19_16
(
£lf
->
buf„r
, sñf->
buf„r_ödex
Ë<< 16Ë| (
	`SX1302_PKT_FREQ_OFFSET_15_8
(£lf->buf„r, sñf->buf„r_ödexË<< 8Ë| (
	`SX1302_PKT_FREQ_OFFSET_7_0
(self->buffer, self->buffer_index) << 0));

297 i‡(
pkt
->
‰equícy_off£t_îr‹
 >= (1<<19)) {

298 
pkt
->
‰equícy_off£t_îr‹
 = (pkt->frequency_offset_error - (1<<20));

302 
pkt
->
time°amp_˙t
 = (
uöt32_t
)((
	`SX1302_PKT_TIMESTAMP_7_0
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 0) & 0x000000FF);

303 
pkt
->
time°amp_˙t
 |(
uöt32_t
)((
	`SX1302_PKT_TIMESTAMP_15_8
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 8) & 0x0000FF00);

304 
pkt
->
time°amp_˙t
 |(
uöt32_t
)((
	`SX1302_PKT_TIMESTAMP_23_16
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 16) & 0x00FF0000);

305 
pkt
->
time°amp_˙t
 |(
uöt32_t
)((
	`SX1302_PKT_TIMESTAMP_31_24
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 24) & 0xFF000000);

308 
i
 = 0; i < (
pkt
->
num_ts_mërics_°‹ed
 * 2); i++) {

309 
pkt
->
time°amp_avg
[
i
] = (
öt8_t
)
	`SX1302_PKT_NUM_TS_METRICS
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
 + 1 + i);

310 
pkt
->
time°amp_°ddev
[
i
] = 0;

313 
	`DEBUG_MSG
 ("-----------------\n");

314 
	`DEBUG_PRINTF
(" modem: %u\n", 
pkt
->
modem_id
);

315 
	`DEBUG_PRINTF
(" ch™: %u\n", 
pkt
->
rx_ch™√l_ö
);

316 
	`DEBUG_PRINTF
(" size: %u\n", 
pkt
->
rxbyãnb_modem
);

317 
	`DEBUG_PRINTF
(" crc_í: %u\n", 
pkt
->
¸c_í
);

318 
	`DEBUG_PRINTF
(" crc_îr: %u\n", 
pkt
->
∑ylﬂd_¸c_îr‹
);

319 
	`DEBUG_PRINTF
(" sync_îr: %u\n", 
pkt
->
sync_îr‹
);

320 
	`DEBUG_PRINTF
(" hdr_îr: %u\n", 
pkt
->
hódî_îr‹
);

321 
	`DEBUG_PRINTF
("Åimög_£t: %u\n", 
pkt
->
timög_£t
);

322 
	`DEBUG_PRINTF
(" codr: %u\n", 
pkt
->
codög_øã
);

323 
	`DEBUG_PRINTF
(" d©r: %u\n", 
pkt
->
rx_øã_sf
);

324 
	`DEBUG_PRINTF
("Çum_ts: %u\n", 
pkt
->
num_ts_mërics_°‹ed
);

325 i‡(
pkt
->
num_ts_mërics_°‹ed
 > 0) {

326 
	`DEBUG_MSG
("Ås_avg: ");

327 
i
 = 0; i < (
pkt
->
num_ts_mërics_°‹ed
 * 2); i++) {

328 
	`DEBUG_PRINTF
("%d ", 
pkt
->
time°amp_avg
[
i
]);

330 
	`DEBUG_MSG
("\n");

331 
	`DEBUG_MSG
("Ås_stdev: NONE (nb_symbols=0)\n");

333 
	`DEBUG_MSG
 ("-----------------\n");

336 i‡(
pkt
->
modem_id
 > 
SX1302_FSK_MODEM_ID
) {

337 
	`¥ötf
("ERROR: modem_id i†ouào‡øngê- %u\n", 
pkt
->
modem_id
);

338  
LGW_REG_ERROR
;

340 i‡(
pkt
->
modem_id
 <
SX1302_LORA_STD_MODEM_ID
) {

341 i‡(
pkt
->
rx_ch™√l_ö
 > 9) {

342 
	`¥ötf
("ERROR: ch™√»i†ouào‡øngê- %u\n", 
pkt
->
rx_ch™√l_ö
);

343  
LGW_REG_ERROR
;

345 i‡((
pkt
->
rx_øã_sf
 < 5) || (pkt->rx_rate_sf > 12)) {

346 
	`¥ötf
("ERROR: SF i†ouào‡øngê- %u\n", 
pkt
->
rx_øã_sf
);

347  
LGW_REG_ERROR
;

355 
	`mem˝y
((*)
pkt
->
∑ylﬂd
, (*)(&(
£lf
->
buf„r
[£lf->
buf„r_ödex
 + 
SX1302_PKT_HEAD_METADATA
])),Ökt->
rxbyãnb_modem
);

358 
£lf
->
buf„r_ödex
 +(
SX1302_PKT_HEAD_METADATA
 + 
pkt
->
rxbyãnb_modem
 + 
SX1302_PKT_TAIL_METADATA
 + (2 *Ökt->
num_ts_mërics_°‹ed
));

361 
£lf
->
buf„r_pkt_nb
 -= 1;

363  
LGW_REG_SUCCESS
;

364 
	}
}

369 
uöt16_t
 
	$rx_buf„r_ªad_±r_addr
() {

370 
öt32_t
 
vÆ
;

371 
uöt16_t
 
addr
;

373 
	`lgw_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_MSB_LAST_ADDR_READ
, &
vÆ
);

374 
addr
 = (
uöt16_t
)(
vÆ
 << 8);

375 
	`lgw_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_LSB_LAST_ADDR_READ
, &
vÆ
);

376 
addr
 |(
uöt16_t
)
vÆ
;

378  
addr
;

379 
	}
}

383 
uöt16_t
 
	$rx_buf„r_wrôe_±r_addr
() {

384 
öt32_t
 
vÆ
;

385 
uöt16_t
 
addr
;

387 
	`lgw_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_MSB_LAST_ADDR_WRITE
, &
vÆ
);

388 
addr
 = (
uöt16_t
)(
vÆ
 << 8);

389 
	`lgw_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_LSB_LAST_ADDR_WRITE
, &
vÆ
);

390 
addr
 |(
uöt16_t
)
vÆ
;

392  
addr
;

393 
	}
}

397 
	$rx_buf„r_dump
(
FILE
 * 
fûe
, 
uöt16_t
 
°¨t_addr
, uöt16_à
íd_addr
) {

398 
i
;

399 
uöt8_t
 
rx_buf„r_debug
[4096];

401 
	`¥ötf
("Dumpög %u byãs, from 0x%XÅÿ0x%X\n", 
íd_addr
 - 
°¨t_addr
 + 1, start_addr,Énd_addr);

403 
	`mem£t
(
rx_buf„r_debug
, 0, Ñx_buffer_debug);

405 
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_DIRECT_RAM_IF
, 1);

406 
	`lgw_mem_rb
(0x4000 + 
°¨t_addr
, 
rx_buf„r_debug
, 
íd_addr
 - sèπ_add∏+ 1, 
Ál£
);

407 
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_DIRECT_RAM_IF
, 0);

409 
i
 = 0; i < (
íd_addr
 - 
°¨t_addr
 + 1); i++) {

410 i‡(
fûe
 =
NULL
) {

411 
	`¥ötf
("%02X ", 
rx_buf„r_debug
[
i
]);

413 
	`Ârötf
(
fûe
, "%02X ", 
rx_buf„r_debug
[
i
]);

416 i‡(
fûe
 =
NULL
) {

417 
	`¥ötf
("\n");

419 
	`Ârötf
(
fûe
, "\n");

423 
	`as£π
(0);

424 
	}
}

	@libloragw/src/loragw_sx1302_timestamp.c

24 
	~<°döt.h
>

25 
	~<°dboﬁ.h
>

26 
	~<°dio.h
>

27 
	~<mem‹y.h
>

28 
	~<öây≥s.h
>

29 
	~<as£π.h
>

31 
	~"l‹agw_sx1302_time°amp.h
"

32 
	~"l‹agw_ªg.h
"

33 
	~"l‹agw_aux.h
"

38 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

39 #i‡
DEBUG_FTIME
 == 1

40 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
, fmt,árgs)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

44 
	#DEBUG_MSG
(
°r
)

	)

45 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

46 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

52 
	#MAX_TIMESTAMP_PPS_HISTORY
 16

	)

53 
	stime°amp_µs_hi°‹y_s
 {

54 
uöt32_t
 
	mhi°‹y
[
MAX_TIMESTAMP_PPS_HISTORY
];

55 
uöt8_t
 
	midx
;

56 
uöt8_t
 
	msize
;

62 
	#PRECISION_TIMESTAMP_TS_METRICS_MAX
 32

	)

63 
	#PRECISION_TIMESTAMP_NB_SYMBOLS
 0

	)

69 
time°amp_µs_hi°‹y_s
 
	gtime°amp_µs_hi°‹y
 = {

70 .
hi°‹y
 = { 0 },

71 .
	gidx
 = 0,

72 .
	gsize
 = 0

83 
öt32_t
 
Àgacy_time°amp_c‹ª˘i⁄
(
uöt8_t
 
b™dwidth
, uöt8_à
d©¨©e
, uöt8_à
codî©e
, 
boﬁ
 
no_¸c
, uöt8_à
∑ylﬂd_Àngth
, 
sx1302_rx_d·_≥ak_mode_t
 
d·_≥ak_mode
);

90 
öt32_t
 
¥ecisi⁄_time°amp_c‹ª˘i⁄
(
uöt8_t
 
b™dwidth
, uöt8_à
d©¨©e
, uöt8_à
codî©e
, 
boﬁ
 
¸c_í
, uöt8_à
∑ylﬂd_Àngth
);

98 
time°amp_µs_hi°‹y_ßve
(
uöt32_t
 
time°amp_µs_ªg
);

103 
öt32_t
 
	$Àgacy_time°amp_c‹ª˘i⁄
(
uöt8_t
 
b™dwidth
, uöt8_à
sf
, uöt8_à
¸
, 
boﬁ
 
¸c_í
, uöt8_à
∑ylﬂd_Àngth
, 
sx1302_rx_d·_≥ak_mode_t
 
d·_≥ak_mode
) {

104 
uöt64_t
 
˛k_≥riod
, 
fûãrög_dñay
, 
dem≠_dñay
, 
f·_dñay_°©e3
, 
f·_dñay
, 
decode_dñay
, 
tŸÆ_dñay
;

105 
uöt32_t
 
nb_nibbÀ
, 
nb_nibbÀ_ö_hdr
, 
nb_nibbÀ_ö_œ°_block
;

106 
uöt8_t
 
nb_ôî
, 
bw_pow
, 
d·_≥ak_í
 = (
d·_≥ak_mode
 =
RX_DFT_PEAK_MODE_DISABLED
) ? 0 : 1;

107 
uöt8_t
 
µm
 = 
	`SET_PPM_ON
(
b™dwidth
, 
sf
) ? 1 : 0;

108 
öt32_t
 
time°amp_c‹ª˘i⁄
;

109 
boﬁ
 
∑ylﬂd_fôs_ö_hódî
 = 
Ál£
;

110 
uöt8_t
 
¸_loˇl
 = 
¸
;

112 
b™dwidth
)

114 
BW_125KHZ
:

115 
bw_pow
 = 1;

117 
BW_250KHZ
:

118 
bw_pow
 = 2;

120 
BW_500KHZ
:

121 
bw_pow
 = 4;

124 
	`¥ötf
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT - %s\n", 
b™dwidth
, 
__FUNCTION__
);

129 
˛k_≥riod
 = 250E3 / 
bw_pow
;

131 
nb_nibbÀ
 = (
∑ylﬂd_Àngth
 + 2 * 
¸c_í
) * 2 + 5;

133 i‡((
sf
 == 5) || (sf == 6)) {

134 
nb_nibbÀ_ö_hdr
 = 
sf
;

136 
nb_nibbÀ_ö_hdr
 = 
sf
 - 2;

139 
nb_nibbÀ_ö_œ°_block
 = 
nb_nibbÀ
 - 
nb_nibbÀ_ö_hdr
 - (
sf
 - 2 * 
µm
) * ((nb_nibble -Çb_nibble_in_hdr) / (sf - 2 *Öpm));

140 i‡(
nb_nibbÀ_ö_œ°_block
 == 0) {

141 
nb_nibbÀ_ö_œ°_block
 = 
sf
 - 2 * 
µm
;

144 
nb_ôî
 = (
sf
 + 1) / 2;

147 i‡((()(2 * (
∑ylﬂd_Àngth
 + 2 * 
¸c_í
Ë- (
sf
 - 7)Ë<0Ë|| (’aylﬂd_Àngth =0Ë&& (¸c_í =
Ál£
))) {

151 
∑ylﬂd_fôs_ö_hódî
 = 
åue
;

154 
d·_≥ak_í
 = 0;

156 
¸_loˇl
 = 4;

158 i‡(
sf
 > 6) {

159 
nb_nibbÀ_ö_œ°_block
 = 
sf
 - 2;

161 
nb_nibbÀ_ö_œ°_block
 = 
sf
;

166 
fûãrög_dñay
 = 16000E3 / 
bw_pow
 + 2031250;

169 i‡(
∑ylﬂd_fôs_ö_hódî
 =
åue
) {

170 
dem≠_dñay
 = 
˛k_≥riod
 + (1 << 
sf
) * clk_period * 3 / 4 + 3 * clk_period + (sf - 2) * clk_period;

172 
dem≠_dñay
 = 
˛k_≥riod
 + (1 << 
sf
Ë* clk_≥riod * (1 - 
µm
 / 4) + 3 * clk_period + (sf - 2 *Öpm) * clk_period;

176 
f·_dñay_°©e3
 = 
˛k_≥riod
 * (((1 << 
sf
Ë- 6Ë+ 2 * ((1 << sfË* (
nb_ôî
 - 1) + 6)) + 4 * clk_period;

178 i‡(
d·_≥ak_í
) {

179 
f·_dñay
 = (5 - 2 * 
µm
Ë* ((1 << 
sf
Ë* 
˛k_≥riod
 + 7 * clk_period) + 2 * clk_period;

181 
f·_dñay
 = (1 << 
sf
Ë* 2 * 
˛k_≥riod
 + 3 * clk_period;

185 
decode_dñay
 = 5 * 
˛k_≥riod
 + (9 * clk_≥riod + clk_≥riod * 
¸_loˇl
Ë* 
nb_nibbÀ_ö_œ°_block
 + 3 * clk_period;

188 
tŸÆ_dñay
 = (
fûãrög_dñay
 + 
f·_dñay_°©e3
 + 
f·_dñay
 + 
dem≠_dñay
 + 
decode_dñay
 + 500E3) / 1E6;

190 i‡(
tŸÆ_dñay
 > 
INT32_MAX
) {

191 
	`¥ötf
("ERROR: overflowÉrror forÅimestamp correction (SHOULD NOT HAPPEN)\n");

192 
	`¥ötf
("=> fûãrög_dñay %" 
PRIu64
 "\n", 
fûãrög_dñay
);

193 
	`¥ötf
("=> f·_dñay_°©e3 %" 
PRIu64
 "\n", 
f·_dñay_°©e3
);

194 
	`¥ötf
("=> f·_dñay %" 
PRIu64
 "\n", 
f·_dñay
);

195 
	`¥ötf
("=> dem≠_dñay %" 
PRIu64
 "\n", 
dem≠_dñay
);

196 
	`¥ötf
("=> decode_dñay %" 
PRIu64
 "\n", 
decode_dñay
);

197 
	`¥ötf
("=>ÅŸÆ_dñay %" 
PRIu64
 "\n", 
tŸÆ_dñay
);

198 
	`as£π
(0);

201 
time°amp_c‹ª˘i⁄
 = -((
öt32_t
)
tŸÆ_dñay
);

203 
	`DEBUG_PRINTF
("FTIME OFF : fûãrög_dñay %Œu \n", 
fûãrög_dñay
);

204 
	`DEBUG_PRINTF
("FTIME OFF : f·_dñay_°©e3 %Œu \n", 
f·_dñay_°©e3
);

205 
	`DEBUG_PRINTF
("FTIME OFF : f·_dñay %Œu \n", 
f·_dñay
);

206 
	`DEBUG_PRINTF
("FTIME OFF : dem≠_dñay %Œu \n", 
dem≠_dñay
);

207 
	`DEBUG_PRINTF
("FTIME OFF : decode_dñay %Œu \n", 
decode_dñay
);

208 
	`DEBUG_PRINTF
("FTIME OFF :Åime°am∞c‹ª˘i⁄ %d \n", 
time°amp_c‹ª˘i⁄
);

210  
time°amp_c‹ª˘i⁄
;

211 
	}
}

215 
öt32_t
 
	$¥ecisi⁄_time°amp_c‹ª˘i⁄
(
uöt8_t
 
b™dwidth
, uöt8_à
d©¨©e
, uöt8_à
codî©e
, 
boﬁ
 
¸c_í
, uöt8_à
∑ylﬂd_Àngth
) {

216 
uöt32_t
 
nb_symbﬁs_∑ylﬂd
;

217 
uöt16_t
 
t_symbﬁ_us
;

218 
öt32_t
 
time°amp_c‹ª˘i⁄
;

219 
uöt8_t
 
bw_pow
;

220 
uöt32_t
 
fûãrög_dñay
;

222 
b™dwidth
)

224 
BW_125KHZ
:

225 
bw_pow
 = 1;

227 
BW_250KHZ
:

228 
bw_pow
 = 2;

230 
BW_500KHZ
:

231 
bw_pow
 = 4;

234 
	`¥ötf
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT - %s\n", 
b™dwidth
, 
__FUNCTION__
);

238 
fûãrög_dñay
 = 16000000 / 
bw_pow
 + 2031250;

242 i‡(
	`l‹a_∑ckë_time_⁄_aú
(
b™dwidth
, 
d©¨©e
, 
codî©e
, 0, 
Ál£
, !
¸c_í
, 
∑ylﬂd_Àngth
, 
NULL
, &
nb_symbﬁs_∑ylﬂd
, &
t_symbﬁ_us
) == 0) {

243 
	`¥ötf
("ERROR: faûedÅÿcompuãÖackëÅimê⁄áú - %s\n", 
__FUNCTION__
);

247 
time°amp_c‹ª˘i⁄
 = 0;

248 
time°amp_c‹ª˘i⁄
 +(
nb_symbﬁs_∑ylﬂd
 * 
t_symbﬁ_us
);

249 
time°amp_c‹ª˘i⁄
 -(
fûãrög_dñay
 + 500E3) / 1E6;

251 
	`DEBUG_PRINTF
("FTIME ON :Åime°am∞c‹ª˘i⁄ %d \n", 
time°amp_c‹ª˘i⁄
);

253  
time°amp_c‹ª˘i⁄
;

254 
	}
}

258 
	$time°amp_µs_hi°‹y_ßve
(
uöt32_t
 
time°amp_µs_ªg
) {

260 i‡((
time°amp_µs_ªg
 !
time°amp_µs_hi°‹y
.
hi°‹y
[time°amp_µs_hi°‹y.
idx
] || (time°amp_µs_hi°‹y.
size
 == 0))) {

262 i‡(
time°amp_µs_hi°‹y
.
size
 > 0) {

263 
time°amp_µs_hi°‹y
.
idx
 += 1;

265 i‡(
time°amp_µs_hi°‹y
.
idx
 =
MAX_TIMESTAMP_PPS_HISTORY
) {

266 
time°amp_µs_hi°‹y
.
idx
 = 0;

270 
time°amp_µs_hi°‹y
.
hi°‹y
[time°amp_µs_hi°‹y.
idx
] = 
time°amp_µs_ªg
;

273 i‡(
time°amp_µs_hi°‹y
.
size
 < 
MAX_TIMESTAMP_PPS_HISTORY
) {

274 
time°amp_µs_hi°‹y
.
size
 += 1;

278 
	`¥ötf
("----Åime°am∞PPS hi°‹y (idx:%u size:%uË----\n", 
time°amp_µs_hi°‹y
.
idx
,Åime°amp_µs_hi°‹y.
size
);

279 
i
 = 0; i < 
time°amp_µs_hi°‹y
.
size
; i++) {

280 
	`¥ötf
(" %u\n", 
time°amp_µs_hi°‹y
.
hi°‹y
[
i
]);

282 
	`¥ötf
("--------------------------------\n");

285 
	}
}

290 
	$time°amp_cou¡î_√w
(
time°amp_cou¡î_t
 * 
£lf
) {

291 
	`mem£t
(
£lf
, 0, (*self));

292 
	}
}

296 
	$time°amp_cou¡î_dñëe
(
time°amp_cou¡î_t
 * 
£lf
) {

297 
	`mem£t
(
£lf
, 0, (*self));

298 
	}
}

302 
	$time°amp_cou¡î_upd©e
(
time°amp_cou¡î_t
 * 
£lf
, 
uöt32_t
 
µs
, uöt32_à
ö°
) {

306 i‡(
µs
 < 
£lf
->µs.
cou¡î_us_27bôs_ªf
) {

307 
£lf
->
µs
.
cou¡î_us_27bôs_wøp
 += 1;

308 
£lf
->
µs
.
cou¡î_us_27bôs_wøp
 %= 32;

310 i‡(
ö°
 < 
£lf
->ö°.
cou¡î_us_27bôs_ªf
) {

311 
£lf
->
ö°
.
cou¡î_us_27bôs_wøp
 += 1;

312 
£lf
->
ö°
.
cou¡î_us_27bôs_wøp
 %= 32;

316 
£lf
->
µs
.
cou¡î_us_27bôs_ªf
 =Öps;

317 
£lf
->
ö°
.
cou¡î_us_27bôs_ªf
 = inst;

318 
	}
}

322 
	$time°amp_cou¡î_gë
(
time°amp_cou¡î_t
 * 
£lf
, 
uöt32_t
 * 
ö°
, uöt32_à* 
µs
) {

323 
x
;

324 
uöt8_t
 
buff
[8];

325 
uöt8_t
 
buff_wa
[8];

326 
uöt32_t
 
cou¡î_ö°_us_øw_27bôs_now
;

327 
uöt32_t
 
cou¡î_µs_us_øw_27bôs_now
;

333 
x
 = 
	`lgw_ªg_rb
(
SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
, &
buff
[0], 8);

334 i‡(
x
 !
LGW_REG_SUCCESS
) {

335 
	`¥ötf
("ERROR: FailedÅo getÅimestamp counter value\n");

343 
x
 = 
	`lgw_ªg_rb
(
SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
, &
buff_wa
[0], 8);

344 i‡(
x
 !
LGW_REG_SUCCESS
) {

345 
	`¥ötf
("ERROR: FailedÅo getÅimestamp counter MSB value\n");

348 i‡((
buff
[0] !
buff_wa
[0]) || (buff[4] != buff_wa[4])) {

349 
x
 = 
	`lgw_ªg_rb
(
SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
, &
buff_wa
[0], 8);

350 i‡(
x
 !
LGW_REG_SUCCESS
) {

351 
	`¥ötf
("ERROR: FailedÅo getÅimestamp counter MSB value\n");

354 
	`mem˝y
(
buff
, 
buff_wa
, 8);

357 
cou¡î_µs_us_øw_27bôs_now
 = (
buff
[0]<<24) | (buff[1]<<16) | (buff[2]<<8) | buff[3];

358 
cou¡î_ö°_us_øw_27bôs_now
 = (
buff
[4]<<24) | (buff[5]<<16) | (buff[6]<<8) | buff[7];

361 
	`time°amp_µs_hi°‹y_ßve
(
cou¡î_µs_us_øw_27bôs_now
);

364 
cou¡î_µs_us_øw_27bôs_now
 /= 32;

365 
cou¡î_ö°_us_øw_27bôs_now
 /= 32;

368 
	`time°amp_cou¡î_upd©e
(
£lf
, 
cou¡î_µs_us_øw_27bôs_now
, 
cou¡î_ö°_us_øw_27bôs_now
);

371 *
ö°
 = 
	`time°amp_cou¡î_ex∑nd
(
£lf
, 
Ál£
, 
cou¡î_ö°_us_øw_27bôs_now
);

372 *
µs
 = 
	`time°amp_cou¡î_ex∑nd
(
£lf
, 
åue
, 
cou¡î_µs_us_øw_27bôs_now
);

375 
	}
}

379 
uöt32_t
 
	$time°amp_cou¡î_ex∑nd
(
time°amp_cou¡î_t
 * 
£lf
, 
boﬁ
 
µs
, 
uöt32_t
 
˙t_us
) {

380 
time°amp_öfo_s
* 
töfo
 = (
µs
 =
åue
Ë? &
£lf
->µ†: &£lf->
ö°
;

381 
uöt32_t
 
cou¡î_us_32bôs
;

383 
cou¡î_us_32bôs
 = (
töfo
->
cou¡î_us_27bôs_wøp
 << 27Ë| 
˙t_us
;

391 
	`¥ötf
("%u,%u,%u\n", 
˙t_us
, 
cou¡î_us_32bôs
, 
töfo
->
cou¡î_us_27bôs_wøp
);

394  
cou¡î_us_32bôs
;

395 
	}
}

400 
uöt32_t
 
	$time°amp_pkt_ex∑nd
(
time°amp_cou¡î_t
 * 
£lf
, 
uöt32_t
 
pkt_˙t_us
) {

401 
time°amp_öfo_s
* 
töfo
 = &
£lf
->
ö°
;

402 
uöt32_t
 
cou¡î_us_32bôs
;

403 
uöt8_t
 
wøp_°©us
;

417 
wøp_°©us
 = 
töfo
->
cou¡î_us_27bôs_wøp
 - (—öfo->
cou¡î_us_27bôs_ªf
 >
pkt_˙t_us
) ? 0 : 1);

418 
wøp_°©us
 &= 0x1F;

421 
cou¡î_us_32bôs
 = (
wøp_°©us
 << 27Ë| 
pkt_˙t_us
;

423  
cou¡î_us_32bôs
;

424 
	}
}

428 
	$time°amp_cou¡î_mode
(
boﬁ
 
·ime_íabÀ
) {

429 
x
 = 
LGW_REG_SUCCESS
;

431 i‡(
·ime_íabÀ
 =
Ál£
) {

432 
	`¥ötf
("INFO: usingÜegacyÅimestamp\n");

434 
x
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_LEGACY_TIMESTAMP
, 0x01);

436 
	`¥ötf
("INFO: usögÖªcisi⁄Åime°am∞(max_ts_mërics:%uÇb_symbﬁs:%u)\n", 
PRECISION_TIMESTAMP_TS_METRICS_MAX
, 
PRECISION_TIMESTAMP_NB_SYMBOLS
);

439 
x
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_LEGACY_TIMESTAMP
, 0x00);

440 
x
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_TIMESTAMP_CFG_MAX_TS_METRICS
, (
öt32_t
)
PRECISION_TIMESTAMP_TS_METRICS_MAX
);

443 
x
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_TIMESTAMP_ENABLE
, 0x01);

444 
x
 |
	`lgw_ªg_w
(
SX1302_REG_RX_TOP_TIMESTAMP_NB_SYMB
, (
öt32_t
)
PRECISION_TIMESTAMP_NB_SYMBOLS
);

447  
x
;

448 
	}
}

452 
öt32_t
 
	$time°amp_cou¡î_c‹ª˘i⁄
(
lgw_c⁄ãxt_t
 * 
c⁄ãxt
, 
uöt8_t
 
b™dwidth
, uöt8_à
d©¨©e
, uöt8_à
codî©e
, 
boﬁ
 
¸c_í
, uöt8_à
∑ylﬂd_Àngth
, 
sx1302_rx_d·_≥ak_mode_t
 
d·_≥ak_mode
) {

454 
	`CHECK_NULL
(
c⁄ãxt
);

455 i‡(
	`IS_LORA_DR
(
d©¨©e
Ë=
Ál£
) {

456 
	`¥ötf
("ERROR: wr⁄g d©¨©ê(%uË- %s\n", 
d©¨©e
, 
__FUNCTION__
);

459 i‡(
	`IS_LORA_BW
(
b™dwidth
Ë=
Ál£
) {

460 
	`¥ötf
("ERROR: wr⁄g b™dwidth (%uË- %s\n", 
b™dwidth
, 
__FUNCTION__
);

463 i‡(
	`IS_LORA_CR
(
codî©e
Ë=
Ál£
) {

464 
	`¥ötf
("ERROR: wr⁄g codögÑ©ê(%uË- %s\n", 
codî©e
, 
__FUNCTION__
);

469 i‡(
c⁄ãxt
->
·ime_cfg
.
íabÀ
 =
Ál£
) {

470  
	`Àgacy_time°amp_c‹ª˘i⁄
(
b™dwidth
, 
d©¨©e
, 
codî©e
, 
¸c_í
, 
∑ylﬂd_Àngth
, 
d·_≥ak_mode
);

472  
	`¥ecisi⁄_time°amp_c‹ª˘i⁄
(
b™dwidth
, 
d©¨©e
, 
codî©e
, 
¸c_í
, 
∑ylﬂd_Àngth
);

474 
	}
}

478 
	$¥eci£_time°amp_ˇlcuœã
(
uöt8_t
 
ts_mërics_nb
, c⁄° 
öt8_t
 * 
ts_mërics
, 
uöt32_t
 
time°amp_˙t
, uöt8_à
sf
, 
öt32_t
 
if_‰eq_hz
, 
pkt_‰eq_îr‹
, uöt32_à* 
ªsu…_·ime
) {

479 
i
, 
x
, 
time°amp_µs_idx
, 
time°amp_µs_idx_√xt
, 
time°amp_µs_idx_¥ev
;

480 
öt32_t
 
·ime_sum
;

481 
öt32_t
 
·ime
[256];

482 
·ime_món
;

483 
uöt32_t
 
time°amp_˙t_íd_of_¥ómbÀ
;

484 
uöt32_t
 
time°amp_µs
 = 0;

485 
uöt32_t
 
time°amp_µs_ªg
 = 0;

486 
uöt32_t
 
off£t_¥ómbÀ_hdr
;

487 
uöt8_t
 
buff
[4];

488 
uöt32_t
 
diff_µs
;

489 
pkt_·ime
;

490 
uöt8_t
 
ts_mërics_nb_˛ù≥d
;

491 
xèl_c‹ª˘
;

494 
	`CHECK_NULL
(
ts_mërics
);

495 
	`CHECK_NULL
(
ªsu…_·ime
);

498 i‡(
time°amp_µs_hi°‹y
.
size
 < 
MAX_TIMESTAMP_PPS_HISTORY
) {

499 
	`¥ötf
("INFO: Cannot compute ftime yet, PPS history isÅoo short\n");

504 
off£t_¥ómbÀ_hdr
 = 256 * (1 << 
sf
) * (8 + 4 + (((sf == 5) || (sf == 6)) ? 2 : 0)) +

505 256 * ((1 << 
sf
) / 4 - 1);

508 
off£t_¥ómbÀ_hdr
 +(()off£t_¥ómbÀ_hd∏* 
pkt_‰eq_îr‹
 + 0.5);

510 
time°amp_˙t_íd_of_¥ómbÀ
 = 
time°amp_˙t
 - 
off£t_¥ómbÀ_hdr
 + 2138;

513 
time°amp_˙t
 = 
time°amp_˙t_íd_of_¥ómbÀ
;

516 
sf
) {

518 
ts_mërics_nb_˛ù≥d
 = 
	`MIN
(4, 
ts_mërics_nb
);

521 
ts_mërics_nb_˛ù≥d
 = 
	`MIN
(8, 
ts_mërics_nb
);

524 
ts_mërics_nb_˛ù≥d
 = 
	`MIN
(16, 
ts_mërics_nb
);

527 
ts_mërics_nb_˛ù≥d
 = 
	`MIN
(32, 
ts_mërics_nb
);

532 
	`¥ötf
("%s\n", 
__FUNCTION__
);

533 
	`¥ötf
("ts_mërics_nb_˛ù≥d*2: %u\n", 
ts_mërics_nb_˛ù≥d
 * 2);

534 
i
 = 0; i < (2 * 
ts_mërics_nb_˛ù≥d
); i++) {

535 
	`¥ötf
("%d ", 
ts_mërics
[
i
]);

537 
	`¥ötf
("\n");

541 
·ime
[0] = (
öt32_t
)
ts_mërics
[0];

542 
·ime_sum
 = 
·ime
[0];

543 
i
 = 1; i < (2 * 
ts_mërics_nb_˛ù≥d
); i++) {

544 
·ime
[
i
] = ftime[i-1] + 
ts_mërics
[i];

545 
·ime_sum
 +
·ime
[
i
];

549 
·ime_món
 = ()
·ime_sum
 / ()(2 * 
ts_mërics_nb_˛ù≥d
);

552 
x
 = 
	`lgw_ªg_rb
(
SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
 , &
buff
[0], 4);

553 i‡(
x
 !
LGW_REG_SUCCESS
) {

554 
	`¥ötf
("ERROR: FailedÅo getÅimestamp counter value\n");

557 
time°amp_µs_ªg
 = (
uöt32_t
)((
buff
[0] << 24) & 0xFF000000);

558 
time°amp_µs_ªg
 |(
uöt32_t
)((
buff
[1] << 16) & 0x00FF0000);

559 
time°amp_µs_ªg
 |(
uöt32_t
)((
buff
[2] << 8) & 0x0000FF00);

560 
time°amp_µs_ªg
 |(
uöt32_t
)((
buff
[3] << 0) & 0x000000FF);

563 
	`time°amp_µs_hi°‹y_ßve
(
time°amp_µs_ªg
);

566 i‡((
time°amp_˙t
 - 
time°amp_µs_ªg
) > 32e6) {

568 
time°amp_µs_idx
 = 0;Åime°amp_µs_idx < 
time°amp_µs_hi°‹y
.
size
;Åimestamp_pps_idx++) {

570 i‡((
time°amp_˙t
 - 
time°amp_µs_hi°‹y
.
hi°‹y
[
time°amp_µs_idx
]) < 32e6) {

571 
time°amp_µs
 = 
time°amp_µs_hi°‹y
.
hi°‹y
[
time°amp_µs_idx
];

572 
	`DEBUG_PRINTF
("==>Åime°amp_µ†foundáàhi°‹y[%d] => %u\n", 
time°amp_µs_idx
, 
time°amp_µs
);

576 i‡(
time°amp_µs_idx
 =
time°amp_µs_hi°‹y
.
size
) {

577 
	`¥ötf
("ERROR: failedÅo findÅheÑeferenceÅimestamp_pps, cannot compute ftime\n");

582 
time°amp_µs_idx_√xt
 = (
time°amp_µs_idx
 =(
MAX_TIMESTAMP_PPS_HISTORY
 - 1)) ? 0 :Åimestamp_pps_idx + 1;

583 
diff_µs
 = 
time°amp_µs_hi°‹y
.
hi°‹y
[
time°amp_µs_idx_√xt
] -Åime°amp_µs_hi°‹y.hi°‹y[
time°amp_µs_idx
];

584 
xèl_c‹ª˘
 = ()32e6 / ()(
diff_µs
);

587 
time°amp_µs
 = 
time°amp_µs_ªg
;

588 
	`DEBUG_PRINTF
("==>Åime°amp_µ†=> %u\n", 
time°amp_µs
);

591 
time°amp_µs_idx
 = 
time°amp_µs_hi°‹y
.
idx
;

592 
time°amp_µs_idx_¥ev
 = (
time°amp_µs_idx
 =0Ë? (
MAX_TIMESTAMP_PPS_HISTORY
 - 1) : (timestamp_pps_idx - 1);

593 
diff_µs
 = 
time°amp_µs_hi°‹y
.
hi°‹y
[
time°amp_µs_idx
] -Åime°amp_µs_hi°‹y.hi°‹y[
time°amp_µs_idx_¥ev
];

594 
xèl_c‹ª˘
 = ()32e6 / ()(
diff_µs
);

598 i‡((
xèl_c‹ª˘
 > 1.2) || (xtal_correct < 0.8)) {

599 
	`¥ötf
("ERROR: xèl_îr‹ i†övÆid (%.15lf)\n", 
xèl_c‹ª˘
);

604 
diff_µs
 = 
time°amp_˙t
 - 
time°amp_µs
;

606 
	`DEBUG_PRINTF
("time°amp_˙à: %u\n", 
time°amp_˙t
);

607 
	`DEBUG_PRINTF
("time°amp_µ†: %u\n", 
time°amp_µs
);

608 
	`DEBUG_PRINTF
("diff_µ†: %d\n", 
diff_µs
);

611 
pkt_·ime
 = ()
diff_µs
 + ()
·ime_món
;

612 
	`DEBUG_PRINTF
("pkt_·imê%f\n", 
pkt_·ime
);

615 
pkt_·ime
 +
	`sx1302_dc_nŸch_dñay
(()
if_‰eq_hz
 / 1E3);

618 
pkt_·ime
 *= 31.25;

621 
pkt_·ime
 *
xèl_c‹ª˘
;

623 *
ªsu…_·ime
 = (
uöt32_t
)
pkt_·ime
;

624 i‡(*
ªsu…_·ime
 > 1E9) {

625 
	`¥ötf
("ERROR: föêtime°am∞i†ouào‡øngê(%u)\n", *
ªsu…_·ime
);

629 
	`DEBUG_PRINTF
("==> ftimê%uÇ†sö˚Üa° PPS (%.15lf)\n", *
ªsu…_·ime
, 
pkt_·ime
);

632 
	}
}

	@libloragw/src/loragw_usb.c

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<°rög.h
>

28 
	~<î∫o.h
>

29 
	~<ãrmios.h
>

31 
	~"l‹agw_com.h
"

32 
	~"l‹agw_usb.h
"

33 
	~"l‹agw_mcu.h
"

34 
	~"l‹agw_aux.h
"

39 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

40 #i‡
DEBUG_COM
 == 1

41 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

42 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
, fmt,árgs)

	)

43 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_USB_ERROR
;}

	)

45 
	#DEBUG_MSG
(
°r
)

	)

46 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

47 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_USB_ERROR
;}

	)

59 
lgw_com_wrôe_mode_t
 
	g_lgw_wrôe_mode
 = 
LGW_COM_WRITE_MODE_SINGLE
;

60 
uöt8_t
 
	g_lgw_•i_ªq_nb
 = 0;

65 
	$£t_öãrÁ˚_©åibs_löux
(
fd
, 
•ìd
) {

66 
ãrmios
 
ây
;

68 
	`mem£t
(&
ây
, 0, Åty);

71 i‡(
	`tcgë©å
(
fd
, &
ây
) != 0) {

72 
	`DEBUG_PRINTF
("ERROR:Åcgë©å faûed wôh %d - %s", 
î∫o
, 
	`°ªº‹
(errno));

73  
LGW_USB_ERROR
;

76 
	`cf£to•ìd
(&
ây
, 
•ìd
);

77 
	`cf£ti•ìd
(&
ây
, 
•ìd
);

80 
ây
.
c_cÊag
 = (ây.c_cÊag & ~
CSIZE
Ë| 
CS8
;

81 
ây
.
c_cÊag
 |
CLOCAL
;

82 
ây
.
c_cÊag
 |
CREAD
;

83 
ây
.
c_cÊag
 &~
PARENB
;

84 
ây
.
c_cÊag
 &~
CSTOPB
;

86 
ây
.
c_iÊag
 &~
IGNBRK
;

87 
ây
.
c_iÊag
 &~(
IXON
 | 
IXOFF
 | 
IXANY
 | 
ICRNL
);

89 
ây
.
c_oÊag
 &~
IGNBRK
;

90 
ây
.
c_oÊag
 &~(
IXON
 | 
IXOFF
 | 
IXANY
 | 
ICRNL
);

92 
ây
.
c_lÊag
 = 0;

94 
ây
.
c_cc
[
VMIN
] = 0;

95 
ây
.
c_cc
[
VTIME
] = 0;

98 i‡(
	`tc£èâr
(
fd
, 
TCSANOW
, &
ây
) != 0) {

99 
	`DEBUG_PRINTF
("ERROR:Åc£èâ∏Áûed wôh %d - %s", 
î∫o
, 
	`°ªº‹
(errno));

100  
LGW_USB_ERROR
;

103  
LGW_USB_SUCCESS
;

104 
	}
}

109 
	$£t_blockög_löux
(
fd
, 
boﬁ
 
blockög
) {

110 
ãrmios
 
ây
;

112 
	`mem£t
(&
ây
, 0, Åty);

115 i‡(
	`tcgë©å
(
fd
, &
ây
) != 0) {

116 
	`DEBUG_PRINTF
("ERROR:Åcgë©å faûed wôh %d - %s", 
î∫o
, 
	`°ªº‹
(errno));

117  
LGW_USB_ERROR
;

120 
ây
.
c_cc
[
VMIN
] = (
blockög
 =
åue
) ? 1 : 0;

121 
ây
.
c_cc
[
VTIME
] = 1;

124 i‡(
	`tc£èâr
(
fd
, 
TCSANOW
, &
ây
) != 0) {

125 
	`DEBUG_PRINTF
("ERROR:Åc£èâ∏Áûed wôh %d - %s", 
î∫o
, 
	`°ªº‹
(errno));

126  
LGW_USB_ERROR
;

129  
LGW_USB_SUCCESS
;

130 
	}
}

135 
	$lgw_usb_›í
(c⁄° * 
com_∑th
, **
com_èrgë_±r
) {

136 *
usb_devi˚
 = 
NULL
;

137 
p‹äame
[50];

138 
x
;

139 
fd
;

140 
s_pög_öfo
 
gw_öfo
;

141 
s_°©us
 
mcu_°©us
;

142 
uöt8_t
 
d©a
;

143 
ssize_t
 
n
;

146 
	`CHECK_NULL
(
com_èrgë_±r
);

148 
usb_devi˚
 = 
	`mÆloc
(());

149 i‡(
usb_devi˚
 =
NULL
) {

150 
	`DEBUG_MSG
("ERROR : MALLOC FAIL\n");

151  
LGW_USB_ERROR
;

155 
	`•rötf
(
p‹äame
, "%s", 
com_∑th
);

156 
fd
 = 
	`›í
(
p‹äame
, 
O_RDWR
 | 
O_NOCTTY
 | 
O_SYNC
);

157 i‡(
fd
 < 0) {

158 
	`¥ötf
("ERROR: faûedÅÿ›í COMÖ‹à%†- %s\n", 
p‹äame
, 
	`°ªº‹
(
î∫o
));

160 
	`¥ötf
("INFO: Configuring TTY\n");

161 
x
 = 
	`£t_öãrÁ˚_©åibs_löux
(
fd
, 
B115200
);

162 i‡(
x
 != 0) {

163 
	`¥ötf
("ERROR: faûedÅÿc⁄figuª COMÖ‹à%s\n", 
p‹äame
);

164 
	`‰ì
(
usb_devi˚
);

165  
LGW_USB_ERROR
;

169 
	`¥ötf
("INFO: Flushing TTY\n");

171 
n
 = 
	`ªad
(
fd
, &
d©a
, 1);

172 i‡(
n
 > 0) {

173 
	`¥ötf
("NOTE: flushög sîü»p‹à(0x%2X)\n", 
d©a
);

175 } 
n
 > 0);

178 
	`¥ötf
("INFO: Setting TTY in blocking mode\n");

179 
x
 = 
	`£t_blockög_löux
(
fd
, 
åue
);

180 i‡(
x
 != 0) {

181 
	`¥ötf
("ERROR: faûedÅÿc⁄figuª COMÖ‹à%s\n", 
p‹äame
);

182 
	`‰ì
(
usb_devi˚
);

183  
LGW_USB_ERROR
;

186 *
usb_devi˚
 = 
fd
;

187 *
com_èrgë_±r
 = (*)
usb_devi˚
;

190 
	`§™d
(0);

193 
	`¥ötf
("INFO: ConnectÅo MCU\n");

194 i‡(
	`mcu_pög
(
fd
, &
gw_öfo
) != 0) {

195 
	`¥ötf
("ERROR: failedÅoÖingÅhe concentrator MCU\n");

196  
LGW_USB_ERROR
;

198 i‡(
	`°∫cmp
(
gw_öfo
.
vîsi⁄
 + 1, 
mcu_vîsi⁄_°rög
,  mcu_version_string) != 0) {

199 
	`¥ötf
("WARNING: MCU vîsi⁄ mism©ch (ex≥˘ed:%s, gŸ:%s)\n", 
mcu_vîsi⁄_°rög
, 
gw_öfo
.
vîsi⁄
);

201 
	`¥ötf
("INFO: C⁄˚¡øt‹ MCU vîsi⁄ i†%s\n", 
gw_öfo
.
vîsi⁄
);

204 i‡(
	`mcu_gë_°©us
(
fd
, &
mcu_°©us
) != 0) {

205 
	`¥ötf
("ERROR: failedÅo get status fromÅhe concentrator MCU\n");

206  
LGW_USB_ERROR
;

208 
	`¥ötf
("INFO: MCU sètus: sys_time:%uÅem≥øtuª:%.1foC\n", 
mcu_°©us
.
sy°em_time_ms
, mcu_°©us.
ãm≥øtuª
);

211 
x
 = 
	`mcu_gpio_wrôe
(
fd
, 0, 1, 1);

212 
x
 |
	`mcu_gpio_wrôe
(
fd
, 0, 2, 1);

213 
x
 |
	`mcu_gpio_wrôe
(
fd
, 0, 2, 0);

215 
x
 |
	`mcu_gpio_wrôe
(
fd
, 0, 8, 0);

216 
x
 |
	`mcu_gpio_wrôe
(
fd
, 0, 8, 1);

217 i‡(
x
 != 0) {

218 
	`¥ötf
("ERROR: failedÅoÑeset SX1302\n");

219 
	`‰ì
(
usb_devi˚
);

220  
LGW_USB_ERROR
;

223  
LGW_USB_SUCCESS
;

226 
	`‰ì
(
usb_devi˚
);

227  
LGW_USB_ERROR
;

228 
	}
}

233 
	$lgw_usb_˛o£
(*
com_èrgë
) {

234 
usb_devi˚
;

235 
x
, 
îr
 = 
LGW_USB_SUCCESS
;

238 
	`CHECK_NULL
(
com_èrgë
);

240 
usb_devi˚
 = *(*)
com_èrgë
;

243 
x
 = 
	`mcu_gpio_wrôe
(
usb_devi˚
, 0, 1, 1);

244 
x
 |
	`mcu_gpio_wrôe
(
usb_devi˚
, 0, 2, 1);

245 
x
 |
	`mcu_gpio_wrôe
(
usb_devi˚
, 0, 2, 0);

247 
x
 |
	`mcu_gpio_wrôe
(
usb_devi˚
, 0, 8, 0);

248 
x
 |
	`mcu_gpio_wrôe
(
usb_devi˚
, 0, 8, 1);

249 i‡(
x
 != 0) {

250 
	`¥ötf
("ERROR: failedÅoÑeset SX1302\n");

251 
îr
 = 
LGW_USB_ERROR
;

255 
x
 = 
	`˛o£
(
usb_devi˚
);

256 
	`‰ì
(
com_èrgë
);

257 i‡(
x
 != 0) {

258 
	`¥ötf
("ERROR: failedÅo close USB file\n");

259 
îr
 = 
LGW_USB_ERROR
;

263 i‡(
îr
 != 0) {

264 
	`¥ötf
("ERROR: USB PORT FAILED TO CLOSE\n");

265  
LGW_USB_ERROR
;

267 
	`DEBUG_MSG
("Note: USBÖort closed\n");

268  
LGW_USB_SUCCESS
;

270 
	}
}

275 
	$lgw_usb_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
d©a
) {

276  
	`lgw_usb_wb
(
com_èrgë
, 
•i_mux_èrgë
, 
addªss
, &
d©a
, 1);

277 
	}
}

282 
	$lgw_usb_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
) {

283  
	`lgw_usb_rb
(
com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
, 1);

284 
	}
}

289 
	$lgw_usb_rmw
(*
com_èrgë
, 
uöt16_t
 
addªss
, 
uöt8_t
 
offs
, uöt8_à
Àng
, uöt8_à
d©a
) {

290 
usb_devi˚
;

291 
uöt8_t
 
comm™d_size
 = 6;

292 
uöt8_t
 
ö_out_buf
[
comm™d_size
];

293 
a
 = 0;

296 
	`CHECK_NULL
(
com_èrgë
);

298 
usb_devi˚
 = *(*)
com_èrgë
;

300 
	`DEBUG_PRINTF
("==> RMWÑegi°î @ 0x%04X, offs:%uÜíg:%u vÆue:0x%02X\n", 
addªss
, 
offs
, 
Àng
, 
d©a
);

303 
ö_out_buf
[0] = 
_lgw_•i_ªq_nb
;

304 
ö_out_buf
[1] = 
MCU_SPI_REQ_TYPE_READ_MODIFY_WRITE
;

305 
ö_out_buf
[2] = (
uöt8_t
)(
addªss
 >> 8);

306 
ö_out_buf
[3] = (
uöt8_t
)(
addªss
 >> 0);

307 
ö_out_buf
[4] = ((1 << 
Àng
Ë- 1Ë<< 
offs
;

308 
ö_out_buf
[5] = 
d©a
 << 
offs
;

310 i‡(
_lgw_wrôe_mode
 =
LGW_COM_WRITE_MODE_BULK
) {

311 
a
 = 
	`mcu_•i_°‹e
(
ö_out_buf
, 
comm™d_size
);

312 
_lgw_•i_ªq_nb
 += 1;

314 
a
 = 
	`mcu_•i_wrôe
(
usb_devi˚
, 
ö_out_buf
, 
comm™d_size
);

318 i‡(
a
 != 0) {

319 
	`DEBUG_MSG
("ERROR: USB WRITE FAILURE\n");

322 
	`DEBUG_MSG
("Note: USB write success\n");

325 
	}
}

330 
	$lgw_usb_wb
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, c⁄° uöt8_à*
d©a
, uöt16_à
size
) {

331 
usb_devi˚
;

332 
uöt16_t
 
comm™d_size
 = 
size
 + 8;

333 
uöt8_t
 
ö_out_buf
[
comm™d_size
];

334 
i
;

335 
a
 = 0;

338 
	`CHECK_NULL
(
com_èrgë
);

339 
	`CHECK_NULL
(
d©a
);

341 
usb_devi˚
 = *(*)
com_èrgë
;

345 
ö_out_buf
[0] = 
_lgw_•i_ªq_nb
;

346 
ö_out_buf
[1] = 
MCU_SPI_REQ_TYPE_READ_WRITE
;

347 
ö_out_buf
[2] = 
MCU_SPI_TARGET_SX1302
;

348 
ö_out_buf
[3] = (
uöt8_t
)((
size
 + 3) >> 8);

349 
ö_out_buf
[4] = (
uöt8_t
)((
size
 + 3) >> 0);

351 
ö_out_buf
[5] = 
•i_mux_èrgë
;

352 
ö_out_buf
[6] = 0x80 | ((
addªss
 >> 8) & 0x7F);

353 
ö_out_buf
[7] = ((
addªss
 >> 0) & 0xFF);

354 
i
 = 0; i < 
size
; i++) {

355 
ö_out_buf
[
i
 + 8] = 
d©a
[i];

358 i‡(
_lgw_wrôe_mode
 =
LGW_COM_WRITE_MODE_BULK
) {

359 
a
 = 
	`mcu_•i_°‹e
(
ö_out_buf
, 
comm™d_size
);

360 
_lgw_•i_ªq_nb
 += 1;

362 
a
 = 
	`mcu_•i_wrôe
(
usb_devi˚
, 
ö_out_buf
, 
comm™d_size
);

366 i‡(
a
 != 0) {

367 
	`DEBUG_MSG
("ERROR: USB WRITE BURST FAILURE\n");

370 
	`DEBUG_MSG
("Note: USB write burst success\n");

373 
	}
}

378 
	$lgw_usb_rb
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
, uöt16_à
size
) {

379 
usb_devi˚
;

380 
uöt16_t
 
comm™d_size
 = 
size
 + 9;

381 
uöt8_t
 
ö_out_buf
[
comm™d_size
];

382 
i
;

383 
a
 = 0;

386 
	`CHECK_NULL
(
com_èrgë
);

387 
	`CHECK_NULL
(
d©a
);

389 
usb_devi˚
 = *(*)
com_èrgë
;

393 
ö_out_buf
[0] = 0;

394 
ö_out_buf
[1] = 
MCU_SPI_REQ_TYPE_READ_WRITE
;

395 
ö_out_buf
[2] = 
MCU_SPI_TARGET_SX1302
;

396 
ö_out_buf
[3] = (
uöt8_t
)((
size
 + 4) >> 8);

397 
ö_out_buf
[4] = (
uöt8_t
)((
size
 + 4) >> 0);

399 
ö_out_buf
[5] = 
•i_mux_èrgë
;

400 
ö_out_buf
[6] = 0x00 | ((
addªss
 >> 8) & 0x7F);

401 
ö_out_buf
[7] = ((
addªss
 >> 0) & 0xFF);

402 
ö_out_buf
[8] = 0x00;

403 
i
 = 0; i < 
size
; i++) {

404 
ö_out_buf
[
i
 + 9] = 
d©a
[i];

407 i‡(
_lgw_wrôe_mode
 =
LGW_COM_WRITE_MODE_BULK
) {

409 
	`¥ötf
("ERROR: USB READ BURST FAILURE - bulk mode isÉnabled\n");

412 
a
 = 
	`mcu_•i_wrôe
(
usb_devi˚
, 
ö_out_buf
, 
comm™d_size
);

416 i‡(
a
 != 0) {

417 
	`DEBUG_MSG
("ERROR: USB READ BURST FAILURE\n");

420 
	`DEBUG_MSG
("Note: USBÑead burst success\n");

421 
	`mem˝y
(
d©a
, 
ö_out_buf
 + 9, 
size
);

424 
	}
}

428 
	$lgw_usb_£t_wrôe_mode
(
lgw_com_wrôe_mode_t
 
wrôe_mode
) {

429 i‡(
wrôe_mode
 >
LGW_COM_WRITE_MODE_UNKNOWN
) {

430 
	`¥ötf
("ERROR: wrong write mode\n");

434 
	`DEBUG_PRINTF
("INFO: sëtög USB wrôêmodêtÿ%s\n", (
wrôe_mode
 =
LGW_COM_WRITE_MODE_SINGLE
) ? "SINGLE" : "BULK");

436 
_lgw_wrôe_mode
 = 
wrôe_mode
;

439 
	}
}

443 
	$lgw_usb_Êush
(*
com_èrgë
) {

444 
usb_devi˚
;

445 
a
 = 0;

448 
	`CHECK_NULL
(
com_èrgë
);

449 i‡(
_lgw_wrôe_mode
 !
LGW_COM_WRITE_MODE_BULK
) {

450 
	`¥ötf
("ERROR: %s: c™nŸ flush i¿sögÀ wrôêmode\n", 
__FUNCTION__
);

455 
_lgw_wrôe_mode
 = 
LGW_COM_WRITE_MODE_SINGLE
;

457 i‡(
_lgw_•i_ªq_nb
 == 0) {

458 
	`¥ötf
("INFO:Ço SPIÑequestÅo flush\n");

462 
usb_devi˚
 = *(*)
com_èrgë
;

464 
	`DEBUG_MSG
("INFO: flushing USB write buffer\n");

465 
a
 = 
	`mcu_•i_Êush
(
usb_devi˚
);

466 i‡(
a
 != 0) {

467 
	`¥ötf
("ERROR: FailedÅo flush USB write buffer\n");

471 
_lgw_•i_ªq_nb
 = 0;

473  
a
;

474 
	}
}

478 
uöt16_t
 
	$lgw_usb_chunk_size
() {

479  (
uöt16_t
)
LGW_USB_BURST_CHUNK
;

480 
	}
}

484 
	$lgw_usb_gë_ãm≥øtuª
(*
com_èrgë
, * 
ãm≥øtuª
) {

485 
usb_devi˚
;

486 
s_°©us
 
mcu_°©us
;

489 
	`CHECK_NULL
(
com_èrgë
);

490 
	`CHECK_NULL
(
ãm≥øtuª
);

492 
usb_devi˚
 = *(*)
com_èrgë
;

494 i‡(
	`mcu_gë_°©us
(
usb_devi˚
, &
mcu_°©us
) != 0) {

495 
	`¥ötf
("ERROR: failedÅo get status fromÅhe concentrator MCU\n");

498 
	`DEBUG_PRINTF
("INFO:Åem≥øtuª:%.1foC\n", 
mcu_°©us
.
ãm≥øtuª
);

500 *
ãm≥øtuª
 = 
mcu_°©us
.temperature;

503 
	}
}

	@libloragw/src/sx1250_com.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

22 
	~"sx1250_com.h
"

23 
	~"sx1250_•i.h
"

24 
	~"sx1250_usb.h
"

29 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

30 #i‡
DEBUG_RAD
 == 1

31 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

32 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

33 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); -1;}

	)

35 
	#DEBUG_MSG
(
°r
)

	)

36 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

37 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ -1;}

	)

46 
	$sx1250_com_w
(
lgw_com_ty≥_t
 
com_ty≥
, *
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

47 
com_°©
;

50 
	`CHECK_NULL
(
com_èrgë
);

51 
	`CHECK_NULL
(
d©a
);

53 
com_ty≥
) {

54 
LGW_COM_SPI
:

55 
com_°©
 = 
	`sx1250_•i_w
(
com_èrgë
, 
•i_mux_èrgë
, 
›_code
, 
d©a
, 
size
);

57 
LGW_COM_USB
:

58 
com_°©
 = 
	`sx1250_usb_w
(
com_èrgë
, 
•i_mux_èrgë
, 
›_code
, 
d©a
, 
size
);

61 
	`¥ötf
("ERROR: wrong communicationÅype (SHOULD NOT HAPPEN)\n");

62 
com_°©
 = 
LGW_COM_ERROR
;

66  
com_°©
;

67 
	}
}

71 
	$sx1250_com_r
(
lgw_com_ty≥_t
 
com_ty≥
, *
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

72 
com_°©
;

75 
	`CHECK_NULL
(
com_èrgë
);

76 
	`CHECK_NULL
(
d©a
);

78 
com_ty≥
) {

79 
LGW_COM_SPI
:

80 
com_°©
 = 
	`sx1250_•i_r
(
com_èrgë
, 
•i_mux_èrgë
, 
›_code
, 
d©a
, 
size
);

82 
LGW_COM_USB
:

83 
com_°©
 = 
	`sx1250_usb_r
(
com_èrgë
, 
•i_mux_èrgë
, 
›_code
, 
d©a
, 
size
);

86 
	`¥ötf
("ERROR: wrong communicationÅype (SHOULD NOT HAPPEN)\n");

87 
com_°©
 = 
LGW_COM_ERROR
;

91  
com_°©
;

92 
	}
}

	@libloragw/src/sx1250_spi.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<uni°d.h
>

22 
	~<f˙é.h
>

23 
	~<°rög.h
>

25 
	~<sys/io˘l.h
>

26 
	~<löux/•i/•idev.h
>

28 
	~"l‹agw_•i.h
"

29 
	~"l‹agw_aux.h
"

30 
	~"sx1250_•i.h
"

35 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

36 #i‡
DEBUG_RAD
 == 1

37 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

38 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

39 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

41 
	#DEBUG_MSG
(
°r
)

	)

42 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

43 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

49 
	#WAIT_BUSY_SX1250_MS
 1

	)

54 
	$sx1250_•i_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

55 
com_devi˚
;

56 
cmd_size
 = 2;

57 
uöt8_t
 
out_buf
[
cmd_size
 + 
size
];

58 
uöt8_t
 
comm™d_size
;

59 
•i_ioc_å™s„r
 
k
;

60 
a
, 
i
;

63 
	`waô_ms
(
WAIT_BUSY_SX1250_MS
);

66 
	`CHECK_NULL
(
com_èrgë
);

67 
	`CHECK_NULL
(
d©a
);

69 
com_devi˚
 = *(*)
com_èrgë
;

72 
out_buf
[0] = 
•i_mux_èrgë
;

73 
out_buf
[1] = (
uöt8_t
)
›_code
;

74 
i
 = 0; i < ()
size
; i++) {

75 
out_buf
[
cmd_size
 + 
i
] = 
d©a
[i];

77 
comm™d_size
 = 
cmd_size
 + 
size
;

80 
	`mem£t
(&
k
, 0, (k));

81 
k
.
tx_buf
 = (Ë
out_buf
;

82 
k
.
Àn
 = 
comm™d_size
;

83 
k
.
•ìd_hz
 = 
SPI_SPEED
;

84 
k
.
cs_ch™ge
 = 0;

85 
k
.
bôs_≥r_w‹d
 = 8;

86 
a
 = 
	`io˘l
(
com_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

89 i‡(
a
 !()
k
.
Àn
) {

90 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

91  
LGW_SPI_ERROR
;

93 
	`DEBUG_MSG
("Note: SPI write success\n");

94  
LGW_SPI_SUCCESS
;

96 
	}
}

100 
	$sx1250_•i_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

101 
com_devi˚
;

102 
cmd_size
 = 2;

103 
uöt8_t
 
out_buf
[
cmd_size
 + 
size
];

104 
uöt8_t
 
comm™d_size
;

105 
uöt8_t
 
ö_buf
[
	`ARRAY_SIZE
(
out_buf
)];

106 
•i_ioc_å™s„r
 
k
;

107 
a
, 
i
;

110 
	`waô_ms
(
WAIT_BUSY_SX1250_MS
);

113 
	`CHECK_NULL
(
com_èrgë
);

114 
	`CHECK_NULL
(
d©a
);

116 
com_devi˚
 = *(*)
com_èrgë
;

119 
out_buf
[0] = 
•i_mux_èrgë
;

120 
out_buf
[1] = (
uöt8_t
)
›_code
;

121 
i
 = 0; i < ()
size
; i++) {

122 
out_buf
[
cmd_size
 + 
i
] = 
d©a
[i];

124 
comm™d_size
 = 
cmd_size
 + 
size
;

127 
	`mem£t
(&
k
, 0, (k));

128 
k
.
tx_buf
 = (Ë
out_buf
;

129 
k
.
rx_buf
 = (Ë
ö_buf
;

130 
k
.
Àn
 = 
comm™d_size
;

131 
k
.
cs_ch™ge
 = 0;

132 
a
 = 
	`io˘l
(
com_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

135 i‡(
a
 !()
k
.
Àn
) {

136 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

137  
LGW_SPI_ERROR
;

139 
	`DEBUG_MSG
("Note: SPIÑead success\n");

141 
	`mem˝y
(
d©a
, 
ö_buf
 + 
cmd_size
, 
size
);

142  
LGW_SPI_SUCCESS
;

144 
	}
}

	@libloragw/src/sx1250_usb.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

23 
	~"l‹agw_aux.h
"

24 
	~"l‹agw_mcu.h
"

25 
	~"sx1250_usb.h
"

30 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

31 #i‡
DEBUG_RAD
 == 1

32 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

33 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

34 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); -1;}

	)

36 
	#DEBUG_MSG
(
°r
)

	)

37 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

38 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ -1;}

	)

44 
	#WAIT_BUSY_SX1250_MS
 1

	)

49 
	$sx1250_usb_w
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

50 
usb_devi˚
;

51 
uöt8_t
 
comm™d_size
 = 
size
 + 7;

52 
uöt8_t
 
ö_out_buf
[
comm™d_size
];

53 
a
;

54 
i
;

57 
	`CHECK_NULL
(
com_èrgë
);

58 
	`CHECK_NULL
(
d©a
);

60 
usb_devi˚
 = *(*)
com_èrgë
;

63 
	`waô_ms
(
WAIT_BUSY_SX1250_MS
);

67 
ö_out_buf
[0] = 0;

68 
ö_out_buf
[1] = 
MCU_SPI_REQ_TYPE_READ_WRITE
;

69 
ö_out_buf
[2] = 
MCU_SPI_TARGET_SX1302
;

70 
ö_out_buf
[3] = (
uöt8_t
)((
size
 + 2) >> 8);

71 
ö_out_buf
[4] = (
uöt8_t
)((
size
 + 2) >> 0);

73 
ö_out_buf
[5] = 
•i_mux_èrgë
;

74 
ö_out_buf
[6] = (
uöt8_t
)
›_code
;

75 
i
 = 0; i < 
size
; i++) {

76 
ö_out_buf
[
i
 + 7] = 
d©a
[i];

78 
a
 = 
	`mcu_•i_wrôe
(
usb_devi˚
, 
ö_out_buf
, 
comm™d_size
);

81 i‡(
a
 != 0) {

82 
	`DEBUG_MSG
("ERROR: USB SX1250 WRITE FAILURE\n");

85 
	`DEBUG_MSG
("Note: USB SX1250 write success\n");

88 
	}
}

92 
	$sx1250_usb_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

93 
usb_devi˚
;

94 
uöt8_t
 
comm™d_size
 = 
size
 + 7;

95 
uöt8_t
 
ö_out_buf
[
comm™d_size
];

96 
a
;

97 
i
;

100 
	`CHECK_NULL
(
com_èrgë
);

101 
	`CHECK_NULL
(
d©a
);

103 
usb_devi˚
 = *(*)
com_èrgë
;

106 
	`waô_ms
(
WAIT_BUSY_SX1250_MS
);

110 
ö_out_buf
[0] = 0;

111 
ö_out_buf
[1] = 
MCU_SPI_REQ_TYPE_READ_WRITE
;

112 
ö_out_buf
[2] = 
MCU_SPI_TARGET_SX1302
;

113 
ö_out_buf
[3] = (
uöt8_t
)((
size
 + 2) >> 8);

114 
ö_out_buf
[4] = (
uöt8_t
)((
size
 + 2) >> 0);

116 
ö_out_buf
[5] = 
•i_mux_èrgë
;

117 
ö_out_buf
[6] = (
uöt8_t
)
›_code
;

118 
i
 = 0; i < 
size
; i++) {

119 
ö_out_buf
[
i
 + 7] = 
d©a
[i];

121 
a
 = 
	`mcu_•i_wrôe
(
usb_devi˚
, 
ö_out_buf
, 
comm™d_size
);

124 i‡(
a
 != 0) {

125 
	`DEBUG_MSG
("ERROR: USB SX1250 READ FAILURE\n");

128 
	`DEBUG_MSG
("Note: USB SX1250Ñead success\n");

129 
	`mem˝y
(
d©a
, 
ö_out_buf
 + 7, 
size
);

132 
	}
}

	@libloragw/src/sx125x_com.c

18 
	~<°döt.h
>

19 
	~<°dio.h
>

21 
	~"sx125x_com.h
"

22 
	~"sx125x_•i.h
"

27 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

28 #i‡
DEBUG_RAD
 == 1

29 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

30 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

31 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); -1;}

	)

33 
	#DEBUG_MSG
(
°r
)

	)

34 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

35 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ -1;}

	)

53 
	$sx125x_com_r
(
lgw_com_ty≥_t
 
com_ty≥
, *
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
) {

54 
com_°©
;

57 
	`CHECK_NULL
(
com_èrgë
);

58 
	`CHECK_NULL
(
d©a
);

60 
com_ty≥
) {

61 
LGW_COM_SPI
:

62 
com_°©
 = 
	`sx125x_•i_r
(
com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
);

64 
LGW_COM_USB
:

65 
	`¥ötf
("ERROR: USB COMÅype isÇot supported for sx125x\n");

68 
	`¥ötf
("ERROR: wrong communicationÅype (SHOULD NOT HAPPEN)\n");

72  
com_°©
;

73 
	}
}

77 
	$sx125x_com_w
(
lgw_com_ty≥_t
 
com_ty≥
, *
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
) {

78 
com_°©
;

81 
	`CHECK_NULL
(
com_èrgë
);

83 
com_ty≥
) {

84 
LGW_COM_SPI
:

85 
com_°©
 = 
	`sx125x_•i_w
(
com_èrgë
, 
•i_mux_èrgë
, 
addªss
, 
d©a
);

87 
LGW_COM_USB
:

88 
	`¥ötf
("ERROR: USB COMÅype isÇot supported for sx125x\n");

91 
	`¥ötf
("ERROR: wrong communicationÅype (SHOULD NOT HAPPEN)\n");

95  
com_°©
;

96 
	}
}

	@libloragw/src/sx125x_spi.c

18 
	~<°döt.h
>

19 
	~<°dboﬁ.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

23 
	~<sys/io˘l.h
>

24 
	~<löux/•i/•idev.h
>

26 
	~"sx125x_•i.h
"

27 
	~"l‹agw_•i.h
"

32 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

33 #i‡
DEBUG_RAD
 == 1

34 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

35 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

36 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

38 
	#DEBUG_MSG
(
°r
)

	)

39 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

40 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

49 
	#READ_ACCESS
 0x00

	)

50 
	#WRITE_ACCESS
 0x80

	)

62 
	$sx125x_•i_r
(*
com_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
) {

63 
com_devi˚
;

64 
uöt8_t
 
out_buf
[3];

65 
uöt8_t
 
comm™d_size
;

66 
uöt8_t
 
ö_buf
[
	`ARRAY_SIZE
(
out_buf
)];

67 
•i_ioc_å™s„r
 
k
;

68 
a
;

71 
	`CHECK_NULL
(
com_èrgë
);

72 
	`CHECK_NULL
(
d©a
);

74 
com_devi˚
 = *(*)
com_èrgë
;

77 
out_buf
[0] = 
•i_mux_èrgë
;

78 
out_buf
[1] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

79 
out_buf
[2] = 0x00;

80 
comm™d_size
 = 3;

83 
	`mem£t
(&
k
, 0, (k));

84 
k
.
tx_buf
 = (Ë
out_buf
;

85 
k
.
rx_buf
 = (Ë
ö_buf
;

86 
k
.
Àn
 = 
comm™d_size
;

87 
k
.
cs_ch™ge
 = 0;

88 
a
 = 
	`io˘l
(
com_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

91 i‡(
a
 !()
k
.
Àn
) {

92 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

93  
LGW_SPI_ERROR
;

96 *
d©a
 = 
ö_buf
[
comm™d_size
 - 1];

97  
LGW_SPI_SUCCESS
;

99 
	}
}

103 
	$sx125x_•i_w
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
) {

104 
•i_devi˚
;

105 
uöt8_t
 
out_buf
[3];

106 
uöt8_t
 
comm™d_size
;

107 
•i_ioc_å™s„r
 
k
;

108 
a
;

111 
	`CHECK_NULL
(
•i_èrgë
);

113 
•i_devi˚
 = *(*)
•i_èrgë
;

116 
out_buf
[0] = 
•i_mux_èrgë
;

117 
out_buf
[1] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

118 
out_buf
[2] = 
d©a
;

119 
comm™d_size
 = 3;

122 
	`mem£t
(&
k
, 0, (k));

123 
k
.
tx_buf
 = (Ë
out_buf
;

124 
k
.
Àn
 = 
comm™d_size
;

125 
k
.
•ìd_hz
 = 
SPI_SPEED
;

126 
k
.
cs_ch™ge
 = 0;

127 
k
.
bôs_≥r_w‹d
 = 8;

128 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

131 i‡(
a
 !()
k
.
Àn
) {

132 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

133  
LGW_SPI_ERROR
;

136  
LGW_SPI_SUCCESS
;

138 
	}
}

	@libloragw/src/sx1261_com.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

22 
	~"l‹agw_com.h
"

23 
	~"l‹agw_•i.h
"

24 
	~"sx1261_com.h
"

25 
	~"sx1261_•i.h
"

26 
	~"sx1261_usb.h
"

31 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

32 #i‡
DEBUG_LBT
 == 1

33 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

34 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

35 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); -1;}

	)

37 
	#DEBUG_MSG
(
°r
)

	)

38 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

39 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ -1;}

	)

51 
lgw_com_ty≥_t
 
	g_sx1261_com_ty≥
 = 
LGW_COM_UNKNOWN
;

56 * 
	g_sx1261_com_èrgë
 = 
NULL
;

64 
	$sx1261_com_›í
(
lgw_com_ty≥_t
 
com_ty≥
, c⁄° *
com_∑th
) {

65 
•i_°©
 = 
LGW_COM_SUCCESS
;

67 
_sx1261_com_ty≥
 = 
com_ty≥
;

69 
com_ty≥
) {

70 
LGW_COM_SPI
:

72 
•i_°©
 = 
	`lgw_•i_›í
(
com_∑th
, &
_sx1261_com_èrgë
);

73 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

74 
	`¥ötf
("ERROR: %s: FaûedÅÿc⁄√˘Åÿsx1261Ñadiÿ⁄ %s\n", 
__FUNCTION__
, 
com_∑th
);

75  
LGW_COM_ERROR
;

77 
	`DEBUG_PRINTF
("SX1261: c⁄√˘ed wôh SPI %s\n", 
com_∑th
);

79 
LGW_COM_USB
:

81 
_sx1261_com_èrgë
 = 
	`lgw_com_èrgë
();

82 
	`DEBUG_MSG
("SX1261: connected with USB\n");

85 
	`¥ötf
("ERROR: %s: wr⁄g COMÅy≥\n", 
__FUNCTION__
);

86  
LGW_COM_ERROR
;

89  
LGW_COM_SUCCESS
;

90 
	}
}

94 
	$sx1261_com_˛o£
() {

95 
•i_°©
 = 
LGW_COM_SUCCESS
;

97 
_sx1261_com_ty≥
) {

98 
LGW_COM_SPI
:

100 
•i_°©
 = 
	`lgw_•i_˛o£
(
_sx1261_com_èrgë
);

101 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

102 
	`¥ötf
("ERROR: %s: FaûedÅÿdisc⁄√˘ SX1261Ñadio\n", 
__FUNCTION__
);

103  
LGW_COM_ERROR
;

106 
LGW_COM_USB
:

109 
	`¥ötf
("ERROR: %s: sx1261ÇŸ c⁄√˘ed\n", 
__FUNCTION__
);

110  
LGW_COM_ERROR
;

113 
_sx1261_com_ty≥
 = 
LGW_COM_UNKNOWN
;

114 
_sx1261_com_èrgë
 = 
NULL
;

116  
LGW_COM_SUCCESS
;

117 
	}
}

121 
	$sx1261_com_w
(
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
) {

122 
com_°©
;

125 
	`CHECK_NULL
(
_sx1261_com_èrgë
);

126 
	`CHECK_NULL
(
d©a
);

128 
_sx1261_com_ty≥
) {

129 
LGW_COM_SPI
:

130 
com_°©
 = 
	`sx1261_•i_w
(
_sx1261_com_èrgë
, 
›_code
, 
d©a
, 
size
);

132 
LGW_COM_USB
:

133 
com_°©
 = 
	`sx1261_usb_w
(
_sx1261_com_èrgë
, 
›_code
, 
d©a
, 
size
);

136 
	`¥ötf
("ERROR: wrong communicationÅype (SHOULD NOT HAPPEN)\n");

137 
com_°©
 = 
LGW_COM_ERROR
;

141  
com_°©
;

142 
	}
}

146 
	$sx1261_com_r
(
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
) {

147 
com_°©
;

150 
	`CHECK_NULL
(
_sx1261_com_èrgë
);

151 
	`CHECK_NULL
(
d©a
);

153 
_sx1261_com_ty≥
) {

154 
LGW_COM_SPI
:

155 
com_°©
 = 
	`sx1261_•i_r
(
_sx1261_com_èrgë
, 
›_code
, 
d©a
, 
size
);

157 
LGW_COM_USB
:

158 
com_°©
 = 
	`sx1261_usb_r
(
_sx1261_com_èrgë
, 
›_code
, 
d©a
, 
size
);

161 
	`¥ötf
("ERROR: wrong communicationÅype (SHOULD NOT HAPPEN)\n");

162 
com_°©
 = 
LGW_COM_ERROR
;

166  
com_°©
;

167 
	}
}

171 
	$sx1261_com_£t_wrôe_mode
(
lgw_com_wrôe_mode_t
 
wrôe_mode
) {

172 
com_°©
 = 
LGW_COM_SUCCESS
;

174 
_sx1261_com_ty≥
) {

175 
LGW_COM_SPI
:

178 
LGW_COM_USB
:

179 
com_°©
 = 
	`sx1261_usb_£t_wrôe_mode
(
wrôe_mode
);

182 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

183 
com_°©
 = 
LGW_COM_ERROR
;

187  
com_°©
;

188 
	}
}

192 
	$sx1261_com_Êush
() {

193 
com_°©
 = 
LGW_COM_SUCCESS
;

195 
_sx1261_com_ty≥
) {

196 
LGW_COM_SPI
:

199 
LGW_COM_USB
:

200 
com_°©
 = 
	`sx1261_usb_Êush
(
_sx1261_com_èrgë
);

203 
	`¥ötf
("ERROR(%s:%d): wr⁄g communiˇti⁄Åy≥ (SHOULD NOT HAPPEN)\n", 
__FUNCTION__
, 
__LINE__
);

204 
com_°©
 = 
LGW_COM_ERROR
;

208  
com_°©
;

209 
	}
}

	@libloragw/src/sx1261_spi.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<uni°d.h
>

22 
	~<f˙é.h
>

23 
	~<°rög.h
>

25 
	~<sys/io˘l.h
>

26 
	~<löux/•i/•idev.h
>

28 
	~"l‹agw_•i.h
"

29 
	~"l‹agw_aux.h
"

30 
	~"sx1261_•i.h
"

35 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

36 #i‡
DEBUG_LBT
 == 1

37 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

38 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

39 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

41 
	#DEBUG_MSG
(
°r
)

	)

42 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

43 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

49 
	#WAIT_BUSY_SX1250_MS
 1

	)

54 
	$sx1261_•i_w
(*
com_èrgë
, 
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
) {

55 
com_devi˚
;

56 
cmd_size
 = 1;

57 
uöt8_t
 
out_buf
[
cmd_size
 + 
size
];

58 
uöt8_t
 
comm™d_size
;

59 
•i_ioc_å™s„r
 
k
;

60 
a
, 
i
;

63 
	`waô_ms
(
WAIT_BUSY_SX1250_MS
);

66 
	`CHECK_NULL
(
com_èrgë
);

67 
	`CHECK_NULL
(
d©a
);

69 
com_devi˚
 = *(*)
com_èrgë
;

72 
out_buf
[0] = (
uöt8_t
)
›_code
;

73 
i
 = 0; i < ()
size
; i++) {

74 
out_buf
[
cmd_size
 + 
i
] = 
d©a
[i];

76 
comm™d_size
 = 
cmd_size
 + 
size
;

79 
	`mem£t
(&
k
, 0, (k));

80 
k
.
tx_buf
 = (Ë
out_buf
;

81 
k
.
Àn
 = 
comm™d_size
;

82 
k
.
•ìd_hz
 = 
SPI_SPEED
;

83 
k
.
cs_ch™ge
 = 0;

84 
k
.
bôs_≥r_w‹d
 = 8;

85 
a
 = 
	`io˘l
(
com_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

88 i‡(
a
 !()
k
.
Àn
) {

89 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

90  
LGW_SPI_ERROR
;

92 
	`DEBUG_MSG
("Note: SPI write success\n");

93  
LGW_SPI_SUCCESS
;

95 
	}
}

99 
	$sx1261_•i_r
(*
com_èrgë
, 
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
) {

100 
com_devi˚
;

101 
cmd_size
 = 1;

102 
uöt8_t
 
out_buf
[
cmd_size
 + 
size
];

103 
uöt8_t
 
comm™d_size
;

104 
uöt8_t
 
ö_buf
[
	`ARRAY_SIZE
(
out_buf
)];

105 
•i_ioc_å™s„r
 
k
;

106 
a
, 
i
;

109 
	`waô_ms
(
WAIT_BUSY_SX1250_MS
);

112 
	`CHECK_NULL
(
com_èrgë
);

113 
	`CHECK_NULL
(
d©a
);

115 
com_devi˚
 = *(*)
com_èrgë
;

118 
out_buf
[0] = (
uöt8_t
)
›_code
;

119 
i
 = 0; i < ()
size
; i++) {

120 
out_buf
[
cmd_size
 + 
i
] = 
d©a
[i];

122 
comm™d_size
 = 
cmd_size
 + 
size
;

125 
	`mem£t
(&
k
, 0, (k));

126 
k
.
tx_buf
 = (Ë
out_buf
;

127 
k
.
rx_buf
 = (Ë
ö_buf
;

128 
k
.
Àn
 = 
comm™d_size
;

129 
k
.
cs_ch™ge
 = 0;

130 
a
 = 
	`io˘l
(
com_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

133 i‡(
a
 !()
k
.
Àn
) {

134 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

135  
LGW_SPI_ERROR
;

137 
	`DEBUG_MSG
("Note: SPIÑead success\n");

139 
	`mem˝y
(
d©a
, 
ö_buf
 + 
cmd_size
, 
size
);

140  
LGW_SPI_SUCCESS
;

142 
	}
}

	@libloragw/src/sx1261_usb.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

23 
	~"l‹agw_aux.h
"

24 
	~"l‹agw_mcu.h
"

25 
	~"sx1261_usb.h
"

30 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

31 #i‡
DEBUG_LBT
 == 1

32 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

33 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

34 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); -1;}

	)

36 
	#DEBUG_MSG
(
°r
)

	)

37 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

38 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ -1;}

	)

47 
lgw_com_wrôe_mode_t
 
	g_sx1261_wrôe_mode
 = 
LGW_COM_WRITE_MODE_SINGLE
;

48 
uöt8_t
 
	g_sx1261_•i_ªq_nb
 = 0;

53 
	$sx1261_usb_w
(*
com_èrgë
, 
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
) {

54 
usb_devi˚
;

55 
uöt8_t
 
comm™d_size
 = 
size
 + 6;

56 
uöt8_t
 
ö_out_buf
[
comm™d_size
];

57 
a
;

58 
i
;

61 
	`CHECK_NULL
(
com_èrgë
);

62 
	`CHECK_NULL
(
d©a
);

64 
usb_devi˚
 = *(*)
com_èrgë
;

68 
ö_out_buf
[0] = 
_sx1261_•i_ªq_nb
;

69 
ö_out_buf
[1] = 
MCU_SPI_REQ_TYPE_READ_WRITE
;

70 
ö_out_buf
[2] = 
MCU_SPI_TARGET_SX1261
;

71 
ö_out_buf
[3] = (
uöt8_t
)((
size
 + 1) >> 8);

72 
ö_out_buf
[4] = (
uöt8_t
)((
size
 + 1) >> 0);

74 
ö_out_buf
[5] = (
uöt8_t
)
›_code
;

75 
i
 = 0; i < 
size
; i++) {

76 
ö_out_buf
[
i
 + 6] = 
d©a
[i];

79 i‡(
_sx1261_wrôe_mode
 =
LGW_COM_WRITE_MODE_BULK
) {

80 
a
 = 
	`mcu_•i_°‹e
(
ö_out_buf
, 
comm™d_size
);

81 
_sx1261_•i_ªq_nb
 += 1;

83 
a
 = 
	`mcu_•i_wrôe
(
usb_devi˚
, 
ö_out_buf
, 
comm™d_size
);

87 i‡(
a
 != 0) {

88 
	`DEBUG_MSG
("ERROR: USB SX1261 WRITE FAILURE\n");

91 
	`DEBUG_MSG
("Note: USB SX1261 write success\n");

94 
	}
}

98 
	$sx1261_usb_r
(*
com_èrgë
, 
sx1261_›_code_t
 
›_code
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
size
) {

99 
usb_devi˚
;

100 
uöt8_t
 
comm™d_size
 = 
size
 + 6;

101 
uöt8_t
 
ö_out_buf
[
comm™d_size
];

102 
a
;

103 
i
;

106 
	`CHECK_NULL
(
com_èrgë
);

107 
	`CHECK_NULL
(
d©a
);

109 
usb_devi˚
 = *(*)
com_èrgë
;

113 
ö_out_buf
[0] = 
_sx1261_•i_ªq_nb
;

114 
ö_out_buf
[1] = 
MCU_SPI_REQ_TYPE_READ_WRITE
;

115 
ö_out_buf
[2] = 
MCU_SPI_TARGET_SX1261
;

116 
ö_out_buf
[3] = (
uöt8_t
)((
size
 + 1) >> 8);

117 
ö_out_buf
[4] = (
uöt8_t
)((
size
 + 1) >> 0);

119 
ö_out_buf
[5] = (
uöt8_t
)
›_code
;

120 
i
 = 0; i < 
size
; i++) {

121 
ö_out_buf
[
i
 + 6] = 
d©a
[i];

123 i‡(
_sx1261_wrôe_mode
 =
LGW_COM_WRITE_MODE_BULK
) {

125 
	`¥ötf
("ERROR: USB READ BURST FAILURE - bulk mode isÉnabled\n");

128 
a
 = 
	`mcu_•i_wrôe
(
usb_devi˚
, 
ö_out_buf
, 
comm™d_size
);

132 i‡(
a
 != 0) {

133 
	`DEBUG_MSG
("ERROR: USB SX1261 WRITE FAILURE\n");

136 
	`DEBUG_MSG
("Note: USB SX1261 write success\n");

137 
	`mem˝y
(
d©a
, 
ö_out_buf
 + 6, 
size
);

140 
	}
}

144 
	$sx1261_usb_£t_wrôe_mode
(
lgw_com_wrôe_mode_t
 
wrôe_mode
) {

145 i‡(
wrôe_mode
 >
LGW_COM_WRITE_MODE_UNKNOWN
) {

146 
	`¥ötf
("ERROR: %s: wr⁄g wrôêmode\n", 
__FUNCTION__
);

150 
	`DEBUG_PRINTF
("INFO: sëtög SX1261 USB wrôêmodêtÿ%s\n", (
wrôe_mode
 =
LGW_COM_WRITE_MODE_SINGLE
) ? "SINGLE" : "BULK");

152 
_sx1261_wrôe_mode
 = 
wrôe_mode
;

155 
	}
}

159 
	$sx1261_usb_Êush
(*
com_èrgë
) {

160 
usb_devi˚
;

161 
a
 = 0;

164 
	`CHECK_NULL
(
com_èrgë
);

165 i‡(
_sx1261_wrôe_mode
 !
LGW_COM_WRITE_MODE_BULK
) {

166 
	`¥ötf
("ERROR: %s: c™nŸ flush i¿sögÀ wrôêmode\n", 
__FUNCTION__
);

171 
_sx1261_wrôe_mode
 = 
LGW_COM_WRITE_MODE_SINGLE
;

173 i‡(
_sx1261_•i_ªq_nb
 == 0) {

174 
	`¥ötf
("INFO:Ço SX1261 SPIÑequestÅo flush\n");

178 
usb_devi˚
 = *(*)
com_èrgë
;

180 
	`DEBUG_MSG
("INFO: flushing SX1261 USB write buffer\n");

181 
a
 = 
	`mcu_•i_Êush
(
usb_devi˚
);

182 i‡(
a
 != 0) {

183 
	`¥ötf
("ERROR: FailedÅo flush sx1261 USB write buffer\n");

187 
_sx1261_•i_ªq_nb
 = 0;

189  
a
;

190 
	}
}

	@libloragw/tst/test_loragw_cal_sx125x.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<m©h.h
>

32 
	~<sig«l.h
>

33 
	~<gë›t.h
>

34 
	~<sys/time.h
>

36 
	~"l‹agw_hÆ.h
"

37 
	~"l‹agw_ªg.h
"

38 
	~"l‹agw_com.h
"

39 
	~"l‹agw_sx1302.h
"

40 
	~"l‹agw_sx125x.h
"

41 
	~"l‹agw_aux.h
"

42 
	~"l‹agw_ˇl.h
"

47 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

49 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

50 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dout
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

55 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

56 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

58 
	#DEFAULT_CLK_SRC
 0

	)

59 
	#DEFAULT_FREQ_HZ
 868500000U

	)

61 
	#DEFAULT_DAC_GAIN
 3

	)

62 
	#DEFAULT_MIX_GAIN
 15

	)

64 
	#CAL_TX_TONE_FREQ_HZ
 250000

	)

65 
	#CAL_DEC_GAIN
 8

	)

66 
	#CAL_SIG_ANA_DURATION
 0

	)

68 
	#TEST_FREQ_SCAN
 0

	)

69 
	#TEST_OFFSET_IQ
 1

	)

70 
	#TEST_AMP_PHI
 2

	)

74 
	sˇl_tx_log
 {

75 
öt32_t
 
	mmón
;

76 
öt32_t
 
	mi_off£t
;

77 
öt32_t
 
	mq_off£t
;

83 
FILE
 * 
	gÂ
;

85 
uöt32_t
 
	grf_rx_‰eq
[
LGW_RF_CHAIN_NB
] = {865500000, 865500000};

86 
lgw_ødio_ty≥_t
 
	grf_ødio_ty≥
[
LGW_RF_CHAIN_NB
] = {
LGW_RADIO_TYPE_SX1257
, LGW_RADIO_TYPE_SX1257};

87 
lgw_tx_gaö_lut_s
 
	gtxlut
;

90 
	gexô_sig
 = 0;

91 
	gquô_sig
 = 0;

93 
	~"../§c/ˇl_fw.v¨
"

99 
	$ußge
() {

101 
	`¥ötf
("Available options:\n");

102 
	`¥ötf
(" -hÖrintÅhis help\n");

103 
	`¥ötf
(" -u Set COMÅypeás USB (default is SPI)\n");

104 
	`¥ötf
(" -d [path] PathÅoÅhe COM interface\n");

105 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

106 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

107 
	`¥ötf
(" -c <uint> RF chainÅo be used for TX (Radio A or Radio B) [0..1]\n");

108 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257)\n");

109 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

110 
	`¥ötf
(" --pa <uint> PA gain [0..3]\n");

111 
	`¥ötf
(" --dig <uint> sx1302 digital gain [0..3]\n");

112 
	`¥ötf
(" --dac <uint> sx1257 DAC gain [0..3]\n");

113 
	`¥ötf
(" --mix <uint> sx1257 MIX gain [0..15]\n");

114 
	}
}

117 
	$sig_h™dÀr
(
sigio
)

119 i‡(
sigio
 =
SIGQUIT
) {

120 
quô_sig
 = 1;

122 if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

123 
exô_sig
 = 1;

125 
	}
}

127 
	$£tup_tx_dc_off£t
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, uöt8_à
dac_gaö
, uöt8_à
mix_gaö
, uöt8_à
ødio_ty≥
) {

128 
uöt32_t
 
rx_‰eq_hz
, 
tx_‰eq_hz
;

129 
uöt32_t
 
rx_‰eq_öt
, 
rx_‰eq_‰ac
;

130 
uöt32_t
 
tx_‰eq_öt
, 
tx_‰eq_‰ac
;

131 
uöt8_t
 
rx_∂l_locked
, 
tx_∂l_locked
;

134 
rx_‰eq_hz
 = 
‰eq_hz
 - 
CAL_TX_TONE_FREQ_HZ
;

135 
tx_‰eq_hz
 = 
‰eq_hz
;

136 
ødio_ty≥
) {

137 
LGW_RADIO_TYPE_SX1255
:

138 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

139 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

140 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

141 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

143 
LGW_RADIO_TYPE_SX1257
:

144 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

145 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

146 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

147 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

150 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
ødio_ty≥
);

151  
LGW_HAL_ERROR
;

153 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_MSB
, 0xFF & 
rx_‰eq_öt
, 
rf_chaö
);

154 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_MID
, 0xFF & (
rx_‰eq_‰ac
 >> 8), 
rf_chaö
);

155 
	`sx125x_ªg_w
(
SX125x_REG_FRF_RX_LSB
, 0xFF & 
rx_‰eq_‰ac
, 
rf_chaö
);

156 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_MSB
, 0xFF & 
tx_‰eq_öt
, 
rf_chaö
);

157 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_MID
, 0xFF & (
tx_‰eq_‰ac
 >> 8), 
rf_chaö
);

158 
	`sx125x_ªg_w
(
SX125x_REG_FRF_TX_LSB
, 0xFF & 
tx_‰eq_‰ac
, 
rf_chaö
);

164 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__BB_BW
, 0, 
rf_chaö
);

165 
	`sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_TRIM
, 6, 
rf_chaö
);

167 
	`sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__PLL_BW
, 0, 
rf_chaö
);

168 
	`sx125x_ªg_w
(
SX125x_REG_TX_BW__PLL_BW
, 0, 
rf_chaö
);

170 
	`sx125x_ªg_w
(
SX125x_REG_TX_DAC_BW
, 5, 
rf_chaö
);

171 
	`sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__DAC_CLK_SELECT
, 1, 
rf_chaö
);

172 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 
dac_gaö
, 
rf_chaö
);

173 
	`sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 
mix_gaö
, 
rf_chaö
);

174 
	`sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__RF_LOOPBACK_EN
, 1, 
rf_chaö
);

175 
	`sx125x_ªg_w
(
SX125x_REG_MODE
, 15, 
rf_chaö
);

176 
	`waô_ms
(1);

177 
	`sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__RX_PLL_LOCKED
, &
rx_∂l_locked
, 
rf_chaö
);

178 
	`sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__TX_PLL_LOCKED
, &
tx_∂l_locked
, 
rf_chaö
);

179 i‡((
rx_∂l_locked
 =0Ë|| (
tx_∂l_locked
 == 0)) {

180 
	`DEBUG_MSG
("ERROR: PLL failedÅoÜock\n");

181  
LGW_HAL_ERROR
;

185 
	}
}

187 
	$ˇl_tx_dc_off£t
(
uöt8_t
 
ã°_id
, uöt8_à
rf_chaö
, 
uöt32_t
 
‰eq_hz
, uöt8_à
dac_gaö
, uöt8_à
mix_gaö
, uöt8_à
ødio_ty≥
, 
öt32_t
 
f_off£t
, i¡32_à
i_off£t
, i¡32_à
q_off£t
, 
boﬁ
 
fuŒ_log
, boﬁ 
u£_agc
, uöt8_à
amp
, uöt8_à
phi
) {

188 
i
;

189 
uöt16_t
 
ªg
;

190 
öt32_t
 
vÆ_mö
, 
vÆ_max
;

191 
öt32_t
 
acc
;

192 
öt32_t
 
vÆ_món
;

193 
vÆ_°d
;

194 
acc2
 = 0 ;

195 
lo›_Àn
 = 3;

196 
ªs_sig
[
lo›_Àn
];

197 
timevÆ
 
°¨t
, 
°›
;

202 i‡(
	`£tup_tx_dc_off£t
(
rf_chaö
, 
‰eq_hz
, 
dac_gaö
, 
mix_gaö
, 
ødio_ty≥
Ë!
LGW_HAL_SUCCESS
) {

203  
LGW_HAL_ERROR
;

209 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL
, (
rf_chaö
 == 0) ? 1 : 0);

211 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
,

212 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
);

213 
	`lgw_ªg_w
(
ªg
, 0);

215 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
,

216 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
);

217 
	`lgw_ªg_w
(
ªg
, 1);

218 
	`lgw_ªg_w
(
ªg
, 0);

220 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
,

221 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
);

222 
	`lgw_ªg_w
(
ªg
, 1);

225 i‡(
u£_agc
 =
åue
) {

226 
uöt8_t
 
vÆ_sig
, 
vÆ_sig2
;

229 
	`sx1302_agc_maûbox_wrôe
(2, 
rf_chaö
 + 4);

230 
	`sx1302_agc_maûbox_wrôe
(1, 
f_off£t
 );

231 
	`sx1302_agc_maûbox_wrôe
(0, 
CAL_SIG_ANA_DURATION
);

234 
	`sx1302_agc_maûbox_wrôe
(3, 0x00);

235 
	`sx1302_agc_maûbox_wrôe
(3, 0x01);

236 
	`sx1302_agc_waô_°©us
(0x01);

238 
	`sx1302_agc_maûbox_wrôe
(2, 
amp
);

239 
	`sx1302_agc_maûbox_wrôe
(1, 
phi
);

241 
	`sx1302_agc_maûbox_wrôe
(3, 0x02);

242 
	`sx1302_agc_waô_°©us
(0x02);

244 
	`sx1302_agc_maûbox_wrôe
(2, 
i_off£t
);

245 
	`sx1302_agc_maûbox_wrôe
(1, 
q_off£t
);

247 
	`sx1302_agc_maûbox_wrôe
(3, 0x03);

248 
	`sx1302_agc_waô_°©us
(0x03);

250 
	`sx1302_agc_maûbox_wrôe
(2, 
CAL_DEC_GAIN
);

251 
	`sx1302_agc_maûbox_wrôe
(2, 0);

253 
	`sx1302_agc_maûbox_wrôe
(3, 0x04);

255 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
,

256 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
);

257 
	`lgw_ªg_w
(
ªg
, 0);

259 
	`gëtimeofday
 (&
°¨t
, 
NULL
);

260 
i
 = 0; i < 
lo›_Àn
; i++) {

261 
	`sx1302_agc_waô_°©us
(0x06);

262 
	`sx1302_agc_maûbox_wrôe
(3, 0x06);

264 
	`sx1302_agc_waô_°©us
(0x07);

265 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ_sig
);

266 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ_sig2
);

267 
ªs_sig
[
i
] = 
vÆ_sig2
 * 256 + 
vÆ_sig
;

269 i‡(
i
 =(
lo›_Àn
 - 1)) {

270 
	`sx1302_agc_maûbox_wrôe
(3, 0x07);

272 
	`sx1302_agc_maûbox_wrôe
(3, 0x00);

275 
	`gëtimeofday
 (&
°›
, 
NULL
);

278 
öt32_t
 
vÆ
;

279 
öt32_t
 
abs_lsb
, 
abs_msb
;

280 
abs_iq
;

282 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

283 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

284 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
q_off£t
);

286 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

287 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

288 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
i_off£t
);

290 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
,

291 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
);

292 
	`lgw_ªg_w
(
ªg
, 1);

294 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_FORCE_HOST_FILTER_GAIN
,

295 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_FORCE_HOST_FILTER_GAIN
);

296 
	`lgw_ªg_w
(
ªg
, 0x01);

298 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
,

299 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
);

300 
	`lgw_ªg_w
(
ªg
, 
CAL_DEC_GAIN
);

302 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
, 1);

304 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_FREQ_FREQ
, 
f_off£t
);

306 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_DURATION
, 
CAL_SIG_ANA_DURATION
);

307 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_EN
, 1);

309 
	`gëtimeofday
 (&
°¨t
, 
NULL
);

310 
i
 = 0; i < 
lo›_Àn
; i++) {

311 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

312 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

315 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

316 
	`waô_ms
(1);

317 } 
vÆ
 == 0);

319 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

320 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

321 
abs_iq
 = (
abs_msb
 << 8Ë| 
abs_lsb
;

323 
ªs_sig
[
i
] = 
abs_iq
;

325 
	`gëtimeofday
 (&
°›
, 
NULL
);

328 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
, 0);

331 i‡(
fuŒ_log
 =
åue
) {

332 
	`¥ötf
("i_off£t:%d q_off£t:%d f_off£t:%d dac_gaö:%d mix_gaö:%d dec_gaö:%dámp:%uÖhi:%u => ", 
i_off£t
, 
q_off£t
, 
f_off£t
, 
dac_gaö
, 
mix_gaö
, 
CAL_DEC_GAIN
, 
amp
, 
phi
);

334 
ã°_id
) {

335 
TEST_FREQ_SCAN
:

336 
	`Ârötf
(
Â
, "%u ", 
f_off£t
);

338 
TEST_OFFSET_IQ
:

339 
	`Ârötf
(
Â
, "%d %d ", 
i_off£t
, 
q_off£t
);

341 
TEST_AMP_PHI
:

342 
	`Ârötf
(
Â
, "%d %d ", 
amp
, 
phi
);

345 
	`¥ötf
("ERROR: wr⁄gÅe° ID (%u)\n", 
ã°_id
);

351 
vÆ_mö
 = 
ªs_sig
[0];

352 
vÆ_max
 = 
ªs_sig
[0];

353 
acc
 = 0;

354 
i
 = 0; i < 
lo›_Àn
; i++) {

355 i‡(
ªs_sig
[
i
] > 
vÆ_max
) {

356 
vÆ_max
 = 
ªs_sig
[
i
];

358 i‡(
ªs_sig
[
i
] < 
vÆ_mö
) {

359 
vÆ_mö
 = 
ªs_sig
[
i
];

361 
acc
 +
ªs_sig
[
i
];

363 
vÆ_món
 = 
acc
 / 
lo›_Àn
;

365 
i
 = 0; i < 
lo›_Àn
; i++) {

366 
acc2
 +
	`pow
((
ªs_sig
[
i
]-
vÆ_món
),2);

368 
vÆ_°d
 = 
	`sqπ
(
acc2
/
lo›_Àn
);

370 i‡(
fuŒ_log
 =
åue
) {

371 
	`¥ötf
(" mö:%u max:%u món:%u std:%f\n", 
vÆ_mö
, 
vÆ_max
, 
vÆ_món
, 
vÆ_°d
);

373 
ã°_id
) {

374 
TEST_OFFSET_IQ
:

375 
TEST_AMP_PHI
:

376 
	`Ârötf
(
Â
, "%u %u %u %f\n", 
vÆ_mö
, 
vÆ_max
, 
vÆ_món
, 
vÆ_°d
);

378 
TEST_FREQ_SCAN
:

379 
	`Ârötf
(
Â
, "%u\n", 
vÆ_món
);

386  
LGW_HAL_SUCCESS
;

387 
	}
}

392 
	$ã°_‰eq_sˇn
(
uöt8_t
 
rf_chaö
, 
boﬁ
 
fuŒ_log
, boﬁ 
u£_agc
) {

393 
f
;

395 
	`¥ötf
("-------------------------------------\n");

396 
f
 = 0; f < 256; f++)

398 
	`ˇl_tx_dc_off£t
(
TEST_FREQ_SCAN
, 
rf_chaö
, 
rf_rx_‰eq
[rf_chaö], 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
rf_ødio_ty≥
[rf_chaö], 
f
, 0, 0, 
fuŒ_log
, 
u£_agc
, 0, 0);

400 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

406 
	}
}

408 
	$ã°_iq_off£t
(
uöt8_t
 
rf_chaö
, uöt8_à
f_off£t
, 
boﬁ
 
fuŒ_log
, boﬁ 
u£_agc
) {

409 
i
, 
q
;

411 
	`¥ötf
("-------------------------------------\n");

412 
i
 = -128; i < 127; i+=8)

414 
q
 = -128; q < 127; q+=8)

416 
	`ˇl_tx_dc_off£t
(
TEST_OFFSET_IQ
, 
rf_chaö
, 
rf_rx_‰eq
[rf_chaö], 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
rf_ødio_ty≥
[rf_chaö], 
f_off£t
, 
i
, 
q
, 
fuŒ_log
, 
u£_agc
, 0, 0);

417 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

424 
	}
}

426 
	$ã°_amp_phi
(
uöt8_t
 
rf_chaö
, uöt8_à
f_off£t
, 
boﬁ
 
fuŒ_log
, boﬁ 
u£_agc
) {

427 
amp
, 
phi
;

429 
	`¥ötf
("-------------------------------------\n");

430 
amp
 = 0;ámp < 64;ámp++)

432 
phi
 = 0;Öhi < 64;Öhi++)

434 
	`ˇl_tx_dc_off£t
(
TEST_AMP_PHI
, 
rf_chaö
, 
rf_rx_‰eq
[rf_chaö], 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
rf_ødio_ty≥
[rf_chaö], 
f_off£t
, 0, 0, 
fuŒ_log
, 
u£_agc
, 
amp
, 
phi
);

435 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

442 
	}
}

444 
	$ã°_ˇ±uª_øm
(
uöt8_t
 
rf_chaö
) {

445 
uöt16_t
 
ªg
;

447 
	`£tup_tx_dc_off£t
(
rf_chaö
, 
rf_rx_‰eq
[rf_chaö], 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
rf_ødio_ty≥
[rf_chain]);

449 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
,

450 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
);

451 
	`lgw_ªg_w
(
ªg
, 1);

453 
	`¥ötf
("Waiting...\n");

454 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

455 
	`waô_ms
(1000);

459 
	}
}

461 
	$maö
(
¨gc
, **
¨gv
)

463 
i
, 
x
;

464 
¨g_u
;

465 
uöt8_t
 
˛ocksour˚
 = 0;

466 
uöt8_t
 
rf_chaö
 = 0;

467 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

469 
siga˘i⁄
 
siga˘
;

472 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

473 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

474 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

477 
txlut
.
size
 = 1;

478 
	`mem£t
(
txlut
.
lut
, 0, Åxlut.lut);

479 
txlut
.
lut
[0].
dac_gaö
 = 
DEFAULT_DAC_GAIN
;

480 
txlut
.
lut
[0].
mix_gaö
 = 
DEFAULT_MIX_GAIN
;

483 
›ti⁄_ödex
 = 0;

484 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

491 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hk:r:c:d:u", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

492 
i
) {

494 
	`ußge
();

499 
com_ty≥
 = 
LGW_COM_USB
;

503 i‡(
›èrg
 !
NULL
) {

504 
com_∑th
 = 
›èrg
;

509 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

510 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257))) {

511 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

512  
EXIT_FAILURE
;

514 
¨g_u
) {

516 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

519 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

529 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

530 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

531 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

532  
EXIT_FAILURE
;

534 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

539 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

540 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

541 
	`¥ötf
("ERROR:árgumentÖarsing of -cárgument. Use -hÅoÖrint help\n");

542  
EXIT_FAILURE
;

544 
rf_chaö
 = (
uöt8_t
)
¨g_u
;

549 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "dac") == 0) {

550 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

551 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

552 
	`¥ötf
("ERROR:árgumentÖarsing of --dacárgument. Use -hÅoÖrint help\n");

553  
EXIT_FAILURE
;

555 
txlut
.
size
 = 1;

556 
txlut
.
lut
[0].
dac_gaö
 = (
uöt8_t
)
¨g_u
;

558 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "mix") == 0) {

559 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

560 i‡((
i
 !1Ë|| (
¨g_u
 > 15)) {

561 
	`¥ötf
("ERROR:árgumentÖarsing of --mixárgument. Use -hÅoÖrint help\n");

562  
EXIT_FAILURE
;

564 
txlut
.
size
 = 1;

565 
txlut
.
lut
[0].
mix_gaö
 = (
uöt8_t
)
¨g_u
;

568 
	`¥ötf
("ERROR:árgumentÖarsing options. Use -hÅoÖrint help\n");

569  
EXIT_FAILURE
;

574 
	`¥ötf
("ERROR:árgumentÖarsing\n");

575 
	`ußge
();

581 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

582 
siga˘
.
ß_Êags
 = 0;

583 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

584 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

585 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

586 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

589 i‡(
com_ty≥
 =
LGW_COM_USB
) {

590 
	`¥ötf
("ERROR: USB interface is currentlyÇot supported for sx1255/sx1257Ñadios\n");

591 
	`exô
(
EXIT_FAILURE
);

594 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

596 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

597 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

598 
	`exô
(
EXIT_FAILURE
);

603 
Â
 = 
	`f›í
("log.txt", "w+");

606 
x
 = 
	`lgw_c⁄√˘
(
com_ty≥
, 
com_∑th
);

607 i‡(
x
 != 0) {

608 
	`¥ötf
("ERROR: failedÅo connectÅhe gateway\n");

609  
EXIT_FAILURE
;

612 
	`sx1302_ødio_ª£t
(
rf_chaö
, 
ødio_ty≥
);

613 
	`sx1302_ødio_˛ock_£À˘
(
˛ocksour˚
);

614 
	`sx1302_ødio_£t_mode
(
rf_chaö
, 
ødio_ty≥
);

616 
	`¥ötf
("Loading CAL fw for sx125x\n");

617 i‡(
	`sx1302_agc_lﬂd_fúmw¨e
(
ˇl_fúmw¨e_sx125x
Ë!
LGW_HAL_SUCCESS
) {

618  
LGW_HAL_ERROR
;

621 
	`¥ötf
("waiting for captureÑam\n");

622 
	`waô_ms
(1000);

625 
	`¥ötf
("ã°ög:Ñf_chaö:%u, dac_gaö: %u, mix_gaö:%u, dec_gaö:%u, sig_™a_duøti⁄:%u\n", 
rf_chaö
, 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
CAL_DEC_GAIN
, 
CAL_SIG_ANA_DURATION
);

627 
	`ã°_‰eq_sˇn
(
rf_chaö
, 
Ál£
, false);

636 
	`sx1302_ødio_ª£t
(0, 
ødio_ty≥
);

637 
	`sx1302_ødio_ª£t
(1, 
ødio_ty≥
);

640 
x
 = 
	`lgw_disc⁄√˘
();

641 i‡(
x
 != 0) {

642 
	`¥ötf
("ERROR: failedÅo disconnectÅhe gateway\n");

643  
EXIT_FAILURE
;

647 
	`f˛o£
(
Â
);

649 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

651 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

652 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

653 
	`exô
(
EXIT_FAILURE
);

657 
	`¥ötf
("=========== Test End ===========\n");

660 
	}
}

	@libloragw/tst/test_loragw_capture_ram.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<sig«l.h
>

29 
	~<gë›t.h
>

31 
	~"l‹agw_hÆ.h
"

32 
	~"l‹agw_com.h
"

33 
	~"l‹agw_ªg.h
"

34 
	~"l‹agw_aux.h
"

35 
	~"l‹agw_sx1250.h
"

36 
	~"l‹agw_sx125x.h
"

37 
	~"l‹agw_sx1302.h
"

42 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dout
, så)

	)

44 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

45 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

47 
	#CAPTURE_RAM_SIZE
 0x4000

	)

53 
	gexô_sig
 = 0;

54 
	gquô_sig
 = 0;

56 
uöt32_t
 
	gßm∂ög_‰equícy
[] = {4e6, 4e6, 4e6, 4e6, 4e6, 4e6, 4e6, 0, 0, 1e6, 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 8e6, 125e3, 125e3, 125e3, 0, 32e6, 32e6, 0, 32e6, 32e6, 0, 32e6, 32e6, 32e6};

62 
	$ußge
()

64 
	`¥ötf
("Available options:\n");

65 
	`¥ötf
(" -hÖrintÅhis help\n");

66 
	`¥ötf
(" -d [path] PathÅoÅhe SPI interface (USB isÇot supported)\n");

67 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

68 
	`¥ötf
(" -s <uint> Capture source [0..31]\n");

69 
	}
}

72 
	$sig_h™dÀr
(
sigio
)

74 i‡(
sigio
 =
SIGQUIT
) {

75 
quô_sig
 = 1;

77 if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

78 
exô_sig
 = 1;

80 
	}
}

83 
	$maö
(
¨gc
, **
¨gv
)

85 
i
;

86 
öt32_t
 
vÆ
 = 0;

87 
ªg_°©
;

88 
¨g_u
;

89 
uöt8_t
 
ˇ±uª_sour˚
 = 0;

90 
uöt16_t
 
≥riod_vÆue
 = 0;

91 
öt16_t
 
ªÆ
 = 0, 
imag
 = 0;

92 
uöt8_t
 
ˇ±uª_øm_buf„r
[
CAPTURE_RAM_SIZE
];

94 
siga˘i⁄
 
siga˘
;

97 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

98 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

99 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

102 
›ti⁄_ödex
 = 0;

103 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

108 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "h:s:d:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

109 
i
) {

111 
	`ußge
();

116 i‡(
›èrg
 !
NULL
) {

117 
com_∑th
 = 
›èrg
;

122 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

123 i‡((
i
 !1Ë|| (
¨g_u
 > 31)) {

124 
	`¥ötf
("ERROR:árgumentÖarsing of -sárgument. Use -hÅoÖrint help\n");

125  
EXIT_FAILURE
;

127 
ˇ±uª_sour˚
 = 
¨g_u
;

132 
	`¥ötf
("ERROR:árgumentÖarsing\n");

133 
	`ußge
();

139 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

140 
siga˘
.
ß_Êags
 = 0;

141 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

142 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

143 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

144 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

147 
i
 = 0; i < 
CAPTURE_RAM_SIZE
; i++) {

148 
ˇ±uª_øm_buf„r
[
i
] = i%256;

151 
ªg_°©
 = 
	`lgw_c⁄√˘
(
com_ty≥
, 
com_∑th
);

152 i‡(
ªg_°©
 =
LGW_REG_ERROR
) {

153 
	`DEBUG_MSG
("ERROR: FAIL TO CONNECT BOARD\n");

154  
LGW_HAL_ERROR
;

160 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_ENABLE
, 1);

161 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTUREWRAP
, 0);

162 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_RAMCONFIG
, 0);

163 
	`Ârötf
(
°dout
, "C≠tuª sour˚: %d\n", 
ˇ±uª_sour˚
);

164 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_SOURCE_A_SOURCEMUX
, 
ˇ±uª_sour˚
);

166 
	`¥ötf
("Sam∂ög fªquícy: %d\n", 
ßm∂ög_‰equícy
[
ˇ±uª_sour˚
]);

167 i‡(
ßm∂ög_‰equícy
[
ˇ±uª_sour˚
] != 0) {

168 
≥riod_vÆue
 = (32e6/
ßm∂ög_‰equícy
[
ˇ±uª_sour˚
]) - 1;

170 
	`Ârötf
(
°dîr
 ,"ERROR: Sampling frequency isÇull\n");

175 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_0_CAPTUREPERIOD
, 
≥riod_vÆue
 & 0xFF);

176 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_1_CAPTUREPERIOD
, (
≥riod_vÆue
>>8) & 0xFF);

185 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTURESTART
, 1);

190 
	`lgw_ªg_r
(
SX1302_REG_CAPTURE_RAM_STATUS_CAPCOMPLETE
, &
vÆ
);

192 
	`waô_ms
(10);

193 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

196 } 
vÆ
 != 1);

197 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTURESTART
, 0);

204 
	`lgw_ªg_w
(
SX1302_REG_COMMON_PAGE_PAGE
, 1);

205 
	`lgw_mem_rb
(0, 
ˇ±uª_øm_buf„r
, 
CAPTURE_RAM_SIZE
, 
Ál£
);

206 
	`lgw_ªg_w
(
SX1302_REG_COMMON_PAGE_PAGE
, 0);

208 
	`¥ötf
("Data:\n");

209 
i
 = 0; i < 
CAPTURE_RAM_SIZE
; i += 4) {

210 i‡(((
ˇ±uª_sour˚
 >= 2) && (capture_source <= 3)) || (capture_source == 9)) {

211 
ªÆ
 = (
öt16_t
)((((
uöt16_t
)(
ˇ±uª_øm_buf„r
[
i
+3]) << 8) & 0xFF00) + ((uint16_t)capture_ram_buffer[i+2] & 0x00FF));

212 
imag
 = (
öt16_t
)((((
uöt16_t
)(
ˇ±uª_øm_buf„r
[
i
+1]) << 8) & 0xFF00) + ((uint16_t)capture_ram_buffer[i+0] & 0x00FF));

213 
ªÆ
 >>= 4;

214 
imag
 >>= 4;

215 } i‡((
ˇ±uª_sour˚
 >= 4) && (capture_source <= 6)) {

216 
ªÆ
 = (
öt16_t
)((((
uöt16_t
)(
ˇ±uª_øm_buf„r
[
i
+3]) << 8) & 0xFF00) + ((uint16_t)capture_ram_buffer[i+2] & 0x00FF));

217 
imag
 = (
öt16_t
)((((
uöt16_t
)(
ˇ±uª_øm_buf„r
[
i
+1]) << 8) & 0xFF00) + ((uint16_t)capture_ram_buffer[i+0] & 0x00FF));

218 } i‡((
ˇ±uª_sour˚
 >= 10) && (capture_source <= 17)) {

219 
ªÆ
 = (
öt8_t
)(
ˇ±uª_øm_buf„r
[
i
+3]);

220 
imag
 = (
öt8_t
)(
ˇ±uª_øm_buf„r
[
i
+1]);

222 
ªÆ
 = 0;

223 
imag
 = 0;

226 i‡(((
ˇ±uª_sour˚
 >= 2) && (capture_source <= 6)) || ((capture_source >= 9) && (capture_source <= 17))) {

227 
	`Ârötf
(
°dout
, "%d", 
ªÆ
);

228 i‡(
imag
 >= 0) {

229 
	`Ârötf
(
°dout
, "+");

231 
	`Ârötf
(
°dout
, "%di\n", 
imag
);

233 
	`¥ötf
("%02X ", 
ˇ±uª_øm_buf„r
[
i
]);

236 
	`¥ötf
("End of Data\n");

239 
	}
}

	@libloragw/tst/test_loragw_com.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

32 
	~<time.h
>

33 
	~<î∫o.h
>

35 
	~"l‹agw_com.h
"

36 
	~"l‹agw_aux.h
"

37 
	~"l‹agw_hÆ.h
"

42 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

47 
	#BUFF_SIZE_SPI
 1024

	)

48 
	#BUFF_SIZE_USB
 4096

	)

50 
	#SX1302_AGC_MCU_MEM
 0x0000

	)

51 
	#SX1302_REG_COMMON
 0x5600

	)

52 
	#SX1302_REG_AGC_MCU
 0x5780

	)

54 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

55 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

61 
	gexô_sig
 = 0;

62 
	gquô_sig
 = 0;

65 
uöt8_t
 * 
	gã°_buff
 = 
NULL
;

66 
uöt8_t
 * 
	gªad_buff
 = 
NULL
;

71 
sig_h™dÀr
(
sigio
);

72 
ußge
();

73 
exô_Áûuª
();

78 
	$maö
(
¨gc
, ** 
¨gv
)

80 
siga˘i⁄
 
siga˘
;

82 
uöt16_t
 
max_buff_size
;

83 
uöt8_t
 
d©a
 = 0;

84 
cy˛e_numbî
 = 0;

85 
i
, 
x
;

86 
uöt16_t
 
size
;

89 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

90 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

91 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

94 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:u")) != -1) {

95 
i
) {

97 
	`ußge
();

98  
EXIT_SUCCESS
;

102 i‡(
›èrg
 !
NULL
) {

103 
com_∑th
 = 
›èrg
;

108 
com_ty≥
 = 
LGW_COM_USB
;

112 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

113 
	`ußge
();

114  
EXIT_FAILURE
;

119 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

120 
siga˘
.
ß_Êags
 = 0;

121 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

122 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

123 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

124 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

127 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

128 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

129 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

130 
	`exô
(
EXIT_FAILURE
);

134 
	`¥ötf
("Beginning ofÅest forÜoragw_com.c\n");

135 
x
 = 
	`lgw_com_›í
(
com_ty≥
, 
com_∑th
);

136 i‡(
x
 != 0) {

137 
	`¥ötf
("ERROR: faûedÅÿ›í COM devi˚ %s\n", 
com_∑th
);

138 
	`exô
(
EXIT_FAILURE
);

150 
x
 = 
	`lgw_com_r
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_REG_COMMON
 + 6, &
d©a
);

151 i‡(
x
 != 0) {

152 
	`¥ötf
("ERROR (%d): faûedÅÿªadÑegi°î\n", 
__LINE__
);

153 
	`exô_Áûuª
();

155 
	`¥ötf
("SX1302 vîsi⁄: 0x%02X\n", 
d©a
);

157 
x
 = 
	`lgw_com_r
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_REG_AGC_MCU
 + 0, &
d©a
);

158 i‡(
x
 != 0) {

159 
	`¥ötf
("ERROR (%d): faûedÅÿªadÑegi°î\n", 
__LINE__
);

160 
	`exô_Áûuª
();

162 
x
 = 
	`lgw_com_w
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_REG_AGC_MCU
 + 0, 0x06);

163 i‡(
x
 != 0) {

164 
	`¥ötf
("ERROR (%d): faûedÅÿwrôêªgi°î\n", 
__LINE__
);

165 
	`exô_Áûuª
();

168 
	`§™d
(
	`time
(
NULL
));

171 
max_buff_size
 = (
com_ty≥
 =
LGW_COM_SPI
Ë? 
BUFF_SIZE_SPI
 : 
BUFF_SIZE_USB
;

172 
ã°_buff
 = (
uöt8_t
*)
	`mÆloc
(
max_buff_size
 * (uint8_t));

173 i‡(
ã°_buff
 =
NULL
) {

174 
	`¥ötf
("ERROR: faûedÅÿÆloˇã mem‹y f‹Åe°_buf‡- %s\n", 
	`°ªº‹
(
î∫o
));

175 
	`exô_Áûuª
();

177 
ªad_buff
 = (
uöt8_t
*)
	`mÆloc
(
max_buff_size
 * (uint8_t));

178 i‡(
ªad_buff
 =
NULL
) {

179 
	`¥ötf
("ERROR: faûedÅÿÆloˇã mem‹y f‹Ñód_buf‡- %s\n", 
	`°ªº‹
(
î∫o
));

180 
	`exô_Áûuª
();

184 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

191 
size
 = 
	`ønd
(Ë% 
max_buff_size
;

192 
i
 = 0; i < 
size
; ++i) {

193 
ã°_buff
[
i
] = 
	`ønd
() & 0xFF;

195 
	`¥ötf
("Cy˛ê%i> ", 
cy˛e_numbî
);

198 
x
 = 
	`lgw_com_wb
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
, 
ã°_buff
, 
size
);

199 i‡(
x
 != 0) {

200 
	`¥ötf
("ERROR (%d): faûedÅÿwrôêbur°\n", 
__LINE__
);

201 
	`exô_Áûuª
();

205 
x
 = 
	`lgw_com_rb
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
, 
ªad_buff
, 
size
);

206 i‡(
x
 != 0) {

207 
	`¥ötf
("ERROR (%d): faûedÅÿªad bur°\n", 
__LINE__
);

208 
	`exô_Áûuª
();

212 
i
=0; ((i<
size
Ë&& (
ã°_buff
[i] =
ªad_buff
[i])); ++i);

213 i‡(
i
 !
size
) {

214 
	`¥ötf
("error duringÅhe buffer comparison\n");

217 
	`¥ötf
("Written values:\n");

218 
i
=0; i<
size
; ++i) {

219 
	`¥ötf
(" %02X ", 
ã°_buff
[
i
]);

220 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

222 
	`¥ötf
("\n");

225 
	`¥ötf
("Read values:\n");

226 
i
=0; i<
size
; ++i) {

227 
	`¥ötf
(" %02X ", 
ªad_buff
[
i
]);

228 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

230 
	`¥ötf
("\n");

233 
	`exô_Áûuª
();

235 
	`¥ötf
("didá %i-byã R/W o¿®d©®buf„∏wôhÇÿîr‹\n", 
size
);

236 ++
cy˛e_numbî
;

246 
	`¥ötf
("Cy˛ê%i> ", 
cy˛e_numbî
);

248 
ã°_buff
[0] = 
	`ønd
() & 0xFF;

251 
x
 = 
	`lgw_com_w
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
, 
ã°_buff
[0]);

252 i‡(
x
 != 0) {

253 
	`¥ötf
("ERROR (%d): faûedÅÿwrôêbur°\n", 
__LINE__
);

254 
	`exô_Áûuª
();

258 
x
 = 
	`lgw_com_r
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
, &
ªad_buff
[0]);

259 i‡(
x
 != 0) {

260 
	`¥ötf
("ERROR (%d): faûedÅÿªad bur°\n", 
__LINE__
);

261 
	`exô_Áûuª
();

265 i‡(
ã°_buff
[0] !
ªad_buff
[0]) {

266 
	`¥ötf
("error duringÅhe byte comparison\n");

269 
	`¥ötf
("Wrôã¿vÆue: %02X\n", 
ã°_buff
[0]);

272 
	`¥ötf
("Ród vÆues: %02X\n", 
ªad_buff
[0]);

275 
	`exô_Áûuª
();

277 
	`¥ötf
("didá 1-byte R/W oná data buffer withÇoÉrror\n");

278 ++
cy˛e_numbî
;

286 
x
 = 
	`lgw_com_£t_wrôe_mode
(
LGW_COM_WRITE_MODE_BULK
);

287 i‡(
x
 != 0) {

288 
	`¥ötf
("ERROR (%d): faûedÅÿ£àbulk wrôêmode\n", 
__LINE__
);

289 
	`exô_Áûuª
();

292 
uöt16_t
 
num_ªq
 = 
	`RAND_RANGE
(1, 254);

293 
size
 = 
	`RAND_RANGE
(
num_ªq
, 
max_buff_size
 / 2);

294 
i
 = 0; i < 
size
; i++) {

295 
ã°_buff
[
i
] = 
	`ønd
() & 0xFF;

297 
uöt16_t
 
size_≥r_ªq
 = 
size
 / 
num_ªq
;

298 
uöt16_t
 
size_ªmaöög
 = 
size
 - (
num_ªq
 * 
size_≥r_ªq
);

299 
	`¥ötf
("Cy˛ê%i> ", 
cy˛e_numbî
);

301 
uöt16_t
 
size_wrôãn
 = 0;

302 
i
 = 0; i < 
num_ªq
; i++) {

303 
x
 = 
	`lgw_com_wb
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
 + 
size_wrôãn
, 
ã°_buff
 + size_wrôãn, 
size_≥r_ªq
);

304 i‡(
x
 != 0) {

305 
	`¥ötf
("ERROR (%d): faûedÅÿwrôêbur°\n", 
__LINE__
);

306 
	`exô_Áûuª
();

308 
size_wrôãn
 +(
size_≥r_ªq
);

310 i‡(
size_ªmaöög
 > 0) {

311 
x
 = 
	`lgw_com_wb
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
 + 
size_wrôãn
, 
ã°_buff
 + size_wrôãn, 
size_ªmaöög
);

312 i‡(
x
 != 0) {

313 
	`¥ötf
("ERROR (%d): faûedÅÿwrôêbur°\n", 
__LINE__
);

314 
	`exô_Áûuª
();

319 
x
 = 
	`lgw_com_Êush
();

320 i‡(
x
 != 0) {

321 
	`¥ötf
("ERROR (%d): faûedÅÿÊush wrôe\n", 
__LINE__
);

322 
	`exô_Áûuª
();

326 
x
 = 
	`lgw_com_rb
(
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
, 
ªad_buff
, 
size
);

327 i‡(
x
 != 0) {

328 
	`¥ötf
("ERROR (%d): faûedÅÿªad bur°\n", 
__LINE__
);

329 
	`exô_Áûuª
();

333 
i
=0; ((i<
size
Ë&& (
ã°_buff
[i] =
ªad_buff
[i])); ++i);

334 i‡(
i
 !
size
) {

335 
	`¥ötf
("error duringÅhe buffer comparison\n");

338 
	`¥ötf
("Written values:\n");

339 
i
=0; i<
size
; ++i) {

340 
	`¥ötf
(" %02X ", 
ã°_buff
[
i
]);

341 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

343 
	`¥ötf
("\n");

346 
	`¥ötf
("Read values:\n");

347 
i
=0; i<
size
; ++i) {

348 
	`¥ötf
(" %02X ", 
ªad_buff
[
i
]);

349 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

351 
	`¥ötf
("\n");

354 
	`exô_Áûuª
();

356 
	`¥ötf
("didá %i-byã bulk R/W o¿®d©®buf„∏wôhÇÿîr‹\n", 
size
);

357 ++
cy˛e_numbî
;

361 
	`lgw_com_˛o£
();

362 
	`¥ötf
("End ofÅest forÜoragw_com.c\n");

365 i‡(
ã°_buff
 !
NULL
) {

366 
	`‰ì
(
ã°_buff
);

367 
ã°_buff
 = 
NULL
;

369 i‡(
ªad_buff
 !
NULL
) {

370 
	`‰ì
(
ªad_buff
);

371 
ªad_buff
 = 
NULL
;

374 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

376 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

377 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

378 
	`exô
(
EXIT_FAILURE
);

383 
	}
}

388 
	$sig_h™dÀr
(
sigio
) {

389 i‡(
sigio
 =
SIGQUIT
) {

390 
quô_sig
 = 1;

391 } if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

392 
exô_sig
 = 1;

394 
	}
}

398 
	$exô_Áûuª
() {

399 
	`lgw_com_˛o£
();

400 
	`¥ötf
("End ofÅest forÜoragw_com.c\n");

403 i‡(
ã°_buff
 !
NULL
) {

404 
	`‰ì
(
ã°_buff
);

405 
ã°_buff
 = 
NULL
;

407 i‡(
ªad_buff
 !
NULL
) {

408 
	`‰ì
(
ªad_buff
);

409 
ªad_buff
 = 
NULL
;

412 
	`exô
(
EXIT_FAILURE
);

413 
	}
}

417 
	$ußge
() {

418 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

419 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

420 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

421 
	`¥ötf
(" -hÖrintÅhis help\n");

422 
	`¥ötf
(" -u set COMÅypeás USB (default is SPI)\n");

423 
	`¥ötf
(" -d <path> COMÖathÅo be usedÅo connectÅhe concentrator\n");

424 
	`¥ötf
(" => deÁu…Ö©h (SPI): " 
COM_PATH_DEFAULT
 "\n");

425 
	}
}

	@libloragw/tst/test_loragw_com_sx1250.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

33 
	~"l‹agw_aux.h
"

34 
	~"l‹agw_com.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_hÆ.h
"

37 
	~"l‹agw_sx1250.h
"

38 
	~"l‹agw_sx1302.h
"

46 
	#BUFF_SIZE
 16

	)

48 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

49 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

55 
	gexô_sig
 = 0;

56 
	gquô_sig
 = 0;

61 
sig_h™dÀr
(
sigio
);

62 
ußge
();

63 
exô_Áûuª
();

68 
	$maö
(
¨gc
, ** 
¨gv
)

70 
siga˘i⁄
 
siga˘
;

72 
uöt8_t
 
ã°_buff
[
BUFF_SIZE
];

73 
uöt8_t
 
ªad_buff
[
BUFF_SIZE
];

74 
uöt32_t
 
ã°_vÆ
, 
ªad_vÆ
;

75 
cy˛e_numbî
 = 0;

76 
i
, 
x
;

79 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

80 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

81 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

84 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:u")) != -1) {

85 
i
) {

87 
	`ußge
();

88  
EXIT_SUCCESS
;

92 i‡(
›èrg
 !
NULL
) {

93 
com_∑th
 = 
›èrg
;

98 
com_ty≥
 = 
LGW_COM_USB
;

102 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

103 
	`ußge
();

104  
EXIT_FAILURE
;

109 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

110 
siga˘
.
ß_Êags
 = 0;

111 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

112 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

113 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

114 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

118 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

119 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

120 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

121 
	`exô
(
EXIT_FAILURE
);

125 
x
 = 
	`lgw_c⁄√˘
(
com_ty≥
, 
com_∑th
);

126 i‡(
x
 !
LGW_REG_SUCCESS
) {

127 
	`¥ötf
("ERROR: FaûedÅÿc⁄√˘Åÿthêc⁄˚¡øt‹ usög COM %s\n", 
com_∑th
);

128  
EXIT_FAILURE
;

132 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

133 
	`sx1302_ødio_ª£t
(
i
, 
LGW_RADIO_TYPE_SX1250
);

134 
	`sx1302_ødio_£t_mode
(
i
, 
LGW_RADIO_TYPE_SX1250
);

138 
	`sx1302_ødio_˛ock_£À˘
(0);

141 
	`lgw_ªg_w
(
SX1302_REG_COMMON_CTRL0_HOST_RADIO_CTRL
, 0x01);

144 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
, 1);

145 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_RF_EN_A_PA_EN
, 0);

146 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_RF_EN_A_LNA_EN
, 0);

149 
ã°_buff
[0] = (
uöt8_t
)
STDBY_XOSC
;

150 
x
 = 
	`sx1250_ªg_w
(
SET_STANDBY
, 
ã°_buff
, 1, 0);

151 i‡(
x
 !
LGW_REG_SUCCESS
) {

152 
	`¥ötf
("ERROR(%d): FaûedÅÿc⁄figuª sx1250_0\n", 
__LINE__
);

153 
	`exô_Áûuª
();

155 
x
 = 
	`sx1250_ªg_w
(
SET_STANDBY
, 
ã°_buff
, 1, 1);

156 i‡(
x
 !
LGW_REG_SUCCESS
) {

157 
	`¥ötf
("ERROR(%d): FaûedÅÿc⁄figuª sx1250_1\n", 
__LINE__
);

158 
	`exô_Áûuª
();

160 
	`waô_ms
(10);

162 
ã°_buff
[0] = 0x00;

163 
x
 = 
	`sx1250_ªg_r
(
GET_STATUS
, 
ã°_buff
, 1, 0);

164 i‡(
x
 !
LGW_REG_SUCCESS
) {

165 
	`¥ötf
("ERROR(%d): FaûedÅÿgë sx1250_0 sètus\n", 
__LINE__
);

166 
	`exô_Áûuª
();

168 
	`¥ötf
("Radio0: gë_°©us: 0x%02X\n", 
ã°_buff
[0]);

169 
x
 = 
	`sx1250_ªg_r
(
GET_STATUS
, 
ã°_buff
, 1, 1);

170 i‡(
x
 !
LGW_REG_SUCCESS
) {

171 
	`¥ötf
("ERROR(%d): FaûedÅÿgë sx1250_1 sètus\n", 
__LINE__
);

172 
	`exô_Áûuª
();

174 
	`¥ötf
("Radio1: gë_°©us: 0x%02X\n", 
ã°_buff
[0]);

177 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

178 
ã°_buff
[0] = 
	`ønd
() & 0x7F;

179 
ã°_buff
[1] = 
	`ønd
() & 0xFF;

180 
ã°_buff
[2] = 
	`ønd
() & 0xFF;

181 
ã°_buff
[3] = 
	`ønd
() & 0xFF;

182 
ã°_vÆ
 = (
ã°_buff
[0] << 24) | (test_buff[1] << 16) | (test_buff[2] << 8) | (test_buff[3] << 0);

183 
	`sx1250_ªg_w
(
SET_RF_FREQUENCY
, 
ã°_buff
, 4, 0);

185 
ªad_buff
[0] = 0x08;

186 
ªad_buff
[1] = 0x8B;

187 
ªad_buff
[2] = 0x00;

188 
ªad_buff
[3] = 0x00;

189 
ªad_buff
[4] = 0x00;

190 
ªad_buff
[5] = 0x00;

191 
ªad_buff
[6] = 0x00;

192 
	`sx1250_ªg_r
(
READ_REGISTER
, 
ªad_buff
, 7, 0);

193 
ªad_vÆ
 = (
ªad_buff
[3] << 24) | (read_buff[4] << 16) | (read_buff[5] << 8) | (read_buff[6] << 0);

195 
	`¥ötf
("Cy˛ê%ò> ", 
cy˛e_numbî
);

196 i‡(
ªad_vÆ
 !
ã°_vÆ
) {

197 
	`¥ötf
("error duringÅhe buffer comparison\n");

198 
	`¥ötf
("Wrôã¿vÆue: %08X\n", 
ã°_vÆ
);

199 
	`¥ötf
("Ród vÆue: %08X\n", 
ªad_vÆ
);

200  
EXIT_FAILURE
;

202 
	`¥ötf
("didá %i-byte R/W onáÑegister withÇoÉrror\n", 4);

203 ++
cy˛e_numbî
;

208 
	`lgw_disc⁄√˘
();

209 
	`¥ötf
("End ofÅest forÜoragw_spi_sx1250.c\n");

211 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

213 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

214 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

215 
	`exô
(
EXIT_FAILURE
);

220 
	}
}

225 
	$sig_h™dÀr
(
sigio
) {

226 i‡(
sigio
 =
SIGQUIT
) {

227 
quô_sig
 = 1;

228 } if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

229 
exô_sig
 = 1;

231 
	}
}

235 
	$exô_Áûuª
() {

236 
	`lgw_disc⁄√˘
();

238 
	`¥ötf
("End ofÅest forÜoragw_spi_sx1250.c\n");

240 
	`exô
(
EXIT_FAILURE
);

241 
	}
}

245 
	$ußge
() {

246 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

247 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

248 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

249 
	`¥ötf
(" -hÖrintÅhis help\n");

250 
	`¥ötf
(" -d <path>Öath ofÅhe COM device usedÅoáccessÅhe concentrator\n");

251 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

252 
	`¥ötf
(" -u set COMÅypeás USB (default is SPI)\n");

253 
	}
}

	@libloragw/tst/test_loragw_com_sx1261.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

33 
	~"l‹agw_aux.h
"

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_com.h
"

37 
	~"l‹agw_sx1261.h
"

45 
	#BUFF_SIZE
 16

	)

47 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

48 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

49 
	#SX1261_PATH_DEFAULT
 "/dev/•idev0.1"

	)

55 
	gexô_sig
 = 0;

56 
	gquô_sig
 = 0;

61 
sig_h™dÀr
(
sigio
);

62 
ußge
();

63 
exô_Áûuª
();

68 
	$maö
(
¨gc
, ** 
¨gv
)

70 
siga˘i⁄
 
siga˘
;

72 
uöt8_t
 
ã°_buff
[
BUFF_SIZE
];

73 
uöt8_t
 
ªad_buff
[
BUFF_SIZE
];

74 
uöt32_t
 
ã°_vÆ
, 
ªad_vÆ
;

75 
cy˛e_numbî
 = 0;

76 
i
, 
x
;

79 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

80 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

81 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

84 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:u")) != -1) {

85 
i
) {

87 
	`ußge
();

88  
EXIT_SUCCESS
;

92 i‡(
›èrg
 !
NULL
) {

93 
com_∑th
 = 
›èrg
;

98 
com_ty≥
 = 
LGW_COM_USB
;

102 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

103 
	`ußge
();

104  
EXIT_FAILURE
;

109 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

110 
siga˘
.
ß_Êags
 = 0;

111 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

112 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

113 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

114 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

118 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

119 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

120 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

121 
	`exô
(
EXIT_FAILURE
);

126 
x
 = 
	`lgw_c⁄√˘
(
com_ty≥
, 
com_∑th
);

127 i‡(
x
 !
LGW_REG_SUCCESS
) {

128 
	`¥ötf
("ERROR: FaûedÅÿc⁄√˘Åÿthêc⁄˚¡øt‹ usög COM %s\n", 
com_∑th
);

129  
EXIT_FAILURE
;

133 
x
 = 
	`sx1261_c⁄√˘
(
com_ty≥
, 
SX1261_PATH_DEFAULT
);

134 i‡(
x
 !
LGW_REG_SUCCESS
) {

135 
	`¥ötf
("ERROR: FaûedÅÿc⁄√˘Åÿthêsx1261 usög COM %s\n", 
com_∑th
);

136  
EXIT_FAILURE
;

140 
ã°_buff
[0] = (
uöt8_t
)
SX1261_STDBY_RC
;

141 
x
 = 
	`sx1261_ªg_w
(
SX1261_SET_STANDBY
, 
ã°_buff
, 1);

142 i‡(
x
 !
LGW_REG_SUCCESS
) {

143 
	`¥ötf
("ERROR(%d): FaûedÅÿc⁄figuª sx1261\n", 
__LINE__
);

144 
	`exô_Áûuª
();

146 
	`waô_ms
(10);

148 
ã°_buff
[0] = 0x00;

149 
x
 = 
	`sx1261_ªg_r
(
SX1261_GET_STATUS
, 
ã°_buff
, 1);

150 i‡(
x
 !
LGW_REG_SUCCESS
) {

151 
	`¥ötf
("ERROR(%d): FaûedÅÿgë sx1261 sètus\n", 
__LINE__
);

152 
	`exô_Áûuª
();

154 
	`¥ötf
("SX1261: gë_°©us: 0x%02X\n", 
ã°_buff
[0]);

157 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

158 
ã°_buff
[0] = 
	`ønd
() & 0x7F;

159 
ã°_buff
[1] = 
	`ønd
() & 0xFF;

160 
ã°_buff
[2] = 
	`ønd
() & 0xFF;

161 
ã°_buff
[3] = 
	`ønd
() & 0xFF;

162 
ã°_vÆ
 = (
ã°_buff
[0] << 24) | (test_buff[1] << 16) | (test_buff[2] << 8) | (test_buff[3] << 0);

163 
	`sx1261_ªg_w
(
SX1261_SET_RF_FREQUENCY
, 
ã°_buff
, 4);

165 
ªad_buff
[0] = 0x08;

166 
ªad_buff
[1] = 0x8B;

167 
ªad_buff
[2] = 0x00;

168 
ªad_buff
[3] = 0x00;

169 
ªad_buff
[4] = 0x00;

170 
ªad_buff
[5] = 0x00;

171 
ªad_buff
[6] = 0x00;

172 
	`sx1261_ªg_r
(
SX1261_READ_REGISTER
, 
ªad_buff
, 7);

173 
ªad_vÆ
 = (
ªad_buff
[3] << 24) | (read_buff[4] << 16) | (read_buff[5] << 8) | (read_buff[6] << 0);

175 
	`¥ötf
("Cy˛ê%ò> ", 
cy˛e_numbî
);

176 i‡(
ªad_vÆ
 !
ã°_vÆ
) {

177 
	`¥ötf
("error duringÅhe buffer comparison\n");

178 
	`¥ötf
("Wrôã¿vÆue: %08X\n", 
ã°_vÆ
);

179 
	`¥ötf
("Ród vÆue: %08X\n", 
ªad_vÆ
);

180  
EXIT_FAILURE
;

182 
	`¥ötf
("didá %i-byte R/W onáÑegister withÇoÉrror\n", 4);

183 ++
cy˛e_numbî
;

188 
	`sx1261_disc⁄√˘
();

191 
	`lgw_disc⁄√˘
();

193 
	`¥ötf
("End ofÅest forÜoragw_spi_sx1261.c\n");

195 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

197 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

198 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

199 
	`exô
(
EXIT_FAILURE
);

204 
	}
}

209 
	$sig_h™dÀr
(
sigio
) {

210 i‡(
sigio
 =
SIGQUIT
) {

211 
quô_sig
 = 1;

212 } if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

213 
exô_sig
 = 1;

215 
	}
}

219 
	$exô_Áûuª
() {

220 
	`sx1261_disc⁄√˘
();

221 
	`lgw_disc⁄√˘
();

223 
	`¥ötf
("End ofÅest forÜoragw_spi_sx1261.c\n");

225 
	`exô
(
EXIT_FAILURE
);

226 
	}
}

230 
	$ußge
() {

231 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

232 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

233 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

234 
	`¥ötf
(" -hÖrintÅhis help\n");

235 
	`¥ötf
(" -d <path>ÖathÅoáccessÅhe COM device\n");

236 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

237 
	`¥ötf
(" -u set COMÅypeás USB (default is SPI)\n");

238 
	}
}

	@libloragw/tst/test_loragw_counter.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<sig«l.h
>

32 
	~<m©h.h
>

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_aux.h
"

41 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

42 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

44 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

45 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

50 
	#DEFAULT_FREQ_HZ
 868500000U

	)

55 
	gexô_sig
 = 0;

56 
	gquô_sig
 = 0;

61 
	$sig_h™dÀr
(
sigio
) {

62 i‡(
sigio
 =
SIGQUIT
) {

63 
quô_sig
 = 1;;

64 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

65 
exô_sig
 = 1;

67 
	}
}

69 
	$ußge
() {

71 
	`¥ötf
("Available options:\n");

72 
	`¥ötf
(" -hÖrintÅhis help\n");

73 
	`¥ötf
(" -u set COMÅypeás USB (default is SPI)\n");

74 
	`¥ötf
(" -d <path> COMÖathÅo be usedÅo connectÅhe concentrator\n");

75 
	`¥ötf
(" => deÁu…Ö©h (SPI): " 
COM_PATH_DEFAULT
 "\n");

76 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

77 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

78 
	`¥ötf
(" -p Test PPSÅrig counter when set\n" );

79 
	}
}

84 
	$maö
(
¨gc
, **
¨gv
)

87 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

88 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

89 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

91 
siga˘i⁄
 
siga˘
;

93 
i
, 
x
;

94 
uöt32_t
 
Á
 = 
DEFAULT_FREQ_HZ
;

95 
uöt32_t
 
fb
 = 
DEFAULT_FREQ_HZ
;

96 
¨g_u
;

97 
uöt8_t
 
˛ocksour˚
 = 0;

98 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

100 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

101 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

102 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

104 
uöt32_t
 
cou¡î
;

105 
boﬁ
 
åig_˙t
 = 
Ál£
;

107 c⁄° 
öt32_t
 
ch™√l_if
[9] = {

119 c⁄° 
uöt8_t
 
ch™√l_rfchaö
[9] = { 1, 1, 1, 0, 0, 0, 0, 0, 1 };

122 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "hk:r:pd:u")) != -1) {

123 
i
) {

125 
	`ußge
();

129 i‡(
›èrg
 !
NULL
) {

130 
com_∑th
 = 
›èrg
;

134 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

135 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

136 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

137  
EXIT_FAILURE
;

139 
¨g_u
) {

141 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

144 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

147 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

153 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

154 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

155 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

156  
EXIT_FAILURE
;

158 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

162 
åig_˙t
 = 
åue
;

165 
com_ty≥
 = 
LGW_COM_USB
;

168 
	`¥ötf
("ERROR:árgumentÖarsing\n");

169 
	`ußge
();

175 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

176 
siga˘
.
ß_Êags
 = 0;

177 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

178 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

179 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

180 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

182 
	`¥ötf
("===== sx1302 counterÅest =====\n");

184 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

186 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

187 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

188 
	`exô
(
EXIT_FAILURE
);

193 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

194 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

195 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

196 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

197 
bﬂrdc⁄f
.
com_ty≥
 = com_type;

198 
	`°∫˝y
(
bﬂrdc⁄f
.
com_∑th
, com_path,  boardconf.com_path);

199 
bﬂrdc⁄f
.
com_∑th
[ boardconf.com_path - 1] = '\0';

200 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

201 
	`¥ötf
("ERROR: failedÅo configure board\n");

202  
EXIT_FAILURE
;

206 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

207 
rfc⁄f
.
íabÀ
 = 
åue
;

208 
rfc⁄f
.
‰eq_hz
 = 
Á
;

209 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

210 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

211 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

212 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

213 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

214  
EXIT_FAILURE
;

217 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

218 
rfc⁄f
.
íabÀ
 = 
åue
;

219 
rfc⁄f
.
‰eq_hz
 = 
fb
;

220 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

221 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

222 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

223 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

224 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

225  
EXIT_FAILURE
;

229 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

230 
i
 = 0; i < 9; i++) {

231 
ifc⁄f
.
íabÀ
 = 
åue
;

232 
ifc⁄f
.
rf_chaö
 = 
ch™√l_rfchaö
[
i
];

233 
ifc⁄f
.
‰eq_hz
 = 
ch™√l_if
[
i
];

234 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
;

235 i‡(
	`lgw_rxif_£tc⁄f
(
i
, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

236 
	`¥ötf
("ERROR: faûedÅÿc⁄figuªÑxi‡%d\n", 
i
);

237  
EXIT_FAILURE
;

242 
x
 = 
	`lgw_°¨t
();

243 i‡(
x
 != 0) {

244 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

245  
EXIT_FAILURE
;

249  (
quô_sig
 !1Ë&& (
exô_sig
 != 1) ) {

250 i‡(
åig_˙t
 =
Ál£
) {

251 
	`lgw_gë_ö°˙t
(&
cou¡î
);

253 
	`lgw_gë_åig˙t
(&
cou¡î
);

255 
	`waô_ms
(10);

256 
	`¥ötf
("%u\n", 
cou¡î
);

260 
x
 = 
	`lgw_°›
();

261 i‡(
x
 != 0) {

262 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

263  
EXIT_FAILURE
;

266 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

268 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

269 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

270 
	`exô
(
EXIT_FAILURE
);

274 
	`¥ötf
("=========== Test End ===========\n");

277 
	}
}

	@libloragw/tst/test_loragw_gps.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dboﬁ.h
>

28 
	~<°dio.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_gps.h
"

36 
	~"l‹agw_aux.h
"

41 
	#MATCH
(
a
,
b
Ë–((
öt32_t
)◊-b)<=1Ë&& ((öt32_t)◊-b)>=-1ËË

	)

46 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

47 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

52 
	gexô_sig
 = 0;

53 
	gquô_sig
 = 0;

55 
åef
 
	gµm_ªf
;

60 
sig_h™dÀr
(
sigio
);

61 
gps_¥o˚ss_sync
();

62 
gps_¥o˚ss_co‹ds
();

67 
	$ußge
() {

69 
	`¥ötf
("Available options:\n");

70 
	`¥ötf
(" -hÖrintÅhis help\n");

71 
	`¥ötf
(" -u set COMÅypeás USB (default is SPI)\n");

72 
	`¥ötf
(" -d <path> COMÖathÅo be usedÅo connectÅhe concentrator\n");

73 
	`¥ötf
(" => deÁu…Ö©h (SPI): " 
COM_PATH_DEFAULT
 "\n");

74 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

75 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

76 
	}
}

78 
	$sig_h™dÀr
(
sigio
) {

79 i‡(
sigio
 =
SIGQUIT
) {

80 
quô_sig
 = 1;;

81 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

82 
exô_sig
 = 1;

84 
	}
}

86 
	$gps_¥o˚ss_sync
() {

88 
uöt32_t
 
µm_t°amp
;

89 
time•ec
 
µm_gps
;

90 
time•ec
 
µm_utc
;

93 
uöt32_t
 
x
, 
z
;

94 
time•ec
 
y
;

97 
i
 = 
	`lgw_gps_gë
(&
µm_utc
, &
µm_gps
, 
NULL
, NULL);

98 i‡(
i
 !
LGW_GPS_SUCCESS
) {

99 
	`¥ötf
(" No validÑeference GPSÅimeávailable, synchronization impossible.\n");

104 
i
 = 
	`lgw_gë_åig˙t
(&
µm_t°amp
);

105 i‡(
i
 !
LGW_HAL_SUCCESS
) {

106 
	`¥ötf
(" FailedÅoÑeadÅimestamp, synchronization impossible.\n");

111 
i
 = 
	`lgw_gps_sync
(&
µm_ªf
, 
µm_t°amp
, 
µm_utc
, 
µm_gps
);

112 i‡(
i
 !
LGW_GPS_SUCCESS
) {

113 
	`¥ötf
(" SynchronizationÉrror.\n");

118 
	`¥ötf
(" * Synchronization successful *\n");

119 
	`¥ötf
(" UTCÑe„ªn˚Åime: %Œd.%09ld\n", ()
µm_ªf
.
utc
.
tv_£c
,Öpm_ªf.utc.
tv_n£c
);

120 
	`¥ötf
(" GPSÑe„ªn˚Åime: %Œd.%09ld\n", ()
µm_ªf
.
gps
.
tv_£c
,Öpm_ªf.gps.
tv_n£c
);

121 
	`¥ötf
(" I¡î«»cou¡îÑe„ªn˚ vÆue: %u\n", 
µm_ªf
.
cou¡_us
);

122 
	`¥ötf
(" ClockÉº‹: %.9f\n", 
µm_ªf
.
xèl_îr
);

124 
x
 = 
µm_t°amp
 + 500000;

127 
	`¥ötf
("\n");

128 
	`¥ötf
(" * Test ofÅimestamp counter <-> GPS value conversion *\n");

129 
	`¥ötf
(" Te° vÆue: %u\n", 
x
);

130 
	`lgw_˙t2gps
(
µm_ªf
, 
x
, &
y
);

131 
	`¥ötf
(" C⁄vîsi⁄ÅÿGPS: %Œd.%09ld\n", ()
y
.
tv_£c
, y.
tv_n£c
);

132 
	`lgw_gps2˙t
(
µm_ªf
, 
y
, &
z
);

133 
	`¥ötf
(" C⁄vîãd back: %u ==> %d¬µs\n", 
z
, (
öt32_t
)(z-
x
));

135 i‡(
	`MATCH
(
x
,
z
)) {

136 
	`¥ötf
(" ** PASS **: (SX1302 -> GPS -> SX1302) conversion MATCH\n");

138 
	`¥ötf
(" ** FAILED **: (SX1302 -> GPS -> SX1302) conversion MISMATCH\n");

142 
	`¥ötf
("\n");

143 
	`¥ötf
(" * Test ofÅimestamp counter <-> UTC value conversion *\n");

144 
	`¥ötf
(" Te° vÆue: %u\n", 
x
);

145 
	`lgw_˙t2utc
(
µm_ªf
, 
x
, &
y
);

146 
	`¥ötf
(" C⁄vîsi⁄ÅÿUTC: %Œd.%09ld\n", ()
y
.
tv_£c
, y.
tv_n£c
);

147 
	`lgw_utc2˙t
(
µm_ªf
, 
y
, &
z
);

148 
	`¥ötf
(" C⁄vîãd back: %u ==> %d¬µs\n", 
z
, (
öt32_t
)(z-
x
));

150 i‡(
	`MATCH
(
x
,
z
)) {

151 
	`¥ötf
(" ** PASS **: (SX1302 -> UTC -> SX1302) conversion MATCH\n");

153 
	`¥ötf
(" ** FAILED **: (SX1302 -> UTC -> SX1302) conversion MISMATCH\n");

155 
	}
}

157 
	$gps_¥o˚ss_co‹ds
() {

159 
co‹d_s
 
co‹d
;

160 
co‹d_s
 
gp£º
;

161 
i
 = 
	`lgw_gps_gë
(
NULL
, NULL, &
co‹d
, &
gp£º
);

164 i‡(
i
 =
LGW_GPS_SUCCESS
) {

165 
	`¥ötf
("\n");

166 
	`¥ötf
("# GPS co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
co‹d
.
œt
, co‹d.
l⁄
, co‹d.
Æt
);

167 
	`¥ötf
("# GPSÉº:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
gp£º
.
œt
, gp£º.
l⁄
, gp£º.
Æt
);

169 
	}
}

174 
	$maö
(
¨gc
, **
¨gv
)

177 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

178 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

179 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

181 
siga˘i⁄
 
siga˘
;

183 
i
;

184 
¨g_u
;

187 
uöt8_t
 
˛ocksour˚
 = 0;

188 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

189 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

190 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

193 
£rül_buff
[128];

194 
size_t
 
wr_idx
 = 0;

195 
gps_ây_dev
;

198 
gps_msg
 
œã°_msg
;

201 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "hk:r:d:u")) != -1) {

202 
i
) {

204 
	`ußge
();

208 i‡(
›èrg
 !
NULL
) {

209 
com_∑th
 = 
›èrg
;

213 
com_ty≥
 = 
LGW_COM_USB
;

216 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

217 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

218 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

219  
EXIT_FAILURE
;

221 
¨g_u
) {

223 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

226 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

229 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

235 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

236 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

237 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

238  
EXIT_FAILURE
;

240 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

244 
	`¥ötf
("ERROR:árgumentÖarsing\n");

245 
	`ußge
();

246 
	`exô
(
EXIT_FAILURE
);

251 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

252 
siga˘
.
ß_Êags
 = 0;

253 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

254 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

255 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

256 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

259 
	`¥ötf
("Beginning ofÅest forÜoragw_gps.c\n");

260 
	`¥ötf
("*** Libøry vîsi⁄ inf‹m©i⁄ ***\n%s\n***\n", 
	`lgw_vîsi⁄_öfo
());

262 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

264 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

265 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

266 
	`exô
(
EXIT_FAILURE
);

271 
i
 = 
	`lgw_gps_íabÀ
("/dev/âyS0", "ubx7", 0, &
gps_ây_dev
);

272 i‡(
i
 !
LGW_GPS_SUCCESS
) {

273 
	`¥ötf
("ERROR: FailedÅoÉnable GPS\n");

274 
	`exô
(
EXIT_FAILURE
);

279 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

280 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

281 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

282 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

283 
bﬂrdc⁄f
.
com_ty≥
 = com_type;

284 
	`°∫˝y
(
bﬂrdc⁄f
.
com_∑th
, com_path,  boardconf.com_path);

285 
bﬂrdc⁄f
.
com_∑th
[ boardconf.com_path - 1] = '\0';

286 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

287 
	`¥ötf
("ERROR: failedÅo configure board\n");

288  
EXIT_FAILURE
;

292 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

293 
rfc⁄f
.
íabÀ
 = 
åue
;

294 
rfc⁄f
.
‰eq_hz
 = 868000000;

295 
rfc⁄f
.
rssi_off£t
 = 0.0;

296 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

297 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

298 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

299 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

300 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

301  
EXIT_FAILURE
;

304 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

305 
rfc⁄f
.
íabÀ
 = 
åue
;

306 
rfc⁄f
.
‰eq_hz
 = 868000000;

307 
rfc⁄f
.
rssi_off£t
 = 0.0;

308 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

309 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

310 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

311 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

312 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

313  
EXIT_FAILURE
;

317 i‡(
	`lgw_°¨t
(Ë!
LGW_HAL_SUCCESS
) {

318 
	`¥ötf
("ERROR: IMPOSSIBLE TO START THE GATEWAY\n");

319 
	`exô
(
EXIT_FAILURE
);

323 
	`mem£t
(
£rül_buff
, 0,  serial_buff);

324 
	`mem£t
(&
µm_ªf
, 0, Öpm_ref);

327 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

328 
size_t
 
rd_idx
 = 0;

329 
size_t
 
‰ame_íd_idx
 = 0;

332 
ssize_t
 
nb_ch¨
 = 
	`ªad
(
gps_ây_dev
, 
£rül_buff
 + 
wr_idx
, 
LGW_GPS_MIN_MSG_SIZE
);

333 i‡(
nb_ch¨
 <= 0) {

334 
	`¥ötf
("WARNING: [gps]Ñód(Ëªtu∫ed vÆuê%zd\n", 
nb_ch¨
);

337 
wr_idx
 +(
size_t
)
nb_ch¨
;

343 
rd_idx
 < 
wr_idx
) {

344 
size_t
 
‰ame_size
 = 0;

347 i‡(
£rül_buff
[
rd_idx
] =()
LGW_GPS_UBX_SYNC_CHAR
) {

352 
œã°_msg
 = 
	`lgw_∑r£_ubx
(&
£rül_buff
[
rd_idx
], (
wr_idx
 -Ñd_idx), &
‰ame_size
);

354 i‡(
‰ame_size
 > 0) {

355 i‡(
œã°_msg
 =
INCOMPLETE
) {

357 
‰ame_size
 = 0;

358 } i‡(
œã°_msg
 =
INVALID
) {

360 
	`¥ötf
("WARNING: [gps] couldÇot getá valid message from GPS (noÅime)\n");

361 
‰ame_size
 = 0;

362 } i‡(
œã°_msg
 =
UBX_NAV_TIMEGPS
) {

363 
	`¥ötf
("\n~~ UBX NAV-TIMEGPS sentence,Åriggering synchronizationáttempt ~~\n");

364 
	`gps_¥o˚ss_sync
();

367 } if(
£rül_buff
[
rd_idx
] =()
LGW_GPS_NMEA_SYNC_CHAR
) {

372 * 
nmó_íd_±r
 = 
	`memchr
(&
£rül_buff
[
rd_idx
],()0x0a, (
wr_idx
 -Ñd_idx));

374 i‡(
nmó_íd_±r
) {

376 
‰ame_size
 = 
nmó_íd_±r
 - &
£rül_buff
[
rd_idx
] + 1;

377 
œã°_msg
 = 
	`lgw_∑r£_nmó
(&
£rül_buff
[
rd_idx
], 
‰ame_size
);

379 if(
œã°_msg
 =
INVALID
 ||Ü©e°_msg =
UNKNOWN
) {

381 
‰ame_size
 = 0;

382 } i‡(
œã°_msg
 =
NMEA_RMC
) {

383 
	`gps_¥o˚ss_co‹ds
();

388 i‡(
‰ame_size
 > 0) {

391 
rd_idx
 +
‰ame_size
;

392 
‰ame_íd_idx
 = 
rd_idx
;

394 
rd_idx
++;

398 i‡(
‰ame_íd_idx
) {

400 
	`mem˝y
(
£rül_buff
,&£rül_buff[
‰ame_íd_idx
],
wr_idx
 - frame_end_idx);

401 
wr_idx
 -
‰ame_íd_idx
;

405 i‡(((
£rül_buff
Ë- 
wr_idx
Ë< 
LGW_GPS_MIN_MSG_SIZE
) {

406 
	`mem˝y
(
£rül_buff
,&£rül_buff[
LGW_GPS_MIN_MSG_SIZE
],
wr_idx
 - LGW_GPS_MIN_MSG_SIZE);

407 
wr_idx
 -
LGW_GPS_MIN_MSG_SIZE
;

412 i‡(
exô_sig
 == 1) {

413 
	`lgw_gps_dißbÀ
(
gps_ây_dev
);

414 
	`lgw_°›
();

417 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

419 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

420 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

421 
	`exô
(
EXIT_FAILURE
);

425 
	`¥ötf
("\nEnd ofÅest forÜoragw_gps.c\n");

426 
	`exô
(
EXIT_SUCCESS
);

427 
	}
}

	@libloragw/tst/test_loragw_hal_rx.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<sig«l.h
>

32 
	~<m©h.h
>

33 
	~<gë›t.h
>

35 
	~"l‹agw_hÆ.h
"

36 
	~"l‹agw_ªg.h
"

37 
	~"l‹agw_aux.h
"

42 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

43 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

45 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

46 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

51 
	#DEFAULT_FREQ_HZ
 868500000U

	)

56 
	gexô_sig
 = 0;

57 
	gquô_sig
 = 0;

62 
	$sig_h™dÀr
(
sigio
) {

63 i‡(
sigio
 =
SIGQUIT
) {

64 
quô_sig
 = 1;

65 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

66 
exô_sig
 = 1;

68 
	}
}

70 
	$ußge
() {

71 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

72 
	`¥ötf
("Available options:\n");

73 
	`¥ötf
(" -hÖrintÅhis help\n");

74 
	`¥ötf
(" -u set COMÅypeás USB (default is SPI)\n");

75 
	`¥ötf
(" -d <path> COMÖathÅo be usedÅo connectÅhe concentrator\n");

76 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

77 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

78 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

79 
	`¥ötf
(" -a <float> Radio A RX frequency in MHz\n");

80 
	`¥ötf
(" -b <float> Radio B RX frequency in MHz\n");

81 
	`¥ötf
(" -o <float> RSSI OffsetÅo beápplied in dB\n");

82 
	`¥ötf
(" -n <uint> Number ofÖacketÑeceived with CRC OK forÉach HAL start/stopÜoop\n");

83 
	`¥ötf
(" -z <uint> Size ofÅhe RXÖacketárrayÅo beÖassedÅoÜgw_receive()\n");

84 
	`¥ötf
(" -m <uint> Channel frequencyÖlan mode [0:LoRaWAN-like, 1:Same frequency foráll channels (-400000Hz on RF0)]\n");

85 
	`¥ötf
(" -j SetÑadio in single input mode (SX1250 only)\n");

86 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

87 
	`¥ötf
(" --fdd Enable Full-Duplex mode (CN490Ñeference design)\n");

88 
	}
}

93 
	$maö
(
¨gc
, **
¨gv
)

96 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

97 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

98 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

100 
siga˘i⁄
 
siga˘
;

102 
i
, 
j
, 
x
;

103 
uöt32_t
 
Á
 = 
DEFAULT_FREQ_HZ
;

104 
uöt32_t
 
fb
 = 
DEFAULT_FREQ_HZ
;

105 
¨g_d
 = 0.0;

106 
¨g_u
;

107 
uöt8_t
 
˛ocksour˚
 = 0;

108 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

109 
uöt8_t
 
max_rx_pkt
 = 16;

110 
boﬁ
 
sögÀ_öput_mode
 = 
Ál£
;

111 
rssi_off£t
 = 0.0;

112 
boﬁ
 
fuŒ_du∂ex
 = 
Ál£
;

114 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

115 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

116 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

118 
nb_pkt_¸c_ok
 = 0, 
nb_lo›
 = 0, 
˙t_lo›
;

119 
nb_pkt
;

121 
uöt8_t
 
ch™√l_mode
 = 0;

123 c⁄° 
öt32_t
 
ch™√l_if_mode0
[9] = {

135 c⁄° 
öt32_t
 
ch™√l_if_mode1
[9] = {

147 c⁄° 
uöt8_t
 
ch™√l_rfchaö_mode0
[9] = { 1, 1, 1, 0, 0, 0, 0, 0, 1 };

149 c⁄° 
uöt8_t
 
ch™√l_rfchaö_mode1
[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

152 
›ti⁄_ödex
 = 0;

153 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

154 {"fdd", 
no_¨gumít
, 0, 0},

159 (
i
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hja:b:k:r:n:z:m:o:d:u", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

160 
i
) {

162 
	`ußge
();

166 i‡(
›èrg
 !
NULL
) {

167 
com_∑th
 = 
›èrg
;

171 
com_ty≥
 = 
LGW_COM_USB
;

174 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

175 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

176 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

177  
EXIT_FAILURE
;

179 
¨g_u
) {

181 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

184 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

187 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

193 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

194 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

195 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

196  
EXIT_FAILURE
;

198 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

202 
sögÀ_öput_mode
 = 
åue
;

205 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

206 i‡(
i
 != 1) {

207 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

208  
EXIT_FAILURE
;

210 
Á
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

214 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

215 i‡(
i
 != 1) {

216 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

217  
EXIT_FAILURE
;

219 
fb
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

223 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

224 i‡(
i
 != 1) {

225 
	`¥ötf
("ERROR:árgumentÖarsing of -nárgument. Use -hÅoÖrint help\n");

226  
EXIT_FAILURE
;

228 
nb_lo›
 = 
¨g_u
;

232 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

233 i‡(
i
 != 1) {

234 
	`¥ötf
("ERROR:árgumentÖarsing of -zárgument. Use -hÅoÖrint help\n");

235  
EXIT_FAILURE
;

237 
max_rx_pkt
 = 
¨g_u
;

241 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

242 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

243 
	`¥ötf
("ERROR:árgumentÖarsing of -márgument. Use -hÅoÖrint help\n");

244  
EXIT_FAILURE
;

246 
ch™√l_mode
 = 
¨g_u
;

250 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

251 i‡(
i
 != 1) {

252 
	`¥ötf
("ERROR:árgumentÖarsing of -oárgument. Use -hÅoÖrint help\n");

253  
EXIT_FAILURE
;

255 
rssi_off£t
 = ()
¨g_d
;

259 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "fdd") == 0) {

260 
fuŒ_du∂ex
 = 
åue
;

262 
	`¥ötf
("ERROR:árgumentÖarsing options. Use -hÅoÖrint help\n");

263  
EXIT_FAILURE
;

267 
	`¥ötf
("ERROR:árgumentÖarsing\n");

268 
	`ußge
();

274 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

275 
siga˘
.
ß_Êags
 = 0;

276 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

277 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

278 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

279 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

281 
	`¥ötf
("===== sx1302 HAL RXÅest =====\n");

284 
	`mem£t
–&
bﬂrdc⁄f
, 0,  boardconf);

285 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

286 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

287 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = full_duplex;

288 
bﬂrdc⁄f
.
com_ty≥
 = com_type;

289 
	`°∫˝y
(
bﬂrdc⁄f
.
com_∑th
, com_path,  boardconf.com_path);

290 
bﬂrdc⁄f
.
com_∑th
[ boardconf.com_path - 1] = '\0';

291 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

292 
	`¥ötf
("ERROR: failedÅo configure board\n");

293  
EXIT_FAILURE
;

297 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

298 
rfc⁄f
.
íabÀ
 = 
åue
;

299 
rfc⁄f
.
‰eq_hz
 = 
Á
;

300 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

301 
rfc⁄f
.
rssi_off£t
 =Ñssi_offset;

302 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

303 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

304 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

305 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

306  
EXIT_FAILURE
;

309 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

310 
rfc⁄f
.
íabÀ
 = 
åue
;

311 
rfc⁄f
.
‰eq_hz
 = 
fb
;

312 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

313 
rfc⁄f
.
rssi_off£t
 =Ñssi_offset;

314 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

315 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

316 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

317 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

318  
EXIT_FAILURE
;

322 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

323 
i
 = 0; i < 8; i++) {

324 
ifc⁄f
.
íabÀ
 = 
åue
;

325 i‡(
ch™√l_mode
 == 0) {

326 
ifc⁄f
.
rf_chaö
 = 
ch™√l_rfchaö_mode0
[
i
];

327 
ifc⁄f
.
‰eq_hz
 = 
ch™√l_if_mode0
[
i
];

328 } i‡(
ch™√l_mode
 == 1) {

329 
ifc⁄f
.
rf_chaö
 = 
ch™√l_rfchaö_mode1
[
i
];

330 
ifc⁄f
.
‰eq_hz
 = 
ch™√l_if_mode1
[
i
];

332 
	`¥ötf
("ERROR: channel modeÇot supported\n");

333  
EXIT_FAILURE
;

335 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
;

336 i‡(
	`lgw_rxif_£tc⁄f
(
i
, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

337 
	`¥ötf
("ERROR: faûedÅÿc⁄figuªÑxi‡%d\n", 
i
);

338  
EXIT_FAILURE
;

343 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

344 
ifc⁄f
.
rf_chaö
 = 
ch™√l_rfchaö_mode0
[
i
];

345 
ifc⁄f
.
‰eq_hz
 = 
ch™√l_if_mode0
[
i
];

346 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
;

347 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

348 i‡(
	`lgw_rxif_£tc⁄f
(8, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

349 
	`¥ötf
("ERROR: failedÅo configureÑxif for LoRa service channel\n");

350  
EXIT_FAILURE
;

354 
lgw_pkt_rx_s
 
rxpkt
[
max_rx_pkt
];

355 
	`¥ötf
("INFO:Ñxpkàbuf„∏sizêi†£àtÿ%u\n", 
max_rx_pkt
);

356 
	`¥ötf
("INFO: Sñe˘ ch™√»modê%u\n", 
ch™√l_mode
);

359 
˙t_lo›
 = 0;

360  (
quô_sig
 !1Ë&& (
exô_sig
 != 1) )

362 
˙t_lo›
 += 1;

364 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

366 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

367 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

368 
	`exô
(
EXIT_FAILURE
);

373 
x
 = 
	`lgw_°¨t
();

374 i‡(
x
 != 0) {

375 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

376  
EXIT_FAILURE
;

380 
	`¥ötf
("Waiting forÖackets...\n");

381 
nb_pkt_¸c_ok
 = 0;

382 ((
nb_pkt_¸c_ok
 < 
nb_lo›
Ë||Çb_lo› =0Ë&& (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

384 
nb_pkt
 = 
	`lgw_ª˚ive
(
	`ARRAY_SIZE
(
rxpkt
),Ñxpkt);

386 i‡(
nb_pkt
 == 0) {

387 
	`waô_ms
(10);

389 
i
 = 0; i < 
nb_pkt
; i++) {

390 i‡(
rxpkt
[
i
].
°©us
 =
STAT_CRC_OK
) {

391 
nb_pkt_¸c_ok
 += 1;

393 
	`¥ötf
("\n----- %†∑ckë -----\n", (
rxpkt
[
i
].
moduœti⁄
 =
MOD_LORA
) ? "LoRa" : "FSK");

394 
	`¥ötf
(" cou¡_us: %u\n", 
rxpkt
[
i
].
cou¡_us
);

395 
	`¥ötf
(" size: %u\n", 
rxpkt
[
i
].
size
);

396 
	`¥ötf
(" ch™: %u\n", 
rxpkt
[
i
].
if_chaö
);

397 
	`¥ötf
(" sètus: 0x%02X\n", 
rxpkt
[
i
].
°©us
);

398 
	`¥ötf
(" d©r: %u\n", 
rxpkt
[
i
].
d©¨©e
);

399 
	`¥ötf
(" codr: %u\n", 
rxpkt
[
i
].
codî©e
);

400 
	`¥ötf
("Ñf_chaö %u\n", 
rxpkt
[
i
].
rf_chaö
);

401 
	`¥ötf
(" fªq_hz %u\n", 
rxpkt
[
i
].
‰eq_hz
);

402 
	`¥ötf
(" sƒ_avg: %.1f\n", 
rxpkt
[
i
].
¢r
);

403 
	`¥ötf
("Ñssi_ch™:%.1f\n", 
rxpkt
[
i
].
rssic
);

404 
	`¥ötf
("Ñssi_sig :%.1f\n", 
rxpkt
[
i
].
rssis
);

405 
	`¥ötf
(" crc: 0x%04X\n", 
rxpkt
[
i
].
¸c
);

406 
j
 = 0; j < 
rxpkt
[
i
].
size
; j++) {

407 
	`¥ötf
("%02X ", 
rxpkt
[
i
].
∑ylﬂd
[
j
]);

409 
	`¥ötf
("\n");

411 
	`¥ötf
("Re˚ived %dÖackë†—ŸÆ:%lu)\n", 
nb_pkt
, 
nb_pkt_¸c_ok
);

415 
	`¥ötf
–"\nNb vÆidÖackë†ª˚ived: %lu CRC OK (%lu)\n", 
nb_pkt_¸c_ok
, 
˙t_lo›
 );

418 
x
 = 
	`lgw_°›
();

419 i‡(
x
 != 0) {

420 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

421  
EXIT_FAILURE
;

424 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

426 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

427 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

428 
	`exô
(
EXIT_FAILURE
);

433 
	`¥ötf
("=========== Test End ===========\n");

436 
	}
}

	@libloragw/tst/test_loragw_hal_tx.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<m©h.h
>

32 
	~<sig«l.h
>

33 
	~<gë›t.h
>

35 
	~"l‹agw_hÆ.h
"

36 
	~"l‹agw_ªg.h
"

37 
	~"l‹agw_aux.h
"

42 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

47 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

48 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

50 
	#DEFAULT_CLK_SRC
 0

	)

51 
	#DEFAULT_FREQ_HZ
 868500000U

	)

57 
	gexô_sig
 = 0;

58 
	gquô_sig
 = 0;

64 
	$ußge
() {

66 
	`¥ötf
("Available options:\n");

67 
	`¥ötf
(" -hÖrintÅhis help\n");

68 
	`¥ötf
(" -u Set COMÅypeás USB (default is SPI)\n");

69 
	`¥ötf
(" -d <path> COMÖathÅo be usedÅo connectÅhe concentrator\n");

70 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

71 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

72 
	`¥ötf
(" -c <uint> RF chainÅo be used for TX (Radio A or Radio B) [0..1]\n");

73 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

74 
	`¥ötf
(" -f <float> Radio TX frequency in MHz\n");

75 
	`¥ötf
(" -m <str> modulationÅype ['CW', 'LORA', 'FSK']\n");

76 
	`¥ötf
(" -o <int> CW frequency offset from Radio TX frequency in kHz [-65..65]\n");

77 
	`¥ötf
(" -s <uint> LoRa datarate 0:random, [5..12]\n");

78 
	`¥ötf
(" -b <uint> LoRa bandwidth in khz 0:random, [125, 250, 500]\n");

79 
	`¥ötf
(" -l <uint> FSK/LoRaÖreambleÜength, [6..65535]\n");

80 
	`¥ötf
(" -n <uint> Number ofÖacketsÅo be sent\n");

81 
	`¥ötf
(" -z <uint> size ofÖacketsÅo be sent 0:random, [9..255]\n");

82 
	`¥ötf
(" -t <uint> TX modeÅimestamped with delay in ms. If delay is 0, TX mode GPSÅrigger\n");

83 
	`¥ötf
(" -p <int> RFÖower in dBm\n");

84 
	`¥ötf
(" -i Send LoRaÖacket using inverted modulationÖolarity\n");

85 
	`¥ötf
(" -j SetÑadio in single input mode (SX1250 only)\n");

86 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

87 
	`¥ötf
(" --fdev <uint> FSK frequency deviation in kHz [1:250]\n");

88 
	`¥ötf
(" --br <float> FSK bitrate in kbps [0.5:250]\n");

89 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

90 
	`¥ötf
(" --pa <uint> PA gain SX125x:[0..3], SX1250:[0,1]\n");

91 
	`¥ötf
(" --dig <uint> sx1302 digital gain for sx125x [0..3]\n");

92 
	`¥ötf
(" --dac <uint> sx125x DAC gain [0..3]\n");

93 
	`¥ötf
(" --mix <uint> sx125x MIX gain [5..15]\n");

94 
	`¥ötf
(" --pwid <uint> sx1250Öower index [0..22]\n");

95 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

96 
	`¥ötf
(" --nhdr Send LoRaÖacket with implicit header\n");

97 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

98 
	`¥ötf
(" --loop Number ofÜoops for HAL start/stop (HAL unitaryÅest)\n");

99 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

100 
	`¥ötf
(" --fdd Enable Full-Duplex mode (CN490Ñeference design)\n");

101 
	}
}

104 
	$sig_h™dÀr
(
sigio
)

106 i‡(
sigio
 =
SIGQUIT
) {

107 
quô_sig
 = 1;

109 if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

110 
exô_sig
 = 1;

112 
	}
}

117 
	$maö
(
¨gc
, **
¨gv
)

119 
i
, 
x
;

120 
uöt32_t
 
·
 = 
DEFAULT_FREQ_HZ
;

121 
öt8_t
 
rf_powî
 = 0;

122 
uöt8_t
 
sf
 = 0;

123 
uöt16_t
 
bw_khz
 = 0;

124 
uöt32_t
 
nb_pkt
 = 1;

125 
nb_lo›
 = 1, 
˙t_lo›
;

126 
uöt8_t
 
size
 = 0;

127 
mod
[64] = "LORA";

128 
br_kbps
 = 50;

129 
uöt8_t
 
fdev_khz
 = 25;

130 
öt8_t
 
‰eq_off£t
 = 0;

131 
¨g_d
 = 0.0;

132 
¨g_u
;

133 
¨g_i
;

134 
¨g_s
[64];

135 
xf
 = 0.0;

136 
uöt8_t
 
˛ocksour˚
 = 0;

137 
uöt8_t
 
rf_chaö
 = 0;

138 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

139 
uöt16_t
 
¥ómbÀ
 = 8;

140 
boﬁ
 
övît_pﬁ
 = 
Ál£
;

141 
boﬁ
 
no_hódî
 = 
Ál£
;

142 
boﬁ
 
sögÀ_öput_mode
 = 
Ál£
;

143 
boﬁ
 
fuŒ_du∂ex
 = 
Ál£
;

145 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

146 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

147 
lgw_pkt_tx_s
 
pkt
;

148 
lgw_tx_gaö_lut_s
 
txlut
;

149 
uöt8_t
 
tx_°©us
;

150 
uöt32_t
 
cou¡_us
;

151 
uöt32_t
 
åig_dñay_us
 = 1000000;

152 
boﬁ
 
åig_dñay
 = 
Ál£
;

155 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

156 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

157 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

159 
siga˘i⁄
 
siga˘
;

162 
txlut
.
size
 = 0;

163 
	`mem£t
(
txlut
.
lut
, 0, Åxlut.lut);

166 
›ti⁄_ödex
 = 0;

167 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

168 {"fdev", 
ªquúed_¨gumít
, 0, 0},

169 {"br", 
ªquúed_¨gumít
, 0, 0},

170 {"∑", 
ªquúed_¨gumít
, 0, 0},

171 {"dac", 
ªquúed_¨gumít
, 0, 0},

172 {"dig", 
ªquúed_¨gumít
, 0, 0},

173 {"mix", 
ªquúed_¨gumít
, 0, 0},

174 {"pwid", 
ªquúed_¨gumít
, 0, 0},

175 {"lo›", 
ªquúed_¨gumít
, 0, 0},

176 {"nhdr", 
no_¨gumít
, 0, 0},

177 {"fdd", 
no_¨gumít
, 0, 0},

182 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hjif:s:b:n:z:p:k:r:c:l:t:m:o:ud:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

183 
i
) {

185 
	`ußge
();

189 
com_ty≥
 = 
LGW_COM_USB
;

192 i‡(
›èrg
 !
NULL
) {

193 
com_∑th
 = 
›èrg
;

197 
övît_pﬁ
 = 
åue
;

200 
sögÀ_öput_mode
 = 
åue
;

203 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

204 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

205 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

206  
EXIT_FAILURE
;

208 
¨g_u
) {

210 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

213 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

216 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

222 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

223 i‡((
i
 !1Ë|| (
¨g_u
 > 65535)) {

224 
	`¥ötf
("ERROR:árgumentÖarsing of -lárgument. Use -hÅoÖrint help\n");

225  
EXIT_FAILURE
;

227 
¥ómbÀ
 = (
uöt16_t
)
¨g_u
;

231 
i
 = 
	`ssˇnf
(
›èrg
, "%s", 
¨g_s
);

232 i‡((
i
 !1Ë|| ((
	`°rcmp
(
¨g_s
, "CW") != 0) && (strcmp(arg_s, "LORA") != 0) && (strcmp(arg_s, "FSK")))) {

233 
	`¥ötf
("ERROR: invalid modulationÅype\n");

234  
EXIT_FAILURE
;

236 
	`•rötf
(
mod
, "%s", 
¨g_s
);

240 
i
 = 
	`ssˇnf
(
›èrg
, "%d", &
¨g_i
);

241 i‡((
¨g_i
 < -65) || (arg_i > 65)) {

242 
	`¥ötf
("ERROR: invalid frequency offset\n");

243  
EXIT_FAILURE
;

245 
‰eq_off£t
 = (
öt32_t
)
¨g_i
;

249 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

250 i‡(
i
 != 1) {

251 
	`¥ötf
("ERROR:árgumentÖarsing of -tárgument. Use -hÅoÖrint help\n");

252  
EXIT_FAILURE
;

254 
åig_dñay
 = 
åue
;

255 
åig_dñay_us
 = (
uöt32_t
)(
¨g_u
 * 1E3);

259 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

260 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

261 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

262  
EXIT_FAILURE
;

264 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

268 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

269 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

270 
	`¥ötf
("ERROR:árgumentÖarsing of -cárgument. Use -hÅoÖrint help\n");

271  
EXIT_FAILURE
;

273 
rf_chaö
 = (
uöt8_t
)
¨g_u
;

277 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

278 i‡(
i
 != 1) {

279 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

280  
EXIT_FAILURE
;

282 
·
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

286 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

287 i‡((
i
 !1Ë|| (
¨g_u
 < 5) || (arg_u > 12)) {

288 
	`¥ötf
("ERROR:árgumentÖarsing of -sárgument. Use -hÅoÖrint help\n");

289  
EXIT_FAILURE
;

291 
sf
 = (
uöt8_t
)
¨g_u
;

295 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

296 i‡((
i
 !1Ë|| ((
¨g_u
 != 125) && (arg_u != 250) && (arg_u != 500))) {

297 
	`¥ötf
("ERROR:árgumentÖarsing of -bárgument. Use -hÅoÖrint help\n");

298  
EXIT_FAILURE
;

300 
bw_khz
 = (
uöt16_t
)
¨g_u
;

304 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

305 i‡(
i
 != 1) {

306 
	`¥ötf
("ERROR:árgumentÖarsing of -nárgument. Use -hÅoÖrint help\n");

307  
EXIT_FAILURE
;

309 
nb_pkt
 = (
uöt32_t
)
¨g_u
;

313 
i
 = 
	`ssˇnf
(
›èrg
, "%d", &
¨g_i
);

314 i‡(
i
 != 1) {

315 
	`¥ötf
("ERROR:árgumentÖarsing of -párgument. Use -hÅoÖrint help\n");

316  
EXIT_FAILURE
;

318 
rf_powî
 = (
öt8_t
)
¨g_i
;

319 
txlut
.
size
 = 1;

320 
txlut
.
lut
[0].
rf_powî
 =Ñf_power;

324 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

325 i‡((
i
 !1Ë|| (
¨g_u
 < 9) || (arg_u > 255)) {

326 
	`¥ötf
("ERROR:árgumentÖarsing of -zárgument. Use -hÅoÖrint help\n");

327  
EXIT_FAILURE
;

329 
size
 = (
uöt8_t
)
¨g_u
;

333 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "fdev") == 0) {

334 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

335 i‡((
i
 !1Ë|| (
¨g_u
 < 1) || (arg_u > 250)) {

336 
	`¥ötf
("ERROR: invalid FSK frequency deviation\n");

337  
EXIT_FAILURE
;

339 
fdev_khz
 = (
uöt8_t
)
¨g_u
;

341 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "br") == 0) {

342 
i
 = 
	`ssˇnf
(
›èrg
, "%f", &
xf
);

343 i‡((
i
 !1Ë|| (
xf
 < 0.5) || (xf > 250)) {

344 
	`¥ötf
("ERROR: invalid FSK bitrate\n");

345  
EXIT_FAILURE
;

347 
br_kbps
 = 
xf
;

349 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "pa") == 0) {

350 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

351 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

352 
	`¥ötf
("ERROR:árgumentÖarsing of --paárgument. Use -hÅoÖrint help\n");

353  
EXIT_FAILURE
;

355 
txlut
.
size
 = 1;

356 
txlut
.
lut
[0].
∑_gaö
 = (
uöt8_t
)
¨g_u
;

358 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "dac") == 0) {

359 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

360 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

361 
	`¥ötf
("ERROR:árgumentÖarsing of --dacárgument. Use -hÅoÖrint help\n");

362  
EXIT_FAILURE
;

364 
txlut
.
size
 = 1;

365 
txlut
.
lut
[0].
dac_gaö
 = (
uöt8_t
)
¨g_u
;

367 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "mix") == 0) {

368 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

369 i‡((
i
 !1Ë|| (
¨g_u
 > 15)) {

370 
	`¥ötf
("ERROR:árgumentÖarsing of --mixárgument. Use -hÅoÖrint help\n");

371  
EXIT_FAILURE
;

373 
txlut
.
size
 = 1;

374 
txlut
.
lut
[0].
mix_gaö
 = (
uöt8_t
)
¨g_u
;

376 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "dig") == 0) {

377 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

378 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

379 
	`¥ötf
("ERROR:árgumentÖarsing of --digárgument. Use -hÅoÖrint help\n");

380  
EXIT_FAILURE
;

382 
txlut
.
size
 = 1;

383 
txlut
.
lut
[0].
dig_gaö
 = (
uöt8_t
)
¨g_u
;

385 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "pwid") == 0) {

386 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

387 i‡((
i
 !1Ë|| (
¨g_u
 > 22)) {

388 
	`¥ötf
("ERROR:árgumentÖarsing of --pwidárgument. Use -hÅoÖrint help\n");

389  
EXIT_FAILURE
;

391 
txlut
.
size
 = 1;

392 
txlut
.
lut
[0].
mix_gaö
 = 5;

393 
txlut
.
lut
[0].
pwr_idx
 = (
uöt8_t
)
¨g_u
;

395 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "loop") == 0) {

396 
	`¥ötf
("%p\n", 
›èrg
);

397 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

398 i‡(
i
 != 1) {

399 
	`¥ötf
("ERROR:árgumentÖarsing of --loopárgument. Use -hÅoÖrint help\n");

400  
EXIT_FAILURE
;

402 
nb_lo›
 = 
¨g_u
;

404 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "nhdr") == 0) {

405 
no_hódî
 = 
åue
;

406 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "fdd") == 0) {

407 
fuŒ_du∂ex
 = 
åue
;

409 
	`¥ötf
("ERROR:árgumentÖarsing options. Use -hÅoÖrint help\n");

410  
EXIT_FAILURE
;

414 
	`¥ötf
("ERROR:árgumentÖarsing\n");

415 
	`ußge
();

421 i‡(
	`°rcmp
(
mod
, "CW") == 0) {

422 
	`¥ötf
("Sídög %òCW o¿%u Hz (Fªq. off£à%d kHzË© %òdBm\n", 
nb_pkt
, 
·
, 
‰eq_off£t
, 
rf_powî
);

424 i‡(
	`°rcmp
(
mod
, "FSK") == 0) {

425 
	`¥ötf
("Sídög %òFSKÖackë†⁄ %u Hz (FDev %u kHz, Bôøã %.2f, %òbyã†∑ylﬂd, %òsymbﬁ†¥ómbÀË© %òdBm\n", 
nb_pkt
, 
·
, 
fdev_khz
, 
br_kbps
, 
size
, 
¥ómbÀ
, 
rf_powî
);

427 
	`¥ötf
("Sídög %òLoR®∑ckë†⁄ %u Hz (BW %òkHz, SF %i, CR %i, %òbyã†∑ylﬂd, %òsymbﬁ†¥ómbÀ, %†hódî, %†pﬁ¨ôyË© %òdBm\n", 
nb_pkt
, 
·
, 
bw_khz
, 
sf
, 1, 
size
, 
¥ómbÀ
, (
no_hódî
 =
Ál£
Ë? "ex∂icô" : "im∂icô", (
övît_pﬁ
 =Ál£Ë? "n⁄-övîãd" : "övîãd", 
rf_powî
);

431 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

432 
siga˘
.
ß_Êags
 = 0;

433 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

434 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

435 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

436 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

439 
	`mem£t
–&
bﬂrdc⁄f
, 0,  boardconf);

440 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

441 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

442 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = full_duplex;

443 
bﬂrdc⁄f
.
com_ty≥
 = com_type;

444 
	`°∫˝y
(
bﬂrdc⁄f
.
com_∑th
, com_path,  boardconf.com_path);

445 
bﬂrdc⁄f
.
com_∑th
[ boardconf.com_path - 1] = '\0';

446 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

447 
	`¥ötf
("ERROR: failedÅo configure board\n");

448  
EXIT_FAILURE
;

451 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

452 
rfc⁄f
.
íabÀ
 = 
åue
;

453 
rfc⁄f
.
‰eq_hz
 = 
·
;

454 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

455 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

456 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

457 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

458 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

459  
EXIT_FAILURE
;

462 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

463 
rfc⁄f
.
íabÀ
 = (((
rf_chaö
 =1Ë|| (
˛ocksour˚
 =1)Ë? 
åue
 : 
Ál£
);

464 
rfc⁄f
.
‰eq_hz
 = 
·
;

465 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

466 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

467 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

468 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

469 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

470  
EXIT_FAILURE
;

473 i‡(
txlut
.
size
 > 0) {

474 i‡(
	`lgw_txgaö_£tc⁄f
(
rf_chaö
, &
txlut
Ë!
LGW_HAL_SUCCESS
) {

475 
	`¥ötf
("ERROR: failedÅo configureÅxgainÜut\n");

476  
EXIT_FAILURE
;

480 
˙t_lo›
 = 0; c¡_lo› < 
nb_lo›
; cnt_loop++) {

481 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

483 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

484 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

485 
	`exô
(
EXIT_FAILURE
);

490 
x
 = 
	`lgw_°¨t
();

491 i‡(
x
 != 0) {

492 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

493  
EXIT_FAILURE
;

497 
	`mem£t
(&
pkt
, 0, Ökt);

498 
pkt
.
rf_chaö
 =Ñf_chain;

499 
pkt
.
‰eq_hz
 = 
·
;

500 
pkt
.
rf_powî
 =Ñf_power;

501 i‡(
åig_dñay
 =
Ál£
) {

502 
pkt
.
tx_mode
 = 
IMMEDIATE
;

504 i‡(
åig_dñay_us
 == 0) {

505 
pkt
.
tx_mode
 = 
ON_GPS
;

507 
pkt
.
tx_mode
 = 
TIMESTAMPED
;

510 i‡–
	`°rcmp
–
mod
, "CW" ) == 0 ) {

511 
pkt
.
moduœti⁄
 = 
MOD_CW
;

512 
pkt
.
‰eq_off£t
 = freq_offset;

513 
pkt
.
f_dev
 = 
fdev_khz
;

515 if–
	`°rcmp
–
mod
, "FSK" ) == 0 ) {

516 
pkt
.
moduœti⁄
 = 
MOD_FSK
;

517 
pkt
.
no_¸c
 = 
Ál£
;

518 
pkt
.
d©¨©e
 = 
br_kbps
 * 1e3;

519 
pkt
.
f_dev
 = 
fdev_khz
;

521 
pkt
.
moduœti⁄
 = 
MOD_LORA
;

522 
pkt
.
codî©e
 = 
CR_LORA_4_5
;

523 
pkt
.
no_¸c
 = 
åue
;

525 
pkt
.
övît_pﬁ
 = invert_pol;

526 
pkt
.
¥ómbÀ
 =Öreamble;

527 
pkt
.
no_hódî
 =Ço_header;

528 
pkt
.
∑ylﬂd
[0] = 0x40;

529 
pkt
.
∑ylﬂd
[1] = 0xAB;

530 
pkt
.
∑ylﬂd
[2] = 0xAB;

531 
pkt
.
∑ylﬂd
[3] = 0xAB;

532 
pkt
.
∑ylﬂd
[4] = 0xAB;

533 
pkt
.
∑ylﬂd
[5] = 0x00;

534 
pkt
.
∑ylﬂd
[6] = 0;

535 
pkt
.
∑ylﬂd
[7] = 0;

536 
pkt
.
∑ylﬂd
[8] = 0x02;

537 
i
 = 9; i < 255; i++) {

538 
pkt
.
∑ylﬂd
[
i
] = i;

541 
i
 = 0; i < ()
nb_pkt
; i++) {

542 i‡(
åig_dñay
 =
åue
) {

543 i‡(
åig_dñay_us
 > 0) {

544 
	`lgw_gë_ö°˙t
(&
cou¡_us
);

545 
	`¥ötf
("cou¡_us:%u\n", 
cou¡_us
);

546 
pkt
.
cou¡_us
 = cou¡_u†+ 
åig_dñay_us
;

547 
	`¥ötf
("¥ogømmög TX f‹ %u\n", 
pkt
.
cou¡_us
);

549 
	`¥ötf
("programming TX forÇext PPS (GPS)\n");

553 if–
	`°rcmp
–
mod
, "LORA" ) == 0 ) {

554 
pkt
.
d©¨©e
 = (
sf
 =0Ë? (
uöt8_t
)
	`RAND_RANGE
(5, 12) : sf;

557 
bw_khz
) {

559 
pkt
.
b™dwidth
 = 
BW_125KHZ
;

562 
pkt
.
b™dwidth
 = 
BW_250KHZ
;

565 
pkt
.
b™dwidth
 = 
BW_500KHZ
;

568 
pkt
.
b™dwidth
 = (
uöt8_t
)
	`RAND_RANGE
(
BW_125KHZ
, 
BW_500KHZ
);

572 
pkt
.
size
 = (sizê=0Ë? (
uöt8_t
)
	`RAND_RANGE
(9, 255) : size;

574 
pkt
.
∑ylﬂd
[6] = (
uöt8_t
)(
i
 >> 0);

575 
pkt
.
∑ylﬂd
[7] = (
uöt8_t
)(
i
 >> 8);

576 
x
 = 
	`lgw_£nd
(&
pkt
);

577 i‡(
x
 != 0) {

578 
	`¥ötf
("ERROR: failedÅo sendÖacket\n");

583 
	`waô_ms
(5);

584 
	`lgw_°©us
(
pkt
.
rf_chaö
, 
TX_STATUS
, &
tx_°©us
);

585 } (
tx_°©us
 !
TX_FREE
Ë&& (
quô_sig
 !1Ë&& (
exô_sig
 != 1));

587 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

590 
	`¥ötf
("TX done\n");

593 
	`¥ötf
–"\nNbÖackë†£¡: %u (%u)\n", 
i
, 
˙t_lo›
 + 1 );

596 
x
 = 
	`lgw_°›
();

597 i‡(
x
 != 0) {

598 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

601 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

603 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

604 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

605 
	`exô
(
EXIT_FAILURE
);

610 
	`¥ötf
("=========== Test End ===========\n");

613 
	}
}

	@libloragw/tst/test_loragw_i2c.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

32 
	~<time.h
>

34 
	~"l‹agw_i2c.h
"

35 
	~"l‹agw_aux.h
"

36 
	~"l‹agw_hÆ.h
"

44 
	#I2C_PORT_STTS751
 0x39

	)

46 
	#STTS751_REG_TEMP_H
 0x00

	)

47 
	#STTS751_REG_TEMP_L
 0x02

	)

48 
	#STTS751_REG_CONF
 0x03

	)

49 
	#STTS751_REG_RATE
 0x04

	)

50 
	#STTS751_REG_PROD_ID
 0xFD

	)

51 
	#STTS751_REG_MAN_ID
 0xFE

	)

52 
	#STTS751_REG_REV_ID
 0xFF

	)

54 
	#STTS751_0_PROD_ID
 0x00

	)

55 
	#STTS751_1_PROD_ID
 0x01

	)

56 
	#ST_MAN_ID
 0x53

	)

62 
	gexô_sig
 = 0;

63 
	gquô_sig
 = 0;

65 
	gi2c_dev
 = -1;

70 
sig_h™dÀr
(
sigio
);

71 
ußge
();

76 
	$maö
(
¨gc
, ** 
¨gv
)

78 
i
, 
îr
;

79 
siga˘i⁄
 
siga˘
;

80 
uöt8_t
 
vÆ
;

81 
uöt8_t
 
high_byã
, 
low_byã
;

82 
öt8_t
 
h
;

83 
ãm≥øtuª
;

86 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:")) != -1) {

87 
i
) {

89 
	`ußge
();

90  
EXIT_SUCCESS
;

94 i‡(
›èrg
 !
NULL
) {

100 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

101 
	`ußge
();

102  
EXIT_FAILURE
;

107 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

108 
siga˘
.
ß_Êags
 = 0;

109 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

110 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

111 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

112 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

114 
	`¥ötf
( "+++ Start of I2CÅestÖrogram +++\n" );

117 
îr
 = 
	`i2c_löuxdev_›í
–
I2C_DEVICE
, 
I2C_PORT_STTS751
, &
i2c_dev
 );

118 i‡–(
îr
 !0Ë|| (
i2c_dev
 <= 0) )

120 
	`¥ötf
–"ERROR: faûedÅÿ›í I2C devi˚ %†”º=%i)\n", 
I2C_DEVICE
, 
îr
 );

121  
EXIT_FAILURE
;

125 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_PROD_ID
, &
vÆ
 );

126 i‡–
îr
 != 0 )

128 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ %†”º=%i)\n", 
I2C_DEVICE
, 
îr
 );

129  
EXIT_FAILURE
;;

131  
vÆ
 )

133 
STTS751_0_PROD_ID
:

134 
	`¥ötf
("INFO: Product ID: STTS751-0\n");

136 
STTS751_1_PROD_ID
:

137 
	`¥ötf
("INFO: Product ID: STTS751-1\n");

140 
	`¥ötf
("ERROR: Product ID: UNKNOWN\n");

141  
EXIT_FAILURE
;;

145 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_MAN_ID
, &
vÆ
 );

146 i‡–
îr
 != 0 )

148 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ %†”º=%i)\n", 
I2C_DEVICE
, 
îr
 );

149  
EXIT_FAILURE
;;

151 i‡–
vÆ
 !
ST_MAN_ID
 )

153 
	`¥ötf
( "ERROR: Manufacturer ID: UNKNOWN\n" );

154  
EXIT_FAILURE
;;

158 
	`¥ötf
("INFO: M™uÁ˘uª∏ID: 0x%02X\n", 
vÆ
);

162 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_REV_ID
, &
vÆ
 );

163 i‡–
îr
 != 0 )

165 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ %†”º=%i)\n", 
I2C_DEVICE
, 
îr
 );

166  
EXIT_FAILURE
;;

168 
	`¥ötf
("INFO: Revisi⁄Çumbî: 0x%02X\n", 
vÆ
);

171 
îr
 = 
	`i2c_löuxdev_wrôe
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_CONF
, 0x8C );

172 i‡–
îr
 != 0 )

174 
	`¥ötf
–"ERROR: faûedÅÿwrôêI2C devi˚ 0x%02X (îr=%i)\n", 
I2C_PORT_STTS751
, 
îr
 );

175  
EXIT_FAILURE
;

179 
îr
 = 
	`i2c_löuxdev_wrôe
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_RATE
, 0x04 );

180 i‡–
îr
 != 0 )

182 
	`¥ötf
–"ERROR: faûedÅÿwrôêI2C devi˚ 0x%02X (îr=%i)\n", 
I2C_PORT_STTS751
, 
îr
 );

183  
EXIT_FAILURE
;

186 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

188 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_TEMP_L
, &
low_byã
 );

189 i‡–
îr
 != 0 )

191 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
I2C_PORT_STTS751
, 
îr
 );

192  
EXIT_FAILURE
;

196 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_TEMP_H
, &
high_byã
 );

197 i‡–
îr
 != 0 )

199 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
I2C_PORT_STTS751
, 
îr
 );

200  
EXIT_FAILURE
;

203 
h
 = (
öt8_t
)
high_byã
;

204 
ãm≥øtuª
 = ((
h
 << 8Ë| 
low_byã
) / 256.0;

206 
	`¥ötf
–"Tem≥øtuª: %‡C (h:0x%02XÜ:0x%02X)\n", 
ãm≥øtuª
, 
high_byã
, 
low_byã
 );

207 
	`waô_ms
( 100 );

211 
	`¥ötf
( "+++ End of I2CÅestÖrogram +++\n" );

213 
îr
 = 
	`i2c_löuxdev_˛o£
–
i2c_dev
 );

214 i‡–
îr
 != 0 )

216 
	`¥ötf
–"ERROR: faûedÅÿ˛o£ I2C devi˚ (îr=%i)\n", 
îr
 );

217  
EXIT_FAILURE
;

221 
	}
}

226 
	$sig_h™dÀr
(
sigio
) {

227 i‡(
sigio
 =
SIGQUIT
) {

228 
quô_sig
 = 1;

229 } if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

230 
exô_sig
 = 1;

232 
	}
}

236 
	$ußge
() {

237 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

238 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

239 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

240 
	`¥ötf
(" -hÖrintÅhis help\n");

241 
	`¥ötf
(" -d <path> use Linux I2C device driver\n");

242 
	`¥ötf
(" => deÁu…Ö©h: " 
I2C_DEVICE
 "\n");

243 
	}
}

	@libloragw/tst/test_loragw_reg.c

19 #i‡
__STDC_VERSION__
 >= 199901L

20 
	#_XOPEN_SOURCE
 600

	)

22 
	#_XOPEN_SOURCE
 500

	)

25 
	~<°döt.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

30 
	~<m©h.h
>

32 
	~"l‹agw_com.h
"

33 
	~"l‹agw_ªg.h
"

34 
	~"l‹agw_aux.h
"

35 
	~"l‹agw_hÆ.h
"

40 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

41 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

46 c⁄° 
lgw_ªg_s
 
l‹egs
[
LGW_TOTALREGS
+1];

51 
ußge
();

56 
	$maö
(
¨gc
, ** 
¨gv
)

58 
x
, 
i
;

59 
öt32_t
 
vÆ
;

60 
boﬁ
 
îr‹_found
 = 
Ál£
;

61 
uöt8_t
 
ønd_vÆues
[
LGW_TOTALREGS
];

62 
boﬁ
 
ªg_ign‹ed
[
LGW_TOTALREGS
];

63 
uöt8_t
 
ªg_vÆ
;

64 
uöt8_t
 
ªg_max
;

67 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

68 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

69 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

72 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:u")) != -1) {

73 
i
) {

75 
	`ußge
();

76  
EXIT_SUCCESS
;

80 
com_ty≥
 = 
LGW_COM_USB
;

84 i‡(
›èrg
 !
NULL
) {

85 
com_∑th
 = 
›èrg
;

90 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

91 
	`ußge
();

92  
EXIT_FAILURE
;

96 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

98 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

99 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

100 
	`exô
(
EXIT_FAILURE
);

104 
x
 = 
	`lgw_c⁄√˘
(
com_ty≥
, 
com_∑th
);

105 i‡(
x
 !
LGW_REG_SUCCESS
) {

106 
	`¥ötf
("ERROR: failedÅo connect\n");

111 
	`mem£t
(
ªg_ign‹ed
, 0, Ñeg_ignored);

112 
ªg_ign‹ed
[
SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL
] = 
åue
;

115 
	`¥ötf
("## TEST#1:ÑeadállÑegistersánd check default value forÇon-read-onlyÑegisters\n");

116 
îr‹_found
 = 
Ál£
;

117 
i
 = 0; i < 
LGW_TOTALREGS
; i++) {

118 i‡(
l‹egs
[
i
].
rd⁄
 == 0) {

119 
x
 = 
	`lgw_ªg_r
(
i
, &
vÆ
);

120 i‡(
x
 !
LGW_REG_SUCCESS
) {

121 
	`¥ötf
("ERROR: faûedÅÿªadÑegi°îáàödex %d\n", 
i
);

124 i‡(
vÆ
 !
l‹egs
[
i
].
dÊt
) {

125 
	`¥ötf
("ERROR: deÁu… vÆuêf‹Ñegi°îáàödex %d i†%d, should bê%d\n", 
i
, 
vÆ
, 
l‹egs
[i].
dÊt
);

126 
îr‹_found
 = 
åue
;

130 
	`¥ötf
("------------------\n");

131 
	`¥ötf
(" TEST#1 %s\n", (
îr‹_found
 =
Ál£
) ? "PASSED" : "FAILED");

132 
	`¥ötf
("------------------\n\n");

135 
	`¥ötf
("## TEST#2:Ñead/writeÅest onállÇon-read-only,Çon-pulse,Çon-w0clr,Çon-w1clrÑegisters\n");

137 
îr‹_found
 = 
Ál£
;

138 
i
 = 0; i < 
LGW_TOTALREGS
; i++) {

139 i‡((
l‹egs
[
i
].
rd⁄
 =0Ë&& (
ªg_ign‹ed
[i] =
Ál£
)) {

141 
ªg_max
 = 
	`pow
(2, 
l‹egs
[
i
].
Àng
) - 1;

142 i‡(
l‹egs
[
i
].
Àng
 == 1) {

143 
ªg_vÆ
 = !
l‹egs
[
i
].
dÊt
;

147 i‡(
l‹egs
[
i
].
sign
 == 1) {

148 
ªg_vÆ
 = 
	`ønd
(Ë% (
ªg_max
 / 2);

150 
ªg_vÆ
 = 
	`ønd
(Ë% 
ªg_max
;

152 } 
ªg_vÆ
 =
l‹egs
[
i
].
dÊt
);

155 
x
 = 
	`lgw_ªg_w
(
i
, 
ªg_vÆ
);

156 i‡(
x
 !
LGW_REG_SUCCESS
) {

157 
	`¥ötf
("ERROR: faûedÅÿªadÑegi°îáàödex %d\n", 
i
);

161 
ønd_vÆues
[
i
] = 
ªg_vÆ
;

165 
i
 = 0; i < 
LGW_TOTALREGS
; i++) {

166 i‡((
l‹egs
[
i
].
rd⁄
 =0Ë&& (l‹egs[i].
chck
 =1Ë&& (
ªg_ign‹ed
[i] =
Ál£
)) {

167 
x
 = 
	`lgw_ªg_r
(
i
, &
vÆ
);

168 i‡(
x
 !
LGW_REG_SUCCESS
) {

169 
	`¥ötf
("ERROR: faûedÅÿªadÑegi°îáàödex %d\n", 
i
);

173 i‡(
vÆ
 !
ønd_vÆues
[
i
]) {

174 
	`¥ötf
("ERROR: vÆuêªad fromÑegi°îáàödex %d dif„r†‰omÅhêwrôã¿vÆuê(w:%uÑ:%d)\n", 
i
, 
ønd_vÆues
[i], 
vÆ
);

175 
îr‹_found
 = 
åue
;

181 
	`¥ötf
("------------------\n");

182 
	`¥ötf
(" TEST#2 %s\n", (
îr‹_found
 =
Ál£
) ? "PASSED" : "FAILED");

183 
	`¥ötf
("------------------\n\n");

185 
x
 = 
	`lgw_disc⁄√˘
();

186 i‡(
x
 !
LGW_REG_SUCCESS
) {

187 
	`¥ötf
("ERROR: failedÅo disconnect\n");

191 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

193 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

194 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

195 
	`exô
(
EXIT_FAILURE
);

200 
	}
}

205 
	$ußge
() {

206 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

207 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

208 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

209 
	`¥ötf
(" -hÖrintÅhis help\n");

210 
	`¥ötf
(" -u set COMÅypeás USB (default is SPI)\n");

211 
	`¥ötf
(" -d <path> COMÖathÅo be usedÅo connectÅhe concentrator\n");

212 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

213 
	}
}

	@libloragw/tst/test_loragw_sx1261_rssi.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

33 
	~"l‹agw_aux.h
"

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_com.h
"

37 
	~"l‹agw_sx1261.h
"

45 
	#BUFF_SIZE
 16

	)

47 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

48 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

49 
	#SX1261_PATH_DEFAULT
 "/dev/•idev0.1"

	)

51 
	#DEFAULT_FREQ_HZ
 868500000U

	)

57 
	gexô_sig
 = 0;

58 
	gquô_sig
 = 0;

63 
sig_h™dÀr
(
sigio
);

64 
ußge
();

65 
exô_Áûuª
();

70 
	$maö
(
¨gc
, ** 
¨gv
)

72 
siga˘i⁄
 
siga˘
;

74 
i
, 
x
;

75 
¨g_d
 = 0.0;

76 
¨g_u
;

78 
uöt8_t
 
buff
[
BUFF_SIZE
];

79 
uöt32_t
 
‰eq_hz
 = 0;

80 
rssi_ö°
;

81 
uöt32_t
 
Á
 = 
DEFAULT_FREQ_HZ
;

82 
uöt32_t
 
fb
 = 
DEFAULT_FREQ_HZ
;

83 
uöt8_t
 
˛ocksour˚
 = 0;

84 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

87 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

88 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

89 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

90 c⁄° 
sx1261_∑th_deÁu…
[] = 
SX1261_PATH_DEFAULT
;

91 c⁄° * 
sx1261_∑th
 = 
sx1261_∑th_deÁu…
;

93 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

94 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

97 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:uf:D:k:r:a:b:")) != -1) {

98 
i
) {

100 
	`ußge
();

101  
EXIT_SUCCESS
;

105 i‡(
›èrg
 !
NULL
) {

106 
com_∑th
 = 
›èrg
;

111 i‡(
›èrg
 !
NULL
) {

112 
sx1261_∑th
 = 
›èrg
;

117 
com_ty≥
 = 
LGW_COM_USB
;

121 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

122 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

123 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

124  
EXIT_FAILURE
;

126 
¨g_u
) {

128 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

131 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

134 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

141 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

142 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

143 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

144  
EXIT_FAILURE
;

146 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

151 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

152 i‡(
i
 != 1) {

153 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

154  
EXIT_FAILURE
;

156 
Á
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

161 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

162 i‡(
i
 != 1) {

163 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

164  
EXIT_FAILURE
;

166 
fb
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

171 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

172 i‡(
i
 != 1) {

173 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

174  
EXIT_FAILURE
;

176 
‰eq_hz
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

181 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

182 
	`ußge
();

183  
EXIT_FAILURE
;

188 i‡(
‰eq_hz
 == 0) {

189 
	`¥ötf
("ERROR: frequency must me set\n");

190 
	`ußge
();

191  
EXIT_FAILURE
;

195 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

196 
siga˘
.
ß_Êags
 = 0;

197 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

198 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

199 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

200 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

203 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

204 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

205 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

206 
	`exô
(
EXIT_FAILURE
);

211 
	`mem£t
–&
bﬂrdc⁄f
, 0,  boardconf);

212 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

213 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

214 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

215 
bﬂrdc⁄f
.
com_ty≥
 = com_type;

216 
	`°∫˝y
(
bﬂrdc⁄f
.
com_∑th
, com_path,  boardconf.com_path);

217 
bﬂrdc⁄f
.
com_∑th
[ boardconf.com_path - 1] = '\0';

218 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

219 
	`¥ötf
("ERROR: failedÅo configure board\n");

220  
EXIT_FAILURE
;

224 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

225 
rfc⁄f
.
íabÀ
 = 
åue
;

226 
rfc⁄f
.
‰eq_hz
 = 
Á
;

227 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

228 
rfc⁄f
.
rssi_off£t
 = 0.0;

229 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

230 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

231 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

232 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

233  
EXIT_FAILURE
;

236 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

237 
rfc⁄f
.
íabÀ
 = 
åue
;

238 
rfc⁄f
.
‰eq_hz
 = 
fb
;

239 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

240 
rfc⁄f
.
rssi_off£t
 = 0.0;

241 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

242 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

243 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

244 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

245  
EXIT_FAILURE
;

249 
x
 = 
	`lgw_°¨t
();

250 i‡(
x
 !
LGW_REG_SUCCESS
) {

251 
	`¥ötf
("ERROR: FaûedÅÿc⁄√˘Åÿthêc⁄˚¡øt‹ usög COM %s\n", 
com_∑th
);

252  
EXIT_FAILURE
;

256 
x
 = 
	`sx1261_c⁄√˘
(
com_ty≥
, 
sx1261_∑th
);

257 i‡(
x
 !
LGW_REG_SUCCESS
) {

258 
	`¥ötf
("ERROR: FaûedÅÿc⁄√˘Åÿthêsx1261 usög COM %s\n", 
com_∑th
);

259  
EXIT_FAILURE
;

262 
x
 = 
	`sx1261_ˇlibøã
(
‰eq_hz
);

263 i‡(
x
 !
LGW_REG_SUCCESS
) {

264 
	`¥ötf
("ERROR: FailedÅo calibrateÅhe sx1261\n");

265 
	`exô_Áûuª
();

268 
x
 = 
	`sx1261_£tup
();

269 i‡(
x
 !
LGW_REG_SUCCESS
) {

270 
	`¥ötf
("ERROR: FailedÅo setupÅhe sx1261\n");

271 
	`exô_Áûuª
();

274 
x
 = 
	`sx1261_£t_rx_∑øms
(
‰eq_hz
, 
BW_125KHZ
);

275 i‡(
x
 !
LGW_REG_SUCCESS
) {

276 
	`¥ötf
("ERROR: FailedÅo set RXÖarams\n");

277 
	`exô_Áûuª
();

281 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

282 
buff
[0] = 0x00;

283 
buff
[1] = 0x00;

284 
	`sx1261_ªg_r
(
SX1261_GET_RSSI_INST
, 
buff
, 2);

286 
rssi_ö°
 = -(()
buff
[1] / 2);

288 
	`¥ötf
("\rSX1261 RSSIáà%uHz: %‡dBm", 
‰eq_hz
, 
rssi_ö°
);

289 
	`fÊush
(
°dout
);

291 
	`waô_ms
(100);

293 
	`¥ötf
("\n");

296 
x
 = 
	`sx1261_disc⁄√˘
();

297 i‡(
x
 !
LGW_REG_SUCCESS
) {

298 
	`¥ötf
("ERROR: FailedÅo disconnect fromÅhe SX1261Ñadio\n");

302 
x
 = 
	`lgw_°›
();

303 i‡(
x
 !
LGW_REG_SUCCESS
) {

304 
	`¥ötf
("ERROR: FailedÅo disconnect fromÅhe concentrator\n");

307 
	`¥ötf
("Disconnected\n");

309 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

311 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

312 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

313 
	`exô
(
EXIT_FAILURE
);

318 
	}
}

323 
	$sig_h™dÀr
(
sigio
) {

324 i‡(
sigio
 =
SIGQUIT
) {

325 
quô_sig
 = 1;

326 } if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

327 
exô_sig
 = 1;

329 
	}
}

333 
	$exô_Áûuª
() {

334 
	`sx1261_disc⁄√˘
();

335 
	`lgw_disc⁄√˘
();

337 
	`¥ötf
("End ofÅest forÜoragw_spi_sx1261.c\n");

339 
	`exô
(
EXIT_FAILURE
);

340 
	}
}

344 
	$ußge
() {

345 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

346 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

347 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

348 
	`¥ötf
(" -hÖrintÅhis help\n");

349 
	`¥ötf
(" -u set COMÅypeás USB (default is SPI)\n");

350 
	`¥ötf
(" -d <path>ÖathÅoáccessÅhe main COM device\n");

351 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

352 
	`¥ötf
(" -D [path] PathÅoÅhe SX1261 SPI interface (not used for USB)\n");

353 
	`¥ötf
(" => deÁu…Ö©h: " 
SX1261_PATH_DEFAULT
 "\n");

354 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

355 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

356 
	`¥ötf
(" -a <float> Radio A RX frequency in MHz\n");

357 
	`¥ötf
(" -b <float> Radio B RX frequency in MHz\n");

358 
	`¥ötf
(" -f <float> SX1261 frequency for RSSI scanning, in MHz\n");

359 
	}
}

	@libloragw/tst/test_loragw_toa.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dboﬁ.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<gë›t.h
>

31 
	~<°rög.h
>

33 
	~"l‹agw_hÆ.h
"

51 
	$ußge
() {

52 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

53 
	`¥ötf
("Available options:\n");

54 
	`¥ötf
(" -hÖrintÅhis help\n");

55 
	`¥ötf
(" -s <uint> LoRa datarate [5..12]\n");

56 
	`¥ötf
(" -b <uint> LoRa bandwidth in khz [125, 250, 500]\n");

57 
	`¥ötf
(" -l <uint> LoRaÖreambleÜength, [6..65535]\n");

58 
	`¥ötf
(" -c <uint> LoRa codingÑate [1=4/5 2=4/6 3=4/7 4=4/8]\n");

59 
	`¥ötf
(" -z <uint> PayloadÜength [0..255]\n");

60 
	`¥ötf
(" -i Implicit header (no header)\n");

61 
	`¥ötf
(" -r CRCÉnabled\n");

62 
	}
}

67 
	$maö
(
¨gc
, **
¨gv
) {

68 
i
;

69 
¨g_u
;

71 
lgw_pkt_tx_s
 
pkt
;

72 
uöt32_t
 
tﬂ_u
;

75 
boﬁ
 
sf
 = 
Ál£
;

76 
boﬁ
 
bw
 = 
Ál£
;

77 
boﬁ
 
¥ómb
 = 
Ál£
;

78 
boﬁ
 
¸
 = 
Ál£
;

79 
boﬁ
 
sz
 = 
Ál£
;

82 
›ti⁄_ödex
 = 0;

83 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

87 
	`mem£t
(&
pkt
, 0, Ökt);

88 
pkt
.
no_¸c
 = 
åue
;

89 
pkt
.
moduœti⁄
 = 
MOD_LORA
;

92 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hús:b:z:l:c:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

93 
i
) {

95 
	`ußge
();

99 
pkt
.
no_hódî
 = 
åue
;

102 
pkt
.
no_¸c
 = 
Ál£
;

105 
¥ómb
 = 
åue
;

106 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

107 i‡((
i
 !1Ë|| (
¨g_u
 > 65535)) {

108 
	`¥ötf
("ERROR:árgumentÖarsing of -lárgument. Use -hÅoÖrint help\n");

109  
EXIT_FAILURE
;

111 
pkt
.
¥ómbÀ
 = (
uöt16_t
)
¨g_u
;

115 
sf
 = 
åue
;

116 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

117 i‡((
i
 !1Ë|| (
¨g_u
 < 5) || (arg_u > 12)) {

118 
	`¥ötf
("ERROR:árgumentÖarsing of -sárgument. Use -hÅoÖrint help\n");

119  
EXIT_FAILURE
;

121 
pkt
.
d©¨©e
 = 
¨g_u
;

125 
bw
 = 
åue
;

126 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

127 i‡(
i
 != 1) {

128 
	`¥ötf
("ERROR:árgumentÖarsing of -bárgument. Use -hÅoÖrint help\n");

129  
EXIT_FAILURE
;

131 
¨g_u
) {

133 
pkt
.
b™dwidth
 = 
BW_125KHZ
;

136 
pkt
.
b™dwidth
 = 
BW_250KHZ
;

139 
pkt
.
b™dwidth
 = 
BW_500KHZ
;

142 
	`¥ötf
("ERROR:árgumentÖarsing of -bárgument. Use -hÅoÖrint help\n");

143  
EXIT_FAILURE
;

148 
¸
 = 
åue
;

149 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

150 i‡(
i
 != 1) {

151 
	`¥ötf
("ERROR:árgumentÖarsing of -bárgument. Use -hÅoÖrint help\n");

152  
EXIT_FAILURE
;

154 
¨g_u
) {

156 
pkt
.
codî©e
 = 
CR_LORA_4_5
;

159 
pkt
.
codî©e
 = 
CR_LORA_4_6
;

162 
pkt
.
codî©e
 = 
CR_LORA_4_7
;

165 
pkt
.
codî©e
 = 
CR_LORA_4_8
;

168 
	`¥ötf
("ERROR:árgumentÖarsing of -bárgument. Use -hÅoÖrint help\n");

169  
EXIT_FAILURE
;

174 
sz
 = 
åue
;

175 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

176 i‡((
i
 !1Ë|| (
¨g_u
 > 255)) {

177 
	`¥ötf
("ERROR:árgumentÖarsing of -zárgument. Use -hÅoÖrint help\n");

178  
EXIT_FAILURE
;

180 
pkt
.
size
 = (
uöt8_t
)
¨g_u
;

184 
	`¥ötf
("ERROR:árgumentÖarsing\n");

185 
	`ußge
();

186  
EXIT_FAILURE
;

190 
	`¥ötf
("### LoRa - Time On Air Calculator ###\n");

192 i‡(
sf
 =
Ál£
 ||

193 
bw
 =
Ál£
 ||

194 
¥ómb
 =
Ál£
 ||

195 
¸
 =
Ál£
 ||

196 
sz
 =
Ál£
) {

197 
	`¥ötf
("ERROR: missing mandatoryÖacket descriptionÖarameter\n");

198 
	`ußge
();

199  
EXIT_FAILURE
;

202 
tﬂ_u
 = 
	`lgw_time_⁄_aú
(&
pkt
);

203 
	`¥ötf
("=> %u ms\n", 
tﬂ_u
);

206 
	}
}

	@libtools/inc/base64.h

16 #i‚de‡
_BASE64_H


17 
	#_BASE64_H


	)

22 
	~<°döt.h
>

35 
bö_to_b64_n›ad
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
);

45 
b64_to_bö_n›ad
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
);

52 
bö_to_b64
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
);

57 
b64_to_bö
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
);

	@libtools/inc/parson.h

24 #i‚de‡
∑rs⁄_∑rs⁄_h


25 
	#∑rs⁄_∑rs⁄_h


	)

27 #ifde‡
__˝lu•lus


32 
	~<°ddef.h
>

35 
js⁄_obje˘_t
 
	tJSON_Obje˘
;

36 
js⁄_¨øy_t
 
	tJSON_Aºay
;

37 
js⁄_vÆue_t
 
	tJSON_VÆue
;

39 
	ejs⁄_vÆue_ty≥
 {

40 
JSONEº‹
 = -1,

41 
JSONNuŒ
 = 1,

42 
JSONSåög
 = 2,

43 
JSONNumbî
 = 3,

44 
JSONObje˘
 = 4,

45 
JSONAºay
 = 5,

46 
JSONBoﬁón
 = 6

48 
	tJSON_VÆue_Ty≥
;

50 
	ejs⁄_ªsu…_t
 {

51 
JSONSuc˚ss
 = 0,

52 
JSONFaûuª
 = -1

54 
	tJSON_Sètus
;

56 * (*
	tJSON_MÆloc_Fun˘i⁄
)(
	tsize_t
);

57 (*
JSON_Fªe_Fun˘i⁄
)(*);

61 
js⁄_£t_Æloˇti⁄_fun˘i⁄s
(
JSON_MÆloc_Fun˘i⁄
 
mÆloc_fun
, 
JSON_Fªe_Fun˘i⁄
 
‰ì_fun
);

64 
JSON_VÆue
 * 
js⁄_∑r£_fûe
(c⁄° *
fûíame
);

68 
JSON_VÆue
 * 
js⁄_∑r£_fûe_wôh_commíts
(c⁄° *
fûíame
);

71 
JSON_VÆue
 * 
js⁄_∑r£_°rög
(c⁄° *
°rög
);

75 
JSON_VÆue
 * 
js⁄_∑r£_°rög_wôh_commíts
(c⁄° *
°rög
);

78 
size_t
 
js⁄_£rüliz©i⁄_size
(c⁄° 
JSON_VÆue
 *
vÆue
);

79 
JSON_Sètus
 
js⁄_£rülize_to_buf„r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
);

80 
JSON_Sètus
 
js⁄_£rülize_to_fûe
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
);

81 * 
js⁄_£rülize_to_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
);

84 
size_t
 
js⁄_£rüliz©i⁄_size_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
);

85 
JSON_Sètus
 
js⁄_£rülize_to_buf„r_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
);

86 
JSON_Sètus
 
js⁄_£rülize_to_fûe_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
);

87 * 
js⁄_£rülize_to_°rög_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
);

89 
js⁄_‰ì_£rülized_°rög
(*
°rög
);

92 
js⁄_vÆue_equÆs
(c⁄° 
JSON_VÆue
 *
a
, c⁄° JSON_VÆuê*
b
);

104 
JSON_Sètus
 
js⁄_vÆid©e
(c⁄° 
JSON_VÆue
 *
schema
, c⁄° JSON_VÆuê*
vÆue
);

109 
JSON_VÆue
 * 
js⁄_obje˘_gë_vÆue
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

110 c⁄° * 
js⁄_obje˘_gë_°rög
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

111 
JSON_Obje˘
 * 
js⁄_obje˘_gë_obje˘
 (c⁄° JSON_Obje˘ *
obje˘
, c⁄° *
«me
);

112 
JSON_Aºay
 * 
js⁄_obje˘_gë_¨øy
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

113 
js⁄_obje˘_gë_numbî
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

114 
js⁄_obje˘_gë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

120 
JSON_VÆue
 * 
js⁄_obje˘_dŸgë_vÆue
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

121 c⁄° * 
js⁄_obje˘_dŸgë_°rög
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

122 
JSON_Obje˘
 * 
js⁄_obje˘_dŸgë_obje˘
 (c⁄° JSON_Obje˘ *
obje˘
, c⁄° *
«me
);

123 
JSON_Aºay
 * 
js⁄_obje˘_dŸgë_¨øy
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

124 
js⁄_obje˘_dŸgë_numbî
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

125 
js⁄_obje˘_dŸgë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

128 
size_t
 
js⁄_obje˘_gë_cou¡
(c⁄° 
JSON_Obje˘
 *
obje˘
);

129 c⁄° * 
js⁄_obje˘_gë_«me
 (c⁄° 
JSON_Obje˘
 *
obje˘
, 
size_t
 
ödex
);

133 
JSON_Sètus
 
js⁄_obje˘_£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

134 
JSON_Sètus
 
js⁄_obje˘_£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
);

135 
JSON_Sètus
 
js⁄_obje˘_£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
);

136 
JSON_Sètus
 
js⁄_obje˘_£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
);

137 
JSON_Sètus
 
js⁄_obje˘_£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

141 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

142 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
);

143 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
);

144 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
);

145 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

148 
JSON_Sètus
 
js⁄_obje˘_ªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

151 
JSON_Sètus
 
js⁄_obje˘_dŸªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
key
);

154 
JSON_Sètus
 
js⁄_obje˘_˛ór
(
JSON_Obje˘
 *
obje˘
);

159 
JSON_VÆue
 * 
js⁄_¨øy_gë_vÆue
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

160 c⁄° * 
js⁄_¨øy_gë_°rög
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

161 
JSON_Obje˘
 * 
js⁄_¨øy_gë_obje˘
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

162 
JSON_Aºay
 * 
js⁄_¨øy_gë_¨øy
 (c⁄° JSON_Aºay *
¨øy
, 
size_t
 
ödex
);

163 
js⁄_¨øy_gë_numbî
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

164 
js⁄_¨øy_gë_boﬁón
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

165 
size_t
 
js⁄_¨øy_gë_cou¡
 (c⁄° 
JSON_Aºay
 *
¨øy
);

169 
JSON_Sètus
 
js⁄_¨øy_ªmove
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
);

174 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_vÆue
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
JSON_VÆue
 *
vÆue
);

175 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_°rög
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, c⁄° * 
°rög
);

176 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_numbî
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
numbî
);

177 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_boﬁón
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
boﬁón
);

178 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_nuŒ
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
);

181 
JSON_Sètus
 
js⁄_¨øy_˛ór
(
JSON_Aºay
 *
¨øy
);

185 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_vÆue
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
);

186 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_°rög
(
JSON_Aºay
 *
¨øy
, c⁄° *
°rög
);

187 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_numbî
(
JSON_Aºay
 *
¨øy
, 
numbî
);

188 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_boﬁón
(
JSON_Aºay
 *
¨øy
, 
boﬁón
);

189 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_nuŒ
(
JSON_Aºay
 *
¨øy
);

194 
JSON_VÆue
 * 
js⁄_vÆue_öô_obje˘
 ();

195 
JSON_VÆue
 * 
js⁄_vÆue_öô_¨øy
 ();

196 
JSON_VÆue
 * 
js⁄_vÆue_öô_°rög
 (c⁄° *
°rög
);

197 
JSON_VÆue
 * 
js⁄_vÆue_öô_numbî
 (
numbî
);

198 
JSON_VÆue
 * 
js⁄_vÆue_öô_boﬁón
(
boﬁón
);

199 
JSON_VÆue
 * 
js⁄_vÆue_öô_nuŒ
 ();

200 
JSON_VÆue
 * 
js⁄_vÆue_dìp_c›y
 (c⁄° JSON_VÆuê*
vÆue
);

201 
js⁄_vÆue_‰ì
 (
JSON_VÆue
 *
vÆue
);

203 
JSON_VÆue_Ty≥
 
js⁄_vÆue_gë_ty≥
 (c⁄° 
JSON_VÆue
 *
vÆue
);

204 
JSON_Obje˘
 * 
js⁄_vÆue_gë_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
);

205 
JSON_Aºay
 * 
js⁄_vÆue_gë_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
);

206 c⁄° * 
js⁄_vÆue_gë_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
);

207 
js⁄_vÆue_gë_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
);

208 
js⁄_vÆue_gë_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
);

211 
JSON_VÆue_Ty≥
 
js⁄_ty≥
 (c⁄° 
JSON_VÆue
 *
vÆue
);

212 
JSON_Obje˘
 * 
js⁄_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
);

213 
JSON_Aºay
 * 
js⁄_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
);

214 c⁄° * 
js⁄_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
);

215 
js⁄_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
);

216 
js⁄_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
);

218 #ifde‡
__˝lu•lus


	@libtools/inc/tinymt32.h

1 #i‚de‡
TINYMT32_H


2 
	#TINYMT32_H


	)

19 
	~<°döt.h
>

20 
	~<öây≥s.h
>

22 
	#TINYMT32_MEXP
 127

	)

23 
	#TINYMT32_SH0
 1

	)

24 
	#TINYMT32_SH1
 10

	)

25 
	#TINYMT32_SH8
 8

	)

26 
	#TINYMT32_MASK
 
	`UINT32_C
(0x7fffffff)

	)

27 
	#TINYMT32_MUL
 (1.0‡/ 16777216.0f)

	)

29 #i‡
deföed
(
__˝lu•lus
)

36 
	sTINYMT32_T
 {

37 
uöt32_t
 
°©us
[4];

38 
uöt32_t
 
m©1
;

39 
uöt32_t
 
m©2
;

40 
uöt32_t
 
tm©
;

43 
TINYMT32_T
 
	ttöymt32_t
;

45 
töymt32_öô
(
töymt32_t
 * 
øndom
, 
uöt32_t
 
£ed
);

46 
töymt32_öô_by_¨øy
(
töymt32_t
 * 
øndom
, 
uöt32_t
 
öô_key
[],

47 
key_Àngth
);

49 #i‡
deföed
(
__GNUC__
)

55 
ölöe
 
töymt32_gë_mexp
(

56 
töymt32_t
 * 
øndom
 
__©åibuã__
((
unu£d
))) {

57  
TINYMT32_MEXP
;

60 
ölöe
 
töymt32_gë_mexp
(
töymt32_t
 * 
øndom
) {

61  
TINYMT32_MEXP
;

70 
ölöe
 
töymt32_√xt_°©e
(
töymt32_t
 * 
øndom
) {

71 
uöt32_t
 
x
;

72 
uöt32_t
 
y
;

74 
y
 = 
øndom
->
°©us
[3];

75 
x
 = (
øndom
->
°©us
[0] & 
TINYMT32_MASK
)

76 ^ 
øndom
->
°©us
[1]

77 ^ 
øndom
->
°©us
[2];

78 
x
 ^(x << 
TINYMT32_SH0
);

79 
y
 ^(y >> 
TINYMT32_SH0
Ë^ 
x
;

80 
øndom
->
°©us
[0] =Ñandom->status[1];

81 
øndom
->
°©us
[1] =Ñandom->status[2];

82 
øndom
->
°©us
[2] = 
x
 ^ (
y
 << 
TINYMT32_SH1
);

83 
øndom
->
°©us
[3] = 
y
;

84 
øndom
->
°©us
[1] ^-((
öt32_t
)(
y
 & 1)Ë&Ñ™dom->
m©1
;

85 
øndom
->
°©us
[2] ^-((
öt32_t
)(
y
 & 1)Ë&Ñ™dom->
m©2
;

94 
ölöe
 
uöt32_t
 
töymt32_ãm≥r
(
töymt32_t
 * 
øndom
) {

95 
uöt32_t
 
t0
, 
t1
;

96 
t0
 = 
øndom
->
°©us
[3];

97 #i‡
deföed
(
LINEARITY_CHECK
)

98 
t1
 = 
øndom
->
°©us
[0]

99 ^ (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

101 
t1
 = 
øndom
->
°©us
[0]

102 + (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

104 
t0
 ^
t1
;

105 
t0
 ^-((
öt32_t
)(
t1
 & 1)Ë& 
øndom
->
tm©
;

106  
t0
;

115 
ölöe
 
töymt32_ãm≥r_c⁄v
(
töymt32_t
 * 
øndom
) {

116 
uöt32_t
 
t0
, 
t1
;

118 
uöt32_t
 
u
;

119 
f
;

120 } 
c⁄v
;

122 
t0
 = 
øndom
->
°©us
[3];

123 #i‡
deföed
(
LINEARITY_CHECK
)

124 
t1
 = 
øndom
->
°©us
[0]

125 ^ (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

127 
t1
 = 
øndom
->
°©us
[0]

128 + (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

130 
t0
 ^
t1
;

131 
c⁄v
.
u
 = ((
t0
 ^ (-((
öt32_t
)(
t1
 & 1)Ë& 
øndom
->
tm©
)) >> 9)

132 | 
UINT32_C
(0x3f800000);

133  
c⁄v
.
f
;

142 
ölöe
 
töymt32_ãm≥r_c⁄v_›í
(
töymt32_t
 * 
øndom
) {

143 
uöt32_t
 
t0
, 
t1
;

145 
uöt32_t
 
u
;

146 
f
;

147 } 
c⁄v
;

149 
t0
 = 
øndom
->
°©us
[3];

150 #i‡
deföed
(
LINEARITY_CHECK
)

151 
t1
 = 
øndom
->
°©us
[0]

152 ^ (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

154 
t1
 = 
øndom
->
°©us
[0]

155 + (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

157 
t0
 ^
t1
;

158 
c⁄v
.
u
 = ((
t0
 ^ (-((
öt32_t
)(
t1
 & 1)Ë& 
øndom
->
tm©
)) >> 9)

159 | 
UINT32_C
(0x3f800001);

160  
c⁄v
.
f
;

168 
ölöe
 
uöt32_t
 
töymt32_gíî©e_uöt32
(
töymt32_t
 * 
øndom
) {

169 
töymt32_√xt_°©e
(
øndom
);

170  
töymt32_ãm≥r
(
øndom
);

181 
ölöe
 
töymt32_gíî©e_Êﬂt
(
töymt32_t
 * 
øndom
) {

182 
töymt32_√xt_°©e
(
øndom
);

183  (
töymt32_ãm≥r
(
øndom
Ë>> 8Ë* 
TINYMT32_MUL
;

192 
ölöe
 
töymt32_gíî©e_Êﬂt12
(
töymt32_t
 * 
øndom
) {

193 
töymt32_√xt_°©e
(
øndom
);

194  
töymt32_ãm≥r_c⁄v
(
øndom
);

203 
ölöe
 
töymt32_gíî©e_Êﬂt01
(
töymt32_t
 * 
øndom
) {

204 
töymt32_√xt_°©e
(
øndom
);

205  
töymt32_ãm≥r_c⁄v
(
øndom
) - 1.0f;

214 
ölöe
 
töymt32_gíî©e_ÊﬂtOC
(
töymt32_t
 * 
øndom
) {

215 
töymt32_√xt_°©e
(
øndom
);

216  1.0‡- 
töymt32_gíî©e_Êﬂt
(
øndom
);

225 
ölöe
 
töymt32_gíî©e_ÊﬂtOO
(
töymt32_t
 * 
øndom
) {

226 
töymt32_√xt_°©e
(
øndom
);

227  
töymt32_ãm≥r_c⁄v_›í
(
øndom
) - 1.0f;

238 
ölöe
 
töymt32_gíî©e_32doubÀ
(
töymt32_t
 * 
øndom
) {

239 
töymt32_√xt_°©e
(
øndom
);

240  
töymt32_ãm≥r
(
øndom
) * (1.0 / 4294967296.0);

243 #i‡
deföed
(
__˝lu•lus
)

	@libtools/src/base64.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~"ba£64.h
"

28 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

29 
	#CRIT
(
a
Ë
	`Ârötf
(
°dîr
, "\nCRITICAL fûe:%†löe:%u msg:%s\n", 
__FILE__
, 
__LINE__
,a);
	`exô
(
EXIT_FAILURE
)

	)

32 
	#DEBUG
(
¨gs
...)

	)

40 
	gcode_62
 = '+';

41 
	gcode_63
 = '/';

42 
	gcode_∑d
 = '=';

50 
code_to_ch¨
(
uöt8_t
 
x
);

55 
uöt8_t
 
ch¨_to_code
(
x
);

60 
	$code_to_ch¨
(
uöt8_t
 
x
) {

61 i‡(
x
 <= 25) {

62  'A' + 
x
;

63 } i‡((
x
 >= 26) && (x <= 51)) {

64  'a' + (
x
-26);

65 } i‡((
x
 >= 52) && (x <= 61)) {

66  '0' + (
x
-52);

67 } i‡(
x
 == 62) {

68  
code_62
;

69 } i‡(
x
 == 63) {

70  
code_63
;

72 
	`DEBUG
("ERROR: %òIS OUT OF RANGE 0-63 FOR BASE64 ENCODING\n", 
x
);

73 
	`exô
(
EXIT_FAILURE
);

75 
	}
}

77 
uöt8_t
 
	$ch¨_to_code
(
x
) {

78 i‡((
x
 >= 'A') && (x <= 'Z')) {

79  (
uöt8_t
)
x
 - (uint8_t)'A';

80 } i‡((
x
 >= 'a') && (x <= 'z')) {

81  (
uöt8_t
)
x
 - (uint8_t)'a' + 26;

82 } i‡((
x
 >= '0') && (x <= '9')) {

83  (
uöt8_t
)
x
 - (uint8_t)'0' + 52;

84 } i‡(
x
 =
code_62
) {

86 } i‡(
x
 =
code_63
) {

89 
	`DEBUG
("ERROR: %¯(0x%xËIS INVALID CHARACTER FOR BASE64 DECODING\n", 
x
, x);

90 
	`exô
(
EXIT_FAILURE
);

92 
	}
}

97 
	$bö_to_b64_n›ad
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
) {

98 
i
;

99 
ªsu…_Àn
;

100 
fuŒ_blocks
;

101 
œ°_byãs
;

102 
œ°_ch¨s
;

103 
uöt32_t
 
b
;

106 i‡((
out
 =
NULL
Ë|| (
ö
 == NULL)) {

107 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT IN BIN_TO_B64\n");

110 i‡(
size
 == 0) {

111 *
out
 = 0;

116 
fuŒ_blocks
 = 
size
 / 3;

117 
œ°_byãs
 = 
size
 % 3;

118 
œ°_byãs
) {

120 
œ°_ch¨s
 = 0;

123 
œ°_ch¨s
 = 2;

126 
œ°_ch¨s
 = 3;

129 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

133 
ªsu…_Àn
 = (4*
fuŒ_blocks
Ë+ 
œ°_ch¨s
;

134 i‡(
max_Àn
 < (
ªsu…_Àn
 + 1)) {

135 
	`DEBUG
("ERROR: OUTPUT BUFFER TOO SMALL IN BIN_TO_B64\n");

140 
i
=0; i < 
fuŒ_blocks
; ++i) {

141 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

142 
b
 |(0xFF & 
ö
[3*
i
 + 1]) << 8;

143 
b
 |0xFF & 
ö
[3*
i
 + 2];

144 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

145 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

146 
out
[4*
i
 + 2] = 
	`code_to_ch¨
((
b
 >> 6 ) & 0x3F);

147 
out
[4*
i
 + 3] = 
	`code_to_ch¨
–
b
 & 0x3F);

151 
i
 = 
fuŒ_blocks
;

152 i‡(
œ°_ch¨s
 == 0) {

153 
out
[4*
i
] = 0;

154 } i‡(
œ°_ch¨s
 == 2) {

155 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

156 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

157 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

158 
out
[4*
i
 + 2] = 0;

159 } i‡(
œ°_ch¨s
 == 3) {

160 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

161 
b
 |(0xFF & 
ö
[3*
i
 + 1]) << 8;

162 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

163 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

164 
out
[4*
i
 + 2] = 
	`code_to_ch¨
((
b
 >> 6 ) & 0x3F);

165 
out
[4*
i
 + 3] = 0;

168  
ªsu…_Àn
;

169 
	}
}

171 
	$b64_to_bö_n›ad
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
) {

172 
i
;

173 
ªsu…_Àn
;

174 
fuŒ_blocks
;

175 
œ°_ch¨s
;

176 
œ°_byãs
;

177 
uöt32_t
 
b
;

181 i‡((
out
 =
NULL
Ë|| (
ö
 == NULL)) {

182 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT OR INPUT IN B64_TO_BIN\n");

185 i‡(
size
 == 0) {

190 
fuŒ_blocks
 = 
size
 / 4;

191 
œ°_ch¨s
 = 
size
 % 4;

192 
œ°_ch¨s
) {

194 
œ°_byãs
 = 0;

197 
	`DEBUG
("ERROR: ONLY ONE CHAR LEFT IN B64_TO_BIN\n");

200 
œ°_byãs
 = 1;

203 
œ°_byãs
 = 2;

206 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

210 
ªsu…_Àn
 = (3*
fuŒ_blocks
Ë+ 
œ°_byãs
;

211 i‡(
max_Àn
 < 
ªsu…_Àn
) {

212 
	`DEBUG
("ERROR: OUTPUT BUFFER TOO SMALL IN B64_TO_BIN\n");

217 
i
=0; i < 
fuŒ_blocks
; ++i) {

218 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

219 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

220 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 2])) << 6;

221 
b
 |0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 3]);

222 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

223 
out
[3*
i
 + 1] = (
b
 >> 8 ) & 0xFF;

224 
out
[3*
i
 + 2] = 
b
 & 0xFF;

228 
i
 = 
fuŒ_blocks
;

229 i‡(
œ°_byãs
 == 1) {

230 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

231 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

232 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

233 i‡(((
b
 >> 12) & 0x0F) != 0) {

234 
	`DEBUG
("WARNING:Üast character contains unusable bits\n");

236 } i‡(
œ°_byãs
 == 2) {

237 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

238 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

239 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 2])) << 6;

240 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

241 
out
[3*
i
 + 1] = (
b
 >> 8 ) & 0xFF;

242 i‡(((
b
 >> 6) & 0x03) != 0) {

243 
	`DEBUG
("WARNING:Üast character contains unusable bits\n");

247  
ªsu…_Àn
;

248 
	}
}

250 
	$bö_to_b64
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
) {

251 
ªt
;

253 
ªt
 = 
	`bö_to_b64_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

255 i‡(
ªt
 == -1) {

258 
ªt
%4) {

260  
ªt
;

262 
	`DEBUG
("ERROR: INVALID UNPADDED BASE64 STRING\n");

265 i‡(
max_Àn
 >(
ªt
 + 2 + 1)) {

266 
out
[
ªt
] = 
code_∑d
;

267 
out
[
ªt
+1] = 
code_∑d
;

268 
out
[
ªt
+2] = 0;

269  
ªt
+2;

271 
	`DEBUG
("ERROR:ÇotÉnoughÑoomÅoáddÖadding in bin_to_b64\n");

275 i‡(
max_Àn
 >(
ªt
 + 1 + 1)) {

276 
out
[
ªt
] = 
code_∑d
;

277 
out
[
ªt
+1] = 0;

278  
ªt
+1;

280 
	`DEBUG
("ERROR:ÇotÉnoughÑoomÅoáddÖadding in bin_to_b64\n");

284 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

286 
	}
}

288 
	$b64_to_bö
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
) {

289 i‡(
ö
 =
NULL
) {

290 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT OR INPUT IN B64_TO_BIN\n");

293 i‡((
size
%4 == 0) && (size >= 4)) {

294 i‡(
ö
[
size
-2] =
code_∑d
) {

295  
	`b64_to_bö_n›ad
(
ö
, 
size
-2, 
out
, 
max_Àn
);

296 } i‡(
ö
[
size
-1] =
code_∑d
) {

297  
	`b64_to_bö_n›ad
(
ö
, 
size
-1, 
out
, 
max_Àn
);

299  
	`b64_to_bö_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

302  
	`b64_to_bö_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

304 
	}
}

	@libtools/src/parson.c

23 #ifde‡
_MSC_VER


24 
	#_CRT_SECURE_NO_WARNINGS


	)

27 
	~"∑rs⁄.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<˘y≥.h
>

33 
	~<m©h.h
>

35 
	#STARTING_CAPACITY
 15

	)

36 
	#ARRAY_MAX_CAPACITY
 122880

	)

37 
	#OBJECT_MAX_CAPACITY
 960

	)

38 
	#MAX_NESTING
 19

	)

39 
	#DOUBLE_SERIALIZATION_FORMAT
 "%f"

	)

41 
	#SIZEOF_TOKEN
(
a
Ë(◊Ë- 1)

	)

42 
	#SKIP_CHAR
(
°r
Ë((*°r)++)

	)

43 
	#SKIP_WHITESPACES
(
°r
Ë
	`is•a˚
(**°r)Ë{ 
	`SKIP_CHAR
(°r); }

	)

44 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

46 #unde‡
mÆloc


47 #unde‡
‰ì


49 
JSON_MÆloc_Fun˘i⁄
 
	g∑rs⁄_mÆloc
 = 
mÆloc
;

50 
JSON_Fªe_Fun˘i⁄
 
	g∑rs⁄_‰ì
 = 
‰ì
;

52 
	#IS_CONT
(
b
Ë((()(bË& 0xC0Ë=0x80Ë

	)

55 
	ujs⁄_vÆue_vÆue
 {

56 *
	m°rög
;

57 
	mnumbî
;

58 
JSON_Obje˘
 *
	mobje˘
;

59 
JSON_Aºay
 *
	m¨øy
;

60 
	mboﬁón
;

61 
	mnuŒ
;

62 } 
	tJSON_VÆue_VÆue
;

64 
	sjs⁄_vÆue_t
 {

65 
JSON_VÆue_Ty≥
 
	mty≥
;

66 
JSON_VÆue_VÆue
 
	mvÆue
;

69 
	sjs⁄_obje˘_t
 {

70 **
	m«mes
;

71 
JSON_VÆue
 **
	mvÆues
;

72 
size_t
 
	mcou¡
;

73 
size_t
 
	mˇ∑côy
;

76 
	sjs⁄_¨øy_t
 {

77 
JSON_VÆue
 **
	môems
;

78 
size_t
 
	mcou¡
;

79 
size_t
 
	mˇ∑côy
;

83 * 
ªad_fûe
(c⁄° *
fûíame
);

84 
ªmove_commíts
(*
°rög
, c⁄° *
°¨t_tokí
, c⁄° *
íd_tokí
);

85 * 
∑rs⁄_°∫dup
(c⁄° *
°rög
, 
size_t
 
n
);

86 * 
∑rs⁄_°rdup
(c⁄° *
°rög
);

87 
is_utf16_hex
(c⁄° *
°rög
);

88 
num_byãs_ö_utf8_£quí˚
(
c
);

89 
vîify_utf8_£quí˚
(c⁄° *
°rög
, *
Àn
);

90 
is_vÆid_utf8
(c⁄° *
°rög
, 
size_t
 
°rög_Àn
);

91 
is_decimÆ
(c⁄° *
°rög
, 
size_t
 
Àngth
);

94 
JSON_Obje˘
 * 
js⁄_obje˘_öô
();

95 
JSON_Sètus
 
js⁄_obje˘_add
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

96 
JSON_Sètus
 
js⁄_obje˘_ªsize
(
JSON_Obje˘
 *
obje˘
, 
size_t
 
√w_ˇ∑côy
);

97 
JSON_VÆue
 * 
js⁄_obje˘_ngë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
size_t
 
n
);

98 
js⁄_obje˘_‰ì
(
JSON_Obje˘
 *
obje˘
);

101 
JSON_Aºay
 * 
js⁄_¨øy_öô
();

102 
JSON_Sètus
 
js⁄_¨øy_add
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
);

103 
JSON_Sètus
 
js⁄_¨øy_ªsize
(
JSON_Aºay
 *
¨øy
, 
size_t
 
√w_ˇ∑côy
);

104 
js⁄_¨øy_‰ì
(
JSON_Aºay
 *
¨øy
);

107 
JSON_VÆue
 * 
js⁄_vÆue_öô_°rög_no_c›y
(*
°rög
);

110 
skù_quŸes
(c⁄° **
°rög
);

111 
∑r£_utf_16
(c⁄° **
u≈ro˚s£d
, **
¥o˚s£d
);

112 * 
¥o˚ss_°rög
(c⁄° *
öput
, 
size_t
 
Àn
);

113 * 
gë_quŸed_°rög
(c⁄° **
°rög
);

114 
JSON_VÆue
 * 
∑r£_obje˘_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

115 
JSON_VÆue
 * 
∑r£_¨øy_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

116 
JSON_VÆue
 * 
∑r£_°rög_vÆue
(c⁄° **
°rög
);

117 
JSON_VÆue
 * 
∑r£_boﬁón_vÆue
(c⁄° **
°rög
);

118 
JSON_VÆue
 * 
∑r£_numbî_vÆue
(c⁄° **
°rög
);

119 
JSON_VÆue
 * 
∑r£_nuŒ_vÆue
(c⁄° **
°rög
);

120 
JSON_VÆue
 * 
∑r£_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

123 
js⁄_£rülize_to_buf„r_r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
Àvñ
, 
is_¥ëty
, *
num_buf
);

124 
js⁄_£rülize_°rög
(c⁄° *
°rög
, *
buf
);

125 
≠≥nd_ödít
(*
buf
, 
Àvñ
);

126 
≠≥nd_°rög
(*
buf
, c⁄° *
°rög
);

129 * 
	$∑rs⁄_°∫dup
(c⁄° *
°rög
, 
size_t
 
n
) {

130 *
ouçut_°rög
 = (*)
	`∑rs⁄_mÆloc
(
n
 + 1);

131 i‡(!
ouçut_°rög
)

132  
NULL
;

133 
ouçut_°rög
[
n
] = '\0';

134 
	`°∫˝y
(
ouçut_°rög
, 
°rög
, 
n
);

135  
ouçut_°rög
;

136 
	}
}

138 * 
	$∑rs⁄_°rdup
(c⁄° *
°rög
) {

139  
	`∑rs⁄_°∫dup
(
°rög
, 
	`°æí
(string));

140 
	}
}

142 
	$is_utf16_hex
(c⁄° *
s
) {

143  
	`isxdigô
(
s
[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);

144 
	}
}

146 
	$num_byãs_ö_utf8_£quí˚
(
c
) {

147 i‡(
c
 =0xC0 || c =0xC1 || c > 0xF4 || 
	`IS_CONT
(c)) {

149 } i‡((
c
 & 0x80) == 0) {

151 } i‡((
c
 & 0xE0) == 0xC0) {

153 } i‡((
c
 & 0xF0) == 0xE0) {

155 } i‡((
c
 & 0xF8) == 0xF0) {

159 
	}
}

161 
	$vîify_utf8_£quí˚
(c⁄° *
°rög
, *
Àn
) {

162 
˝
 = 0;

163 *
Àn
 = 
	`num_byãs_ö_utf8_£quí˚
(
°rög
[0]);

165 i‡(*
Àn
 == 1) {

166 
˝
 = 
°rög
[0];

167 } i‡(*
Àn
 =2 && 
	`IS_CONT
(
°rög
[1])) {

168 
˝
 = 
°rög
[0] & 0x1F;

169 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

170 } i‡(*
Àn
 =3 && 
	`IS_CONT
(
°rög
[1]) && IS_CONT(string[2])) {

171 
˝
 = (()
°rög
[0]) & 0xF;

172 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

173 
˝
 = (˝ << 6Ë| (
°rög
[2] & 0x3F);

174 } i‡(*
Àn
 =4 && 
	`IS_CONT
(
°rög
[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {

175 
˝
 = 
°rög
[0] & 0x7;

176 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

177 
˝
 = (˝ << 6Ë| (
°rög
[2] & 0x3F);

178 
˝
 = (˝ << 6Ë| (
°rög
[3] & 0x3F);

184 i‡((
˝
 < 0x80 && *
Àn
 > 1) ||

185 (
˝
 < 0x800 && *
Àn
 > 2) ||

186 (
˝
 < 0x10000 && *
Àn
 > 3)) {

191 i‡(
˝
 > 0x10FFFF) {

196 i‡(
˝
 >= 0xD800 && cp <= 0xDFFF) {

201 
	}
}

203 
	$is_vÆid_utf8
(c⁄° *
°rög
, 
size_t
 
°rög_Àn
) {

204 
Àn
 = 0;

205 c⁄° *
°rög_íd
 = 
°rög
 + 
°rög_Àn
;

206 
°rög
 < 
°rög_íd
) {

207 i‡(!
	`vîify_utf8_£quí˚
((c⁄° *)
°rög
, &
Àn
)) {

210 
°rög
 +
Àn
;

213 
	}
}

215 
	$is_decimÆ
(c⁄° *
°rög
, 
size_t
 
Àngth
) {

216 i‡(
Àngth
 > 1 && 
°rög
[0] == '0' && string[1] != '.')

218 i‡(
Àngth
 > 2 && !
	`°∫cmp
(
°rög
, "-0", 2) && string[2] != '.')

220 
Àngth
--)

221 i‡(
	`°rchr
("xX", 
°rög
[
Àngth
]))

224 
	}
}

226 * 
	$ªad_fûe
(c⁄° * 
fûíame
) {

227 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

228 
size_t
 
fûe_size
;

229 
pos
;

230 *
fûe_c⁄ã¡s
;

231 i‡(!
Â
)

232  
NULL
;

233 
	`f£ek
(
Â
, 0L, 
SEEK_END
);

234 
pos
 = 
	`·ñl
(
Â
);

235 i‡(
pos
 < 0) {

236 
	`f˛o£
(
Â
);

237  
NULL
;

239 
fûe_size
 = 
pos
;

240 
	`ªwöd
(
Â
);

241 
fûe_c⁄ã¡s
 = (*)
	`∑rs⁄_mÆloc
((Ë* (
fûe_size
 + 1));

242 i‡(!
fûe_c⁄ã¡s
) {

243 
	`f˛o£
(
Â
);

244  
NULL
;

246 i‡(
	`‰ód
(
fûe_c⁄ã¡s
, 
fûe_size
, 1, 
Â
) < 1) {

247 i‡(
	`„º‹
(
Â
)) {

248 
	`f˛o£
(
Â
);

249 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

250  
NULL
;

253 
	`f˛o£
(
Â
);

254 
fûe_c⁄ã¡s
[
fûe_size
] = '\0';

255  
fûe_c⁄ã¡s
;

256 
	}
}

258 
	$ªmove_commíts
(*
°rög
, c⁄° *
°¨t_tokí
, c⁄° *
íd_tokí
) {

259 
ö_°rög
 = 0, 
esˇ≥d
 = 0;

260 
size_t
 
i
;

261 *
±r
 = 
NULL
, 
cuºít_ch¨
;

262 
size_t
 
°¨t_tokí_Àn
 = 
	`°æí
(
°¨t_tokí
);

263 
size_t
 
íd_tokí_Àn
 = 
	`°æí
(
íd_tokí
);

264 i‡(
°¨t_tokí_Àn
 =0 || 
íd_tokí_Àn
 == 0)

266 (
cuºít_ch¨
 = *
°rög
) != '\0') {

267 i‡(
cuºít_ch¨
 ='\\' && !
esˇ≥d
) {

268 
esˇ≥d
 = 1;

269 
°rög
++;

271 } i‡(
cuºít_ch¨
 ='\"' && !
esˇ≥d
) {

272 
ö_°rög
 = !in_string;

273 } i‡(!
ö_°rög
 && 
	`°∫cmp
(
°rög
, 
°¨t_tokí
, 
°¨t_tokí_Àn
) == 0) {

274 
i
 = 0; i < 
°¨t_tokí_Àn
; i++)

275 
°rög
[
i
] = ' ';

276 
°rög
 = såög + 
°¨t_tokí_Àn
;

277 
±r
 = 
	`°r°r
(
°rög
, 
íd_tokí
);

278 i‡(!
±r
)

280 
i
 = 0; i < (
±r
 - 
°rög
Ë+ 
íd_tokí_Àn
; i++)

281 
°rög
[
i
] = ' ';

282 
°rög
 = 
±r
 + 
íd_tokí_Àn
 - 1;

284 
esˇ≥d
 = 0;

285 
°rög
++;

287 
	}
}

290 
JSON_Obje˘
 * 
	$js⁄_obje˘_öô
() {

291 
JSON_Obje˘
 *
√w_obj
 = (JSON_Obje˘*)
	`∑rs⁄_mÆloc
((JSON_Object));

292 i‡(!
√w_obj
)

293  
NULL
;

294 
√w_obj
->
«mes
 = (**)
NULL
;

295 
√w_obj
->
vÆues
 = (
JSON_VÆue
**)
NULL
;

296 
√w_obj
->
ˇ∑côy
 = 0;

297 
√w_obj
->
cou¡
 = 0;

298  
√w_obj
;

299 
	}
}

301 
JSON_Sètus
 
	$js⁄_obje˘_add
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

302 
size_t
 
ödex
 = 0;

303 i‡(
obje˘
 =
NULL
 || 
«me
 =NULL || 
vÆue
 == NULL) {

304  
JSONFaûuª
;

306 i‡(
obje˘
->
cou¡
 >obje˘->
ˇ∑côy
) {

307 
size_t
 
√w_ˇ∑côy
 = 
	`MAX
(
obje˘
->
ˇ∑côy
 * 2, 
STARTING_CAPACITY
);

308 i‡(
√w_ˇ∑côy
 > 
OBJECT_MAX_CAPACITY
)

309  
JSONFaûuª
;

310 i‡(
	`js⁄_obje˘_ªsize
(
obje˘
, 
√w_ˇ∑côy
Ë=
JSONFaûuª
)

311  
JSONFaûuª
;

313 i‡(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
Ë!
NULL
)

314  
JSONFaûuª
;

315 
ödex
 = 
obje˘
->
cou¡
;

316 
obje˘
->
«mes
[
ödex
] = 
	`∑rs⁄_°rdup
(
«me
);

317 i‡(
obje˘
->
«mes
[
ödex
] =
NULL
)

318  
JSONFaûuª
;

319 
obje˘
->
vÆues
[
ödex
] = 
vÆue
;

320 
obje˘
->
cou¡
++;

321  
JSONSuc˚ss
;

322 
	}
}

324 
JSON_Sètus
 
	$js⁄_obje˘_ªsize
(
JSON_Obje˘
 *
obje˘
, 
size_t
 
√w_ˇ∑côy
) {

325 **
ãmp_«mes
 = 
NULL
;

326 
JSON_VÆue
 **
ãmp_vÆues
 = 
NULL
;

328 i‡((
obje˘
->
«mes
 =
NULL
 && obje˘->
vÆues
 != NULL) ||

329 (
obje˘
->
«mes
 !
NULL
 && obje˘->
vÆues
 == NULL) ||

330 
√w_ˇ∑côy
 == 0) {

331  
JSONFaûuª
;

334 
ãmp_«mes
 = (**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (*));

335 i‡(
ãmp_«mes
 =
NULL
)

336  
JSONFaûuª
;

338 
ãmp_vÆues
 = (
JSON_VÆue
**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (JSON_Value*));

339 i‡(
ãmp_vÆues
 =
NULL
) {

340 
	`∑rs⁄_‰ì
(
ãmp_«mes
);

341  
JSONFaûuª
;

344 i‡(
obje˘
->
«mes
 !
NULL
 && obje˘->
vÆues
 !NULL && obje˘->
cou¡
 > 0) {

345 
	`mem˝y
(
ãmp_«mes
, 
obje˘
->
«mes
, obje˘->
cou¡
 * (*));

346 
	`mem˝y
(
ãmp_vÆues
, 
obje˘
->
vÆues
, obje˘->
cou¡
 * (
JSON_VÆue
*));

348 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
);

349 
	`∑rs⁄_‰ì
(
obje˘
->
vÆues
);

350 
obje˘
->
«mes
 = 
ãmp_«mes
;

351 
obje˘
->
vÆues
 = 
ãmp_vÆues
;

352 
obje˘
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

353  
JSONSuc˚ss
;

354 
	}
}

356 
JSON_VÆue
 * 
	$js⁄_obje˘_ngë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
size_t
 
n
) {

357 
size_t
 
i
, 
«me_Àngth
;

358 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

359 
«me_Àngth
 = 
	`°æí
(
obje˘
->
«mes
[
i
]);

360 i‡(
«me_Àngth
 !
n
)

362 i‡(
	`°∫cmp
(
obje˘
->
«mes
[
i
], 
«me
, 
n
) == 0)

363  
obje˘
->
vÆues
[
i
];

365  
NULL
;

366 
	}
}

368 
	$js⁄_obje˘_‰ì
(
JSON_Obje˘
 *
obje˘
) {

369 
obje˘
->
cou¡
--) {

370 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[obje˘->
cou¡
]);

371 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[obje˘->
cou¡
]);

373 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
);

374 
	`∑rs⁄_‰ì
(
obje˘
->
vÆues
);

375 
	`∑rs⁄_‰ì
(
obje˘
);

376 
	}
}

379 
JSON_Aºay
 * 
	$js⁄_¨øy_öô
() {

380 
JSON_Aºay
 *
√w_¨øy
 = (JSON_Aºay*)
	`∑rs⁄_mÆloc
((JSON_Array));

381 i‡(!
√w_¨øy
)

382  
NULL
;

383 
√w_¨øy
->
ôems
 = (
JSON_VÆue
**)
NULL
;

384 
√w_¨øy
->
ˇ∑côy
 = 0;

385 
√w_¨øy
->
cou¡
 = 0;

386  
√w_¨øy
;

387 
	}
}

389 
JSON_Sètus
 
	$js⁄_¨øy_add
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
) {

390 i‡(
¨øy
->
cou¡
 >¨øy->
ˇ∑côy
) {

391 
size_t
 
√w_ˇ∑côy
 = 
	`MAX
(
¨øy
->
ˇ∑côy
 * 2, 
STARTING_CAPACITY
);

392 i‡(
√w_ˇ∑côy
 > 
ARRAY_MAX_CAPACITY
)

393  
JSONFaûuª
;

394 i‡(
	`js⁄_¨øy_ªsize
(
¨øy
, 
√w_ˇ∑côy
Ë=
JSONFaûuª
)

395  
JSONFaûuª
;

397 
¨øy
->
ôems
[¨øy->
cou¡
] = 
vÆue
;

398 
¨øy
->
cou¡
++;

399  
JSONSuc˚ss
;

400 
	}
}

402 
JSON_Sètus
 
	$js⁄_¨øy_ªsize
(
JSON_Aºay
 *
¨øy
, 
size_t
 
√w_ˇ∑côy
) {

403 
JSON_VÆue
 **
√w_ôems
 = 
NULL
;

404 i‡(
√w_ˇ∑côy
 == 0) {

405  
JSONFaûuª
;

407 
√w_ôems
 = (
JSON_VÆue
**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (JSON_Value*));

408 i‡(
√w_ôems
 =
NULL
) {

409  
JSONFaûuª
;

411 i‡(
¨øy
->
ôems
 !
NULL
 &&áºay->
cou¡
 > 0) {

412 
	`mem˝y
(
√w_ôems
, 
¨øy
->
ôems
,áºay->
cou¡
 * (
JSON_VÆue
*));

414 
	`∑rs⁄_‰ì
(
¨øy
->
ôems
);

415 
¨øy
->
ôems
 = 
√w_ôems
;

416 
¨øy
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

417  
JSONSuc˚ss
;

418 
	}
}

420 
	$js⁄_¨øy_‰ì
(
JSON_Aºay
 *
¨øy
) {

421 
¨øy
->
cou¡
--)

422 
	`js⁄_vÆue_‰ì
(
¨øy
->
ôems
[¨øy->
cou¡
]);

423 
	`∑rs⁄_‰ì
(
¨øy
->
ôems
);

424 
	`∑rs⁄_‰ì
(
¨øy
);

425 
	}
}

428 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_°rög_no_c›y
(*
°rög
) {

429 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

430 i‡(!
√w_vÆue
)

431  
NULL
;

432 
√w_vÆue
->
ty≥
 = 
JSONSåög
;

433 
√w_vÆue
->
vÆue
.
°rög
 = string;

434  
√w_vÆue
;

435 
	}
}

438 
	$skù_quŸes
(c⁄° **
°rög
) {

439 
	`SKIP_CHAR
(
°rög
);

440 **
°rög
 != '\"') {

441 i‡(**
°rög
 == '\0')

443 i‡(**
°rög
 == '\\') {

444 
	`SKIP_CHAR
(
°rög
);

445 i‡(**
°rög
 == '\0')

448 
	`SKIP_CHAR
(
°rög
);

450 
	`SKIP_CHAR
(
°rög
);

451 
	}
}

453 
	$∑r£_utf_16
(c⁄° **
u≈ro˚s£d
, **
¥o˚s£d
) {

454 
˝
, 
Àad
, 
åaû
;

455 *
¥o˚s£d_±r
 = *
¥o˚s£d
;

456 c⁄° *
u≈ro˚s£d_±r
 = *
u≈ro˚s£d
;

457 
u≈ro˚s£d_±r
++;

458 i‡(!
	`is_utf16_hex
((c⁄° *)
u≈ro˚s£d_±r
Ë|| 
	`ssˇnf
(u≈ro˚s£d_±r, "%4x", &
˝
Ë=
EOF
)

459  
JSONFaûuª
;

460 i‡(
˝
 < 0x80) {

461 *
¥o˚s£d_±r
 = 
˝
;

462 } i‡(
˝
 < 0x800) {

463 *
¥o˚s£d_±r
++ = ((
˝
 >> 6) & 0x1F) | 0xC0;

464 *
¥o˚s£d_±r
 = ((
˝
 ) & 0x3F) | 0x80;

465 } i‡(
˝
 < 0xD800 || cp > 0xDFFF) {

466 *
¥o˚s£d_±r
++ = ((
˝
 >> 12) & 0x0F) | 0xE0;

467 *
¥o˚s£d_±r
++ = ((
˝
 >> 6) & 0x3F) | 0x80;

468 *
¥o˚s£d_±r
 = ((
˝
 ) & 0x3F) | 0x80;

469 } i‡(
˝
 >= 0xD800 && cp <= 0xDBFF) {

470 
Àad
 = 
˝
;

471 
u≈ro˚s£d_±r
 += 4;

472 i‡(*
u≈ro˚s£d_±r
++ != '\\' || *unprocessed_ptr++ != 'u' ||

473 !
	`is_utf16_hex
((c⁄° *)
u≈ro˚s£d_±r
) ||

474 
	`ssˇnf
(
u≈ro˚s£d_±r
, "%4x", &
åaû
Ë=
EOF
 ||

475 
åaû
 < 0xDC00 ||Årail > 0xDFFF) {

476  
JSONFaûuª
;

478 
˝
 = ((((
Àad
-0xD800)&0x3FF)<<10)|((
åaû
-0xDC00)&0x3FF))+0x010000;

479 *
¥o˚s£d_±r
++ = (((
˝
 >> 18) & 0x07) | 0xF0);

480 *
¥o˚s£d_±r
++ = (((
˝
 >> 12) & 0x3F) | 0x80);

481 *
¥o˚s£d_±r
++ = (((
˝
 >> 6) & 0x3F) | 0x80);

482 *
¥o˚s£d_±r
 = (((
˝
 ) & 0x3F) | 0x80);

484  
JSONFaûuª
;

486 
u≈ro˚s£d_±r
 += 3;

487 *
¥o˚s£d
 = 
¥o˚s£d_±r
;

488 *
u≈ro˚s£d
 = 
u≈ro˚s£d_±r
;

489  
JSONSuc˚ss
;

490 
	}
}

495 * 
	$¥o˚ss_°rög
(c⁄° *
öput
, 
size_t
 
Àn
) {

496 c⁄° *
öput_±r
 = 
öput
;

497 
size_t
 
öôül_size
 = (
Àn
 + 1) * ();

498 
size_t
 
föÆ_size
 = 0;

499 *
ouçut
 = (*)
	`∑rs⁄_mÆloc
(
öôül_size
);

500 *
ouçut_±r
 = 
ouçut
;

501 *
ªsized_ouçut
 = 
NULL
;

502 (*
öput_±r
 !'\0'Ë&& (
size_t
)(öput_±∏- 
öput
Ë< 
Àn
) {

503 i‡(*
öput_±r
 == '\\') {

504 
öput_±r
++;

505 *
öput_±r
) {

506 '\"': *
ouçut_±r
 = '\"'; ;

507 '\\': *
ouçut_±r
 = '\\'; ;

508 '/': *
ouçut_±r
 = '/'; ;

509 'b': *
ouçut_±r
 = '\b'; ;

510 'f': *
ouçut_±r
 = '\f'; ;

511 'n': *
ouçut_±r
 = '\n'; ;

512 'r': *
ouçut_±r
 = '\r'; ;

513 't': *
ouçut_±r
 = '\t'; ;

515 i‡(
	`∑r£_utf_16
(&
öput_±r
, &
ouçut_±r
Ë=
JSONFaûuª
)

516 
îr‹
;

519 
îr‹
;

521 } i‡(()*
öput_±r
 < 0x20) {

522 
îr‹
;

524 *
ouçut_±r
 = *
öput_±r
;

526 
ouçut_±r
++;

527 
öput_±r
++;

529 *
ouçut_±r
 = '\0';

531 
föÆ_size
 = (
size_t
)(
ouçut_±r
-
ouçut
) + 1;

532 
ªsized_ouçut
 = (*)
	`∑rs⁄_mÆloc
(
föÆ_size
);

533 i‡(
ªsized_ouçut
 =
NULL
)

534 
îr‹
;

535 
	`mem˝y
(
ªsized_ouçut
, 
ouçut
, 
föÆ_size
);

536 
	`∑rs⁄_‰ì
(
ouçut
);

537  
ªsized_ouçut
;

538 
îr‹
:

539 
	`∑rs⁄_‰ì
(
ouçut
);

540  
NULL
;

541 
	}
}

545 * 
	$gë_quŸed_°rög
(c⁄° **
°rög
) {

546 c⁄° *
°rög_°¨t
 = *
°rög
;

547 
size_t
 
°rög_Àn
 = 0;

548 
	`skù_quŸes
(
°rög
);

549 i‡(**
°rög
 == '\0')

550  
NULL
;

551 
°rög_Àn
 = *
°rög
 - 
°rög_°¨t
 - 2;

552  
	`¥o˚ss_°rög
(
°rög_°¨t
 + 1, 
°rög_Àn
);

553 
	}
}

555 
JSON_VÆue
 * 
	$∑r£_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

556 i‡(
√°ög
 > 
MAX_NESTING
)

557  
NULL
;

558 
	`SKIP_WHITESPACES
(
°rög
);

559 **
°rög
) {

561  
	`∑r£_obje˘_vÆue
(
°rög
, 
√°ög
 + 1);

563  
	`∑r£_¨øy_vÆue
(
°rög
, 
√°ög
 + 1);

565  
	`∑r£_°rög_vÆue
(
°rög
);

567  
	`∑r£_boﬁón_vÆue
(
°rög
);

571  
	`∑r£_numbî_vÆue
(
°rög
);

573  
	`∑r£_nuŒ_vÆue
(
°rög
);

575  
NULL
;

577 
	}
}

579 
JSON_VÆue
 * 
	$∑r£_obje˘_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

580 
JSON_VÆue
 *
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
(), *
√w_vÆue
 = 
NULL
;

581 
JSON_Obje˘
 *
ouçut_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
ouçut_vÆue
);

582 *
√w_key
 = 
NULL
;

583 i‡(
ouçut_vÆue
 =
NULL
)

584  
NULL
;

585 
	`SKIP_CHAR
(
°rög
);

586 
	`SKIP_WHITESPACES
(
°rög
);

587 i‡(**
°rög
 == '}') {

588 
	`SKIP_CHAR
(
°rög
);

589  
ouçut_vÆue
;

591 **
°rög
 != '\0') {

592 
√w_key
 = 
	`gë_quŸed_°rög
(
°rög
);

593 
	`SKIP_WHITESPACES
(
°rög
);

594 i‡(
√w_key
 =
NULL
 || **
°rög
 != ':') {

595 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

596  
NULL
;

598 
	`SKIP_CHAR
(
°rög
);

599 
√w_vÆue
 = 
	`∑r£_vÆue
(
°rög
, 
√°ög
);

600 i‡(
√w_vÆue
 =
NULL
) {

601 
	`∑rs⁄_‰ì
(
√w_key
);

602 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

603  
NULL
;

605 if(
	`js⁄_obje˘_add
(
ouçut_obje˘
, 
√w_key
, 
√w_vÆue
Ë=
JSONFaûuª
) {

606 
	`∑rs⁄_‰ì
(
√w_key
);

607 
	`∑rs⁄_‰ì
(
√w_vÆue
);

608 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

609  
NULL
;

611 
	`∑rs⁄_‰ì
(
√w_key
);

612 
	`SKIP_WHITESPACES
(
°rög
);

613 i‡(**
°rög
 != ',')

615 
	`SKIP_CHAR
(
°rög
);

616 
	`SKIP_WHITESPACES
(
°rög
);

618 
	`SKIP_WHITESPACES
(
°rög
);

619 i‡(**
°rög
 != '}' ||

620 
	`js⁄_obje˘_ªsize
(
ouçut_obje˘
, 
	`js⁄_obje˘_gë_cou¡
(ouçut_obje˘)Ë=
JSONFaûuª
) {

621 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

622  
NULL
;

624 
	`SKIP_CHAR
(
°rög
);

625  
ouçut_vÆue
;

626 
	}
}

628 
JSON_VÆue
 * 
	$∑r£_¨øy_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

629 
JSON_VÆue
 *
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
(), *
√w_¨øy_vÆue
 = 
NULL
;

630 
JSON_Aºay
 *
ouçut_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
ouçut_vÆue
);

631 i‡(!
ouçut_vÆue
)

632  
NULL
;

633 
	`SKIP_CHAR
(
°rög
);

634 
	`SKIP_WHITESPACES
(
°rög
);

635 i‡(**
°rög
 == ']') {

636 
	`SKIP_CHAR
(
°rög
);

637  
ouçut_vÆue
;

639 **
°rög
 != '\0') {

640 
√w_¨øy_vÆue
 = 
	`∑r£_vÆue
(
°rög
, 
√°ög
);

641 i‡(!
√w_¨øy_vÆue
) {

642 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

643  
NULL
;

645 if(
	`js⁄_¨øy_add
(
ouçut_¨øy
, 
√w_¨øy_vÆue
Ë=
JSONFaûuª
) {

646 
	`∑rs⁄_‰ì
(
√w_¨øy_vÆue
);

647 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

648  
NULL
;

650 
	`SKIP_WHITESPACES
(
°rög
);

651 i‡(**
°rög
 != ',')

653 
	`SKIP_CHAR
(
°rög
);

654 
	`SKIP_WHITESPACES
(
°rög
);

656 
	`SKIP_WHITESPACES
(
°rög
);

657 i‡(**
°rög
 != ']' ||

658 
	`js⁄_¨øy_ªsize
(
ouçut_¨øy
, 
	`js⁄_¨øy_gë_cou¡
(ouçut_¨øy)Ë=
JSONFaûuª
) {

659 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

660  
NULL
;

662 
	`SKIP_CHAR
(
°rög
);

663  
ouçut_vÆue
;

664 
	}
}

666 
JSON_VÆue
 * 
	$∑r£_°rög_vÆue
(c⁄° **
°rög
) {

667 
JSON_VÆue
 *
vÆue
 = 
NULL
;

668 *
√w_°rög
 = 
	`gë_quŸed_°rög
(
°rög
);

669 i‡(
√w_°rög
 =
NULL
)

670  
NULL
;

671 
vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
√w_°rög
);

672 i‡(
vÆue
 =
NULL
) {

673 
	`∑rs⁄_‰ì
(
√w_°rög
);

674  
NULL
;

676  
vÆue
;

677 
	}
}

679 
JSON_VÆue
 * 
	$∑r£_boﬁón_vÆue
(c⁄° **
°rög
) {

680 
size_t
 
åue_tokí_size
 = 
	`SIZEOF_TOKEN
("true");

681 
size_t
 
Ál£_tokí_size
 = 
	`SIZEOF_TOKEN
("false");

682 i‡(
	`°∫cmp
("åue", *
°rög
, 
åue_tokí_size
) == 0) {

683 *
°rög
 +
åue_tokí_size
;

684  
	`js⁄_vÆue_öô_boﬁón
(1);

685 } i‡(
	`°∫cmp
("Ál£", *
°rög
, 
Ál£_tokí_size
) == 0) {

686 *
°rög
 +
Ál£_tokí_size
;

687  
	`js⁄_vÆue_öô_boﬁón
(0);

689  
NULL
;

690 
	}
}

692 
JSON_VÆue
 * 
	$∑r£_numbî_vÆue
(c⁄° **
°rög
) {

693 *
íd
;

694 
numbî
 = 
	`°πod
(*
°rög
, &
íd
);

695 
JSON_VÆue
 *
ouçut_vÆue
;

696 i‡(
	`is_decimÆ
(*
°rög
, 
íd
 - *string)) {

697 *
°rög
 = 
íd
;

698 
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

700 
ouçut_vÆue
 = 
NULL
;

702  
ouçut_vÆue
;

703 
	}
}

705 
JSON_VÆue
 * 
	$∑r£_nuŒ_vÆue
(c⁄° **
°rög
) {

706 
size_t
 
tokí_size
 = 
	`SIZEOF_TOKEN
("null");

707 i‡(
	`°∫cmp
("nuŒ", *
°rög
, 
tokí_size
) == 0) {

708 *
°rög
 +
tokí_size
;

709  
	`js⁄_vÆue_öô_nuŒ
();

711  
NULL
;

712 
	}
}

715 
	#APPEND_STRING
(
°r
Ëdÿ{ 
wrôãn
 = 
	`≠≥nd_°rög
(
buf
, (str)); \

716 i‡(
wrôãn
 < 0) {  -1; } \

717 i‡(
buf
 !
NULL
Ë{ bu‡+
wrôãn
; } \

718 
wrôãn_tŸÆ
 +
wrôãn
; } 0)

	)

720 
	#APPEND_INDENT
(
Àvñ
Ëdÿ{ 
wrôãn
 = 
	`≠≥nd_ödít
(
buf
, (level)); \

721 i‡(
wrôãn
 < 0) {  -1; } \

722 i‡(
buf
 !
NULL
Ë{ bu‡+
wrôãn
; } \

723 
wrôãn_tŸÆ
 +
wrôãn
; } 0)

	)

725 
	$js⁄_£rülize_to_buf„r_r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
Àvñ
, 
is_¥ëty
, *
num_buf
)

727 c⁄° *
key
 = 
NULL
, *
°rög
 = NULL;

728 
JSON_VÆue
 *
ãmp_vÆue
 = 
NULL
;

729 
JSON_Aºay
 *
¨øy
 = 
NULL
;

730 
JSON_Obje˘
 *
obje˘
 = 
NULL
;

731 
size_t
 
i
 = 0, 
cou¡
 = 0;

732 
num
 = 0.0;

733 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

735 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

736 
JSONAºay
:

737 
¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

738 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
¨øy
);

739 
	`APPEND_STRING
("[");

740 i‡(
cou¡
 > 0 && 
is_¥ëty
)

741 
	`APPEND_STRING
("\n");

742 
i
 = 0; i < 
cou¡
; i++) {

743 i‡(
is_¥ëty
)

744 
	`APPEND_INDENT
(
Àvñ
+1);

745 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
i
);

746 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
ãmp_vÆue
, 
buf
, 
Àvñ
+1, 
is_¥ëty
, 
num_buf
);

747 i‡(
wrôãn
 < 0)

749 i‡(
buf
 !
NULL
)

750 
buf
 +
wrôãn
;

751 
wrôãn_tŸÆ
 +
wrôãn
;

752 i‡(
i
 < (
cou¡
 - 1))

753 
	`APPEND_STRING
(",");

754 i‡(
is_¥ëty
)

755 
	`APPEND_STRING
("\n");

757 i‡(
cou¡
 > 0 && 
is_¥ëty
)

758 
	`APPEND_INDENT
(
Àvñ
);

759 
	`APPEND_STRING
("]");

760  
wrôãn_tŸÆ
;

761 
JSONObje˘
:

762 
obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

763 
cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
obje˘
);

764 
	`APPEND_STRING
("{");

765 i‡(
cou¡
 > 0 && 
is_¥ëty
)

766 
	`APPEND_STRING
("\n");

767 
i
 = 0; i < 
cou¡
; i++) {

768 
key
 = 
	`js⁄_obje˘_gë_«me
(
obje˘
, 
i
);

769 i‡(
is_¥ëty
)

770 
	`APPEND_INDENT
(
Àvñ
+1);

771 
wrôãn
 = 
	`js⁄_£rülize_°rög
(
key
, 
buf
);

772 i‡(
wrôãn
 < 0)

774 i‡(
buf
 !
NULL
)

775 
buf
 +
wrôãn
;

776 
wrôãn_tŸÆ
 +
wrôãn
;

777 
	`APPEND_STRING
(":");

778 i‡(
is_¥ëty
)

779 
	`APPEND_STRING
(" ");

780 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
key
);

781 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
ãmp_vÆue
, 
buf
, 
Àvñ
+1, 
is_¥ëty
, 
num_buf
);

782 i‡(
wrôãn
 < 0)

784 i‡(
buf
 !
NULL
)

785 
buf
 +
wrôãn
;

786 
wrôãn_tŸÆ
 +
wrôãn
;

787 i‡(
i
 < (
cou¡
 - 1))

788 
	`APPEND_STRING
(",");

789 i‡(
is_¥ëty
)

790 
	`APPEND_STRING
("\n");

792 i‡(
cou¡
 > 0 && 
is_¥ëty
)

793 
	`APPEND_INDENT
(
Àvñ
);

794 
	`APPEND_STRING
("}");

795  
wrôãn_tŸÆ
;

796 
JSONSåög
:

797 
°rög
 = 
	`js⁄_vÆue_gë_°rög
(
vÆue
);

798 
wrôãn
 = 
	`js⁄_£rülize_°rög
(
°rög
, 
buf
);

799 i‡(
wrôãn
 < 0)

801 i‡(
buf
 !
NULL
)

802 
buf
 +
wrôãn
;

803 
wrôãn_tŸÆ
 +
wrôãn
;

804  
wrôãn_tŸÆ
;

805 
JSONBoﬁón
:

806 i‡(
	`js⁄_vÆue_gë_boﬁón
(
vÆue
))

807 
	`APPEND_STRING
("true");

809 
	`APPEND_STRING
("false");

810  
wrôãn_tŸÆ
;

811 
JSONNumbî
:

812 
num
 = 
	`js⁄_vÆue_gë_numbî
(
vÆue
);

813 i‡(
buf
 !
NULL
)

814 
num_buf
 = 
buf
;

815 i‡(
num
 == (()()num))

816 
wrôãn
 = 
	`•rötf
(
num_buf
, "%d", ()
num
);

818 
wrôãn
 = 
	`•rötf
(
num_buf
, 
DOUBLE_SERIALIZATION_FORMAT
, 
num
);

819 i‡(
wrôãn
 < 0)

821 i‡(
buf
 !
NULL
)

822 
buf
 +
wrôãn
;

823 
wrôãn_tŸÆ
 +
wrôãn
;

824  
wrôãn_tŸÆ
;

825 
JSONNuŒ
:

826 
	`APPEND_STRING
("null");

827  
wrôãn_tŸÆ
;

828 
JSONEº‹
:

833 
	}
}

835 
	$js⁄_£rülize_°rög
(c⁄° *
°rög
, *
buf
) {

836 
size_t
 
i
 = 0, 
Àn
 = 
	`°æí
(
°rög
);

837 
c
 = '\0';

838 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

839 
	`APPEND_STRING
("\"");

840 
i
 = 0; i < 
Àn
; i++) {

841 
c
 = 
°rög
[
i
];

842 
c
) {

843 '\"': 
	`APPEND_STRING
("\\\""); ;

844 '\\': 
	`APPEND_STRING
("\\\\"); ;

845 '/': 
	`APPEND_STRING
("\\/"); ;

846 '\b': 
	`APPEND_STRING
("\\b"); ;

847 '\f': 
	`APPEND_STRING
("\\f"); ;

848 '\n': 
	`APPEND_STRING
("\\n"); ;

849 '\r': 
	`APPEND_STRING
("\\r"); ;

850 '\t': 
	`APPEND_STRING
("\\t"); ;

852 i‡(
buf
 !
NULL
) {

853 
buf
[0] = 
c
;

854 
buf
 += 1;

856 
wrôãn_tŸÆ
 += 1;

860 
	`APPEND_STRING
("\"");

861  
wrôãn_tŸÆ
;

862 
	}
}

864 
	$≠≥nd_ödít
(*
buf
, 
Àvñ
) {

865 
i
;

866 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

867 
i
 = 0; i < 
Àvñ
; i++) {

868 
	`APPEND_STRING
(" ");

870  
wrôãn_tŸÆ
;

871 
	}
}

873 
	$≠≥nd_°rög
(*
buf
, c⁄° *
°rög
) {

874 i‡(
buf
 =
NULL
) {

875  ()
	`°æí
(
°rög
);

877  
	`•rötf
(
buf
, "%s", 
°rög
);

878 
	}
}

880 #unde‡
APPEND_STRING


881 #unde‡
APPEND_INDENT


884 
JSON_VÆue
 * 
	$js⁄_∑r£_fûe
(c⁄° *
fûíame
) {

885 *
fûe_c⁄ã¡s
 = 
	`ªad_fûe
(
fûíame
);

886 
JSON_VÆue
 *
ouçut_vÆue
 = 
NULL
;

887 i‡(
fûe_c⁄ã¡s
 =
NULL
)

888  
NULL
;

889 
ouçut_vÆue
 = 
	`js⁄_∑r£_°rög
(
fûe_c⁄ã¡s
);

890 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

891  
ouçut_vÆue
;

892 
	}
}

894 
JSON_VÆue
 * 
	$js⁄_∑r£_fûe_wôh_commíts
(c⁄° *
fûíame
) {

895 *
fûe_c⁄ã¡s
 = 
	`ªad_fûe
(
fûíame
);

896 
JSON_VÆue
 *
ouçut_vÆue
 = 
NULL
;

897 i‡(
fûe_c⁄ã¡s
 =
NULL
)

898  
NULL
;

899 
ouçut_vÆue
 = 
	`js⁄_∑r£_°rög_wôh_commíts
(
fûe_c⁄ã¡s
);

900 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

901  
ouçut_vÆue
;

902 
	}
}

904 
JSON_VÆue
 * 
	$js⁄_∑r£_°rög
(c⁄° *
°rög
) {

905 i‡(
°rög
 =
NULL
)

906  
NULL
;

907 
	`SKIP_WHITESPACES
(&
°rög
);

908 i‡(*
°rög
 != '{' && *string != '[')

909  
NULL
;

910  
	`∑r£_vÆue
((c⁄° **)&
°rög
, 0);

911 
	}
}

913 
JSON_VÆue
 * 
	$js⁄_∑r£_°rög_wôh_commíts
(c⁄° *
°rög
) {

914 
JSON_VÆue
 *
ªsu…
 = 
NULL
;

915 *
°rög_muèbÀ_c›y
 = 
NULL
, *
°rög_muèbÀ_c›y_±r
 = NULL;

916 
°rög_muèbÀ_c›y
 = 
	`∑rs⁄_°rdup
(
°rög
);

917 i‡(
°rög_muèbÀ_c›y
 =
NULL
)

918  
NULL
;

919 
	`ªmove_commíts
(
°rög_muèbÀ_c›y
, "/*", "*/");

920 
	`ªmove_commíts
(
°rög_muèbÀ_c›y
, "//", "\n");

921 
°rög_muèbÀ_c›y_±r
 = 
°rög_muèbÀ_c›y
;

922 
	`SKIP_WHITESPACES
(&
°rög_muèbÀ_c›y_±r
);

923 i‡(*
°rög_muèbÀ_c›y_±r
 != '{' && *string_mutable_copy_ptr != '[') {

924 
	`∑rs⁄_‰ì
(
°rög_muèbÀ_c›y
);

925  
NULL
;

927 
ªsu…
 = 
	`∑r£_vÆue
((c⁄° **)&
°rög_muèbÀ_c›y_±r
, 0);

928 
	`∑rs⁄_‰ì
(
°rög_muèbÀ_c›y
);

929  
ªsu…
;

930 
	}
}

935 
JSON_VÆue
 * 
	$js⁄_obje˘_gë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

936 i‡(
obje˘
 =
NULL
 || 
«me
 == NULL)

937  
NULL
;

938  
	`js⁄_obje˘_ngë_vÆue
(
obje˘
, 
«me
, 
	`°æí
(name));

939 
	}
}

941 c⁄° * 
	$js⁄_obje˘_gë_°rög
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

942  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

943 
	}
}

945 
	$js⁄_obje˘_gë_numbî
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

946  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

947 
	}
}

949 
JSON_Obje˘
 * 
	$js⁄_obje˘_gë_obje˘
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

950  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

951 
	}
}

953 
JSON_Aºay
 * 
	$js⁄_obje˘_gë_¨øy
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

954  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

955 
	}
}

957 
	$js⁄_obje˘_gë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

958  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

959 
	}
}

961 
JSON_VÆue
 * 
	$js⁄_obje˘_dŸgë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

962 c⁄° *
dŸ_posôi⁄
 = 
	`°rchr
(
«me
, '.');

963 i‡(!
dŸ_posôi⁄
)

964  
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
);

965 
obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_ngë_vÆue
(obje˘, 
«me
, 
dŸ_posôi⁄
 -Çame));

966  
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
dŸ_posôi⁄
 + 1);

967 
	}
}

969 c⁄° * 
	$js⁄_obje˘_dŸgë_°rög
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

970  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

971 
	}
}

973 
	$js⁄_obje˘_dŸgë_numbî
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

974  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

975 
	}
}

977 
JSON_Obje˘
 * 
	$js⁄_obje˘_dŸgë_obje˘
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

978  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

979 
	}
}

981 
JSON_Aºay
 * 
	$js⁄_obje˘_dŸgë_¨øy
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

982  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

983 
	}
}

985 
	$js⁄_obje˘_dŸgë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

986  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

987 
	}
}

989 
size_t
 
	$js⁄_obje˘_gë_cou¡
(c⁄° 
JSON_Obje˘
 *
obje˘
) {

990  
obje˘
 ? obje˘->
cou¡
 : 0;

991 
	}
}

993 c⁄° * 
	$js⁄_obje˘_gë_«me
(c⁄° 
JSON_Obje˘
 *
obje˘
, 
size_t
 
ödex
) {

994 i‡(
ödex
 >
	`js⁄_obje˘_gë_cou¡
(
obje˘
))

995  
NULL
;

996  
obje˘
->
«mes
[
ödex
];

997 
	}
}

1000 
JSON_VÆue
 * 
	$js⁄_¨øy_gë_vÆue
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1001 i‡(
ödex
 >
	`js⁄_¨øy_gë_cou¡
(
¨øy
))

1002  
NULL
;

1003  
¨øy
->
ôems
[
ödex
];

1004 
	}
}

1006 c⁄° * 
	$js⁄_¨øy_gë_°rög
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1007  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1008 
	}
}

1010 
	$js⁄_¨øy_gë_numbî
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1011  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1012 
	}
}

1014 
JSON_Obje˘
 * 
	$js⁄_¨øy_gë_obje˘
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1015  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1016 
	}
}

1018 
JSON_Aºay
 * 
	$js⁄_¨øy_gë_¨øy
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1019  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1020 
	}
}

1022 
	$js⁄_¨øy_gë_boﬁón
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1023  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1024 
	}
}

1026 
size_t
 
	$js⁄_¨øy_gë_cou¡
(c⁄° 
JSON_Aºay
 *
¨øy
) {

1027  
¨øy
 ?áºay->
cou¡
 : 0;

1028 
	}
}

1031 
JSON_VÆue_Ty≥
 
	$js⁄_vÆue_gë_ty≥
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1032  
vÆue
 ? vÆue->
ty≥
 : 
JSONEº‹
;

1033 
	}
}

1035 
JSON_Obje˘
 * 
	$js⁄_vÆue_gë_obje˘
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1036  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONObje˘
 ? vÆue->vÆue.
obje˘
 : 
NULL
;

1037 
	}
}

1039 
JSON_Aºay
 * 
	$js⁄_vÆue_gë_¨øy
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1040  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONAºay
 ? vÆue->vÆue.
¨øy
 : 
NULL
;

1041 
	}
}

1043 c⁄° * 
	$js⁄_vÆue_gë_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1044  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONSåög
 ? vÆue->vÆue.
°rög
 : 
NULL
;

1045 
	}
}

1047 
	$js⁄_vÆue_gë_numbî
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1048  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONNumbî
 ? vÆue->vÆue.
numbî
 : 0;

1049 
	}
}

1051 
	$js⁄_vÆue_gë_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1052  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONBoﬁón
 ? vÆue->vÆue.
boﬁón
 : -1;

1053 
	}
}

1055 
	$js⁄_vÆue_‰ì
(
JSON_VÆue
 *
vÆue
) {

1056 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

1057 
JSONObje˘
:

1058 
	`js⁄_obje˘_‰ì
(
vÆue
->vÆue.
obje˘
);

1060 
JSONSåög
:

1061 i‡(
vÆue
->vÆue.
°rög
Ë{ 
	`∑rs⁄_‰ì
(value->value.string); }

1063 
JSONAºay
:

1064 
	`js⁄_¨øy_‰ì
(
vÆue
->vÆue.
¨øy
);

1069 
	`∑rs⁄_‰ì
(
vÆue
);

1070 
	}
}

1072 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_obje˘
() {

1073 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1074 i‡(!
√w_vÆue
)

1075  
NULL
;

1076 
√w_vÆue
->
ty≥
 = 
JSONObje˘
;

1077 
√w_vÆue
->
vÆue
.
obje˘
 = 
	`js⁄_obje˘_öô
();

1078 i‡(!
√w_vÆue
->
vÆue
.
obje˘
) {

1079 
	`∑rs⁄_‰ì
(
√w_vÆue
);

1080  
NULL
;

1082  
√w_vÆue
;

1083 
	}
}

1085 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_¨øy
() {

1086 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1087 i‡(!
√w_vÆue
)

1088  
NULL
;

1089 
√w_vÆue
->
ty≥
 = 
JSONAºay
;

1090 
√w_vÆue
->
vÆue
.
¨øy
 = 
	`js⁄_¨øy_öô
();

1091 i‡(!
√w_vÆue
->
vÆue
.
¨øy
) {

1092 
	`∑rs⁄_‰ì
(
√w_vÆue
);

1093  
NULL
;

1095  
√w_vÆue
;

1096 
	}
}

1098 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_°rög
(c⁄° *
°rög
) {

1099 *
c›y
 = 
NULL
;

1100 
JSON_VÆue
 *
vÆue
;

1101 
size_t
 
°rög_Àn
 = 0;

1102 i‡(
°rög
 =
NULL
)

1103  
NULL
;

1104 
°rög_Àn
 = 
	`°æí
(
°rög
);

1105 i‡(!
	`is_vÆid_utf8
(
°rög
, 
°rög_Àn
))

1106  
NULL
;

1107 
c›y
 = 
	`∑rs⁄_°∫dup
(
°rög
, 
°rög_Àn
);

1108 i‡(
c›y
 =
NULL
)

1109  
NULL
;

1110 
vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
c›y
);

1111 i‡(
vÆue
 =
NULL
)

1112 
	`∑rs⁄_‰ì
(
c›y
);

1113  
vÆue
;

1114 
	}
}

1116 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_numbî
(
numbî
) {

1117 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1118 i‡(!
√w_vÆue
)

1119  
NULL
;

1120 
√w_vÆue
->
ty≥
 = 
JSONNumbî
;

1121 
√w_vÆue
->
vÆue
.
numbî
 =Çumber;

1122  
√w_vÆue
;

1123 
	}
}

1125 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_boﬁón
(
boﬁón
) {

1126 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1127 i‡(!
√w_vÆue
)

1128  
NULL
;

1129 
√w_vÆue
->
ty≥
 = 
JSONBoﬁón
;

1130 
√w_vÆue
->
vÆue
.
boﬁón
 = boolean ? 1 : 0;

1131  
√w_vÆue
;

1132 
	}
}

1134 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_nuŒ
() {

1135 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1136 i‡(!
√w_vÆue
)

1137  
NULL
;

1138 
√w_vÆue
->
ty≥
 = 
JSONNuŒ
;

1139  
√w_vÆue
;

1140 
	}
}

1142 
JSON_VÆue
 * 
	$js⁄_vÆue_dìp_c›y
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1143 
size_t
 
i
 = 0;

1144 
JSON_VÆue
 *
ªtu∫_vÆue
 = 
NULL
, *
ãmp_vÆue_c›y
 = NULL, *
ãmp_vÆue
 = NULL;

1145 c⁄° *
ãmp_°rög
 = 
NULL
, *
ãmp_key
 = NULL;

1146 *
ãmp_°rög_c›y
 = 
NULL
;

1147 
JSON_Aºay
 *
ãmp_¨øy
 = 
NULL
, *
ãmp_¨øy_c›y
 = NULL;

1148 
JSON_Obje˘
 *
ãmp_obje˘
 = 
NULL
, *
ãmp_obje˘_c›y
 = NULL;

1150 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

1151 
JSONAºay
:

1152 
ãmp_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1153 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
();

1154 i‡(
ªtu∫_vÆue
 =
NULL
)

1155  
NULL
;

1156 
ãmp_¨øy_c›y
 = 
	`js⁄_vÆue_gë_¨øy
(
ªtu∫_vÆue
);

1157 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
ãmp_¨øy
); i++) {

1158 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
ãmp_¨øy
, 
i
);

1159 
ãmp_vÆue_c›y
 = 
	`js⁄_vÆue_dìp_c›y
(
ãmp_vÆue
);

1160 i‡(
ãmp_vÆue_c›y
 =
NULL
) {

1161 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1162  
NULL
;

1164 i‡(
	`js⁄_¨øy_add
(
ãmp_¨øy_c›y
, 
ãmp_vÆue_c›y
Ë=
JSONFaûuª
) {

1165 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1166 
	`js⁄_vÆue_‰ì
(
ãmp_vÆue_c›y
);

1167  
NULL
;

1170  
ªtu∫_vÆue
;

1171 
JSONObje˘
:

1172 
ãmp_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1173 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

1174 i‡(
ªtu∫_vÆue
 =
NULL
)

1175  
NULL
;

1176 
ãmp_obje˘_c›y
 = 
	`js⁄_vÆue_gë_obje˘
(
ªtu∫_vÆue
);

1177 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
ãmp_obje˘
); i++) {

1178 
ãmp_key
 = 
	`js⁄_obje˘_gë_«me
(
ãmp_obje˘
, 
i
);

1179 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
ãmp_obje˘
, 
ãmp_key
);

1180 
ãmp_vÆue_c›y
 = 
	`js⁄_vÆue_dìp_c›y
(
ãmp_vÆue
);

1181 i‡(
ãmp_vÆue_c›y
 =
NULL
) {

1182 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1183  
NULL
;

1185 i‡(
	`js⁄_obje˘_add
(
ãmp_obje˘_c›y
, 
ãmp_key
, 
ãmp_vÆue_c›y
Ë=
JSONFaûuª
) {

1186 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1187 
	`js⁄_vÆue_‰ì
(
ãmp_vÆue_c›y
);

1188  
NULL
;

1191  
ªtu∫_vÆue
;

1192 
JSONBoﬁón
:

1193  
	`js⁄_vÆue_öô_boﬁón
(
	`js⁄_vÆue_gë_boﬁón
(
vÆue
));

1194 
JSONNumbî
:

1195  
	`js⁄_vÆue_öô_numbî
(
	`js⁄_vÆue_gë_numbî
(
vÆue
));

1196 
JSONSåög
:

1197 
ãmp_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
vÆue
);

1198 
ãmp_°rög_c›y
 = 
	`∑rs⁄_°rdup
(
ãmp_°rög
);

1199 i‡(
ãmp_°rög_c›y
 =
NULL
)

1200  
NULL
;

1201 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
ãmp_°rög_c›y
);

1202 i‡(
ªtu∫_vÆue
 =
NULL
)

1203 
	`∑rs⁄_‰ì
(
ãmp_°rög_c›y
);

1204  
ªtu∫_vÆue
;

1205 
JSONNuŒ
:

1206  
	`js⁄_vÆue_öô_nuŒ
();

1207 
JSONEº‹
:

1208  
NULL
;

1210  
NULL
;

1212 
	}
}

1214 
size_t
 
	$js⁄_£rüliz©i⁄_size
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1215 
num_buf
[1100];

1216 
ªs
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
NULL
, 0, 0, 
num_buf
);

1217  
ªs
 < 0 ? 0 : (
size_t
)(res + 1);

1218 
	}
}

1220 
JSON_Sètus
 
	$js⁄_£rülize_to_buf„r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
) {

1221 
wrôãn
 = -1;

1222 
size_t
 
√eded_size_ö_byãs
 = 
	`js⁄_£rüliz©i⁄_size
(
vÆue
);

1223 i‡(
√eded_size_ö_byãs
 =0 || 
buf_size_ö_byãs
 <Çeeded_size_in_bytes) {

1224  
JSONFaûuª
;

1226 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
buf
, 0, 0, 
NULL
);

1227 i‡(
wrôãn
 < 0)

1228  
JSONFaûuª
;

1229  
JSONSuc˚ss
;

1230 
	}
}

1232 
JSON_Sètus
 
	$js⁄_£rülize_to_fûe
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
) {

1233 
JSON_Sètus
 
ªtu∫_code
 = 
JSONSuc˚ss
;

1234 
FILE
 *
Â
 = 
NULL
;

1235 *
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög
(
vÆue
);

1236 i‡(
£rülized_°rög
 =
NULL
) {

1237  
JSONFaûuª
;

1239 
Â
 = 
	`f›í
 (
fûíame
, "w");

1240 i‡(
Â
 !
NULL
) {

1241 i‡(
	`Âuts
 (
£rülized_°rög
, 
Â
Ë=
EOF
) {

1242 
ªtu∫_code
 = 
JSONFaûuª
;

1244 i‡(
	`f˛o£
 (
Â
Ë=
EOF
) {

1245 
ªtu∫_code
 = 
JSONFaûuª
;

1248 
	`js⁄_‰ì_£rülized_°rög
(
£rülized_°rög
);

1249  
ªtu∫_code
;

1250 
	}
}

1252 * 
	$js⁄_£rülize_to_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1253 
JSON_Sètus
 
£rüliz©i⁄_ªsu…
 = 
JSONFaûuª
;

1254 
size_t
 
buf_size_byãs
 = 
	`js⁄_£rüliz©i⁄_size
(
vÆue
);

1255 *
buf
 = 
NULL
;

1256 i‡(
buf_size_byãs
 == 0) {

1257  
NULL
;

1259 
buf
 = (*)
	`∑rs⁄_mÆloc
(
buf_size_byãs
);

1260 i‡(
buf
 =
NULL
)

1261  
NULL
;

1262 
£rüliz©i⁄_ªsu…
 = 
	`js⁄_£rülize_to_buf„r
(
vÆue
, 
buf
, 
buf_size_byãs
);

1263 i‡(
£rüliz©i⁄_ªsu…
 =
JSONFaûuª
) {

1264 
	`js⁄_‰ì_£rülized_°rög
(
buf
);

1265  
NULL
;

1267  
buf
;

1268 
	}
}

1270 
size_t
 
	$js⁄_£rüliz©i⁄_size_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1271 
num_buf
[1100];

1272 
ªs
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
NULL
, 0, 1, 
num_buf
);

1273  
ªs
 < 0 ? 0 : (
size_t
)(res + 1);

1274 
	}
}

1276 
JSON_Sètus
 
	$js⁄_£rülize_to_buf„r_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
) {

1277 
wrôãn
 = -1;

1278 
size_t
 
√eded_size_ö_byãs
 = 
	`js⁄_£rüliz©i⁄_size_¥ëty
(
vÆue
);

1279 i‡(
√eded_size_ö_byãs
 =0 || 
buf_size_ö_byãs
 <Çeeded_size_in_bytes)

1280  
JSONFaûuª
;

1281 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
buf
, 0, 1, 
NULL
);

1282 i‡(
wrôãn
 < 0)

1283  
JSONFaûuª
;

1284  
JSONSuc˚ss
;

1285 
	}
}

1287 
JSON_Sètus
 
	$js⁄_£rülize_to_fûe_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
) {

1288 
JSON_Sètus
 
ªtu∫_code
 = 
JSONSuc˚ss
;

1289 
FILE
 *
Â
 = 
NULL
;

1290 *
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög_¥ëty
(
vÆue
);

1291 i‡(
£rülized_°rög
 =
NULL
) {

1292  
JSONFaûuª
;

1294 
Â
 = 
	`f›í
 (
fûíame
, "w");

1295 i‡(
Â
 !
NULL
) {

1296 i‡(
	`Âuts
 (
£rülized_°rög
, 
Â
Ë=
EOF
) {

1297 
ªtu∫_code
 = 
JSONFaûuª
;

1299 i‡(
	`f˛o£
 (
Â
Ë=
EOF
) {

1300 
ªtu∫_code
 = 
JSONFaûuª
;

1303 
	`js⁄_‰ì_£rülized_°rög
(
£rülized_°rög
);

1304  
ªtu∫_code
;

1305 
	}
}

1307 * 
	$js⁄_£rülize_to_°rög_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1308 
JSON_Sètus
 
£rüliz©i⁄_ªsu…
 = 
JSONFaûuª
;

1309 
size_t
 
buf_size_byãs
 = 
	`js⁄_£rüliz©i⁄_size_¥ëty
(
vÆue
);

1310 *
buf
 = 
NULL
;

1311 i‡(
buf_size_byãs
 == 0) {

1312  
NULL
;

1314 
buf
 = (*)
	`∑rs⁄_mÆloc
(
buf_size_byãs
);

1315 i‡(
buf
 =
NULL
)

1316  
NULL
;

1317 
£rüliz©i⁄_ªsu…
 = 
	`js⁄_£rülize_to_buf„r_¥ëty
(
vÆue
, 
buf
, 
buf_size_byãs
);

1318 i‡(
£rüliz©i⁄_ªsu…
 =
JSONFaûuª
) {

1319 
	`js⁄_‰ì_£rülized_°rög
(
buf
);

1320  
NULL
;

1322  
buf
;

1323 
	}
}

1325 
	$js⁄_‰ì_£rülized_°rög
(*
°rög
) {

1326 
	`∑rs⁄_‰ì
(
°rög
);

1327 
	}
}

1329 
JSON_Sètus
 
	$js⁄_¨øy_ªmove
(
JSON_Aºay
 *
¨øy
, 
size_t
 
ix
) {

1330 
JSON_VÆue
 *
ãmp_vÆue
 = 
NULL
;

1331 
size_t
 
œ°_ñemít_ix
 = 0;

1332 i‡(
¨øy
 =
NULL
 || 
ix
 >
	`js⁄_¨øy_gë_cou¡
(array)) {

1333  
JSONFaûuª
;

1335 
œ°_ñemít_ix
 = 
	`js⁄_¨øy_gë_cou¡
(
¨øy
) - 1;

1336 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ix
));

1337 i‡(
ix
 !
œ°_ñemít_ix
) {

1338 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
œ°_ñemít_ix
);

1339 i‡(
ãmp_vÆue
 =
NULL
) {

1340  
JSONFaûuª
;

1342 
¨øy
->
ôems
[
ix
] = 
ãmp_vÆue
;

1344 
¨øy
->
cou¡
 -= 1;

1345  
JSONSuc˚ss
;

1346 
	}
}

1348 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_vÆue
(
JSON_Aºay
 *
¨øy
, 
size_t
 
ix
, 
JSON_VÆue
 *
vÆue
) {

1349 i‡(
¨øy
 =
NULL
 || 
vÆue
 =NULL || 
ix
 >
	`js⁄_¨øy_gë_cou¡
(array)) {

1350  
JSONFaûuª
;

1352 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ix
));

1353 
¨øy
->
ôems
[
ix
] = 
vÆue
;

1354  
JSONSuc˚ss
;

1355 
	}
}

1357 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_°rög
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, c⁄° * 
°rög
) {

1358 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1359 i‡(
vÆue
 =
NULL
)

1360  
JSONFaûuª
;

1361 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1362 
	`js⁄_vÆue_‰ì
(
vÆue
);

1363  
JSONFaûuª
;

1365  
JSONSuc˚ss
;

1366 
	}
}

1368 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_numbî
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
numbî
) {

1369 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1370 i‡(
vÆue
 =
NULL
)

1371  
JSONFaûuª
;

1372 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1373 
	`js⁄_vÆue_‰ì
(
vÆue
);

1374  
JSONFaûuª
;

1376  
JSONSuc˚ss
;

1377 
	}
}

1379 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_boﬁón
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
boﬁón
) {

1380 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1381 i‡(
vÆue
 =
NULL
)

1382  
JSONFaûuª
;

1383 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1384 
	`js⁄_vÆue_‰ì
(
vÆue
);

1385  
JSONFaûuª
;

1387  
JSONSuc˚ss
;

1388 
	}
}

1390 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_nuŒ
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
) {

1391 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1392 i‡(
vÆue
 =
NULL
)

1393  
JSONFaûuª
;

1394 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1395 
	`js⁄_vÆue_‰ì
(
vÆue
);

1396  
JSONFaûuª
;

1398  
JSONSuc˚ss
;

1399 
	}
}

1401 
JSON_Sètus
 
	$js⁄_¨øy_˛ór
(
JSON_Aºay
 *
¨øy
) {

1402 
size_t
 
i
 = 0;

1403 i‡(
¨øy
 =
NULL
)

1404  
JSONFaûuª
;

1405 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
¨øy
); i++) {

1406 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
i
));

1408 
¨øy
->
cou¡
 = 0;

1409  
JSONSuc˚ss
;

1410 
	}
}

1412 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_vÆue
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
) {

1413 i‡(
¨øy
 =
NULL
 || 
vÆue
 == NULL)

1414  
JSONFaûuª
;

1415  
	`js⁄_¨øy_add
(
¨øy
, 
vÆue
);

1416 
	}
}

1418 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_°rög
(
JSON_Aºay
 *
¨øy
, c⁄° *
°rög
) {

1419 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1420 i‡(
vÆue
 =
NULL
)

1421  
JSONFaûuª
;

1422 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1423 
	`js⁄_vÆue_‰ì
(
vÆue
);

1424  
JSONFaûuª
;

1426  
JSONSuc˚ss
;

1427 
	}
}

1429 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_numbî
(
JSON_Aºay
 *
¨øy
, 
numbî
) {

1430 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1431 i‡(
vÆue
 =
NULL
)

1432  
JSONFaûuª
;

1433 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1434 
	`js⁄_vÆue_‰ì
(
vÆue
);

1435  
JSONFaûuª
;

1437  
JSONSuc˚ss
;

1438 
	}
}

1440 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_boﬁón
(
JSON_Aºay
 *
¨øy
, 
boﬁón
) {

1441 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1442 i‡(
vÆue
 =
NULL
)

1443  
JSONFaûuª
;

1444 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1445 
	`js⁄_vÆue_‰ì
(
vÆue
);

1446  
JSONFaûuª
;

1448  
JSONSuc˚ss
;

1449 
	}
}

1451 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_nuŒ
(
JSON_Aºay
 *
¨øy
) {

1452 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1453 i‡(
vÆue
 =
NULL
)

1454  
JSONFaûuª
;

1455 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1456 
	`js⁄_vÆue_‰ì
(
vÆue
);

1457  
JSONFaûuª
;

1459  
JSONSuc˚ss
;

1460 
	}
}

1462 
JSON_Sètus
 
	$js⁄_obje˘_£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

1463 
size_t
 
i
 = 0;

1464 
JSON_VÆue
 *
ﬁd_vÆue
;

1465 i‡(
obje˘
 =
NULL
 || 
«me
 =NULL || 
vÆue
 == NULL)

1466  
JSONFaûuª
;

1467 
ﬁd_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
);

1468 i‡(
ﬁd_vÆue
 !
NULL
) {

1469 
	`js⁄_vÆue_‰ì
(
ﬁd_vÆue
);

1470 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1471 i‡(
	`°rcmp
(
obje˘
->
«mes
[
i
], 
«me
) == 0) {

1472 
obje˘
->
vÆues
[
i
] = 
vÆue
;

1473  
JSONSuc˚ss
;

1478  
	`js⁄_obje˘_add
(
obje˘
, 
«me
, 
vÆue
);

1479 
	}
}

1481 
JSON_Sètus
 
	$js⁄_obje˘_£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
) {

1482  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_°rög
(
°rög
));

1483 
	}
}

1485 
JSON_Sètus
 
	$js⁄_obje˘_£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
) {

1486  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_numbî
(
numbî
));

1487 
	}
}

1489 
JSON_Sètus
 
	$js⁄_obje˘_£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
) {

1490  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
));

1491 
	}
}

1493 
JSON_Sètus
 
	$js⁄_obje˘_£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1494  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_nuŒ
());

1495 
	}
}

1497 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

1498 c⁄° *
dŸ_pos
 = 
NULL
;

1499 *
cuºít_«me
 = 
NULL
;

1500 
JSON_Obje˘
 *
ãmp_obj
 = 
NULL
;

1501 
JSON_VÆue
 *
√w_vÆue
 = 
NULL
;

1502 i‡(
vÆue
 =
NULL
 || 
«me
 == NULL || value == NULL)

1503  
JSONFaûuª
;

1504 
dŸ_pos
 = 
	`°rchr
(
«me
, '.');

1505 i‡(
dŸ_pos
 =
NULL
) {

1506  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
vÆue
);

1508 
cuºít_«me
 = 
	`∑rs⁄_°∫dup
(
«me
, 
dŸ_pos
 -Çame);

1509 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1510 i‡(
ãmp_obj
 =
NULL
) {

1511 
√w_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

1512 i‡(
√w_vÆue
 =
NULL
) {

1513 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1514  
JSONFaûuª
;

1516 i‡(
	`js⁄_obje˘_add
(
obje˘
, 
cuºít_«me
, 
√w_vÆue
Ë=
JSONFaûuª
) {

1517 
	`js⁄_vÆue_‰ì
(
√w_vÆue
);

1518 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1519  
JSONFaûuª
;

1521 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1523 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1524  
	`js⁄_obje˘_dŸ£t_vÆue
(
ãmp_obj
, 
dŸ_pos
 + 1, 
vÆue
);

1526 
	}
}

1528 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
) {

1529 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1530 i‡(
vÆue
 =
NULL
)

1531  
JSONFaûuª
;

1532 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1533 
	`js⁄_vÆue_‰ì
(
vÆue
);

1534  
JSONFaûuª
;

1536  
JSONSuc˚ss
;

1537 
	}
}

1539 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
) {

1540 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1541 i‡(
vÆue
 =
NULL
)

1542  
JSONFaûuª
;

1543 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1544 
	`js⁄_vÆue_‰ì
(
vÆue
);

1545  
JSONFaûuª
;

1547  
JSONSuc˚ss
;

1548 
	}
}

1550 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
) {

1551 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1552 i‡(
vÆue
 =
NULL
)

1553  
JSONFaûuª
;

1554 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1555 
	`js⁄_vÆue_‰ì
(
vÆue
);

1556  
JSONFaûuª
;

1558  
JSONSuc˚ss
;

1559 
	}
}

1561 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1562 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1563 i‡(
vÆue
 =
NULL
)

1564  
JSONFaûuª
;

1565 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1566 
	`js⁄_vÆue_‰ì
(
vÆue
);

1567  
JSONFaûuª
;

1569  
JSONSuc˚ss
;

1570 
	}
}

1572 
JSON_Sètus
 
	$js⁄_obje˘_ªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1573 
size_t
 
i
 = 0, 
œ°_ôem_ödex
 = 0;

1574 i‡(
obje˘
 =
NULL
 || 
	`js⁄_obje˘_gë_vÆue
(obje˘, 
«me
) == NULL)

1575  
JSONFaûuª
;

1576 
œ°_ôem_ödex
 = 
	`js⁄_obje˘_gë_cou¡
(
obje˘
) - 1;

1577 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1578 i‡(
	`°rcmp
(
obje˘
->
«mes
[
i
], 
«me
) == 0) {

1579 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[
i
]);

1580 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[
i
]);

1581 i‡(
i
 !
œ°_ôem_ödex
) {

1582 
obje˘
->
«mes
[
i
] = obje˘->«mes[
œ°_ôem_ödex
];

1583 
obje˘
->
vÆues
[
i
] = obje˘->vÆues[
œ°_ôem_ödex
];

1585 
obje˘
->
cou¡
 -= 1;

1586  
JSONSuc˚ss
;

1589  
JSONFaûuª
;

1590 
	}
}

1592 
JSON_Sètus
 
	$js⁄_obje˘_dŸªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1593 c⁄° *
dŸ_pos
 = 
	`°rchr
(
«me
, '.');

1594 *
cuºít_«me
 = 
NULL
;

1595 
JSON_Obje˘
 *
ãmp_obj
 = 
NULL
;

1596 i‡(
dŸ_pos
 =
NULL
) {

1597  
	`js⁄_obje˘_ªmove
(
obje˘
, 
«me
);

1599 
cuºít_«me
 = 
	`∑rs⁄_°∫dup
(
«me
, 
dŸ_pos
 -Çame);

1600 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1601 i‡(
ãmp_obj
 =
NULL
) {

1602 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1603  
JSONFaûuª
;

1605 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1606  
	`js⁄_obje˘_dŸªmove
(
ãmp_obj
, 
dŸ_pos
 + 1);

1608 
	}
}

1610 
JSON_Sètus
 
	$js⁄_obje˘_˛ór
(
JSON_Obje˘
 *
obje˘
) {

1611 
size_t
 
i
 = 0;

1612 i‡(
obje˘
 =
NULL
) {

1613  
JSONFaûuª
;

1615 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1616 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[
i
]);

1617 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[
i
]);

1619 
obje˘
->
cou¡
 = 0;

1620  
JSONSuc˚ss
;

1621 
	}
}

1623 
JSON_Sètus
 
	$js⁄_vÆid©e
(c⁄° 
JSON_VÆue
 *
schema
, c⁄° JSON_VÆuê*
vÆue
) {

1624 
JSON_VÆue
 *
ãmp_schema_vÆue
 = 
NULL
, *
ãmp_vÆue
 = NULL;

1625 
JSON_Aºay
 *
schema_¨øy
 = 
NULL
, *
vÆue_¨øy
 = NULL;

1626 
JSON_Obje˘
 *
schema_obje˘
 = 
NULL
, *
vÆue_obje˘
 = NULL;

1627 
JSON_VÆue_Ty≥
 
schema_ty≥
 = 
JSONEº‹
, 
vÆue_ty≥
 = JSONError;

1628 c⁄° *
key
 = 
NULL
;

1629 
size_t
 
i
 = 0, 
cou¡
 = 0;

1630 i‡(
schema
 =
NULL
 || 
vÆue
 == NULL)

1631  
JSONFaûuª
;

1632 
schema_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
schema
);

1633 
vÆue_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
vÆue
);

1634 i‡(
schema_ty≥
 !
vÆue_ty≥
 && schema_ty≥ !
JSONNuŒ
)

1635  
JSONFaûuª
;

1636 
schema_ty≥
) {

1637 
JSONAºay
:

1638 
schema_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
schema
);

1639 
vÆue_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1640 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
schema_¨øy
);

1641 i‡(
cou¡
 == 0)

1642  
JSONSuc˚ss
;

1644 
ãmp_schema_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
schema_¨øy
, 0);

1645 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
vÆue_¨øy
); i++) {

1646 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
vÆue_¨øy
, 
i
);

1647 i‡(
	`js⁄_vÆid©e
(
ãmp_schema_vÆue
, 
ãmp_vÆue
) == 0) {

1648  
JSONFaûuª
;

1651  
JSONSuc˚ss
;

1652 
JSONObje˘
:

1653 
schema_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
schema
);

1654 
vÆue_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1655 
cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
schema_obje˘
);

1656 i‡(
cou¡
 == 0)

1657  
JSONSuc˚ss
;

1658 i‡(
	`js⁄_obje˘_gë_cou¡
(
vÆue_obje˘
Ë< 
cou¡
)

1659  
JSONFaûuª
;

1660 
i
 = 0; i < 
cou¡
; i++) {

1661 
key
 = 
	`js⁄_obje˘_gë_«me
(
schema_obje˘
, 
i
);

1662 
ãmp_schema_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
schema_obje˘
, 
key
);

1663 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
vÆue_obje˘
, 
key
);

1664 i‡(
ãmp_vÆue
 =
NULL
)

1665  
JSONFaûuª
;

1666 i‡(
	`js⁄_vÆid©e
(
ãmp_schema_vÆue
, 
ãmp_vÆue
Ë=
JSONFaûuª
)

1667  
JSONFaûuª
;

1669  
JSONSuc˚ss
;

1670 
JSONSåög
: 
JSONNumbî
: 
JSONBoﬁón
: 
JSONNuŒ
:

1671  
JSONSuc˚ss
;

1672 
JSONEº‹
: :

1673  
JSONFaûuª
;

1675 
	}
}

1677 
JSON_Sètus
 
	$js⁄_vÆue_equÆs
(c⁄° 
JSON_VÆue
 *
a
, c⁄° JSON_VÆuê*
b
) {

1678 
JSON_Obje˘
 *
a_obje˘
 = 
NULL
, *
b_obje˘
 = NULL;

1679 
JSON_Aºay
 *
a_¨øy
 = 
NULL
, *
b_¨øy
 = NULL;

1680 c⁄° *
a_°rög
 = 
NULL
, *
b_°rög
 = NULL;

1681 c⁄° *
key
 = 
NULL
;

1682 
size_t
 
a_cou¡
 = 0, 
b_cou¡
 = 0, 
i
 = 0;

1683 
JSON_VÆue_Ty≥
 
a_ty≥
, 
b_ty≥
;

1684 
a_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
a
);

1685 
b_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
b
);

1686 i‡(
a_ty≥
 !
b_ty≥
) {

1689 
a_ty≥
) {

1690 
JSONAºay
:

1691 
a_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
a
);

1692 
b_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
b
);

1693 
a_cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
a_¨øy
);

1694 
b_cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
b_¨øy
);

1695 i‡(
a_cou¡
 !
b_cou¡
) {

1698 
i
 = 0; i < 
a_cou¡
; i++) {

1699 i‡(!
	`js⁄_vÆue_equÆs
(
	`js⁄_¨øy_gë_vÆue
(
a_¨øy
, 
i
),

1700 
	`js⁄_¨øy_gë_vÆue
(
b_¨øy
, 
i
))) {

1705 
JSONObje˘
:

1706 
a_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
a
);

1707 
b_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
b
);

1708 
a_cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
a_obje˘
);

1709 
b_cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
b_obje˘
);

1710 i‡(
a_cou¡
 !
b_cou¡
) {

1713 
i
 = 0; i < 
a_cou¡
; i++) {

1714 
key
 = 
	`js⁄_obje˘_gë_«me
(
a_obje˘
, 
i
);

1715 i‡(!
	`js⁄_vÆue_equÆs
(
	`js⁄_obje˘_gë_vÆue
(
a_obje˘
, 
key
),

1716 
	`js⁄_obje˘_gë_vÆue
(
b_obje˘
, 
key
))) {

1721 
JSONSåög
:

1722 
a_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
a
);

1723 
b_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
b
);

1724  
	`°rcmp
(
a_°rög
, 
b_°rög
) == 0;

1725 
JSONBoﬁón
:

1726  
	`js⁄_vÆue_gë_boﬁón
(
a
Ë=js⁄_vÆue_gë_boﬁón(
b
);

1727 
JSONNumbî
:

1728  
	`Ábs
(
	`js⁄_vÆue_gë_numbî
(
a
Ë- js⁄_vÆue_gë_numbî(
b
)) < 0.000001;

1729 
JSONEº‹
:

1731 
JSONNuŒ
:

1736 
	}
}

1738 
JSON_VÆue_Ty≥
 
	$js⁄_ty≥
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1739  
	`js⁄_vÆue_gë_ty≥
(
vÆue
);

1740 
	}
}

1742 
JSON_Obje˘
 * 
	$js⁄_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1743  
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1744 
	}
}

1746 
JSON_Aºay
 * 
	$js⁄_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1747  
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1748 
	}
}

1750 c⁄° * 
	$js⁄_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1751  
	`js⁄_vÆue_gë_°rög
(
vÆue
);

1752 
	}
}

1754 
	$js⁄_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1755  
	`js⁄_vÆue_gë_numbî
(
vÆue
);

1756 
	}
}

1758 
	$js⁄_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1759  
	`js⁄_vÆue_gë_boﬁón
(
vÆue
);

1760 
	}
}

1762 
	$js⁄_£t_Æloˇti⁄_fun˘i⁄s
(
JSON_MÆloc_Fun˘i⁄
 
mÆloc_fun
, 
JSON_Fªe_Fun˘i⁄
 
‰ì_fun
) {

1763 
∑rs⁄_mÆloc
 = 
mÆloc_fun
;

1764 
∑rs⁄_‰ì
 = 
‰ì_fun
;

1765 
	}
}

	@libtools/src/tinymt32.c

16 
	~"töymt32.h
"

17 
	#MIN_LOOP
 8

	)

18 
	#PRE_LOOP
 8

	)

26 
uöt32_t
 
	$öi_func1
(
uöt32_t
 
x
) {

27  (
x
 ^ (x >> 27)Ë* 
	`UINT32_C
(1664525);

28 
	}
}

36 
uöt32_t
 
	$öi_func2
(
uöt32_t
 
x
) {

37  (
x
 ^ (x >> 27)Ë* 
	`UINT32_C
(1566083941);

38 
	}
}

44 
	$≥riod_˚πifiˇti⁄
(
töymt32_t
 * 
øndom
) {

45 i‡((
øndom
->
°©us
[0] & 
TINYMT32_MASK
) == 0 &&

46 
øndom
->
°©us
[1] == 0 &&

47 
øndom
->
°©us
[2] == 0 &&

48 
øndom
->
°©us
[3] == 0) {

49 
øndom
->
°©us
[0] = 'T';

50 
øndom
->
°©us
[1] = 'I';

51 
øndom
->
°©us
[2] = 'N';

52 
øndom
->
°©us
[3] = 'Y';

54 
	}
}

62 
	$töymt32_öô
(
töymt32_t
 * 
øndom
, 
uöt32_t
 
£ed
) {

63 
øndom
->
°©us
[0] = 
£ed
;

64 
øndom
->
°©us
[1] =Ñ™dom->
m©1
;

65 
øndom
->
°©us
[2] =Ñ™dom->
m©2
;

66 
øndom
->
°©us
[3] =Ñ™dom->
tm©
;

67 
i
 = 1; i < 
MIN_LOOP
; i++) {

68 
øndom
->
°©us
[
i
 & 3] ^ò+ 
	`UINT32_C
(1812433253)

69 * (
øndom
->
°©us
[(
i
 - 1) & 3]

70 ^ (
øndom
->
°©us
[(
i
 - 1) & 3] >> 30));

72 
	`≥riod_˚πifiˇti⁄
(
øndom
);

73 
i
 = 0; i < 
PRE_LOOP
; i++) {

74 
	`töymt32_√xt_°©e
(
øndom
);

76 
	}
}

85 
	$töymt32_öô_by_¨øy
(
töymt32_t
 * 
øndom
, 
uöt32_t
 
öô_key
[],

86 
key_Àngth
) {

87 c⁄° 
œg
 = 1;

88 c⁄° 
mid
 = 1;

89 c⁄° 
size
 = 4;

90 
i
, 
j
;

91 
cou¡
;

92 
uöt32_t
 
r
;

93 
uöt32_t
 * 
°
 = &
øndom
->
°©us
[0];

95 
°
[0] = 0;

96 
°
[1] = 
øndom
->
m©1
;

97 
°
[2] = 
øndom
->
m©2
;

98 
°
[3] = 
øndom
->
tm©
;

99 i‡(
key_Àngth
 + 1 > 
MIN_LOOP
) {

100 
cou¡
 = 
key_Àngth
 + 1;

102 
cou¡
 = 
MIN_LOOP
;

104 
r
 = 
	`öi_func1
(
°
[0] ^ st[
mid
 % 
size
]

105 ^ 
°
[(
size
 - 1) % size]);

106 
°
[
mid
 % 
size
] +
r
;

107 
r
 +
key_Àngth
;

108 
°
[(
mid
 + 
œg
Ë% 
size
] +
r
;

109 
°
[0] = 
r
;

110 
cou¡
--;

111 
i
 = 1, 
j
 = 0; (j < 
cou¡
Ë&& (j < 
key_Àngth
); j++) {

112 
r
 = 
	`öi_func1
(
°
[
i
 % 
size
]

113 ^ 
°
[(
i
 + 
mid
Ë% 
size
]

114 ^ 
°
[(
i
 + 
size
 - 1) % size]);

115 
°
[(
i
 + 
mid
Ë% 
size
] +
r
;

116 
r
 +
öô_key
[
j
] + 
i
;

117 
°
[(
i
 + 
mid
 + 
œg
Ë% 
size
] +
r
;

118 
°
[
i
 % 
size
] = 
r
;

119 
i
 = (ò+ 1Ë% 
size
;

121 ; 
j
 < 
cou¡
; j++) {

122 
r
 = 
	`öi_func1
(
°
[
i
 % 
size
]

123 ^ 
°
[(
i
 + 
mid
Ë% 
size
]

124 ^ 
°
[(
i
 + 
size
 - 1) % size]);

125 
°
[(
i
 + 
mid
Ë% 
size
] +
r
;

126 
r
 +
i
;

127 
°
[(
i
 + 
mid
 + 
œg
Ë% 
size
] +
r
;

128 
°
[
i
 % 
size
] = 
r
;

129 
i
 = (ò+ 1Ë% 
size
;

131 
j
 = 0; j < 
size
; j++) {

132 
r
 = 
	`öi_func2
(
°
[
i
 % 
size
]

133 + 
°
[(
i
 + 
mid
Ë% 
size
]

134 + 
°
[(
i
 + 
size
 - 1) % size]);

135 
°
[(
i
 + 
mid
Ë% 
size
] ^
r
;

136 
r
 -
i
;

137 
°
[(
i
 + 
mid
 + 
œg
Ë% 
size
] ^
r
;

138 
°
[
i
 % 
size
] = 
r
;

139 
i
 = (ò+ 1Ë% 
size
;

141 
	`≥riod_˚πifiˇti⁄
(
øndom
);

142 
i
 = 0; i < 
PRE_LOOP
; i++) {

143 
	`töymt32_√xt_°©e
(
øndom
);

145 
	}
}

	@packet_forwarder/inc/jitqueue.h

16 #i‚de‡
_LORA_PKTFWD_JIT_H


17 
	#_LORA_PKTFWD_JIT_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

24 
	~<sys/time.h
>

26 
	~"l‹agw_hÆ.h
"

31 
	#JIT_QUEUE_MAX
 32

	)

32 
	#JIT_NUM_BEACON_IN_QUEUE
 3

	)

37 
	ejô_pkt_ty≥_e
 {

38 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_A
,

39 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_B
,

40 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_C
,

41 
	mJIT_PKT_TYPE_BEACON


44 
	ejô_îr‹_e
 {

45 
	mJIT_ERROR_OK
,

46 
	mJIT_ERROR_TOO_LATE
,

47 
	mJIT_ERROR_TOO_EARLY
,

48 
	mJIT_ERROR_FULL
,

49 
	mJIT_ERROR_EMPTY
,

50 
	mJIT_ERROR_COLLISION_PACKET
,

51 
	mJIT_ERROR_COLLISION_BEACON
,

52 
	mJIT_ERROR_TX_FREQ
,

53 
	mJIT_ERROR_TX_POWER
,

54 
	mJIT_ERROR_GPS_UNLOCKED
,

55 
	mJIT_ERROR_INVALID


58 
	sjô_node_s
 {

60 
lgw_pkt_tx_s
 
	mpkt
;

61 
jô_pkt_ty≥_e
 
	mpkt_ty≥
;

64 
uöt32_t
 
	m¥e_dñay
;

65 
uöt32_t
 
	mpo°_dñay
;

68 
	sjô_queue_s
 {

69 
uöt8_t
 
	mnum_pkt
;

70 
uöt8_t
 
	mnum_bóc⁄
;

71 
jô_node_s
 
	mnodes
[
JIT_QUEUE_MAX
];

83 
boﬁ
 
jô_queue_is_fuŒ
(
jô_queue_s
 *
queue
);

91 
boﬁ
 
jô_queue_is_em±y
(
jô_queue_s
 *
queue
);

100 
jô_queue_öô
(
jô_queue_s
 *
queue
);

115 
jô_îr‹_e
 
jô_íqueue
(
jô_queue_s
 *
queue
, 
uöt32_t
 
time_us
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 
pkt_ty≥
);

129 
jô_îr‹_e
 
jô_dequeue
(
jô_queue_s
 *
queue
, 
ödex
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 *
pkt_ty≥
);

143 
jô_îr‹_e
 
jô_≥ek
(
jô_queue_s
 *
queue
, 
uöt32_t
 
time_us
, *
pkt_idx
);

151 
jô_¥öt_queue
(
jô_queue_s
 *
queue
, 
boﬁ
 
show_Æl
, 
debug_Àvñ
);

	@packet_forwarder/inc/trace.h

16 #i‚de‡
_LORA_PKTFWD_TRACE_H


17 
	#_LORA_PKTFWD_TRACE_H


	)

19 
	#DEBUG_PKT_FWD
 0

	)

20 
	#DEBUG_JIT
 0

	)

21 
	#DEBUG_JIT_ERROR
 1

	)

22 
	#DEBUG_TIMERSYNC
 0

	)

23 
	#DEBUG_BEACON
 0

	)

24 
	#DEBUG_LOG
 1

	)

26 
	#MSG
(
¨gs
...Ë
	`¥ötf
◊rgsË

	)

27 
	#MSG_DEBUG
(
FLAG
, 
fmt
, ...) \

29 i‡(
FLAG
) \

30 
	`Ârötf
(
°dout
, "%s:%d:%s(): " 
fmt
, 
__FILE__
, 
__LINE__
, 
__FUNCTION__
, ##
__VA_ARGS__
); \

31 } 0)

	)

32 
	#MSG_PRINTF
(
FLAG
, 
fmt
, ...) \

34 i‡(
FLAG
) \

35 
	`Ârötf
(
°dout
, 
fmt
, ##
__VA_ARGS__
); \

36 } 0)

	)

	@packet_forwarder/src/jitqueue.c

18 
	#_GNU_SOURCE


	)

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<±hªad.h
>

23 
	~<as£π.h
>

24 
	~<m©h.h
>

26 
	~"åa˚.h
"

27 
	~"jôqueue.h
"

34 
	#TX_START_DELAY
 1500

	)

35 
	#TX_MARGIN_DELAY
 1000

	)

36 
	#TX_JIT_DELAY
 40000

	)

37 
	#TX_MAX_ADVANCE_DELAY
 ((
JIT_NUM_BEACON_IN_QUEUE
 + 1Ë* 128 * 1E6Ë

	)

39 
	#BEACON_GUARD
 3000000

	)

41 
	#BEACON_RESERVED
 2120000

	)

45 
±hªad_muãx_t
 
	gmx_jô_queue
 = 
PTHREAD_MUTEX_INITIALIZER
;

53 
boﬁ
 
	$jô_queue_is_fuŒ
(
jô_queue_s
 *
queue
) {

54 
boﬁ
 
ªsu…
;

56 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

58 
ªsu…
 = (
queue
->
num_pkt
 =
JIT_QUEUE_MAX
)?
åue
:
Ál£
;

60 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

62  
ªsu…
;

63 
	}
}

65 
boﬁ
 
	$jô_queue_is_em±y
(
jô_queue_s
 *
queue
) {

66 
boﬁ
 
ªsu…
;

68 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

70 
ªsu…
 = (
queue
->
num_pkt
 =0)?
åue
:
Ál£
;

72 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

74  
ªsu…
;

75 
	}
}

77 
	$jô_queue_öô
(
jô_queue_s
 *
queue
) {

78 
i
;

80 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

82 
	`mem£t
(
queue
, 0, (*queue));

83 
i
=0; i<
JIT_QUEUE_MAX
; i++) {

84 
queue
->
nodes
[
i
].
¥e_dñay
 = 0;

85 
queue
->
nodes
[
i
].
po°_dñay
 = 0;

88 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

89 
	}
}

91 
	$com∑ª
(c⁄° *
a
, c⁄° *
b
, *
¨g
)

93 
jô_node_s
 *
p
 = (jô_node_†*)
a
;

94 
jô_node_s
 *
q
 = (jô_node_†*)
b
;

95 *
cou¡î
 = (*)
¨g
;

96 
p_cou¡
, 
q_cou¡
;

98 
p_cou¡
 = 
p
->
pkt
.
cou¡_us
;

99 
q_cou¡
 = 
q
->
pkt
.
cou¡_us
;

101 i‡(
p_cou¡
 > 
q_cou¡
)

102 *
cou¡î
 = *counter + 1;

104  
p_cou¡
 - 
q_cou¡
;

105 
	}
}

107 
	$jô_s‹t_queue
(
jô_queue_s
 *
queue
) {

108 
cou¡î
 = 0;

110 i‡(
queue
->
num_pkt
 == 0) {

114 
	`MSG_DEBUG
(
DEBUG_JIT
, "s‹tög queuêöás˚ndög ordîÖackëÅime°am∞- queuêsize:%u\n", 
queue
->
num_pkt
);

115 
	`qs‹t_r
(
queue
->
nodes
, queue->
num_pkt
, (queue->nodes[0]), 
com∑ª
, &
cou¡î
);

116 
	`MSG_DEBUG
(
DEBUG_JIT
, "s‹tög queuêd⁄ê- sw≠≥d:%d\n", 
cou¡î
);

117 
	}
}

119 
boﬁ
 
	$jô_cﬁlisi⁄_ã°
(
uöt32_t
 
p1_cou¡_us
, uöt32_à
p1_¥e_dñay
, uöt32_à
p1_po°_dñay
, uöt32_à
p2_cou¡_us
, uöt32_à
p2_¥e_dñay
, uöt32_à
p2_po°_dñay
) {

120 i‡(((
p1_cou¡_us
 - 
p2_cou¡_us
Ë<(
p1_¥e_dñay
 + 
p2_po°_dñay
 + 
TX_MARGIN_DELAY
)) ||

121 ((
p2_cou¡_us
 - 
p1_cou¡_us
Ë<(
p2_¥e_dñay
 + 
p1_po°_dñay
 + 
TX_MARGIN_DELAY
))) {

122  
åue
;

124  
Ál£
;

126 
	}
}

128 
jô_îr‹_e
 
	$jô_íqueue
(
jô_queue_s
 *
queue
, 
uöt32_t
 
time_us
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 
pkt_ty≥
) {

129 
i
 = 0;

130 
uöt32_t
 
∑ckë_po°_dñay
 = 0;

131 
uöt32_t
 
∑ckë_¥e_dñay
 = 0;

132 
uöt32_t
 
èrgë_¥e_dñay
 = 0;

133 
jô_îr‹_e
 
îr_cﬁlisi⁄
;

134 
uöt32_t
 
aßp_cou¡_us
;

136 
	`MSG_DEBUG
(
DEBUG_JIT
, "Cuºíàc⁄˚¡øt‹Åimêi†%u,Ökt_ty≥=%d\n", 
time_us
, 
pkt_ty≥
);

138 i‡(
∑ckë
 =
NULL
) {

139 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: invalidÖarameter\n");

140  
JIT_ERROR_INVALID
;

143 i‡(
	`jô_queue_is_fuŒ
(
queue
)) {

144 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: cannotÉnqueueÖacket, JIT queue is full\n");

145  
JIT_ERROR_FULL
;

149 
pkt_ty≥
) {

150 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
:

151 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
:

152 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
:

153 
∑ckë_¥e_dñay
 = 
TX_START_DELAY
 + 
TX_JIT_DELAY
;

154 
∑ckë_po°_dñay
 = 
	`lgw_time_⁄_aú
(
∑ckë
) * 1000UL;

156 
JIT_PKT_TYPE_BEACON
:

158 
∑ckë_¥e_dñay
 = 
TX_START_DELAY
 + 
BEACON_GUARD
 + 
TX_JIT_DELAY
;

159 
∑ckë_po°_dñay
 = 
BEACON_RESERVED
;

165 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

169 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_C
) {

171 
∑ckë
->
tx_mode
 = 
TIMESTAMPED
;

174 
aßp_cou¡_us
 = 
time_us
 + 2 * 
TX_JIT_DELAY
;

175 i‡(
queue
->
num_pkt
 == 0) {

177 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök, fú° i¿JiT queuê(cou¡_us=%u)\n", 
aßp_cou¡_us
);

186 
i
=0; i<
queue
->
num_pkt
; i++) {

187 i‡(
	`jô_cﬁlisi⁄_ã°
(
aßp_cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, queue->nodes[i].
¥e_dñay
, queue->nodes[i].
po°_dñay
Ë=
åue
) {

188 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: c™nŸ in£π IMMEDIATE dow∆ökáàcou¡_us=%u, cﬁlide†wôh %u (ödex=%d)\n", 
aßp_cou¡_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, i);

192 i‡(
i
 =
queue
->
num_pkt
) {

194 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök ASAPáà%u (nÿcﬁlisi⁄)\n", 
aßp_cou¡_us
);

197 
i
=0; i<
queue
->
num_pkt
; i++) {

198 
aßp_cou¡_us
 = 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 + queue->nodes[i].
po°_dñay
 + 
∑ckë_¥e_dñay
 + 
TX_JIT_DELAY
 + 
TX_MARGIN_DELAY
;

199 i‡(
i
 =(
queue
->
num_pkt
 - 1)) {

201 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök,Üa° i¿JiT queuê(cou¡_us=%u)\n", 
aßp_cou¡_us
);

204 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG:ÅryÅÿö£π IMMEDIATE dow∆ök (cou¡_us=%uËbëwì¿ödex %dánd index %d?\n", 
aßp_cou¡_us
, 
i
, i+1);

205 i‡(
	`jô_cﬁlisi⁄_ã°
(
aßp_cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
+1].
pkt
.
cou¡_us
, queue->nodes[i+1].
¥e_dñay
, queue->nodes[i+1].
po°_dñay
Ë=
åue
) {

206 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: faûedÅÿö£π IMMEDIATE dow∆ök (cou¡_us=%u), c⁄töue...\n", 
aßp_cou¡_us
);

209 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök (cou¡_us=%u)\n", 
aßp_cou¡_us
);

217 
∑ckë
->
cou¡_us
 = 
aßp_cou¡_us
;

228 i‡((
∑ckë
->
cou¡_us
 - 
time_us
Ë<(
TX_START_DELAY
 + 
TX_MARGIN_DELAY
 + 
TX_JIT_DELAY
)) {

229 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: Packë REJECTED,áÃódyÅoÿœãÅÿ£nd ià(cuºít=%u,Öackë=%u,Åy≥=%d)\n", 
time_us
, 
∑ckë
->
cou¡_us
, 
pkt_ty≥
);

230 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

231  
JIT_ERROR_TOO_LATE
;

245 i‡((
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_A
Ë|| (pkt_ty≥ =
JIT_PKT_TYPE_DOWNLINK_CLASS_B
)) {

246 i‡((
∑ckë
->
cou¡_us
 - 
time_us
Ë> 
TX_MAX_ADVANCE_DELAY
) {

247 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: Packë REJECTED,Åime°am∞£em†wr⁄g,Åoÿmuch i¿adv™˚ (cuºít=%u,Öackë=%u,Åy≥=%d)\n", 
time_us
, 
∑ckë
->
cou¡_us
, 
pkt_ty≥
);

248 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

249  
JIT_ERROR_TOO_EARLY
;

258 
i
=0; i<
queue
->
num_pkt
; i++) {

260 i‡(((
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_A
Ë|| (pkt_ty≥ =
JIT_PKT_TYPE_DOWNLINK_CLASS_C
)Ë&& (
queue
->
nodes
[
i
].pkt_ty≥ =
JIT_PKT_TYPE_BEACON
)) {

261 
èrgë_¥e_dñay
 = 
TX_START_DELAY
;

263 
èrgë_¥e_dñay
 = 
queue
->
nodes
[
i
].
¥e_dñay
;

271 i‡(
	`jô_cﬁlisi⁄_ã°
(
∑ckë
->
cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
].
pkt
.cou¡_us, 
èrgë_¥e_dñay
, queue->nodes[i].
po°_dñay
Ë=
åue
) {

272 
queue
->
nodes
[
i
].
pkt_ty≥
) {

273 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
:

274 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
:

275 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
:

276 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: Packë (ty≥=%dËREJECTED, cﬁlisi⁄ wôhÖackëáÃódyÖrogømmedáà%u (%u)\n", 
pkt_ty≥
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, 
∑ckë
->count_us);

277 
îr_cﬁlisi⁄
 = 
JIT_ERROR_COLLISION_PACKET
;

279 
JIT_PKT_TYPE_BEACON
:

280 i‡(
pkt_ty≥
 !
JIT_PKT_TYPE_BEACON
) {

282 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: Packë (ty≥=%dËREJECTED, cﬁlisi⁄ wôh bóc⁄áÃódyÖrogømmedáà%u (%u)\n", 
pkt_ty≥
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, 
∑ckë
->count_us);

284 
îr_cﬁlisi⁄
 = 
JIT_ERROR_COLLISION_BEACON
;

287 
	`MSG
("ERROR: UnknownÖacketÅype, shouldÇot occur, BUG?\n");

288 
	`as£π
(0);

291 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

292  
îr_cﬁlisi⁄
;

298 
	`mem˝y
(&(
queue
->
nodes
[queue->
num_pkt
].
pkt
), 
∑ckë
, (
lgw_pkt_tx_s
));

299 
queue
->
nodes
[queue->
num_pkt
].
¥e_dñay
 = 
∑ckë_¥e_dñay
;

300 
queue
->
nodes
[queue->
num_pkt
].
po°_dñay
 = 
∑ckë_po°_dñay
;

301 
queue
->
nodes
[queue->
num_pkt
].
pkt_ty≥
 =Ökt_type;

302 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

303 
queue
->
num_bóc⁄
++;

305 
queue
->
num_pkt
++;

307 
	`jô_s‹t_queue
(
queue
);

310 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

312 
	`jô_¥öt_queue
(
queue
, 
Ál£
, 
DEBUG_JIT
);

314 
	`MSG_DEBUG
(
DEBUG_JIT
, "íqueuedÖackë wôh cou¡_us=%u (size=%u byãs,Åﬂ=%u us,Åy≥=%u)\n", 
∑ckë
->
cou¡_us
,Öackë->
size
, 
∑ckë_po°_dñay
, 
pkt_ty≥
);

316  
JIT_ERROR_OK
;

317 
	}
}

319 
jô_îr‹_e
 
	$jô_dequeue
(
jô_queue_s
 *
queue
, 
ödex
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 *
pkt_ty≥
) {

320 i‡(
∑ckë
 =
NULL
) {

321 
	`MSG
("ERROR: invalidÖarameter\n");

322  
JIT_ERROR_INVALID
;

325 i‡((
ödex
 < 0Ë|| (ödex >
JIT_QUEUE_MAX
)) {

326 
	`MSG
("ERROR: invalidÖarameter\n");

327  
JIT_ERROR_INVALID
;

330 i‡(
	`jô_queue_is_em±y
(
queue
)) {

331 
	`MSG
("ERROR: cannot dequeueÖacket, JIT queue isÉmpty\n");

332  
JIT_ERROR_EMPTY
;

335 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

338 
	`mem˝y
(
∑ckë
, &(
queue
->
nodes
[
ödex
].
pkt
), (
lgw_pkt_tx_s
));

339 
queue
->
num_pkt
--;

340 *
pkt_ty≥
 = 
queue
->
nodes
[
ödex
].pkt_type;

341 i‡(*
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

342 
queue
->
num_bóc⁄
--;

343 
	`MSG_DEBUG
(
DEBUG_BEACON
, "--- Beacon dequeued ---\n");

347 
	`mem˝y
(&(
queue
->
nodes
[
ödex
]), &(queue->nodes[queue->
num_pkt
]), (
jô_node_s
));

348 
	`mem£t
(&(
queue
->
nodes
[queue->
num_pkt
]), 0, (
jô_node_s
));

351 
	`jô_s‹t_queue
(
queue
);

354 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

356 
	`jô_¥öt_queue
(
queue
, 
Ál£
, 
DEBUG_JIT
);

358 
	`MSG_DEBUG
(
DEBUG_JIT
, "dequeuedÖackë wôh cou¡_us=%u from index %d\n", 
∑ckë
->
cou¡_us
, 
ödex
);

360  
JIT_ERROR_OK
;

361 
	}
}

363 
jô_îr‹_e
 
	$jô_≥ek
(
jô_queue_s
 *
queue
, 
uöt32_t
 
time_us
, *
pkt_idx
) {

365 
i
 = 0;

366 
idx_highe°_¥i‹ôy
 = -1;

367 i‡(
pkt_idx
 =
NULL
) {

368 
	`MSG
("ERROR: invalidÖarameter\n");

369  
JIT_ERROR_INVALID
;

372 i‡(
	`jô_queue_is_em±y
(
queue
)) {

373  
JIT_ERROR_EMPTY
;

376 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

379 
i
=0; i<
queue
->
num_pkt
; i++) {

387 i‡((
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 - 
time_us
Ë>
TX_MAX_ADVANCE_DELAY
) {

389 
queue
->
num_pkt
--;

390 i‡(
queue
->
nodes
[
i
].
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

391 
queue
->
num_bóc⁄
--;

392 
	`MSG
("WARNING: --- Bóc⁄ dr›≥d (cuºít_time=%u,Öackë_time=%uË---\n", 
time_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
);

394 
	`MSG
("WARNING: --- Packë dr›≥d (cuºít_time=%u,Öackë_time=%uË---\n", 
time_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
);

398 
	`mem˝y
(&(
queue
->
nodes
[
i
]), &(queue->nodes[queue->
num_pkt
]), (
jô_node_s
));

399 
	`mem£t
(&(
queue
->
nodes
[queue->
num_pkt
]), 0, (
jô_node_s
));

402 
	`jô_s‹t_queue
(
queue
);

405 
i
 = 0;

413 i‡((
idx_highe°_¥i‹ôy
 =-1Ë|| (((
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 - 
time_us
) < (queue->nodes[idx_highest_priority].pkt.count_us -Åime_us)))) {

414 
idx_highe°_¥i‹ôy
 = 
i
;

422 i‡((
queue
->
nodes
[
idx_highe°_¥i‹ôy
].
pkt
.
cou¡_us
 - 
time_us
Ë< 
TX_JIT_DELAY
) {

423 *
pkt_idx
 = 
idx_highe°_¥i‹ôy
;

424 
	`MSG_DEBUG
(
DEBUG_JIT
, "peekÖacket with count_us=%uát index %d\n",

425 
queue
->
nodes
[
idx_highe°_¥i‹ôy
].
pkt
.
cou¡_us
, idx_highest_priority);

427 *
pkt_idx
 = -1;

430 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

432  
JIT_ERROR_OK
;

433 
	}
}

435 
	$jô_¥öt_queue
(
jô_queue_s
 *
queue
, 
boﬁ
 
show_Æl
, 
debug_Àvñ
) {

436 
i
 = 0;

437 
lo›_íd
;

439 i‡(
	`jô_queue_is_em±y
(
queue
)) {

440 
	`MSG_DEBUG
(
debug_Àvñ
, "INFO: [jit] queue isÉmpty\n");

442 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

444 
	`MSG_DEBUG
(
debug_Àvñ
, "INFO: [jô] queuêc⁄èö†%dÖackës:\n", 
queue
->
num_pkt
);

445 
	`MSG_DEBUG
(
debug_Àvñ
, "INFO: [jô] queuêc⁄èö†%d bóc⁄s:\n", 
queue
->
num_bóc⁄
);

446 
lo›_íd
 = (
show_Æl
 =
åue
Ë? 
JIT_QUEUE_MAX
 : 
queue
->
num_pkt
;

447 
i
=0; i<
lo›_íd
; i++) {

448 
	`MSG_DEBUG
(
debug_Àvñ
, " -Çode[%d]: count_us=%u -Åype=%d\n",

449 
i
,

450 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
,

451 
queue
->
nodes
[
i
].
pkt_ty≥
);

454 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

456 
	}
}

	@packet_forwarder/src/lora_pkt_fwd.c

22 #i‡
__STDC_VERSION__
 >= 199901L

23 
	#_XOPEN_SOURCE
 600

	)

25 
	#_XOPEN_SOURCE
 500

	)

28 
	~<°döt.h
>

29 
	~<°dboﬁ.h
>

30 
	~<°dio.h
>

31 
	~<öây≥s.h
>

33 
	~<°rög.h
>

34 
	~<sig«l.h
>

35 
	~<time.h
>

36 
	~<sys/time.h
>

37 
	~<uni°d.h
>

38 
	~<°dlib.h
>

39 
	~<î∫o.h
>

40 
	~<m©h.h
>

42 
	~<sys/sockë.h
>

43 
	~<√töë/ö.h
>

44 
	~<¨∑/öë.h
>

45 
	~<√tdb.h
>

47 
	~<±hªad.h
>

49 
	~"åa˚.h
"

50 
	~"jôqueue.h
"

51 
	~"∑rs⁄.h
"

52 
	~"ba£64.h
"

53 
	~"l‹agw_hÆ.h
"

54 
	~"l‹agw_aux.h
"

55 
	~"l‹agw_ªg.h
"

56 
	~"l‹agw_gps.h
"

61 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

62 
	#STRINGIFY
(
x
Ë#x

	)

63 
	#STR
(
x
Ë
	`STRINGIFY
(x)

	)

65 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

70 #i‚de‡
VERSION_STRING


71 
	#VERSION_STRING
 "undeföed"

	)

74 
	#JSON_CONF_DEFAULT
 "globÆ_c⁄f.js⁄"

	)

76 
	#DEFAULT_SERVER
 127.0.0.1

	)

77 
	#DEFAULT_PORT_UP
 1780

	)

78 
	#DEFAULT_PORT_DW
 1782

	)

79 
	#DEFAULT_KEEPALIVE
 5

	)

80 
	#DEFAULT_STAT
 30

	)

81 
	#PUSH_TIMEOUT_MS
 100

	)

82 
	#PULL_TIMEOUT_MS
 200

	)

83 
	#GPS_REF_MAX_AGE
 30

	)

84 
	#FETCH_SLEEP_MS
 10

	)

85 
	#BEACON_POLL_MS
 50

	)

87 
	#PROTOCOL_VERSION
 2

	)

88 
	#PROTOCOL_JSON_RXPK_FRAME_FORMAT
 1

	)

90 
	#XERR_INIT_AVG
 16

	)

91 
	#XERR_FILT_COEF
 256

	)

93 
	#PKT_PUSH_DATA
 0

	)

94 
	#PKT_PUSH_ACK
 1

	)

95 
	#PKT_PULL_DATA
 2

	)

96 
	#PKT_PULL_RESP
 3

	)

97 
	#PKT_PULL_ACK
 4

	)

98 
	#PKT_TX_ACK
 5

	)

100 
	#NB_PKT_MAX
 255

	)

102 
	#MIN_LORA_PREAMB
 6

	)

103 
	#STD_LORA_PREAMB
 8

	)

104 
	#MIN_FSK_PREAMB
 3

	)

105 
	#STD_FSK_PREAMB
 5

	)

107 
	#STATUS_SIZE
 200

	)

108 
	#TX_BUFF_SIZE
 ((540 * 
NB_PKT_MAX
Ë+ 30 + 
STATUS_SIZE
)

	)

109 
	#ACK_BUFF_SIZE
 64

	)

111 
	#UNIX_GPS_EPOCH_OFFSET
 315964800

	)

114 
	#DEFAULT_BEACON_FREQ_HZ
 869525000

	)

115 
	#DEFAULT_BEACON_FREQ_NB
 1

	)

116 
	#DEFAULT_BEACON_FREQ_STEP
 0

	)

117 
	#DEFAULT_BEACON_DATARATE
 9

	)

118 
	#DEFAULT_BEACON_BW_HZ
 125000

	)

119 
	#DEFAULT_BEACON_POWER
 14

	)

120 
	#DEFAULT_BEACON_INFODESC
 0

	)

126 
	s•e˘øl_sˇn_s
 {

127 
boﬁ
 
	míabÀ
;

128 
uöt32_t
 
	m‰eq_hz_°¨t
;

129 
uöt8_t
 
	mnb_ch™
;

130 
uöt16_t
 
	mnb_sˇn
;

131 
uöt32_t
 
	m∑˚_s
;

132 } 
	t•e˘øl_sˇn_t
;

138 vﬁ©ûê
boﬁ
 
	gexô_sig
 = 
Ál£
;

139 vﬁ©ûê
boﬁ
 
	gquô_sig
 = 
Ál£
;

142 
boﬁ
 
	gfwd_vÆid_pkt
 = 
åue
;

143 
boﬁ
 
	gfwd_îr‹_pkt
 = 
Ál£
;

144 
boﬁ
 
	gfwd_no¸c_pkt
 = 
Ál£
;

147 
uöt64_t
 
	glgwm
 = 0;

148 
	g£rv_addr
[64] = 
STR
(
DEFAULT_SERVER
);

149 
	g£rv_p‹t_up
[8] = 
STR
(
DEFAULT_PORT_UP
);

150 
	g£rv_p‹t_down
[8] = 
STR
(
DEFAULT_PORT_DW
);

151 
	gkì∑live_time
 = 
DEFAULT_KEEPALIVE
;

154 
	g°©_öãrvÆ
 = 
DEFAULT_STAT
;

157 
uöt32_t
 
	g√t_mac_h
;

158 
uöt32_t
 
	g√t_mac_l
;

161 
	gsock_up
;

162 
	gsock_down
;

165 
timevÆ
 
	gpush_timeout_hÆf
 = {0, (
PUSH_TIMEOUT_MS
 * 500)};

166 
timevÆ
 
	gpuŒ_timeout
 = {0, (
PULL_TIMEOUT_MS
 * 1000)};

169 
±hªad_muãx_t
 
	gmx_c⁄˚¡
 = 
PTHREAD_MUTEX_INITIALIZER
;

170 
±hªad_muãx_t
 
	gmx_xc‹r
 = 
PTHREAD_MUTEX_INITIALIZER
;

171 
boﬁ
 
	gxèl_c‹ª˘_ok
 = 
Ál£
;

172 
	gxèl_c‹ª˘
 = 1.0;

175 
	ggps_ây_∑th
[64] = "\0";

176 
	ggps_ây_fd
 = -1;

177 
boﬁ
 
	ggps_íabÀd
 = 
Ál£
;

180 
±hªad_muãx_t
 
	gmx_timîef
 = 
PTHREAD_MUTEX_INITIALIZER
;

181 
boﬁ
 
	ggps_ªf_vÆid
;

182 
åef
 
	gtime_ª„ªn˚_gps
;

185 
co‹d_s
 
	gª„ªn˚_co‹d
;

188 
boﬁ
 
	ggps_Áke_íabÀ
;

191 
±hªad_muãx_t
 
	gmx_mós_up
 = 
PTHREAD_MUTEX_INITIALIZER
;

192 
uöt32_t
 
	gmós_nb_rx_rcv
 = 0;

193 
uöt32_t
 
	gmós_nb_rx_ok
 = 0;

194 
uöt32_t
 
	gmós_nb_rx_bad
 = 0;

195 
uöt32_t
 
	gmós_nb_rx_no¸c
 = 0;

196 
uöt32_t
 
	gmós_up_pkt_fwd
 = 0;

197 
uöt32_t
 
	gmós_up_√tw‹k_byã
 = 0;

198 
uöt32_t
 
	gmós_up_∑ylﬂd_byã
 = 0;

199 
uöt32_t
 
	gmós_up_dgøm_£¡
 = 0;

200 
uöt32_t
 
	gmós_up_ack_rcv
 = 0;

202 
±hªad_muãx_t
 
	gmx_mós_dw
 = 
PTHREAD_MUTEX_INITIALIZER
;

203 
uöt32_t
 
	gmós_dw_puŒ_£¡
 = 0;

204 
uöt32_t
 
	gmós_dw_ack_rcv
 = 0;

205 
uöt32_t
 
	gmós_dw_dgøm_rcv
 = 0;

206 
uöt32_t
 
	gmós_dw_√tw‹k_byã
 = 0;

207 
uöt32_t
 
	gmós_dw_∑ylﬂd_byã
 = 0;

208 
uöt32_t
 
	gmós_nb_tx_ok
 = 0;

209 
uöt32_t
 
	gmós_nb_tx_Áû
 = 0;

210 
uöt32_t
 
	gmós_nb_tx_ªque°ed
 = 0;

211 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

212 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

213 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_too_œã
 = 0;

214 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_too_óæy
 = 0;

215 
uöt32_t
 
	gmós_nb_bóc⁄_queued
 = 0;

216 
uöt32_t
 
	gmós_nb_bóc⁄_£¡
 = 0;

217 
uöt32_t
 
	gmós_nb_bóc⁄_ªje˘ed
 = 0;

219 
±hªad_muãx_t
 
	gmx_mós_gps
 = 
PTHREAD_MUTEX_INITIALIZER
;

220 
boﬁ
 
	ggps_co‹d_vÆid
;

221 
co‹d_s
 
	gmós_gps_co‹d
;

222 
co‹d_s
 
	gmós_gps_îr
;

224 
±hªad_muãx_t
 
	gmx_°©_ªp
 = 
PTHREAD_MUTEX_INITIALIZER
;

225 
boﬁ
 
	gªp‹t_ªady
 = 
Ál£
;

226 
	g°©us_ªp‹t
[
STATUS_SIZE
];

229 
uöt32_t
 
	gbóc⁄_≥riod
 = 0;

230 
uöt32_t
 
	gbóc⁄_‰eq_hz
 = 
DEFAULT_BEACON_FREQ_HZ
;

231 
uöt8_t
 
	gbóc⁄_‰eq_nb
 = 
DEFAULT_BEACON_FREQ_NB
;

232 
uöt32_t
 
	gbóc⁄_‰eq_°ï
 = 
DEFAULT_BEACON_FREQ_STEP
;

233 
uöt8_t
 
	gbóc⁄_d©¨©e
 = 
DEFAULT_BEACON_DATARATE
;

234 
uöt32_t
 
	gbóc⁄_bw_hz
 = 
DEFAULT_BEACON_BW_HZ
;

235 
öt8_t
 
	gbóc⁄_powî
 = 
DEFAULT_BEACON_POWER
;

236 
uöt8_t
 
	gbóc⁄_öfodesc
 = 
DEFAULT_BEACON_INFODESC
;

239 
uöt32_t
 
	gautoquô_thªshﬁd
 = 0;

242 
jô_queue_s
 
	gjô_queue
[
LGW_RF_CHAIN_NB
];

245 
öt8_t
 
	g™ã¬a_gaö
 = 0;

248 
lgw_tx_gaö_lut_s
 
	gtxlut
[
LGW_RF_CHAIN_NB
];

249 
uöt32_t
 
	gtx_‰eq_mö
[
LGW_RF_CHAIN_NB
];

250 
uöt32_t
 
	gtx_‰eq_max
[
LGW_RF_CHAIN_NB
];

251 
boﬁ
 
	gtx_íabÀ
[
LGW_RF_CHAIN_NB
] = {
Ál£
};

253 
uöt32_t
 
	gnb_pkt_log
[
LGW_IF_CHAIN_NB
][8];

254 
uöt32_t
 
	gnb_pkt_ª˚ived_l‹a
 = 0;

255 
uöt32_t
 
	gnb_pkt_ª˚ived_fsk
 = 0;

257 
lgw_c⁄f_debug_s
 
	gdebugc⁄f
;

258 
uöt32_t
 
	gnb_pkt_ª˚ived_ªf
[16];

261 
lgw_com_ty≥_t
 
	gcom_ty≥
 = 
LGW_COM_SPI
;

264 
•e˘øl_sˇn_t
 
	g•e˘øl_sˇn_∑øms
 = {

265 .
íabÀ
 = 
Ál£
,

266 .
	g‰eq_hz_°¨t
 = 0,

267 .
	gnb_ch™
 = 0,

268 .
	gnb_sˇn
 = 0,

269 .
	g∑˚_s
 = 10

275 
ußge
();

277 
sig_h™dÀr
(
sigio
);

279 
∑r£_SX130x_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

281 
∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

283 
∑r£_debug_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

285 
uöt16_t
 
¸c16
(c⁄° 
uöt8_t
 * 
d©a
, 
size
);

287 
dif·ime•ec
(
time•ec
 
íd
, time•e¯
begönög
);

289 
gps_¥o˚ss_sync
();

291 
gps_¥o˚ss_co‹ds
();

293 
gë_tx_gaö_lut_ödex
(
uöt8_t
 
rf_chaö
, 
öt8_t
 
rf_powî
, uöt8_à* 
lut_ödex
);

296 
thªad_up
();

297 
thªad_down
();

298 
thªad_jô
();

299 
thªad_gps
();

300 
thªad_vÆid
();

301 
thªad_•e˘øl_sˇn
();

306 
	$ußge
( )

308 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

309 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

310 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

311 
	`¥ötf
(" -hÖrintÅhis help\n");

312 
	`¥ötf
(" -c <filename> use config file otherÅhan 'global_conf.json'\n");

313 
	`¥ötf
("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

314 
	}
}

316 
	$sig_h™dÀr
(
sigio
) {

317 i‡(
sigio
 =
SIGQUIT
) {

318 
quô_sig
 = 
åue
;

319 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

320 
exô_sig
 = 
åue
;

323 
	}
}

325 
	$∑r£_SX130x_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

326 
i
, 
j
, 
numbî
;

327 
∑øm_«me
[32];

328 c⁄° *
°r
;

329 c⁄° 
c⁄f_obj_«me
[] = "SX130x_conf";

330 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

331 
JSON_VÆue
 *
vÆ
 = 
NULL
;

332 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

333 
JSON_Obje˘
 *
c⁄f_txgaö_obj
;

334 
JSON_Obje˘
 *
c⁄f_ts_obj
;

335 
JSON_Obje˘
 *
c⁄f_sx1261_obj
 = 
NULL
;

336 
JSON_Obje˘
 *
c⁄f_sˇn_obj
 = 
NULL
;

337 
JSON_Obje˘
 *
c⁄f_lbt_obj
 = 
NULL
;

338 
JSON_Obje˘
 *
c⁄f_lbtch™_obj
 = 
NULL
;

339 
JSON_Aºay
 *
c⁄f_txlut_¨øy
 = 
NULL
;

340 
JSON_Aºay
 *
c⁄f_lbtch™_¨øy
 = 
NULL
;

341 
JSON_Aºay
 *
c⁄f_demod_¨øy
 = 
NULL
;

343 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

344 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

345 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

346 
lgw_c⁄f_demod_s
 
demodc⁄f
;

347 
lgw_c⁄f_·ime_s
 
tsc⁄f
;

348 
lgw_c⁄f_sx1261_s
 
sx1261c⁄f
;

349 
uöt32_t
 
sf
, 
bw
, 
fdev
;

350 
boﬁ
 
sx1250_tx_lut
;

351 
size_t
 
size
;

354 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

355 i‡(
roŸ_vÆ
 =
NULL
) {

356 
	`MSG
("ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

357 
	`exô
(
EXIT_FAILURE
);

361 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

362 i‡(
c⁄f_obj
 =
NULL
) {

363 
	`MSG
("INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

366 
	`MSG
("INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög SX1302Ö¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

370 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

371 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "com_type");

372 i‡(
°r
 =
NULL
) {

373 
	`MSG
("ERROR: com_ty≥ mu° bêc⁄figuªd i¿%s\n", 
c⁄f_fûe
);

375 } i‡(!
	`°∫cmp
(
°r
, "SPI", 3) || !strncmp(str, "spi", 3)) {

376 
bﬂrdc⁄f
.
com_ty≥
 = 
LGW_COM_SPI
;

377 } i‡(!
	`°∫cmp
(
°r
, "USB", 3) || !strncmp(str, "usb", 3)) {

378 
bﬂrdc⁄f
.
com_ty≥
 = 
LGW_COM_USB
;

380 
	`MSG
("ERROR: invÆid comÅy≥: %†(should bêSPI o∏USB)\n", 
°r
);

383 
com_ty≥
 = 
bﬂrdc⁄f
.com_type;

384 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "com_path");

385 i‡(
°r
 !
NULL
) {

386 
	`°∫˝y
(
bﬂrdc⁄f
.
com_∑th
, 
°r
,  boardconf.com_path);

387 
bﬂrdc⁄f
.
com_∑th
[ boardconf.com_path - 1] = '\0';

389 
	`MSG
("ERROR: com_∑th mu° bêc⁄figuªd i¿%s\n", 
c⁄f_fûe
);

392 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "lorawan_public");

393 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

394 
bﬂrdc⁄f
.
l‹aw™_public
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

396 
	`MSG
("WARNING: DataÅype forÜorawan_public seems wrong,Ölease check\n");

397 
bﬂrdc⁄f
.
l‹aw™_public
 = 
Ál£
;

399 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "clksrc");

400 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

401 
bﬂrdc⁄f
.
˛k§c
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

403 
	`MSG
("WARNING: DataÅype for clksrc seems wrong,Ölease check\n");

404 
bﬂrdc⁄f
.
˛k§c
 = 0;

406 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "full_duplex");

407 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

408 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

410 
	`MSG
("WARNING: DataÅype for full_duplex seems wrong,Ölease check\n");

411 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

413 
	`MSG
("INFO: com_ty≥ %s, com_∑th %s,Ü‹aw™_publi¯%d, clk§¯%d, fuŒ_du∂ex %d\n", (
bﬂrdc⁄f
.
com_ty≥
 =
LGW_COM_SPI
Ë? "SPI" : "USB", bﬂrdc⁄f.
com_∑th
, bﬂrdc⁄f.
l‹aw™_public
, bﬂrdc⁄f.
˛k§c
, bﬂrdc⁄f.
fuŒ_du∂ex
);

415 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

416 
	`MSG
("ERROR: FailedÅo configure board\n");

421 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "antenna_gain");

422 i‡(
vÆ
 !
NULL
) {

423 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

424 
™ã¬a_gaö
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

426 
	`MSG
("WARNING: DataÅype forántenna_gain seems wrong,Ölease check\n");

427 
™ã¬a_gaö
 = 0;

430 
	`MSG
("INFO:á¡í«_gaö %d dBi\n", 
™ã¬a_gaö
);

433 
c⁄f_ts_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
c⁄f_obj
, "fine_timestamp");

434 i‡(
c⁄f_ts_obj
 =
NULL
) {

435 
	`MSG
("INFO: %†d€†nŸ c⁄èöá JSON obje˘ f‹ föêtime°amp\n", 
c⁄f_fûe
);

437 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_ts_obj
, "enable");

438 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

439 
tsc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

441 
	`MSG
("WARNING: DataÅype for fine_timestamp.enable seems wrong,Ölease check\n");

442 
tsc⁄f
.
íabÀ
 = 
Ál£
;

444 i‡(
tsc⁄f
.
íabÀ
 =
åue
) {

445 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_ts_obj
, "mode");

446 i‡(
°r
 =
NULL
) {

447 
	`MSG
("ERROR: föe_time°amp.modêmu° bêc⁄figuªd i¿%s\n", 
c⁄f_fûe
);

449 } i‡(!
	`°∫cmp
(
°r
, "high_capacity", 13) || !strncmp(str, "HIGH_CAPACITY", 13)) {

450 
tsc⁄f
.
mode
 = 
LGW_FTIME_MODE_HIGH_CAPACITY
;

451 } i‡(!
	`°∫cmp
(
°r
, "all_sf", 6) || !strncmp(str, "ALL_SF", 6)) {

452 
tsc⁄f
.
mode
 = 
LGW_FTIME_MODE_ALL_SF
;

454 
	`MSG
("ERROR: invÆid föêtime°am∞mode: %†(should bêhigh_ˇ∑côy o∏Æl_sf)\n", 
°r
);

457 
	`MSG
("INFO: C⁄figurögÖªcisi⁄Åime°am∞wôh %†mode\n", 
°r
);

460 i‡(
	`lgw_·ime_£tc⁄f
(&
tsc⁄f
Ë!
LGW_HAL_SUCCESS
) {

461 
	`MSG
("ERROR: FailedÅo configure fineÅimestamp\n");

465 
	`MSG
("INFO: ConfiguringÜegacyÅimestamp\n");

470 
	`mem£t
(&
sx1261c⁄f
, 0,  sx1261conf);

471 
c⁄f_sx1261_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
c⁄f_obj
, "sx1261_conf");

472 i‡(
c⁄f_sx1261_obj
 =
NULL
) {

473 
	`MSG
("INFO:Ço configuration for SX1261\n");

476 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_sx1261_obj
, "spi_path");

477 i‡(
°r
 !
NULL
) {

478 
	`°∫˝y
(
sx1261c⁄f
.
•i_∑th
, 
°r
,  sx1261conf.spi_path);

479 
sx1261c⁄f
.
•i_∑th
[ sx1261conf.spi_path - 1] = '\0';

481 
	`MSG
("INFO: SX1261 spi_∑th i†nŸ c⁄figuªd i¿%s\n", 
c⁄f_fûe
);

483 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_sx1261_obj
, "rssi_offset");

484 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

485 
sx1261c⁄f
.
rssi_off£t
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

487 
	`MSG
("WARNING: DataÅype for sx1261_conf.rssi_offset seems wrong,Ölease check\n");

488 
sx1261c⁄f
.
rssi_off£t
 = 0;

492 
c⁄f_sˇn_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
c⁄f_sx1261_obj
, "spectral_scan");

493 i‡(
c⁄f_sˇn_obj
 =
NULL
) {

494 
	`MSG
("INFO:Ço configuration for Spectral Scan\n");

496 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_sˇn_obj
, "enable");

497 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

499 
•e˘øl_sˇn_∑øms
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

501 
	`MSG
("WARNING: DataÅype for spectral_scan.enable seems wrong,Ölease check\n");

503 i‡(
•e˘øl_sˇn_∑øms
.
íabÀ
 =
åue
) {

505 
sx1261c⁄f
.
íabÀ
 = 
åue
;

506 
	`MSG
("INFO: Spectral Scan with SX1261 isÉnabled\n");

509 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_sˇn_obj
, "freq_start");

510 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

511 
•e˘øl_sˇn_∑øms
.
‰eq_hz_°¨t
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

513 
	`MSG
("WARNING: DataÅype for spectral_scan.freq_start seems wrong,Ölease check\n");

515 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_sˇn_obj
, "nb_chan");

516 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

517 
•e˘øl_sˇn_∑øms
.
nb_ch™
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

519 
	`MSG
("WARNING: DataÅype for spectral_scan.nb_chan seems wrong,Ölease check\n");

521 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_sˇn_obj
, "nb_scan");

522 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

523 
•e˘øl_sˇn_∑øms
.
nb_sˇn
 = (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

525 
	`MSG
("WARNING: DataÅype for spectral_scan.nb_scan seems wrong,Ölease check\n");

527 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_sˇn_obj
, "pace_s");

528 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

529 
•e˘øl_sˇn_∑øms
.
∑˚_s
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

531 
	`MSG
("WARNING: DataÅype for spectral_scan.pace_s seems wrong,Ölease check\n");

537 
c⁄f_lbt_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
c⁄f_sx1261_obj
, "lbt");

538 i‡(
c⁄f_lbt_obj
 =
NULL
) {

539 
	`MSG
("INFO:Ço configuration for LBT\n");

541 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_lbt_obj
, "enable");

542 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

543 
sx1261c⁄f
.
lbt_c⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

545 
	`MSG
("WARNING: DataÅype forÜbt.enable seems wrong,Ölease check\n");

547 i‡(
sx1261c⁄f
.
lbt_c⁄f
.
íabÀ
 =
åue
) {

549 
sx1261c⁄f
.
íabÀ
 = 
åue
;

550 
	`MSG
("INFO: Listen-Before-Talk with SX1261 isÉnabled\n");

552 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_lbt_obj
, "rssi_target");

553 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

554 
sx1261c⁄f
.
lbt_c⁄f
.
rssi_èrgë
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

556 
	`MSG
("WARNING: DataÅype forÜbt.rssi_target seems wrong,Ölease check\n");

557 
sx1261c⁄f
.
lbt_c⁄f
.
rssi_èrgë
 = 0;

560 
c⁄f_lbtch™_¨øy
 = 
	`js⁄_obje˘_gë_¨øy
(
c⁄f_lbt_obj
, "channels");

561 i‡(
c⁄f_lbtch™_¨øy
 !
NULL
) {

562 
sx1261c⁄f
.
lbt_c⁄f
.
nb_ch™√l
 = 
	`js⁄_¨øy_gë_cou¡
(
c⁄f_lbtch™_¨øy
);

563 
	`MSG
("INFO: %u LBT ch™√l†c⁄figuªd\n", 
sx1261c⁄f
.
lbt_c⁄f
.
nb_ch™√l
);

565 
i
 = 0; i < ()
sx1261c⁄f
.
lbt_c⁄f
.
nb_ch™√l
; i++) {

567 i‡(
i
 >
LGW_LBT_CHANNEL_NB_MAX
) {

568 
	`MSG
("ERROR: LBT ch™√»%dÇŸ suµ‹ãd, skù it\n", 
i
);

572 
c⁄f_lbtch™_obj
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_lbtch™_¨øy
, 
i
);

575 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_lbtch™_obj
, "freq_hz");

576 i‡(
vÆ
 !
NULL
) {

577 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

578 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
‰eq_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

580 
	`MSG
("WARNING: D©®ty≥ f‹Übt.ch™√ls[%d].‰eq_hz sìm†wr⁄g,ÖÀa£ check\n", 
i
);

581 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
‰eq_hz
 = 0;

584 
	`MSG
("ERROR:Çÿ‰equícy deföed f‹ LBT ch™√»%d\n", 
i
);

589 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_lbtch™_obj
, "bandwidth");

590 i‡(
vÆ
 !
NULL
) {

591 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

592 
bw
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

593 
bw
) {

594 500000: 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
b™dwidth
 = 
BW_500KHZ
; ;

595 250000: 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
b™dwidth
 = 
BW_250KHZ
; ;

596 125000: 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
b™dwidth
 = 
BW_125KHZ
; ;

597 : 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
b™dwidth
 = 
BW_UNDEFINED
;

600 
	`MSG
("WARNING: D©®ty≥ f‹Übt.ch™√ls[%d].‰eq_hz sìm†wr⁄g,ÖÀa£ check\n", 
i
);

601 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
b™dwidth
 = 
BW_UNDEFINED
;

604 
	`MSG
("ERROR:Çÿb™diwdth deföed f‹ LBT ch™√»%d\n", 
i
);

609 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_lbtch™_obj
, "scan_time_us");

610 i‡(
vÆ
 !
NULL
) {

611 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

612 i‡((
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
) == 128) {

613 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 = 
LGW_LBT_SCAN_TIME_128_US
;

614 } i‡((
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
) == 5000) {

615 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 = 
LGW_LBT_SCAN_TIME_5000_US
;

617 
	`MSG
("ERROR: sˇ¿timênŸ suµ‹ãd f‹ LBT ch™√»%d, mu° bê128 o∏5000\n", 
i
);

621 
	`MSG
("WARNING: D©®ty≥ f‹Übt.ch™√ls[%d].sˇn_time_u†£em†wr⁄g,ÖÀa£ check\n", 
i
);

622 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 = 0;

625 
	`MSG
("ERROR:Çÿsˇn_time_u†deföed f‹ LBT ch™√»%d\n", 
i
);

630 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_lbtch™_obj
, "transmit_time_ms");

631 i‡(
vÆ
 !
NULL
) {

632 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

633 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
å™smô_time_ms
 = (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

635 
	`MSG
("WARNING: D©®ty≥ f‹Übt.ch™√ls[%d].å™smô_time_m†£em†wr⁄g,ÖÀa£ check\n", 
i
);

636 
sx1261c⁄f
.
lbt_c⁄f
.
ch™√ls
[
i
].
å™smô_time_ms
 = 0;

639 
	`MSG
("ERROR:Çÿå™smô_time_m†deföed f‹ LBT ch™√»%d\n", 
i
);

647 i‡(
	`lgw_sx1261_£tc⁄f
(&
sx1261c⁄f
Ë!
LGW_HAL_SUCCESS
) {

648 
	`MSG
("ERROR: FailedÅo configureÅhe SX1261Ñadio\n");

654 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; ++i) {

655 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

656 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i", 
i
);

657 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

658 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

659 
	`MSG
("INFO:Çÿc⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

663 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.íabÀ", 
i
);

664 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

665 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

666 
rfc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

668 
rfc⁄f
.
íabÀ
 = 
Ál£
;

670 i‡(
rfc⁄f
.
íabÀ
 =
Ál£
) {

671 
	`MSG
("INFO:Ñadiÿ%òdißbÀd\n", 
i
);

673 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.‰eq", 
i
);

674 
rfc⁄f
.
‰eq_hz
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

675 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_off£t", 
i
);

676 
rfc⁄f
.
rssi_off£t
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

677 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_a", 
i
);

678 
rfc⁄f
.
rssi_tcomp
.
c€ff_a
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

679 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_b", 
i
);

680 
rfc⁄f
.
rssi_tcomp
.
c€ff_b
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

681 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_c", 
i
);

682 
rfc⁄f
.
rssi_tcomp
.
c€ff_c
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

683 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_d", 
i
);

684 
rfc⁄f
.
rssi_tcomp
.
c€ff_d
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

685 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_e", 
i
);

686 
rfc⁄f
.
rssi_tcomp
.
c€ff_e
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

687 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.ty≥", 
i
);

688 
°r
 = 
	`js⁄_obje˘_dŸgë_°rög
(
c⁄f_obj
, 
∑øm_«me
);

689 i‡(!
	`°∫cmp
(
°r
, "SX1255", 6)) {

690 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

691 } i‡(!
	`°∫cmp
(
°r
, "SX1257", 6)) {

692 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

693 } i‡(!
	`°∫cmp
(
°r
, "SX1250", 6)) {

694 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

696 
	`MSG
("WARNING: invÆidÑadiÿty≥: %†(should bêSX1255 o∏SX1257 o∏SX1250)\n", 
°r
);

698 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.sögÀ_öput_mode", 
i
);

699 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

700 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

701 
rfc⁄f
.
sögÀ_öput_mode
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

703 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

706 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_íabÀ", 
i
);

707 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

708 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

709 
rfc⁄f
.
tx_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

710 
tx_íabÀ
[
i
] = 
rfc⁄f
.tx_enable;

711 i‡(
rfc⁄f
.
tx_íabÀ
 =
åue
) {

713 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_‰eq_mö", 
i
);

714 
tx_‰eq_mö
[
i
] = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

715 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_‰eq_max", 
i
);

716 
tx_‰eq_max
[
i
] = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

717 i‡((
tx_‰eq_mö
[
i
] =0Ë|| (
tx_‰eq_max
[i] == 0)) {

718 
	`MSG
("WARNING:Çÿ‰equícyÑ™gê•ecifõd f‹ TXÑ‡chaö %d\n", 
i
);

722 
	`mem£t
(&
txlut
[
i
], 0, Åxlut[i]);

723 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_gaö_lut", 
i
);

724 
c⁄f_txlut_¨øy
 = 
	`js⁄_obje˘_dŸgë_¨øy
(
c⁄f_obj
, 
∑øm_«me
);

725 i‡(
c⁄f_txlut_¨øy
 !
NULL
) {

726 
txlut
[
i
].
size
 = 
	`js⁄_¨øy_gë_cou¡
(
c⁄f_txlut_¨øy
);

728 
c⁄f_txgaö_obj
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_txlut_¨øy
, 0);

729 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "pwr_idx");

730 i‡(
vÆ
 !
NULL
) {

731 
	`¥ötf
("INFO: C⁄figurög Tx Gaö LUT f‹Ñf_chaö %u wôh %u indexe†f‹ sx1250\n", 
i
, 
txlut
[i].
size
);

732 
sx1250_tx_lut
 = 
åue
;

734 
	`¥ötf
("INFO: C⁄figurög Tx Gaö LUT f‹Ñf_chaö %u wôh %u indexe†f‹ sx125x\n", 
i
, 
txlut
[i].
size
);

735 
sx1250_tx_lut
 = 
Ál£
;

738 
j
 = 0; j < ()
txlut
[
i
].
size
; j++) {

740 i‡(
j
 >
TX_GAIN_LUT_SIZE_MAX
) {

741 
	`¥ötf
("ERROR: TX Gaö LUT [%u] index %dÇŸ suµ‹ãd, skù it\n", 
i
, 
j
);

745 
c⁄f_txgaö_obj
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_txlut_¨øy
, 
j
);

747 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "rf_power");

748 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

749 
txlut
[
i
].
lut
[
j
].
rf_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

751 
	`¥ötf
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "rf_powî", 
j
);

752 
txlut
[
i
].
lut
[
j
].
rf_powî
 = 0;

755 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "pa_gain");

756 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

757 
txlut
[
i
].
lut
[
j
].
∑_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

759 
	`¥ötf
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "∑_gaö", 
j
);

760 
txlut
[
i
].
lut
[
j
].
∑_gaö
 = 0;

762 i‡(
sx1250_tx_lut
 =
Ál£
) {

764 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "dig_gain");

765 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

766 
txlut
[
i
].
lut
[
j
].
dig_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

768 
	`¥ötf
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "dig_gaö", 
j
);

769 
txlut
[
i
].
lut
[
j
].
dig_gaö
 = 0;

772 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "dac_gain");

773 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

774 
txlut
[
i
].
lut
[
j
].
dac_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

776 
	`¥ötf
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "dac_gaö", 
j
);

777 
txlut
[
i
].
lut
[
j
].
dac_gaö
 = 3;

780 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "mix_gain");

781 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

782 
txlut
[
i
].
lut
[
j
].
mix_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

784 
	`¥ötf
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "mix_gaö", 
j
);

785 
txlut
[
i
].
lut
[
j
].
mix_gaö
 = 0;

789 
txlut
[
i
].
lut
[
j
].
mix_gaö
 = 5;

792 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "pwr_idx");

793 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

794 
txlut
[
i
].
lut
[
j
].
pwr_idx
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

796 
	`¥ötf
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "pwr_idx", 
j
);

797 
txlut
[
i
].
lut
[
j
].
pwr_idx
 = 0;

802 i‡(
txlut
[
i
].
size
 > 0) {

803 i‡(
	`lgw_txgaö_£tc⁄f
(
i
, &
txlut
[i]Ë!
LGW_HAL_SUCCESS
) {

804 
	`MSG
("ERROR: FaûedÅÿc⁄figuª c⁄˚¡øt‹ TX Gaö LUT f‹Ñf_chaö %u\n", 
i
);

808 
	`MSG
("WARNING: NÿTX gaö LUT deföed f‹Ñf_chaö %u\n", 
i
);

811 
	`MSG
("WARNING: NÿTX gaö LUT deföed f‹Ñf_chaö %u\n", 
i
);

815 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

817 
	`MSG
("INFO:Ñadiÿ%òíabÀd (ty≥ %s), cíã∏‰equícy %u, RSSI off£à%f,ÅxÉ«bÀd %d, sögÀ i≈uàmodê%d\n", 
i
, 
°r
, 
rfc⁄f
.
‰eq_hz
,Ñfc⁄f.
rssi_off£t
,Ñfc⁄f.
tx_íabÀ
,Ñfc⁄f.
sögÀ_öput_mode
);

820 i‡(
	`lgw_rxrf_£tc⁄f
(
i
, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

821 
	`MSG
("ERROR: invÆid c⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

827 
	`mem£t
(&
demodc⁄f
, 0,  demodconf);

828 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_multiSF_All");

829 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

830 
	`MSG
("INFO:Ço configuration for LoRa multi-SF spreading factorsÉnabling\n");

832 
c⁄f_demod_¨øy
 = 
	`js⁄_obje˘_dŸgë_¨øy
(
c⁄f_obj
, "chan_multiSF_All.spreading_factor_enable");

833 i‡((
c⁄f_demod_¨øy
 !
NULL
Ë&& ((
size
 = 
	`js⁄_¨øy_gë_cou¡
(c⁄f_demod_¨øy)Ë<
LGW_MULTI_NB
)) {

834 
i
 = 0; i < ()
size
; i++) {

835 
numbî
 = 
	`js⁄_¨øy_gë_numbî
(
c⁄f_demod_¨øy
, 
i
);

836 i‡(
numbî
 < 5 ||Çumber > 12) {

837 
	`MSG
("WARNING: faûedÅÿ∑r£ ch™_mu…iSF_AŒ.•ªadög_Á˘‹_íabÀ (wr⁄g vÆuê© idx %d)\n", 
i
);

838 
demodc⁄f
.
mu…isf_d©¨©e
 = 0xFF;

842 
demodc⁄f
.
mu…isf_d©¨©e
 |(1 << (
numbî
 - 5));

846 
	`MSG
("WARNING: failedÅoÖarse chan_multiSF_All.spreading_factor_enable\n");

847 
demodc⁄f
.
mu…isf_d©¨©e
 = 0xFF;

850 i‡(
	`lgw_demod_£tc⁄f
(&
demodc⁄f
Ë!
LGW_HAL_SUCCESS
) {

851 
	`MSG
("ERROR: invalid configuration for demodulationÖarameters\n");

857 
i
 = 0; i < 
LGW_MULTI_NB
; ++i) {

858 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

859 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i", 
i
);

860 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

861 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

862 
	`MSG
("INFO:Çÿc⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

866 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.íabÀ", 
i
);

867 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

868 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

869 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

871 
ifc⁄f
.
íabÀ
 = 
Ál£
;

873 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

874 
	`MSG
("INFO: L‹®mu…i-SF ch™√»%òdißbÀd\n", 
i
);

876 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.ødio", 
i
);

877 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

878 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.if", 
i
);

879 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

881 
	`MSG
("INFO: L‹®mu…i-SF ch™√»%i>Ñadiÿ%i, IF %òHz, 125 kHz bw, SF 5Åÿ12\n", 
i
, 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
);

884 i‡(
	`lgw_rxif_£tc⁄f
(
i
, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

885 
	`MSG
("ERROR: invÆid c⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

891 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

892 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_Lora_std");

893 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

894 
	`MSG
("INFO:Ço configuration for Lora standard channel\n");

896 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.enable");

897 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

898 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

900 
ifc⁄f
.
íabÀ
 = 
Ál£
;

902 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

903 
	`MSG
("INFO: L‹®°™d¨d ch™√»%òdißbÀd\n", 
i
);

905 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.radio");

906 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.if");

907 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.bandwidth");

908 
bw
) {

909 500000: 
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
; ;

910 250000: 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
; ;

911 125000: 
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
; ;

912 : 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

914 
sf
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.spread_factor");

915 
sf
) {

916 5: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF5
; ;

917 6: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF6
; ;

918 7: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
; ;

919 8: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF8
; ;

920 9: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF9
; ;

921 10: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF10
; ;

922 11: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF11
; ;

923 12: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF12
; ;

924 : 
ifc⁄f
.
d©¨©e
 = 
DR_UNDEFINED
;

926 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.implicit_hdr");

927 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

928 
ifc⁄f
.
im∂icô_hdr
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

930 
ifc⁄f
.
im∂icô_hdr
 = 
Ál£
;

932 i‡(
ifc⁄f
.
im∂icô_hdr
 =
åue
) {

933 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.implicit_payload_length");

934 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

935 
ifc⁄f
.
im∂icô_∑ylﬂd_Àngth
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

937 
	`MSG
("ERROR:ÖayloadÜength setting is mandatory for implicit header mode\n");

940 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.implicit_crc_en");

941 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

942 
ifc⁄f
.
im∂icô_¸c_í
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

944 
	`MSG
("ERROR: CRCÉnable setting is mandatory for implicit header mode\n");

947 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.implicit_coderate");

948 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

949 
ifc⁄f
.
im∂icô_codî©e
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

951 
	`MSG
("ERROR: codingÑate setting is mandatory for implicit header mode\n");

956 
	`MSG
("INFO: L‹®°d ch™√l>Ñadiÿ%i, IF %òHz, %u Hz bw, SF %u, %s\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, 
sf
, (ifc⁄f.
im∂icô_hdr
 =
åue
) ? "Implicit header" : "Explicit header");

958 i‡(
	`lgw_rxif_£tc⁄f
(8, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

959 
	`MSG
("ERROR: invalid configuration for Lora standard channel\n");

965 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

966 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_FSK");

967 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

968 
	`MSG
("INFO:Ço configuration for FSK channel\n");

970 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_FSK.enable");

971 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

972 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

974 
ifc⁄f
.
íabÀ
 = 
Ál£
;

976 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

977 
	`MSG
("INFO: FSK ch™√»%òdißbÀd\n", 
i
);

979 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.radio");

980 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.if");

981 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.bandwidth");

982 
fdev
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.freq_deviation");

983 
ifc⁄f
.
d©¨©e
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.datarate");

986 i‡((
bw
 =0Ë&& (
fdev
 != 0)) {

987 
bw
 = 2 * 
fdev
 + 
ifc⁄f
.
d©¨©e
;

989 i‡(
bw
 =0Ë
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

991 i‡(
bw
 <7800Ë
ifc⁄f
.
b™dwidth
 = 
BW_7K8HZ
;

992 i‡(
bw
 <15600Ë
ifc⁄f
.
b™dwidth
 = 
BW_15K6HZ
;

993 i‡(
bw
 <31200Ë
ifc⁄f
.
b™dwidth
 = 
BW_31K2HZ
;

994 i‡(
bw
 <62500Ë
ifc⁄f
.
b™dwidth
 = 
BW_62K5HZ
;

996 i‡(
bw
 <125000Ë
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
;

997 i‡(
bw
 <250000Ë
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

998 i‡(
bw
 <500000Ë
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
;

999 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

1001 
	`MSG
("INFO: FSK ch™√l>Ñadiÿ%i, IF %òHz, %u Hz bw, %u bp†d©¨©e\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, ifc⁄f.
d©¨©e
);

1003 i‡(
	`lgw_rxif_£tc⁄f
(9, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

1004 
	`MSG
("ERROR: invalid configuration for FSK channel\n");

1008 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1011 
	}
}

1013 
	$∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

1014 c⁄° 
c⁄f_obj_«me
[] = "gateway_conf";

1015 
JSON_VÆue
 *
roŸ_vÆ
;

1016 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

1017 
JSON_VÆue
 *
vÆ
 = 
NULL
;

1018 c⁄° *
°r
;

1019 
uŒ
 = 0;

1022 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

1023 i‡(
roŸ_vÆ
 =
NULL
) {

1024 
	`MSG
("ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

1025 
	`exô
(
EXIT_FAILURE
);

1029 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

1030 i‡(
c⁄f_obj
 =
NULL
) {

1031 
	`MSG
("INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

1034 
	`MSG
("INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög g©ewayÖ¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

1038 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "gateway_ID");

1039 i‡(
°r
 !
NULL
) {

1040 
	`ssˇnf
(
°r
, "%Œx", &
uŒ
);

1041 
lgwm
 = 
uŒ
;

1042 
	`MSG
("INFO: g©eway MACáddªs†i†c⁄figuªdÅÿ%016ŒX\n", 
uŒ
);

1046 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "server_address");

1047 i‡(
°r
 !
NULL
) {

1048 
	`°∫˝y
(
£rv_addr
, 
°r
,  serv_addr);

1049 
£rv_addr
[ serv_addr - 1] = '\0';

1050 
	`MSG
("INFO: sîvî ho°«mê‹ IPáddªs†i†c⁄figuªdÅÿ\"%s\"\n", 
£rv_addr
);

1054 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "serv_port_up");

1055 i‡(
vÆ
 !
NULL
) {

1056 
	`¢¥ötf
(
£rv_p‹t_up
,  sîv_p‹t_up, "%u", (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
));

1057 
	`MSG
("INFO: up°ªamÖ‹ài†c⁄figuªdÅÿ\"%s\"\n", 
£rv_p‹t_up
);

1059 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "serv_port_down");

1060 i‡(
vÆ
 !
NULL
) {

1061 
	`¢¥ötf
(
£rv_p‹t_down
,  sîv_p‹t_down, "%u", (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
));

1062 
	`MSG
("INFO: down°ªamÖ‹ài†c⁄figuªdÅÿ\"%s\"\n", 
£rv_p‹t_down
);

1066 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "keepalive_interval");

1067 i‡(
vÆ
 !
NULL
) {

1068 
kì∑live_time
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1069 
	`MSG
("INFO: down°ªam kìp-ÆivêöãrvÆ i†c⁄figuªdÅÿ%u sec⁄ds\n", 
kì∑live_time
);

1073 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "stat_interval");

1074 i‡(
vÆ
 !
NULL
) {

1075 
°©_öãrvÆ
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1076 
	`MSG
("INFO: sèti°ic†di•œy i¡îvÆ i†c⁄figuªdÅÿ%u sec⁄ds\n", 
°©_öãrvÆ
);

1080 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "push_timeout_ms");

1081 i‡(
vÆ
 !
NULL
) {

1082 
push_timeout_hÆf
.
tv_u£c
 = 500 * ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1083 
	`MSG
("INFO: up°ªam PUSH_DATAÅime-ouài†c⁄figuªdÅÿ%u ms\n", ()(
push_timeout_hÆf
.
tv_u£c
 / 500));

1087 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_valid");

1088 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

1089 
fwd_vÆid_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

1091 
	`MSG
("INFO:Öackë†ª˚ived wôhá vÆid CRC wûl%†bêf‹w¨ded\n", (
fwd_vÆid_pkt
 ? "" : " NOT"));

1092 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_error");

1093 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

1094 
fwd_îr‹_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

1096 
	`MSG
("INFO:Öackë†ª˚ived wôhá CRCÉº‹ wûl%†bêf‹w¨ded\n", (
fwd_îr‹_pkt
 ? "" : " NOT"));

1097 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_disabled");

1098 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

1099 
fwd_no¸c_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

1101 
	`MSG
("INFO:Öackë†ª˚ived wôhÇÿCRC wûl%†bêf‹w¨ded\n", (
fwd_no¸c_pkt
 ? "" : " NOT"));

1104 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "gps_tty_path");

1105 i‡(
°r
 !
NULL
) {

1106 
	`°∫˝y
(
gps_ây_∑th
, 
°r
,  gps_tty_path);

1107 
gps_ây_∑th
[ gps_tty_path - 1] = '\0';

1108 
	`MSG
("INFO: GPS sîü»p‹à∑th i†c⁄figuªdÅÿ\"%s\"\n", 
gps_ây_∑th
);

1112 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_latitude");

1113 i‡(
vÆ
 !
NULL
) {

1114 
ª„ªn˚_co‹d
.
œt
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1115 
	`MSG
("INFO: Re„ªn˚Ü©ôudêi†c⁄figuªdÅÿ%‡deg\n", 
ª„ªn˚_co‹d
.
œt
);

1117 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_longitude");

1118 i‡(
vÆ
 !
NULL
) {

1119 
ª„ªn˚_co‹d
.
l⁄
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1120 
	`MSG
("INFO: Re„ªn˚Ü⁄gôudêi†c⁄figuªdÅÿ%‡deg\n", 
ª„ªn˚_co‹d
.
l⁄
);

1122 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_altitude");

1123 i‡(
vÆ
 !
NULL
) {

1124 
ª„ªn˚_co‹d
.
Æt
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1125 
	`MSG
("INFO: Re„ªn˚á…ôudêi†c⁄figuªdÅÿ%òmëîs\n", 
ª„ªn˚_co‹d
.
Æt
);

1129 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "fake_gps");

1130 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

1131 
gps_Áke_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

1132 i‡(
gps_Áke_íabÀ
 =
åue
) {

1133 
	`MSG
("INFO: fake GPS isÉnabled\n");

1135 
	`MSG
("INFO: fake GPS is disabled\n");

1140 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_period");

1141 i‡(
vÆ
 !
NULL
) {

1142 
bóc⁄_≥riod
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1143 i‡((
bóc⁄_≥riod
 > 0) && (beacon_period < 6)) {

1144 
	`MSG
("ERROR: invalid configuration for BeaconÖeriod, must be >= 6s\n");

1147 
	`MSG
("INFO: Bóc⁄ögÖîiod i†c⁄figuªdÅÿ%u sec⁄ds\n", 
bóc⁄_≥riod
);

1152 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_hz");

1153 i‡(
vÆ
 !
NULL
) {

1154 
bóc⁄_‰eq_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1155 
	`MSG
("INFO: Bóc⁄ög sig«»wû»bêemôãdáà%u Hz\n", 
bóc⁄_‰eq_hz
);

1159 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_nb");

1160 i‡(
vÆ
 !
NULL
) {

1161 
bóc⁄_‰eq_nb
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1162 
	`MSG
("INFO: Bóc⁄ög ch™√»numbî i†£àtÿ%u\n", 
bóc⁄_‰eq_nb
);

1166 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_step");

1167 i‡(
vÆ
 !
NULL
) {

1168 
bóc⁄_‰eq_°ï
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1169 
	`MSG
("INFO: Bóc⁄ög ch™√»‰equícy sã∞i†£àtÿ%uHz\n", 
bóc⁄_‰eq_°ï
);

1173 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_datarate");

1174 i‡(
vÆ
 !
NULL
) {

1175 
bóc⁄_d©¨©e
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1176 
	`MSG
("INFO: Bóc⁄ög d©¨©êi†£àtÿSF%d\n", 
bóc⁄_d©¨©e
);

1180 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_bw_hz");

1181 i‡(
vÆ
 !
NULL
) {

1182 
bóc⁄_bw_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1183 
	`MSG
("INFO: Bóc⁄ög moduœti⁄ b™dwidth i†£àtÿ%dHz\n", 
bóc⁄_bw_hz
);

1187 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_power");

1188 i‡(
vÆ
 !
NULL
) {

1189 
bóc⁄_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1190 
	`MSG
("INFO: Bóc⁄ög TXÖowî i†£àtÿ%ddBm\n", 
bóc⁄_powî
);

1194 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_infodesc");

1195 i‡(
vÆ
 !
NULL
) {

1196 
bóc⁄_öfodesc
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1197 
	`MSG
("INFO: Bóc⁄ög inf‹m©i⁄ des¸ùt‹ i†£àtÿ%u\n", 
bóc⁄_öfodesc
);

1201 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "autoquit_threshold");

1202 i‡(
vÆ
 !
NULL
) {

1203 
autoquô_thªshﬁd
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1204 
	`MSG
("INFO: Auto-quôá·î %uÇ⁄-acknowÀdged PULL_DATA\n", 
autoquô_thªshﬁd
);

1208 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1210 
	}
}

1212 
	$∑r£_debug_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

1213 
i
;

1214 c⁄° 
c⁄f_obj_«me
[] = "debug_conf";

1215 
JSON_VÆue
 *
roŸ_vÆ
;

1216 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

1217 
JSON_Aºay
 *
c⁄f_¨øy
 = 
NULL
;

1218 
JSON_Obje˘
 *
c⁄f_obj_¨øy
 = 
NULL
;

1219 c⁄° *
°r
;

1222 
	`mem£t
(&
debugc⁄f
, 0,  debugconf);

1225 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

1226 i‡(
roŸ_vÆ
 =
NULL
) {

1227 
	`MSG
("ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

1228 
	`exô
(
EXIT_FAILURE
);

1232 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

1233 i‡(
c⁄f_obj
 =
NULL
) {

1234 
	`MSG
("INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

1235 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1238 
	`MSG
("INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög debugÖ¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

1242 
c⁄f_¨øy
 = 
	`js⁄_obje˘_gë_¨øy
 (
c⁄f_obj
, "ref_payload");

1243 i‡(
c⁄f_¨øy
 !
NULL
) {

1244 
debugc⁄f
.
nb_ªf_∑ylﬂd
 = 
	`js⁄_¨øy_gë_cou¡
(
c⁄f_¨øy
);

1245 
	`MSG
("INFO: gŸ %u debugÑe„ªn˚Öaylﬂd\n", 
debugc⁄f
.
nb_ªf_∑ylﬂd
);

1247 
i
 = 0; i < ()
debugc⁄f
.
nb_ªf_∑ylﬂd
; i++) {

1248 
c⁄f_obj_¨øy
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_¨øy
, 
i
);

1250 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj_¨øy
, "id");

1251 i‡(
°r
 !
NULL
) {

1252 
	`ssˇnf
(
°r
, "0x%08X", &(
debugc⁄f
.
ªf_∑ylﬂd
[
i
].
id
));

1253 
	`MSG
("INFO:Ñe„ªn˚Öaylﬂd ID %d i†0x%08X\n", 
i
, 
debugc⁄f
.
ªf_∑ylﬂd
[i].
id
);

1257 
nb_pkt_ª˚ived_ªf
[
i
] = 0;

1262 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "log_file");

1263 i‡(
°r
 !
NULL
) {

1264 
	`°∫˝y
(
debugc⁄f
.
log_fûe_«me
, 
°r
,  debugconf.log_file_name);

1265 
debugc⁄f
.
log_fûe_«me
[ debugconf.log_file_name - 1] = '\0';

1266 
	`MSG
("INFO: sëtög debugÜog fûê«mêtÿ%s\n", 
debugc⁄f
.
log_fûe_«me
);

1270 i‡(
	`lgw_debug_£tc⁄f
(&
debugc⁄f
Ë!
LGW_HAL_SUCCESS
) {

1271 
	`MSG
("ERROR: FailedÅo configure debug\n");

1272 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1277 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1279 
	}
}

1281 
uöt16_t
 
	$¸c16
(c⁄° 
uöt8_t
 * 
d©a
, 
size
) {

1282 c⁄° 
uöt16_t
 
¸c_pﬁy
 = 0x1021;

1283 c⁄° 
uöt16_t
 
öô_vÆ
 = 0x0000;

1284 
uöt16_t
 
x
 = 
öô_vÆ
;

1285 
i
, 
j
;

1287 i‡(
d©a
 =
NULL
) {

1291 
i
=0; i<
size
; ++i) {

1292 
x
 ^(
uöt16_t
)
d©a
[
i
] << 8;

1293 
j
=0; j<8; ++j) {

1294 
x
 = (x & 0x8000Ë? (x<<1Ë^ 
¸c_pﬁy
 : (x<<1);

1298  
x
;

1299 
	}
}

1301 
	$dif·ime•ec
(
time•ec
 
íd
, time•e¯
begönög
) {

1302 
x
;

1304 
x
 = 1E-9 * ()(
íd
.
tv_n£c
 - 
begönög
.tv_nsec);

1305 
x
 +()(
íd
.
tv_£c
 - 
begönög
.tv_sec);

1307  
x
;

1308 
	}
}

1310 
	$£nd_tx_ack
(
uöt8_t
 
tokí_h
, uöt8_à
tokí_l
, 
jô_îr‹_e
 
îr‹
, 
öt32_t
 
îr‹_vÆue
) {

1311 
uöt8_t
 
buff_ack
[
ACK_BUFF_SIZE
];

1312 
buff_ödex
;

1313 
j
;

1316 
	`mem£t
(&
buff_ack
, 0,  buff_ack);

1319 
buff_ack
[0] = 
PROTOCOL_VERSION
;

1320 
buff_ack
[1] = 
tokí_h
;

1321 
buff_ack
[2] = 
tokí_l
;

1322 
buff_ack
[3] = 
PKT_TX_ACK
;

1323 *(
uöt32_t
 *)(
buff_ack
 + 4Ë
√t_mac_h
;

1324 *(
uöt32_t
 *)(
buff_ack
 + 8Ë
√t_mac_l
;

1325 
buff_ödex
 = 12;

1328 i‡(
îr‹
 !
JIT_ERROR_OK
) {

1330 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"{\"txpk_ack\":{", 13);

1331 
buff_ödex
 += 13;

1333  
îr‹
 ) {

1334 
JIT_ERROR_TX_POWER
:

1335 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"warn\":", 7);

1336 
buff_ödex
 += 7;

1339 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"error\":", 8);

1340 
buff_ödex
 += 8;

1344 
îr‹
) {

1345 
JIT_ERROR_FULL
:

1346 
JIT_ERROR_COLLISION_PACKET
:

1347 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"COLLISION_PACKET\"", 18);

1348 
buff_ödex
 += 18;

1350 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

1351 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 += 1;

1352 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

1354 
JIT_ERROR_TOO_LATE
:

1355 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TOO_LATE\"", 10);

1356 
buff_ödex
 += 10;

1358 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

1359 
mós_nb_tx_ªje˘ed_too_œã
 += 1;

1360 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

1362 
JIT_ERROR_TOO_EARLY
:

1363 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TOO_EARLY\"", 11);

1364 
buff_ödex
 += 11;

1366 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

1367 
mós_nb_tx_ªje˘ed_too_óæy
 += 1;

1368 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

1370 
JIT_ERROR_COLLISION_BEACON
:

1371 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"COLLISION_BEACON\"", 18);

1372 
buff_ödex
 += 18;

1374 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

1375 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 += 1;

1376 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

1378 
JIT_ERROR_TX_FREQ
:

1379 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TX_FREQ\"", 9);

1380 
buff_ödex
 += 9;

1382 
JIT_ERROR_TX_POWER
:

1383 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TX_POWER\"", 10);

1384 
buff_ödex
 += 10;

1386 
JIT_ERROR_GPS_UNLOCKED
:

1387 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"GPS_UNLOCKED\"", 14);

1388 
buff_ödex
 += 14;

1391 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"UNKNOWN\"", 9);

1392 
buff_ödex
 += 9;

1396 
îr‹
) {

1397 
JIT_ERROR_TX_POWER
:

1398 
j
 = 
	`¢¥ötf
((*)(
buff_ack
 + 
buff_ödex
), 
ACK_BUFF_SIZE
-buff_ödex, ",\"vÆue\":%d", 
îr‹_vÆue
);

1399 i‡(
j
 > 0) {

1400 
buff_ödex
 +
j
;

1402 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1403 
	`exô
(
EXIT_FAILURE
);

1411 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"}}", 2);

1412 
buff_ödex
 += 2;

1415 
buff_ack
[
buff_ödex
] = 0;

1418  
	`£nd
(
sock_down
, (*)
buff_ack
, 
buff_ödex
, 0);

1419 
	}
}

1424 
	$maö
(
¨gc
, ** 
¨gv
)

1426 
siga˘i⁄
 
siga˘
;

1427 
i
;

1428 
x
;

1429 
l
, 
m
;

1432 c⁄° 
deÁut_c⁄f_‚ame
[] = 
JSON_CONF_DEFAULT
;

1433 c⁄° * 
c⁄f_‚ame
 = 
deÁut_c⁄f_‚ame
;

1436 
±hªad_t
 
thrid_up
;

1437 
±hªad_t
 
thrid_down
;

1438 
±hªad_t
 
thrid_gps
;

1439 
±hªad_t
 
thrid_vÆid
;

1440 
±hªad_t
 
thrid_jô
;

1441 
±hªad_t
 
thrid_ss
;

1444 
addröfo
 
höts
;

1445 
addröfo
 *
ªsu…
;

1446 
addröfo
 *
q
;

1447 
ho°_«me
[64];

1448 
p‹t_«me
[64];

1451 
uöt32_t
 
˝_nb_rx_rcv
;

1452 
uöt32_t
 
˝_nb_rx_ok
;

1453 
uöt32_t
 
˝_nb_rx_bad
;

1454 
uöt32_t
 
˝_nb_rx_no¸c
;

1455 
uöt32_t
 
˝_up_pkt_fwd
;

1456 
uöt32_t
 
˝_up_√tw‹k_byã
;

1457 
uöt32_t
 
˝_up_∑ylﬂd_byã
;

1458 
uöt32_t
 
˝_up_dgøm_£¡
;

1459 
uöt32_t
 
˝_up_ack_rcv
;

1460 
uöt32_t
 
˝_dw_puŒ_£¡
;

1461 
uöt32_t
 
˝_dw_ack_rcv
;

1462 
uöt32_t
 
˝_dw_dgøm_rcv
;

1463 
uöt32_t
 
˝_dw_√tw‹k_byã
;

1464 
uöt32_t
 
˝_dw_∑ylﬂd_byã
;

1465 
uöt32_t
 
˝_nb_tx_ok
;

1466 
uöt32_t
 
˝_nb_tx_Áû
;

1467 
uöt32_t
 
˝_nb_tx_ªque°ed
 = 0;

1468 
uöt32_t
 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

1469 
uöt32_t
 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

1470 
uöt32_t
 
˝_nb_tx_ªje˘ed_too_œã
 = 0;

1471 
uöt32_t
 
˝_nb_tx_ªje˘ed_too_óæy
 = 0;

1472 
uöt32_t
 
˝_nb_bóc⁄_queued
 = 0;

1473 
uöt32_t
 
˝_nb_bóc⁄_£¡
 = 0;

1474 
uöt32_t
 
˝_nb_bóc⁄_ªje˘ed
 = 0;

1477 
boﬁ
 
co‹d_ok
 = 
Ál£
;

1478 
co‹d_s
 
˝_gps_co‹d
 = {0.0, 0.0, 0};

1481 
uöt32_t
 
åig_t°amp
;

1482 
uöt32_t
 
ö°_t°amp
;

1483 
uöt64_t
 
eui
;

1484 
ãm≥øtuª
;

1487 
time_t
 
t
;

1488 
°©_time°amp
[24];

1489 
rx_ok_øtio
;

1490 
rx_bad_øtio
;

1491 
rx_no¸c_øtio
;

1492 
up_ack_øtio
;

1493 
dw_ack_øtio
;

1496  (
i
 = 
	`gë›t
–
¨gc
, 
¨gv
, "hc:" )) != -1 )

1498  
i
 )

1501 
	`ußge
( );

1502  
EXIT_SUCCESS
;

1506 
c⁄f_‚ame
 = 
›èrg
;

1510 
	`¥ötf
( "ERROR:árgumentÖarsing options, use -h option for help\n" );

1511 
	`ußge
( );

1512  
EXIT_FAILURE
;

1517 
	`MSG
("*** Packë F‹w¨dî ***\nVîsi⁄: " 
VERSION_STRING
 "\n");

1518 
	`MSG
("*** SX1302 HALÜibøry vîsi⁄ infÿ***\n%s\n***\n", 
	`lgw_vîsi⁄_öfo
());

1521 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


1522 
	`MSG
("INFO: LittleÉndian host\n");

1523 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


1524 
	`MSG
("INFO: BigÉndian host\n");

1526 
	`MSG
("INFO: HostÉndianness unknown\n");

1530 i‡(
	`ac˚ss
(
c⁄f_‚ame
, 
R_OK
) == 0) {

1531 
	`MSG
("INFO: found c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
c⁄f_‚ame
);

1532 
x
 = 
	`∑r£_SX130x_c⁄figuøti⁄
(
c⁄f_‚ame
);

1533 i‡(
x
 != 0) {

1534 
	`exô
(
EXIT_FAILURE
);

1536 
x
 = 
	`∑r£_g©eway_c⁄figuøti⁄
(
c⁄f_‚ame
);

1537 i‡(
x
 != 0) {

1538 
	`exô
(
EXIT_FAILURE
);

1540 
x
 = 
	`∑r£_debug_c⁄figuøti⁄
(
c⁄f_‚ame
);

1541 i‡(
x
 != 0) {

1542 
	`MSG
("INFO:Ço debug configuration\n");

1545 
	`MSG
("ERROR: [maö] faûedÅÿfödány c⁄figuøti⁄ fûê«med %s\n", 
c⁄f_‚ame
);

1546 
	`exô
(
EXIT_FAILURE
);

1550 i‡(
gps_ây_∑th
[0] != '\0') {

1551 
i
 = 
	`lgw_gps_íabÀ
(
gps_ây_∑th
, "ubx7", 0, &
gps_ây_fd
);

1552 i‡(
i
 !
LGW_GPS_SUCCESS
) {

1553 
	`¥ötf
("WARNING: [maö] impossibÀÅÿ›í %†f‹ GPS syn¯(checkÖîmissi⁄s)\n", 
gps_ây_∑th
);

1554 
gps_íabÀd
 = 
Ál£
;

1555 
gps_ªf_vÆid
 = 
Ál£
;

1557 
	`¥ötf
("INFO: [maö] TTYÖ‹à%†›í f‹ GPS synchr⁄iz©i⁄\n", 
gps_ây_∑th
);

1558 
gps_íabÀd
 = 
åue
;

1559 
gps_ªf_vÆid
 = 
Ál£
;

1564 
	`tz£t
();

1570 
√t_mac_h
 = 
	`ht⁄l
((
uöt32_t
)(0xFFFFFFFF & (
lgwm
>>32)));

1571 
√t_mac_l
 = 
	`ht⁄l
((
uöt32_t
)(0xFFFFFFFF & 
lgwm
 ));

1574 
	`mem£t
(&
höts
, 0,  hints);

1575 
höts
.
ai_Ámûy
 = 
AF_INET
;

1576 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

1579 
i
 = 
	`gëaddröfo
(
£rv_addr
, 
£rv_p‹t_up
, &
höts
, &
ªsu…
);

1580 i‡(
i
 != 0) {

1581 
	`MSG
("ERROR: [up] gëaddröfÿ⁄áddªs†%†(PORT %sËªtu∫ed %s\n", 
£rv_addr
, 
£rv_p‹t_up
, 
	`gai_°ªº‹
(
i
));

1582 
	`exô
(
EXIT_FAILURE
);

1586 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1587 
sock_up
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
,q->
ai_¥Ÿocﬁ
);

1588 i‡(
sock_up
 == -1) ;

1591 i‡(
q
 =
NULL
) {

1592 
	`MSG
("ERROR: [up] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
£rv_addr
, 
£rv_p‹t_up
);

1593 
i
 = 1;

1594 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1595 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

1596 
	`MSG
("INFO: [up]Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

1597 ++
i
;

1599 
	`exô
(
EXIT_FAILURE
);

1603 
i
 = 
	`c⁄√˘
(
sock_up
, 
q
->
ai_addr
, q->
ai_addæí
);

1604 i‡(
i
 != 0) {

1605 
	`MSG
("ERROR: [up] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1606 
	`exô
(
EXIT_FAILURE
);

1608 
	`‰ìaddröfo
(
ªsu…
);

1611 
i
 = 
	`gëaddröfo
(
£rv_addr
, 
£rv_p‹t_down
, &
höts
, &
ªsu…
);

1612 i‡(
i
 != 0) {

1613 
	`MSG
("ERROR: [down] gëaddröfÿ⁄áddªs†%†’‹à%sËªtu∫ed %s\n", 
£rv_addr
, 
£rv_p‹t_down
, 
	`gai_°ªº‹
(
i
));

1614 
	`exô
(
EXIT_FAILURE
);

1618 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1619 
sock_down
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
,q->
ai_¥Ÿocﬁ
);

1620 i‡(
sock_down
 == -1) ;

1623 i‡(
q
 =
NULL
) {

1624 
	`MSG
("ERROR: [down] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
£rv_addr
, 
£rv_p‹t_down
);

1625 
i
 = 1;

1626 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1627 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

1628 
	`MSG
("INFO: [down]Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

1629 ++
i
;

1631 
	`exô
(
EXIT_FAILURE
);

1635 
i
 = 
	`c⁄√˘
(
sock_down
, 
q
->
ai_addr
, q->
ai_addæí
);

1636 i‡(
i
 != 0) {

1637 
	`MSG
("ERROR: [down] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1638 
	`exô
(
EXIT_FAILURE
);

1640 
	`‰ìaddröfo
(
ªsu…
);

1642 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

1644 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

1645 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

1646 
	`exô
(
EXIT_FAILURE
);

1650 
l
 = 0;Ü < 
LGW_IF_CHAIN_NB
;Ü++) {

1651 
m
 = 0; m < 8; m++) {

1652 
nb_pkt_log
[
l
][
m
] = 0;

1657 
i
 = 
	`lgw_°¨t
();

1658 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1659 
	`MSG
("INFO: [main] concentrator started,Öacket canÇow beÑeceived\n");

1661 
	`MSG
("ERROR: [main] failedÅo startÅhe concentrator\n");

1662 
	`exô
(
EXIT_FAILURE
);

1666 
i
 = 
	`lgw_gë_eui
(&
eui
);

1667 i‡(
i
 !
LGW_HAL_SUCCESS
) {

1668 
	`¥ötf
("ERROR: failedÅo get concentrator EUI\n");

1670 
	`¥ötf
("INFO: c⁄˚¡øt‹ EUI: 0x%016" 
PRIx64
 "\n", 
eui
);

1674 
i
 = 
	`±hªad_¸óã
(&
thrid_up
, 
NULL
, (* (*)(*))
thªad_up
, NULL);

1675 i‡(
i
 != 0) {

1676 
	`MSG
("ERROR: [main] impossibleÅo create upstreamÅhread\n");

1677 
	`exô
(
EXIT_FAILURE
);

1679 
i
 = 
	`±hªad_¸óã
(&
thrid_down
, 
NULL
, (* (*)(*))
thªad_down
, NULL);

1680 i‡(
i
 != 0) {

1681 
	`MSG
("ERROR: [main] impossibleÅo create downstreamÅhread\n");

1682 
	`exô
(
EXIT_FAILURE
);

1684 
i
 = 
	`±hªad_¸óã
(&
thrid_jô
, 
NULL
, (* (*)(*))
thªad_jô
, NULL);

1685 i‡(
i
 != 0) {

1686 
	`MSG
("ERROR: [main] impossibleÅo create JITÅhread\n");

1687 
	`exô
(
EXIT_FAILURE
);

1691 i‡(
•e˘øl_sˇn_∑øms
.
íabÀ
 =
åue
) {

1692 
i
 = 
	`±hªad_¸óã
(&
thrid_ss
, 
NULL
, (* (*)(*))
thªad_•e˘øl_sˇn
, NULL);

1693 i‡(
i
 != 0) {

1694 
	`MSG
("ERROR: [main] impossibleÅo create Spectral ScanÅhread\n");

1695 
	`exô
(
EXIT_FAILURE
);

1700 i‡(
gps_íabÀd
 =
åue
) {

1701 
i
 = 
	`±hªad_¸óã
(&
thrid_gps
, 
NULL
, (* (*)(*))
thªad_gps
, NULL);

1702 i‡(
i
 != 0) {

1703 
	`MSG
("ERROR: [main] impossibleÅo create GPSÅhread\n");

1704 
	`exô
(
EXIT_FAILURE
);

1706 
i
 = 
	`±hªad_¸óã
(&
thrid_vÆid
, 
NULL
, (* (*)(*))
thªad_vÆid
, NULL);

1707 i‡(
i
 != 0) {

1708 
	`MSG
("ERROR: [main] impossibleÅo create validationÅhread\n");

1709 
	`exô
(
EXIT_FAILURE
);

1714 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

1715 
siga˘
.
ß_Êags
 = 0;

1716 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

1717 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

1718 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

1719 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

1722 !
exô_sig
 && !
quô_sig
) {

1724 
	`waô_ms
(1000 * 
°©_öãrvÆ
);

1727 
t
 = 
	`time
(
NULL
);

1728 
	`°r·ime
(
°©_time°amp
,  sèt_time°amp, "%F %T %Z", 
	`gmtime
(&
t
));

1731 
	`±hªad_muãx_lock
(&
mx_mós_up
);

1732 
˝_nb_rx_rcv
 = 
mós_nb_rx_rcv
;

1733 
˝_nb_rx_ok
 = 
mós_nb_rx_ok
;

1734 
˝_nb_rx_bad
 = 
mós_nb_rx_bad
;

1735 
˝_nb_rx_no¸c
 = 
mós_nb_rx_no¸c
;

1736 
˝_up_pkt_fwd
 = 
mós_up_pkt_fwd
;

1737 
˝_up_√tw‹k_byã
 = 
mós_up_√tw‹k_byã
;

1738 
˝_up_∑ylﬂd_byã
 = 
mós_up_∑ylﬂd_byã
;

1739 
˝_up_dgøm_£¡
 = 
mós_up_dgøm_£¡
;

1740 
˝_up_ack_rcv
 = 
mós_up_ack_rcv
;

1741 
mós_nb_rx_rcv
 = 0;

1742 
mós_nb_rx_ok
 = 0;

1743 
mós_nb_rx_bad
 = 0;

1744 
mós_nb_rx_no¸c
 = 0;

1745 
mós_up_pkt_fwd
 = 0;

1746 
mós_up_√tw‹k_byã
 = 0;

1747 
mós_up_∑ylﬂd_byã
 = 0;

1748 
mós_up_dgøm_£¡
 = 0;

1749 
mós_up_ack_rcv
 = 0;

1750 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1751 i‡(
˝_nb_rx_rcv
 > 0) {

1752 
rx_ok_øtio
 = ()
˝_nb_rx_ok
 / ()
˝_nb_rx_rcv
;

1753 
rx_bad_øtio
 = ()
˝_nb_rx_bad
 / ()
˝_nb_rx_rcv
;

1754 
rx_no¸c_øtio
 = ()
˝_nb_rx_no¸c
 / ()
˝_nb_rx_rcv
;

1756 
rx_ok_øtio
 = 0.0;

1757 
rx_bad_øtio
 = 0.0;

1758 
rx_no¸c_øtio
 = 0.0;

1760 i‡(
˝_up_dgøm_£¡
 > 0) {

1761 
up_ack_øtio
 = ()
˝_up_ack_rcv
 / ()
˝_up_dgøm_£¡
;

1763 
up_ack_øtio
 = 0.0;

1767 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

1768 
˝_dw_puŒ_£¡
 = 
mós_dw_puŒ_£¡
;

1769 
˝_dw_ack_rcv
 = 
mós_dw_ack_rcv
;

1770 
˝_dw_dgøm_rcv
 = 
mós_dw_dgøm_rcv
;

1771 
˝_dw_√tw‹k_byã
 = 
mós_dw_√tw‹k_byã
;

1772 
˝_dw_∑ylﬂd_byã
 = 
mós_dw_∑ylﬂd_byã
;

1773 
˝_nb_tx_ok
 = 
mós_nb_tx_ok
;

1774 
˝_nb_tx_Áû
 = 
mós_nb_tx_Áû
;

1775 
˝_nb_tx_ªque°ed
 +
mós_nb_tx_ªque°ed
;

1776 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 +
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
;

1777 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 +
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
;

1778 
˝_nb_tx_ªje˘ed_too_œã
 +
mós_nb_tx_ªje˘ed_too_œã
;

1779 
˝_nb_tx_ªje˘ed_too_óæy
 +
mós_nb_tx_ªje˘ed_too_óæy
;

1780 
˝_nb_bóc⁄_queued
 +
mós_nb_bóc⁄_queued
;

1781 
˝_nb_bóc⁄_£¡
 +
mós_nb_bóc⁄_£¡
;

1782 
˝_nb_bóc⁄_ªje˘ed
 +
mós_nb_bóc⁄_ªje˘ed
;

1783 
mós_dw_puŒ_£¡
 = 0;

1784 
mós_dw_ack_rcv
 = 0;

1785 
mós_dw_dgøm_rcv
 = 0;

1786 
mós_dw_√tw‹k_byã
 = 0;

1787 
mós_dw_∑ylﬂd_byã
 = 0;

1788 
mós_nb_tx_ok
 = 0;

1789 
mós_nb_tx_Áû
 = 0;

1790 
mós_nb_tx_ªque°ed
 = 0;

1791 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

1792 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

1793 
mós_nb_tx_ªje˘ed_too_œã
 = 0;

1794 
mós_nb_tx_ªje˘ed_too_óæy
 = 0;

1795 
mós_nb_bóc⁄_queued
 = 0;

1796 
mós_nb_bóc⁄_£¡
 = 0;

1797 
mós_nb_bóc⁄_ªje˘ed
 = 0;

1798 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

1799 i‡(
˝_dw_puŒ_£¡
 > 0) {

1800 
dw_ack_øtio
 = ()
˝_dw_ack_rcv
 / ()
˝_dw_puŒ_£¡
;

1802 
dw_ack_øtio
 = 0.0;

1806 i‡(
gps_íabÀd
 =
åue
) {

1807 
	`±hªad_muãx_lock
(&
mx_mós_gps
);

1808 
co‹d_ok
 = 
gps_co‹d_vÆid
;

1809 
˝_gps_co‹d
 = 
mós_gps_co‹d
;

1810 
	`±hªad_muãx_u∆ock
(&
mx_mós_gps
);

1814 i‡(
gps_Áke_íabÀ
 =
åue
) {

1815 
˝_gps_co‹d
 = 
ª„ªn˚_co‹d
;

1819 
	`¥ötf
("\n##### %†#####\n", 
°©_time°amp
);

1820 
	`¥ötf
("### [UPSTREAM] ###\n");

1821 
	`¥ötf
("# RFÖackë†ª˚ived by c⁄˚¡øt‹: %u\n", 
˝_nb_rx_rcv
);

1822 
	`¥ötf
("# CRC_OK: %.2f%%, CRC_FAIL: %.2f%%, NO_CRC: %.2f%%\n", 100.0 * 
rx_ok_øtio
, 100.0 * 
rx_bad_øtio
, 100.0 * 
rx_no¸c_øtio
);

1823 
	`¥ötf
("# RFÖackë†f‹w¨ded: %u (%u byãs)\n", 
˝_up_pkt_fwd
, 
˝_up_∑ylﬂd_byã
);

1824 
	`¥ötf
("# PUSH_DATA d©agøm†£¡: %u (%u byãs)\n", 
˝_up_dgøm_£¡
, 
˝_up_√tw‹k_byã
);

1825 
	`¥ötf
("# PUSH_DATAácknowÀdged: %.2f%%\n", 100.0 * 
up_ack_øtio
);

1826 
	`¥ötf
("### [DOWNSTREAM] ###\n");

1827 
	`¥ötf
("# PULL_DATA sít: %u (%.2f%%ácknowÀdged)\n", 
˝_dw_puŒ_£¡
, 100.0 * 
dw_ack_øtio
);

1828 
	`¥ötf
("# PULL_RESP(⁄£Ëd©agøm†ª˚ived: %u (%u byãs)\n", 
˝_dw_dgøm_rcv
, 
˝_dw_√tw‹k_byã
);

1829 
	`¥ötf
("# RFÖackë†£¡Åÿc⁄˚¡øt‹: %u (%u byãs)\n", (
˝_nb_tx_ok
+
˝_nb_tx_Áû
), 
˝_dw_∑ylﬂd_byã
);

1830 
	`¥ötf
("# TXÉº‹s: %u\n", 
˝_nb_tx_Áû
);

1831 i‡(
˝_nb_tx_ªque°ed
 != 0 ) {

1832 
	`¥ötf
("# TXÑeje˘ed (cﬁlisi⁄Öackë): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_collision_packet);

1833 
	`¥ötf
("# TXÑeje˘ed (cﬁlisi⁄ bóc⁄): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_collision_beacon);

1834 
	`¥ötf
("# TXÑeje˘ed (toÿœã): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_too_œã
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_too_late);

1835 
	`¥ötf
("# TXÑeje˘ed (toÿóæy): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_too_óæy
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_too_early);

1837 
	`¥ötf
("### SX1302 Status ###\n");

1838 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

1839 
i
 = 
	`lgw_gë_ö°˙t
(&
ö°_t°amp
);

1840 
i
 |
	`lgw_gë_åig˙t
(&
åig_t°amp
);

1841 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

1842 i‡(
i
 !
LGW_HAL_SUCCESS
) {

1843 
	`¥ötf
("# SX1302 counter unknown\n");

1845 
	`¥ötf
("# SX1302 cou¡î (INST): %u\n", 
ö°_t°amp
);

1846 
	`¥ötf
("# SX1302 cou¡î (PPS): %u\n", 
åig_t°amp
);

1848 
	`¥ötf
("# BEACON queued: %u\n", 
˝_nb_bóc⁄_queued
);

1849 
	`¥ötf
("# BEACON síàsÿÁr: %u\n", 
˝_nb_bóc⁄_£¡
);

1850 
	`¥ötf
("# BEACONÑeje˘ed: %u\n", 
˝_nb_bóc⁄_ªje˘ed
);

1851 
	`¥ötf
("### [JIT] ###\n");

1853 
	`jô_¥öt_queue
 (&
jô_queue
[0], 
Ál£
, 
DEBUG_LOG
);

1854 
	`¥ötf
("#--------\n");

1855 
	`jô_¥öt_queue
 (&
jô_queue
[1], 
Ál£
, 
DEBUG_LOG
);

1856 
	`¥ötf
("### [GPS] ###\n");

1857 i‡(
gps_íabÀd
 =
åue
) {

1859 i‡(
gps_ªf_vÆid
 =
åue
) {

1860 
	`¥ötf
("# VÆidÅimêª„ªn˚ (age: %lò£c)\n", ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
));

1862 
	`¥ötf
("# InvÆidÅimêª„ªn˚ (age: %lò£c)\n", ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
));

1864 i‡(
co‹d_ok
 =
åue
) {

1865 
	`¥ötf
("# GPS co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
);

1867 
	`¥ötf
("#Ço valid GPS coordinatesávailable yet\n");

1869 } i‡(
gps_Áke_íabÀ
 =
åue
) {

1870 
	`¥ötf
("# GPS *FAKE* co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
);

1872 
	`¥ötf
("# GPS sync is disabled\n");

1874 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

1875 
i
 = 
	`lgw_gë_ãm≥øtuª
(&
ãm≥øtuª
);

1876 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

1877 i‡(
i
 !
LGW_HAL_SUCCESS
) {

1878 
	`¥ötf
("### ConcentratorÅemperature unknown ###\n");

1880 
	`¥ötf
("### C⁄˚¡øt‹Åem≥øtuª: %.0‡C ###\n", 
ãm≥øtuª
);

1882 
	`¥ötf
("##### END #####\n");

1885 
	`±hªad_muãx_lock
(&
mx_°©_ªp
);

1886 i‡(((
gps_íabÀd
 =
åue
Ë&& (
co‹d_ok
 =åue)Ë|| (
gps_Áke_íabÀ
 ==Årue)) {

1887 
	`¢¥ötf
(
°©us_ªp‹t
, 
STATUS_SIZE
, "\"°©\":{\"time\":\"%s\",\"œti\":%.5f,\"l⁄g\":%.5f,\"Æti\":%i,\"rxnb\":%u,\"rxok\":%u,\"rxfw\":%u,\"ackr\":%.1f,\"dwnb\":%u,\"txnb\":%u,\"ãmp\":%.1f}", 
°©_time°amp
, 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
, 
˝_nb_rx_rcv
, 
˝_nb_rx_ok
, 
˝_up_pkt_fwd
, 100.0 * 
up_ack_øtio
, 
˝_dw_dgøm_rcv
, 
˝_nb_tx_ok
, 
ãm≥øtuª
);

1889 
	`¢¥ötf
(
°©us_ªp‹t
, 
STATUS_SIZE
, "\"°©\":{\"time\":\"%s\",\"rxnb\":%u,\"rxok\":%u,\"rxfw\":%u,\"ackr\":%.1f,\"dwnb\":%u,\"txnb\":%u,\"ãmp\":%.1f}", 
°©_time°amp
, 
˝_nb_rx_rcv
, 
˝_nb_rx_ok
, 
˝_up_pkt_fwd
, 100.0 * 
up_ack_øtio
, 
˝_dw_dgøm_rcv
, 
˝_nb_tx_ok
, 
ãm≥øtuª
);

1891 
ªp‹t_ªady
 = 
åue
;

1892 
	`±hªad_muãx_u∆ock
(&
mx_°©_ªp
);

1896 
i
 = 
	`±hªad_joö
(
thrid_up
, 
NULL
);

1897 i‡(
i
 != 0) {

1898 
	`¥ötf
("ERROR: faûedÅÿjoö up°ªamÅhªad wôh %d - %s\n", 
i
, 
	`°ªº‹
(
î∫o
));

1900 
i
 = 
	`±hªad_joö
(
thrid_down
, 
NULL
);

1901 i‡(
i
 != 0) {

1902 
	`¥ötf
("ERROR: faûedÅÿjoö down°ªamÅhªad wôh %d - %s\n", 
i
, 
	`°ªº‹
(
î∫o
));

1904 
i
 = 
	`±hªad_joö
(
thrid_jô
, 
NULL
);

1905 i‡(
i
 != 0) {

1906 
	`¥ötf
("ERROR: faûedÅÿjoö JITÅhªad wôh %d - %s\n", 
i
, 
	`°ªº‹
(
î∫o
));

1908 i‡(
•e˘øl_sˇn_∑øms
.
íabÀ
 =
åue
) {

1909 
i
 = 
	`±hªad_joö
(
thrid_ss
, 
NULL
);

1910 i‡(
i
 != 0) {

1911 
	`¥ötf
("ERROR: faûedÅÿjoö S≥˘ø»Sˇ¿thªad wôh %d - %s\n", 
i
, 
	`°ªº‹
(
î∫o
));

1914 i‡(
gps_íabÀd
 =
åue
) {

1915 
	`±hªad_ˇn˚l
(
thrid_gps
);

1916 
	`±hªad_ˇn˚l
(
thrid_vÆid
);

1918 
i
 = 
	`lgw_gps_dißbÀ
(
gps_ây_fd
);

1919 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1920 
	`MSG
("INFO: GPS closed successfully\n");

1922 
	`MSG
("WARNING: failedÅo close GPS successfully\n");

1927 i‡(
exô_sig
) {

1929 
	`shutdown
(
sock_up
, 
SHUT_RDWR
);

1930 
	`shutdown
(
sock_down
, 
SHUT_RDWR
);

1932 
i
 = 
	`lgw_°›
();

1933 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1934 
	`MSG
("INFO: concentrator stopped successfully\n");

1936 
	`MSG
("WARNING: failedÅo stop concentrator successfully\n");

1940 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

1942 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

1943 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

1944 
	`exô
(
EXIT_FAILURE
);

1948 
	`MSG
("INFO: ExitingÖacket forwarderÖrogram\n");

1949 
	`exô
(
EXIT_SUCCESS
);

1950 
	}
}

1955 
	$thªad_up
() {

1956 
i
, 
j
, 
k
;

1957 
pkt_ö_dgøm
;

1958 
°©_time°amp
[24];

1959 
time_t
 
t
;

1962 
lgw_pkt_rx_s
 
rxpkt
[
NB_PKT_MAX
];

1963 
lgw_pkt_rx_s
 *
p
;

1964 
nb_pkt
;

1967 
boﬁ
 
ªf_ok
 = 
Ál£
;

1968 
åef
 
loˇl_ªf
;

1971 
uöt8_t
 
buff_up
[
TX_BUFF_SIZE
];

1972 
buff_ödex
;

1973 
uöt8_t
 
buff_ack
[32];

1976 
uöt8_t
 
tokí_h
;

1977 
uöt8_t
 
tokí_l
;

1980 
time•ec
 
£nd_time
;

1981 
time•ec
 
ªcv_time
;

1984 
time•ec
 
pkt_utc_time
;

1985 
tm
 * 
x
;

1986 
time•ec
 
pkt_gps_time
;

1987 
uöt64_t
 
pkt_gps_time_ms
;

1990 
boﬁ
 
£nd_ªp‹t
 = 
Ál£
;

1993 
uöt32_t
 
mŸe_addr
 = 0;

1994 
uöt16_t
 
mŸe_f˙t
 = 0;

1997 
i
 = 
	`£tsock›t
(
sock_up
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
push_timeout_hÆf
, Öush_timeout_half);

1998 i‡(
i
 != 0) {

1999 
	`MSG
("ERROR: [up] sësock›àªtu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

2000 
	`exô
(
EXIT_FAILURE
);

2004 
buff_up
[0] = 
PROTOCOL_VERSION
;

2005 
buff_up
[3] = 
PKT_PUSH_DATA
;

2006 *(
uöt32_t
 *)(
buff_up
 + 4Ë
√t_mac_h
;

2007 *(
uöt32_t
 *)(
buff_up
 + 8Ë
√t_mac_l
;

2009 !
exô_sig
 && !
quô_sig
) {

2012 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

2013 
nb_pkt
 = 
	`lgw_ª˚ive
(
NB_PKT_MAX
, 
rxpkt
);

2014 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

2015 i‡(
nb_pkt
 =
LGW_HAL_ERROR
) {

2016 
	`MSG
("ERROR: [up] failedÖacket fetch,Éxiting\n");

2017 
	`exô
(
EXIT_FAILURE
);

2021 
£nd_ªp‹t
 = 
ªp‹t_ªady
;

2025 i‡((
nb_pkt
 =0Ë&& (
£nd_ªp‹t
 =
Ál£
)) {

2026 
	`waô_ms
(
FETCH_SLEEP_MS
);

2031 i‡((
nb_pkt
 > 0Ë&& (
gps_íabÀd
 =
åue
)) {

2032 
	`±hªad_muãx_lock
(&
mx_timîef
);

2033 
ªf_ok
 = 
gps_ªf_vÆid
;

2034 
loˇl_ªf
 = 
time_ª„ªn˚_gps
;

2035 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2037 
ªf_ok
 = 
Ál£
;

2041 
t
 = 
	`time
(
NULL
);

2042 
	`°r·ime
(
°©_time°amp
,  sèt_time°amp, "%F %T %Z", 
	`gmtime
(&
t
));

2043 
	`MSG_DEBUG
(
DEBUG_PKT_FWD
, "\nCuºíàtime: %†\n", 
°©_time°amp
);

2046 
tokí_h
 = (
uöt8_t
)
	`ønd
();

2047 
tokí_l
 = (
uöt8_t
)
	`ønd
();

2048 
buff_up
[1] = 
tokí_h
;

2049 
buff_up
[2] = 
tokí_l
;

2050 
buff_ödex
 = 12;

2053 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"{\"rxpk\":[", 9);

2054 
buff_ödex
 += 9;

2057 
pkt_ö_dgøm
 = 0;

2058 
i
 = 0; i < 
nb_pkt
; ++i) {

2059 
p
 = &
rxpkt
[
i
];

2063 i‡(
p
->
size
 >= 8) {

2064 
mŸe_addr
 = 
p
->
∑ylﬂd
[1];

2065 
mŸe_addr
 |
p
->
∑ylﬂd
[2] << 8;

2066 
mŸe_addr
 |
p
->
∑ylﬂd
[3] << 16;

2067 
mŸe_addr
 |
p
->
∑ylﬂd
[4] << 24;

2069 
mŸe_f˙t
 = 
p
->
∑ylﬂd
[6];

2070 
mŸe_f˙t
 |
p
->
∑ylﬂd
[7] << 8;

2072 
mŸe_addr
 = 0;

2073 
mŸe_f˙t
 = 0;

2077 
	`±hªad_muãx_lock
(&
mx_mós_up
);

2078 
mós_nb_rx_rcv
 += 1;

2079 
p
->
°©us
) {

2080 
STAT_CRC_OK
:

2081 
mós_nb_rx_ok
 += 1;

2082 i‡(!
fwd_vÆid_pkt
) {

2083 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

2087 
STAT_CRC_BAD
:

2088 
mós_nb_rx_bad
 += 1;

2089 i‡(!
fwd_îr‹_pkt
) {

2090 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

2094 
STAT_NO_CRC
:

2095 
mós_nb_rx_no¸c
 += 1;

2096 i‡(!
fwd_no¸c_pkt
) {

2097 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

2102 
	`MSG
("WARNING: [up]Ñe˚ivedÖackë wôh unknow¿°©u†%u (sizê%u, moduœti⁄ %u, BW %u, DR %u, RSSI %.1f)\n", 
p
->
°©us
,Ö->
size
,Ö->
moduœti⁄
,Ö->
b™dwidth
,Ö->
d©¨©e
,Ö->
rssic
);

2103 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

2107 
mós_up_pkt_fwd
 += 1;

2108 
mós_up_∑ylﬂd_byã
 +
p
->
size
;

2109 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

2110 
	`¥ötf
–"\nINFO: Re˚ivedÖkà‰om mŸe: %08X (f˙t=%u)\n", 
mŸe_addr
, 
mŸe_f˙t
 );

2113 i‡(
pkt_ö_dgøm
 == 0) {

2114 
buff_up
[
buff_ödex
] = '{';

2115 ++
buff_ödex
;

2117 
buff_up
[
buff_ödex
] = ',';

2118 
buff_up
[
buff_ödex
+1] = '{';

2119 
buff_ödex
 += 2;

2123 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, "\"jvî\":%d", 
PROTOCOL_JSON_RXPK_FRAME_FORMAT
 );

2124 i‡(
j
 > 0) {

2125 
buff_ödex
 +
j
;

2127 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2128 
	`exô
(
EXIT_FAILURE
);

2132 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"tm°\":%u", 
p
->
cou¡_us
);

2133 i‡(
j
 > 0) {

2134 
buff_ödex
 +
j
;

2136 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2137 
	`exô
(
EXIT_FAILURE
);

2141 i‡(
ªf_ok
 =
åue
) {

2143 
j
 = 
	`lgw_˙t2utc
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_utc_time
);

2144 i‡(
j
 =
LGW_GPS_SUCCESS
) {

2146 
x
 = 
	`gmtime
(&(
pkt_utc_time
.
tv_£c
));

2147 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"time\":\"%04i-%02i-%02iT%02i:%02i:%02i.%06liZ\"", (
x
->
tm_yór
)+1900, (x->
tm_m⁄
)+1, x->
tm_mday
, x->
tm_hour
, x->
tm_mö
, x->
tm_£c
, (
pkt_utc_time
.
tv_n£c
)/1000);

2148 i‡(
j
 > 0) {

2149 
buff_ödex
 +
j
;

2151 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2152 
	`exô
(
EXIT_FAILURE
);

2156 
j
 = 
	`lgw_˙t2gps
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_gps_time
);

2157 i‡(
j
 =
LGW_GPS_SUCCESS
) {

2158 
pkt_gps_time_ms
 = 
pkt_gps_time
.
tv_£c
 * 1E3 +Ökt_gps_time.
tv_n£c
 / 1E6;

2159 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"tmms\":%" 
PRIu64
 "", 
pkt_gps_time_ms
);

2160 i‡(
j
 > 0) {

2161 
buff_ödex
 +
j
;

2163 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2164 
	`exô
(
EXIT_FAILURE
);

2170 i‡(
p
->
·ime_ª˚ived
 =
åue
) {

2171 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"·ime\":%u", 
p
->
·ime
);

2172 i‡(
j
 > 0) {

2173 
buff_ödex
 +
j
;

2175 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2176 
	`exô
(
EXIT_FAILURE
);

2181 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"ch™\":%1u,\"rfch\":%1u,\"‰eq\":%.6lf,\"mid\":%2u", 
p
->
if_chaö
,Ö->
rf_chaö
, ((Ì->
‰eq_hz
 / 1e6),Ö->
modem_id
);

2182 i‡(
j
 > 0) {

2183 
buff_ödex
 +
j
;

2185 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2186 
	`exô
(
EXIT_FAILURE
);

2190 
p
->
°©us
) {

2191 
STAT_CRC_OK
:

2192 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":1", 9);

2193 
buff_ödex
 += 9;

2195 
STAT_CRC_BAD
:

2196 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":-1", 10);

2197 
buff_ödex
 += 10;

2199 
STAT_NO_CRC
:

2200 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":0", 9);

2201 
buff_ödex
 += 9;

2204 
	`MSG
("ERROR: [up]Ñe˚ivedÖackë wôh unknow¿°©u†0x%02X\n", 
p
->
°©us
);

2205 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":?", 9);

2206 
buff_ödex
 += 9;

2207 
	`exô
(
EXIT_FAILURE
);

2211 i‡(
p
->
moduœti⁄
 =
MOD_LORA
) {

2212 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"LORA\"", 14);

2213 
buff_ödex
 += 14;

2216 
p
->
d©¨©e
) {

2217 
DR_LORA_SF5
:

2218 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF5", 12);

2219 
buff_ödex
 += 12;

2221 
DR_LORA_SF6
:

2222 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF6", 12);

2223 
buff_ödex
 += 12;

2225 
DR_LORA_SF7
:

2226 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF7", 12);

2227 
buff_ödex
 += 12;

2229 
DR_LORA_SF8
:

2230 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF8", 12);

2231 
buff_ödex
 += 12;

2233 
DR_LORA_SF9
:

2234 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF9", 12);

2235 
buff_ödex
 += 12;

2237 
DR_LORA_SF10
:

2238 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF10", 13);

2239 
buff_ödex
 += 13;

2241 
DR_LORA_SF11
:

2242 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF11", 13);

2243 
buff_ödex
 += 13;

2245 
DR_LORA_SF12
:

2246 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF12", 13);

2247 
buff_ödex
 += 13;

2250 
	`MSG
("ERROR: [up]Ü‹®∑ckë wôh unknow¿d©¨©ê0x%02X\n", 
p
->
d©¨©e
);

2251 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF?", 12);

2252 
buff_ödex
 += 12;

2253 
	`exô
(
EXIT_FAILURE
);

2255 
p
->
b™dwidth
) {

2256 
BW_125KHZ
:

2257 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW125\"", 6);

2258 
buff_ödex
 += 6;

2260 
BW_250KHZ
:

2261 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW250\"", 6);

2262 
buff_ödex
 += 6;

2264 
BW_500KHZ
:

2265 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW500\"", 6);

2266 
buff_ödex
 += 6;

2269 
	`MSG
("ERROR: [up]Ü‹®∑ckë wôh unknow¿b™dwidth 0x%02X\n", 
p
->
b™dwidth
);

2270 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW?\"", 4);

2271 
buff_ödex
 += 4;

2272 
	`exô
(
EXIT_FAILURE
);

2276 
p
->
codî©e
) {

2277 
CR_LORA_4_5
:

2278 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/5\"", 13);

2279 
buff_ödex
 += 13;

2281 
CR_LORA_4_6
:

2282 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/6\"", 13);

2283 
buff_ödex
 += 13;

2285 
CR_LORA_4_7
:

2286 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/7\"", 13);

2287 
buff_ödex
 += 13;

2289 
CR_LORA_4_8
:

2290 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/8\"", 13);

2291 
buff_ödex
 += 13;

2294 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"OFF\"", 13);

2295 
buff_ödex
 += 13;

2298 
	`MSG
("ERROR: [up]Ü‹®∑ckë wôh unknow¿codî©ê0x%02X\n", 
p
->
codî©e
);

2299 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"?\"", 11);

2300 
buff_ödex
 += 11;

2301 
	`exô
(
EXIT_FAILURE
);

2305 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"rssis\":%.0f", 
	`roundf
(
p
->
rssis
));

2306 i‡(
j
 > 0) {

2307 
buff_ödex
 +
j
;

2309 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2310 
	`exô
(
EXIT_FAILURE
);

2314 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"l¢r\":%.1f", 
p
->
¢r
);

2315 i‡(
j
 > 0) {

2316 
buff_ödex
 +
j
;

2318 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2319 
	`exô
(
EXIT_FAILURE
);

2323 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"foff\":%d", 
p
->
‰eq_off£t
);

2324 i‡(
j
 > 0) {

2325 
buff_ödex
 +
j
;

2327 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2328 
	`exô
(
EXIT_FAILURE
);

2330 } i‡(
p
->
moduœti⁄
 =
MOD_FSK
) {

2331 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"FSK\"", 13);

2332 
buff_ödex
 += 13;

2335 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"d©r\":%u", 
p
->
d©¨©e
);

2336 i‡(
j
 > 0) {

2337 
buff_ödex
 +
j
;

2339 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2340 
	`exô
(
EXIT_FAILURE
);

2343 
	`MSG
("ERROR: [up]Ñe˚ivedÖackë wôh unknow¿moduœti⁄ 0x%02X\n", 
p
->
moduœti⁄
);

2344 
	`exô
(
EXIT_FAILURE
);

2348 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"rssi\":%.0f,\"size\":%u", 
	`roundf
(
p
->
rssic
),Ö->
size
);

2349 i‡(
j
 > 0) {

2350 
buff_ödex
 +
j
;

2352 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

2353 
	`exô
(
EXIT_FAILURE
);

2357 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"data\":\"", 9);

2358 
buff_ödex
 += 9;

2359 
j
 = 
	`bö_to_b64
(
p
->
∑ylﬂd
,Ö->
size
, (*)(
buff_up
 + 
buff_ödex
), 341);

2360 i‡(
j
>=0) {

2361 
buff_ödex
 +
j
;

2363 
	`MSG
("ERROR: [up] bö_to_b64 faûedÜöê%u\n", (
__LINE__
 - 5));

2364 
	`exô
(
EXIT_FAILURE
);

2366 
buff_up
[
buff_ödex
] = '"';

2367 ++
buff_ödex
;

2370 
buff_up
[
buff_ödex
] = '}';

2371 ++
buff_ödex
;

2372 ++
pkt_ö_dgøm
;

2374 i‡(
p
->
moduœti⁄
 =
MOD_LORA
) {

2376 
nb_pkt_log
[
p
->
if_chaö
][p->
d©¨©e
 - 5] += 1;

2377 
nb_pkt_ª˚ived_l‹a
 += 1;

2380 
k
 = 0; k < 
debugc⁄f
.
nb_ªf_∑ylﬂd
; k++) {

2381 i‡((
p
->
∑ylﬂd
[0] =(
uöt8_t
)(
debugc⁄f
.
ªf_∑ylﬂd
[
k
].
id
 >> 24)) &&

2382 (
p
->
∑ylﬂd
[1] =(
uöt8_t
)(
debugc⁄f
.
ªf_∑ylﬂd
[
k
].
id
 >> 16)) &&

2383 (
p
->
∑ylﬂd
[2] =(
uöt8_t
)(
debugc⁄f
.
ªf_∑ylﬂd
[
k
].
id
 >> 8)) &&

2384 (
p
->
∑ylﬂd
[3] =(
uöt8_t
)(
debugc⁄f
.
ªf_∑ylﬂd
[
k
].
id
 >> 0))) {

2385 
nb_pkt_ª˚ived_ªf
[
k
] += 1;

2388 } i‡(
p
->
moduœti⁄
 =
MOD_FSK
) {

2389 
nb_pkt_log
[
p
->
if_chaö
][0] += 1;

2390 
nb_pkt_ª˚ived_fsk
 += 1;

2397 
l
, 
m
;

2398 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "\n");

2399 
l
 = 0;Ü < (
LGW_IF_CHAIN_NB
 - 1);Ü++) {

2400 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "CH%d: ", 
l
);

2401 
m
 = 0; m < 8; m++) {

2402 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "\t%d", 
nb_pkt_log
[
l
][
m
]);

2404 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "\n");

2406 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "FSK: \t%d", 
nb_pkt_log
[9][0]);

2407 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "\n");

2408 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "TŸÆÇumbî o‡LoR®∑ckëÑe˚ived: %u\n", 
nb_pkt_ª˚ived_l‹a
);

2409 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "TŸÆÇumbî o‡FSKÖackëÑe˚ived: %u\n", 
nb_pkt_ª˚ived_fsk
);

2410 
l
 = 0;Ü < 
debugc⁄f
.
nb_ªf_∑ylﬂd
;Ü++) {

2411 
	`MSG_PRINTF
(
DEBUG_PKT_FWD
, "TŸÆÇumbî o‡LoR®∑ckëÑe˚ived from 0x%08X: %u\n", 
debugc⁄f
.
ªf_∑ylﬂd
[
l
].
id
, 
nb_pkt_ª˚ived_ªf
[l]);

2416 i‡(
pkt_ö_dgøm
 == 0) {

2417 i‡(
£nd_ªp‹t
 =
åue
) {

2419 
buff_ödex
 -= 8;

2426 
buff_up
[
buff_ödex
] = ']';

2427 ++
buff_ödex
;

2429 i‡(
£nd_ªp‹t
 =
åue
) {

2430 
buff_up
[
buff_ödex
] = ',';

2431 ++
buff_ödex
;

2436 i‡(
£nd_ªp‹t
 =
åue
) {

2437 
	`±hªad_muãx_lock
(&
mx_°©_ªp
);

2438 
ªp‹t_ªady
 = 
Ál£
;

2439 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, "%s", 
°©us_ªp‹t
);

2440 
	`±hªad_muãx_u∆ock
(&
mx_°©_ªp
);

2441 i‡(
j
 > 0) {

2442 
buff_ödex
 +
j
;

2444 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 5));

2445 
	`exô
(
EXIT_FAILURE
);

2450 
buff_up
[
buff_ödex
] = '}';

2451 ++
buff_ödex
;

2452 
buff_up
[
buff_ödex
] = 0;

2454 
	`¥ötf
("\nJSON up: %s\n", (*)(
buff_up
 + 12));

2457 
	`£nd
(
sock_up
, (*)
buff_up
, 
buff_ödex
, 0);

2458 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

2459 
	`±hªad_muãx_lock
(&
mx_mós_up
);

2460 
mós_up_dgøm_£¡
 += 1;

2461 
mós_up_√tw‹k_byã
 +
buff_ödex
;

2464 
i
=0; i<2; ++i) {

2465 
j
 = 
	`ªcv
(
sock_up
, (*)
buff_ack
,  buff_ack, 0);

2466 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

2467 i‡(
j
 == -1) {

2468 i‡(
î∫o
 =
EAGAIN
) {

2473 } i‡((
j
 < 4Ë|| (
buff_ack
[0] !
PROTOCOL_VERSION
Ë|| (buff_ack[3] !
PKT_PUSH_ACK
)) {

2476 } i‡((
buff_ack
[1] !
tokí_h
Ë|| (buff_ack[2] !
tokí_l
)) {

2480 
	`MSG
("INFO: [up] PUSH_ACKÑe˚ived i¿%òms\n", ()(1000 * 
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
)));

2481 
mós_up_ack_rcv
 += 1;

2485 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

2487 
	`MSG
("\nINFO: End of upstreamÅhread\n");

2488 
	}
}

2493 
	$gë_tx_gaö_lut_ödex
(
uöt8_t
 
rf_chaö
, 
öt8_t
 
rf_powî
, uöt8_à* 
lut_ödex
) {

2494 
uöt8_t
 
pow_ödex
;

2495 
cuºít_be°_ödex
 = -1;

2496 
uöt8_t
 
cuºít_be°_m©ch
 = 0xFF;

2497 
diff
;

2500 i‡(
lut_ödex
 =
NULL
) {

2501 
	`MSG
("ERROR: %†- wr⁄gÖ¨amëî\n", 
__FUNCTION__
);

2506 
pow_ödex
 = 0;Öow_ödex < 
txlut
[
rf_chaö
].
size
;Öow_index++) {

2507 
diff
 = 
rf_powî
 - 
txlut
[
rf_chaö
].
lut
[
pow_ödex
].rf_power;

2508 i‡(
diff
 < 0) {

2513 i‡((
cuºít_be°_ödex
 =-1Ë|| (
diff
 < 
cuºít_be°_m©ch
)) {

2514 
cuºít_be°_m©ch
 = 
diff
;

2515 
cuºít_be°_ödex
 = 
pow_ödex
;

2521 i‡(
cuºít_be°_ödex
 > -1) {

2522 *
lut_ödex
 = (
uöt8_t
)
cuºít_be°_ödex
;

2524 *
lut_ödex
 = 0;

2525 
	`MSG
("ERROR: %†- faûedÅÿfödÅx gaöÜuàödex\n", 
__FUNCTION__
);

2530 
	}
}

2532 
	$thªad_down
() {

2533 
i
;

2536 
lgw_pkt_tx_s
 
txpkt
;

2537 
boﬁ
 
£¡_immedüã
 = 
Ál£
;

2540 
time•ec
 
£nd_time
;

2541 
time•ec
 
ªcv_time
;

2544 
uöt8_t
 
buff_down
[1000];

2545 
uöt8_t
 
buff_ªq
[12];

2546 
msg_Àn
;

2549 
uöt8_t
 
tokí_h
;

2550 
uöt8_t
 
tokí_l
;

2551 
boﬁ
 
ªq_ack
 = 
Ál£
;

2554 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

2555 
JSON_Obje˘
 *
txpk_obj
 = 
NULL
;

2556 
JSON_VÆue
 *
vÆ
 = 
NULL
;

2557 c⁄° *
°r
;

2558 
x0
, 
x1
;

2559 
uöt64_t
 
x2
;

2560 
x3
, 
x4
;

2563 
åef
 
loˇl_ªf
;

2564 
time•ec
 
gps_tx
;

2567 
lgw_pkt_tx_s
 
bóc⁄_pkt
;

2568 
uöt8_t
 
bóc⁄_ch™
;

2569 
uöt8_t
 
bóc⁄_lo›
;

2570 
size_t
 
bóc⁄_RFU1_size
 = 0;

2571 
size_t
 
bóc⁄_RFU2_size
 = 0;

2572 
uöt8_t
 
bóc⁄_pyld_idx
 = 0;

2573 
time_t
 
diff_bóc⁄_time
;

2574 
time•ec
 
√xt_bóc⁄_gps_time
;

2575 
time•ec
 
œ°_bóc⁄_gps_time
;

2576 
ªåy
;

2579 
öt32_t
 
fõld_œtôude
;

2580 
öt32_t
 
fõld_l⁄gôude
;

2581 
uöt16_t
 
fõld_¸c1
, 
fõld_¸c2
;

2584 
uöt32_t
 
autoquô_˙t
 = 0;

2587 
uöt32_t
 
cuºít_c⁄˚¡øt‹_time
;

2588 
jô_îr‹_e
 
jô_ªsu…
 = 
JIT_ERROR_OK
;

2589 
jô_pkt_ty≥_e
 
dow∆ök_ty≥
;

2590 
jô_îr‹_e
 
w¨nög_ªsu…
 = 
JIT_ERROR_OK
;

2591 
öt32_t
 
w¨nög_vÆue
 = 0;

2592 
uöt8_t
 
tx_lut_idx
 = 0;

2595 
i
 = 
	`£tsock›t
(
sock_down
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
puŒ_timeout
, Öull_timeout);

2596 i‡(
i
 != 0) {

2597 
	`MSG
("ERROR: [down] sësock›àªtu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

2598 
	`exô
(
EXIT_FAILURE
);

2602 
buff_ªq
[0] = 
PROTOCOL_VERSION
;

2603 
buff_ªq
[3] = 
PKT_PULL_DATA
;

2604 *(
uöt32_t
 *)(
buff_ªq
 + 4Ë
√t_mac_h
;

2605 *(
uöt32_t
 *)(
buff_ªq
 + 8Ë
√t_mac_l
;

2608 
œ°_bóc⁄_gps_time
.
tv_£c
 = 0;

2609 
œ°_bóc⁄_gps_time
.
tv_n£c
 = 0;

2612 
bóc⁄_pkt
.
tx_mode
 = 
ON_GPS
;

2613 
bóc⁄_pkt
.
rf_chaö
 = 0;

2614 
bóc⁄_pkt
.
rf_powî
 = 
bóc⁄_powî
;

2615 
bóc⁄_pkt
.
moduœti⁄
 = 
MOD_LORA
;

2616 
bóc⁄_bw_hz
) {

2618 
bóc⁄_pkt
.
b™dwidth
 = 
BW_125KHZ
;

2621 
bóc⁄_pkt
.
b™dwidth
 = 
BW_500KHZ
;

2625 
	`MSG
("ERROR: unsupported bandwidth for beacon\n");

2626 
	`exô
(
EXIT_FAILURE
);

2628 
bóc⁄_d©¨©e
) {

2630 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF8
;

2631 
bóc⁄_RFU1_size
 = 1;

2632 
bóc⁄_RFU2_size
 = 3;

2635 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF9
;

2636 
bóc⁄_RFU1_size
 = 2;

2637 
bóc⁄_RFU2_size
 = 0;

2640 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF10
;

2641 
bóc⁄_RFU1_size
 = 3;

2642 
bóc⁄_RFU2_size
 = 1;

2645 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF12
;

2646 
bóc⁄_RFU1_size
 = 5;

2647 
bóc⁄_RFU2_size
 = 3;

2651 
	`MSG
("ERROR: unsupported datarate for beacon\n");

2652 
	`exô
(
EXIT_FAILURE
);

2654 
bóc⁄_pkt
.
size
 = 
bóc⁄_RFU1_size
 + 4 + 2 + 7 + 
bóc⁄_RFU2_size
 + 2;

2655 
bóc⁄_pkt
.
codî©e
 = 
CR_LORA_4_5
;

2656 
bóc⁄_pkt
.
övît_pﬁ
 = 
Ál£
;

2657 
bóc⁄_pkt
.
¥ómbÀ
 = 10;

2658 
bóc⁄_pkt
.
no_¸c
 = 
åue
;

2659 
bóc⁄_pkt
.
no_hódî
 = 
åue
;

2662 
i
 = 0; i < ()
bóc⁄_RFU1_size
; i++) {

2663 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0x0;

2667 
bóc⁄_pyld_idx
 += 4;

2668 
bóc⁄_pyld_idx
 += 2;

2671 
fõld_œtôude
 = (
öt32_t
)((
ª„ªn˚_co‹d
.
œt
 / 90.0) * ()(1<<23));

2672 i‡(
fõld_œtôude
 > (
öt32_t
)0x007FFFFF) {

2673 
fõld_œtôude
 = (
öt32_t
)0x007FFFFF;

2674 } i‡(
fõld_œtôude
 < (
öt32_t
)0xFF800000) {

2675 
fõld_œtôude
 = (
öt32_t
)0xFF800000;

2677 
fõld_l⁄gôude
 = (
öt32_t
)((
ª„ªn˚_co‹d
.
l⁄
 / 180.0) * ()(1<<23));

2678 i‡(
fõld_l⁄gôude
 > (
öt32_t
)0x007FFFFF) {

2679 
fõld_l⁄gôude
 = (
öt32_t
)0x007FFFFF;

2680 } i‡(
fõld_l⁄gôude
 < (
öt32_t
)0xFF800000) {

2681 
fõld_l⁄gôude
 = (
öt32_t
)0xFF800000;

2685 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 
bóc⁄_öfodesc
;

2686 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_œtôude
;

2687 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_œtôude
 >> 8);

2688 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_œtôude
 >> 16);

2689 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_l⁄gôude
;

2690 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_l⁄gôude
 >> 8);

2691 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_l⁄gôude
 >> 16);

2694 
i
 = 0; i < ()
bóc⁄_RFU2_size
; i++) {

2695 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0x0;

2699 
fõld_¸c2
 = 
	`¸c16
((
bóc⁄_pkt
.
∑ylﬂd
 + 6 + 
bóc⁄_RFU1_size
), 7 + 
bóc⁄_RFU2_size
);

2700 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_¸c2
;

2701 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_¸c2
 >> 8);

2704 
	`jô_queue_öô
(&
jô_queue
[0]);

2705 
	`jô_queue_öô
(&
jô_queue
[1]);

2707 !
exô_sig
 && !
quô_sig
) {

2710 i‡((
autoquô_thªshﬁd
 > 0Ë&& (
autoquô_˙t
 >=áutoquit_threshold)) {

2711 
exô_sig
 = 
åue
;

2712 
	`MSG
("INFO: [down]Åhêœ° %u PULL_DATA wîênŸ ACKed,Éxôögáµliˇti⁄\n", 
autoquô_thªshﬁd
);

2717 
tokí_h
 = (
uöt8_t
)
	`ønd
();

2718 
tokí_l
 = (
uöt8_t
)
	`ønd
();

2719 
buff_ªq
[1] = 
tokí_h
;

2720 
buff_ªq
[2] = 
tokí_l
;

2723 
	`£nd
(
sock_down
, (*)
buff_ªq
,  buff_req, 0);

2724 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

2725 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2726 
mós_dw_puŒ_£¡
 += 1;

2727 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2728 
ªq_ack
 = 
Ál£
;

2729 
autoquô_˙t
++;

2732 
ªcv_time
 = 
£nd_time
;

2733 (()
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
Ë< 
kì∑live_time
Ë&& !
exô_sig
 && !
quô_sig
) {

2736 
msg_Àn
 = 
	`ªcv
(
sock_down
, (*)
buff_down
, ( buff_down)-1, 0);

2737 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

2740 
bóc⁄_lo›
 = 
JIT_NUM_BEACON_IN_QUEUE
 - 
jô_queue
[0].
num_bóc⁄
;

2741 
ªåy
 = 0;

2742 
bóc⁄_lo›
 && (
bóc⁄_≥riod
 != 0)) {

2743 
	`±hªad_muãx_lock
(&
mx_timîef
);

2745 i‡((
gps_ªf_vÆid
 =
åue
Ë&& (
xèl_c‹ª˘_ok
 ==Årue)) {

2750 i‡(
œ°_bóc⁄_gps_time
.
tv_£c
 == 0) {

2752 
diff_bóc⁄_time
 = 
time_ª„ªn˚_gps
.
gps
.
tv_£c
 % ((
time_t
)
bóc⁄_≥riod
);

2753 
√xt_bóc⁄_gps_time
.
tv_£c
 = 
time_ª„ªn˚_gps
.
gps
.tv_sec +

2754 ((
time_t
)
bóc⁄_≥riod
 - 
diff_bóc⁄_time
);

2757 
√xt_bóc⁄_gps_time
.
tv_£c
 = 
œ°_bóc⁄_gps_time
.tv_£¯+ 
bóc⁄_≥riod
;

2760 
√xt_bóc⁄_gps_time
.
tv_£c
 +(
ªåy
 * 
bóc⁄_≥riod
);

2761 
√xt_bóc⁄_gps_time
.
tv_n£c
 = 0;

2763 #i‡
DEBUG_BEACON


2765 
time_t
 
time_unix
;

2767 
time_unix
 = 
time_ª„ªn˚_gps
.
gps
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2768 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-now : %s", 
	`˘ime
(&
time_unix
));

2769 
time_unix
 = 
œ°_bóc⁄_gps_time
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2770 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-œ°: %s", 
	`˘ime
(&
time_unix
));

2771 
time_unix
 = 
√xt_bóc⁄_gps_time
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2772 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-√xt: %s", 
	`˘ime
(&
time_unix
));

2777 
	`lgw_gps2˙t
(
time_ª„ªn˚_gps
, 
√xt_bóc⁄_gps_time
, &(
bóc⁄_pkt
.
cou¡_us
));

2778 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2781 i‡(
bóc⁄_‰eq_nb
 > 1) {

2782 
bóc⁄_ch™
 = (
√xt_bóc⁄_gps_time
.
tv_£c
 / 
bóc⁄_≥riod
Ë% 
bóc⁄_‰eq_nb
;

2784 
bóc⁄_ch™
 = 0;

2787 
bóc⁄_pkt
.
‰eq_hz
 = 
bóc⁄_‰eq_hz
 + (
bóc⁄_ch™
 * 
bóc⁄_‰eq_°ï
);

2790 
bóc⁄_pyld_idx
 = 
bóc⁄_RFU1_size
;

2791 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
√xt_bóc⁄_gps_time
.
tv_£c
;

2792 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 8);

2793 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 16);

2794 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 24);

2797 
fõld_¸c1
 = 
	`¸c16
(
bóc⁄_pkt
.
∑ylﬂd
, 4 + 
bóc⁄_RFU1_size
);

2798 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_¸c1
;

2799 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_¸c1
 >> 8);

2802 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

2803 
	`lgw_gë_ö°˙t
(&
cuºít_c⁄˚¡øt‹_time
);

2804 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

2805 
jô_ªsu…
 = 
	`jô_íqueue
(&
jô_queue
[0], 
cuºít_c⁄˚¡øt‹_time
, &
bóc⁄_pkt
, 
JIT_PKT_TYPE_BEACON
);

2806 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2808 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2809 
mós_nb_bóc⁄_queued
 += 1;

2810 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2813 
bóc⁄_lo›
--;

2814 
ªåy
 = 0;

2815 
œ°_bóc⁄_gps_time
.
tv_£c
 = 
√xt_bóc⁄_gps_time
.tv_sec;

2818 
	`MSG
("INFO: Bóc⁄ queued (cou¡_us=%u, fªq_hz=%u, size=%u):\n", 
bóc⁄_pkt
.
cou¡_us
, bóc⁄_pkt.
‰eq_hz
, bóc⁄_pkt.
size
);

2819 
	`¥ötf
( " => " );

2820 
i
 = 0; i < 
bóc⁄_pkt
.
size
; ++i) {

2821 
	`MSG
("%02X ", 
bóc⁄_pkt
.
∑ylﬂd
[
i
]);

2823 
	`MSG
("\n");

2825 
	`MSG_DEBUG
(
DEBUG_BEACON
, "--> bóc⁄ queuög faûed wôh %d\n", 
jô_ªsu…
);

2827 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2828 i‡(
jô_ªsu…
 !
JIT_ERROR_COLLISION_BEACON
) {

2829 
mós_nb_bóc⁄_ªje˘ed
 += 1;

2831 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2835 
ªåy
++;

2836 
	`MSG_DEBUG
(
DEBUG_BEACON
, "--> bóc⁄ queuögÑëry=%d\n", 
ªåy
);

2839 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2845 i‡(
msg_Àn
 == -1) {

2851 i‡((
msg_Àn
 < 4Ë|| (
buff_down
[0] !
PROTOCOL_VERSION
Ë|| ((buff_down[3] !
PKT_PULL_RESP
Ë&& (buff_down[3] !
PKT_PULL_ACK
))) {

2852 
	`MSG
("WARNING: [down] ignoring invalidÖacketÜen=%d,Örotocol_version=%d, id=%d\n",

2853 
msg_Àn
, 
buff_down
[0], buff_down[3]);

2858 i‡(
buff_down
[3] =
PKT_PULL_ACK
) {

2859 i‡((
buff_down
[1] =
tokí_h
Ë&& (buff_down[2] =
tokí_l
)) {

2860 i‡(
ªq_ack
) {

2861 
	`MSG
("INFO: [down] duplicate ACKÑeceived :)\n");

2863 
ªq_ack
 = 
åue
;

2864 
autoquô_˙t
 = 0;

2865 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2866 
mós_dw_ack_rcv
 += 1;

2867 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2868 
	`MSG
("INFO: [down] PULL_ACKÑe˚ived i¿%òms\n", ()(1000 * 
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
)));

2871 
	`MSG
("INFO: [down]Ñeceived out-of-sync ACK\n");

2877 
buff_down
[
msg_Àn
] = 0;

2878 
	`MSG
("INFO: [down] PULL_RESPÑe˚ived -Åokí[%d:%d] :)\n", 
buff_down
[1], buff_down[2]);

2879 
	`¥ötf
("\nJSON down: %s\n", (*)(
buff_down
 + 4));

2882 
	`mem£t
(&
txpkt
, 0, Åxpkt);

2883 
roŸ_vÆ
 = 
	`js⁄_∑r£_°rög_wôh_commíts
((c⁄° *)(
buff_down
 + 4));

2884 i‡(
roŸ_vÆ
 =
NULL
) {

2885 
	`MSG
("WARNING: [down] invalid JSON, TXáborted\n");

2890 
txpk_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), "txpk");

2891 i‡(
txpk_obj
 =
NULL
) {

2892 
	`MSG
("WARNING: [down]Ço \"txpk\" object in JSON, TXáborted\n");

2893 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2898 
i
 = 
	`js⁄_obje˘_gë_boﬁón
(
txpk_obj
,"imme");

2899 i‡(
i
 == 1) {

2901 
£¡_immedüã
 = 
åue
;

2902 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
;

2903 
	`MSG
("INFO: [down]áÖacket will be sent in \"immediate\" mode\n");

2905 
£¡_immedüã
 = 
Ál£
;

2906 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"tmst");

2907 i‡(
vÆ
 !
NULL
) {

2909 
txpkt
.
cou¡_us
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2912 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
;

2915 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
, "tmms");

2916 i‡(
vÆ
 =
NULL
) {

2917 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.tmst\" or \"txpk.tmms\" objects in JSON, TXáborted\n");

2918 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2921 i‡(
gps_íabÀd
 =
åue
) {

2922 
	`±hªad_muãx_lock
(&
mx_timîef
);

2923 i‡(
gps_ªf_vÆid
 =
åue
) {

2924 
loˇl_ªf
 = 
time_ª„ªn˚_gps
;

2925 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2927 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2928 
	`MSG
("WARNING: [down]Ço valid GPSÅimeÑeference yet, impossibleÅo sendÖacket on specific GPSÅime, TXáborted\n");

2929 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2932 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
JIT_ERROR_GPS_UNLOCKED
, 0);

2936 
	`MSG
("WARNING: [down] GPS disabled, impossibleÅo sendÖacket on specific GPSÅime, TXáborted\n");

2937 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2940 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
JIT_ERROR_GPS_UNLOCKED
, 0);

2945 
x2
 = (
uöt64_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2948 
x3
 = 
	`modf
(()
x2
/1E3, &
x4
);

2949 
gps_tx
.
tv_£c
 = (
time_t
)
x4
;

2950 
gps_tx
.
tv_n£c
 = ()(
x3
 * 1E9);

2953 
i
 = 
	`lgw_gps2˙t
(
loˇl_ªf
, 
gps_tx
, &(
txpkt
.
cou¡_us
));

2954 i‡(
i
 !
LGW_GPS_SUCCESS
) {

2955 
	`MSG
("WARNING: [down] couldÇot convert GPSÅimeÅoÅimestamp, TXáborted\n");

2956 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2959 
	`MSG
("INFO: [down]áÖackë wû»bê£¡ o¿time°am∞vÆuê%u (ˇlcuœãd from GPSÅime)\n", 
txpkt
.
cou¡_us
);

2963 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
;

2968 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"ncrc");

2969 i‡(
vÆ
 !
NULL
) {

2970 
txpkt
.
no_¸c
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

2974 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"nhdr");

2975 i‡(
vÆ
 !
NULL
) {

2976 
txpkt
.
no_hódî
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

2980 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"freq");

2981 i‡(
vÆ
 =
NULL
) {

2982 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.freq\" object in JSON, TXáborted\n");

2983 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2986 
txpkt
.
‰eq_hz
 = (
uöt32_t
)(()(1.0e6Ë* 
	`js⁄_vÆue_gë_numbî
(
vÆ
));

2989 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"rfch");

2990 i‡(
vÆ
 =
NULL
) {

2991 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.rfch\" object in JSON, TXáborted\n");

2992 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2995 
txpkt
.
rf_chaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2996 i‡(
tx_íabÀ
[
txpkt
.
rf_chaö
] =
Ál£
) {

2997 
	`MSG
("WARNING: [down] TX i†nŸÉ«bÀd o¿RF chaö %u, TXáb‹ãd\n", 
txpkt
.
rf_chaö
);

2998 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3003 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"powe");

3004 i‡(
vÆ
 !
NULL
) {

3005 
txpkt
.
rf_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
Ë- 
™ã¬a_gaö
;

3009 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "modu");

3010 i‡(
°r
 =
NULL
) {

3011 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.modu\" object in JSON, TXáborted\n");

3012 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3015 i‡(
	`°rcmp
(
°r
, "LORA") == 0) {

3017 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

3020 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "datr");

3021 i‡(
°r
 =
NULL
) {

3022 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.datr\" object in JSON, TXáborted\n");

3023 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3026 
i
 = 
	`ssˇnf
(
°r
, "SF%2hdBW%3hd", &
x0
, &
x1
);

3027 i‡(
i
 != 2) {

3028 
	`MSG
("WARNING: [down] formatÉrror in \"txpk.datr\", TXáborted\n");

3029 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3032 
x0
) {

3033 5: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF5
; ;

3034 6: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF6
; ;

3035 7: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF7
; ;

3036 8: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF8
; ;

3037 9: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF9
; ;

3038 10: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF10
; ;

3039 11: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF11
; ;

3040 12: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF12
; ;

3042 
	`MSG
("WARNING: [down] formatÉrror in \"txpk.datr\", invalid SF, TXáborted\n");

3043 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3046 
x1
) {

3047 125: 
txpkt
.
b™dwidth
 = 
BW_125KHZ
; ;

3048 250: 
txpkt
.
b™dwidth
 = 
BW_250KHZ
; ;

3049 500: 
txpkt
.
b™dwidth
 = 
BW_500KHZ
; ;

3051 
	`MSG
("WARNING: [down] formatÉrror in \"txpk.datr\", invalid BW, TXáborted\n");

3052 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3057 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "codr");

3058 i‡(
°r
 =
NULL
) {

3059 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.codr\" object in json, TXáborted\n");

3060 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3063 i‡(
	`°rcmp
(
°r
, "4/5"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_5
;

3064 i‡(
	`°rcmp
(
°r
, "4/6"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_6
;

3065 i‡(
	`°rcmp
(
°r
, "2/3"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_6
;

3066 i‡(
	`°rcmp
(
°r
, "4/7"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_7
;

3067 i‡(
	`°rcmp
(
°r
, "4/8"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_8
;

3068 i‡(
	`°rcmp
(
°r
, "1/2"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_8
;

3070 
	`MSG
("WARNING: [down] formatÉrror in \"txpk.codr\", TXáborted\n");

3071 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3076 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"ipol");

3077 i‡(
vÆ
 !
NULL
) {

3078 
txpkt
.
övît_pﬁ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

3082 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"prea");

3083 i‡(
vÆ
 !
NULL
) {

3084 
i
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

3085 i‡(
i
 >
MIN_LORA_PREAMB
) {

3086 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
i
;

3088 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
MIN_LORA_PREAMB
;

3091 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
STD_LORA_PREAMB
;

3094 } i‡(
	`°rcmp
(
°r
, "FSK") == 0) {

3096 
txpkt
.
moduœti⁄
 = 
MOD_FSK
;

3099 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"datr");

3100 i‡(
vÆ
 =
NULL
) {

3101 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.datr\" object in JSON, TXáborted\n");

3102 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3105 
txpkt
.
d©¨©e
 = (
uöt32_t
)(
	`js⁄_vÆue_gë_numbî
(
vÆ
));

3108 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"fdev");

3109 i‡(
vÆ
 =
NULL
) {

3110 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.fdev\" object in JSON, TXáborted\n");

3111 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3114 
txpkt
.
f_dev
 = (
uöt8_t
)(
	`js⁄_vÆue_gë_numbî
(
vÆ
) / 1000.0);

3117 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"prea");

3118 i‡(
vÆ
 !
NULL
) {

3119 
i
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

3120 i‡(
i
 >
MIN_FSK_PREAMB
) {

3121 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
i
;

3123 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
MIN_FSK_PREAMB
;

3126 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
STD_FSK_PREAMB
;

3130 
	`MSG
("WARNING: [down] invalid modulation in \"txpk.modu\", TXáborted\n");

3131 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3136 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"size");

3137 i‡(
vÆ
 =
NULL
) {

3138 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.size\" object in JSON, TXáborted\n");

3139 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3142 
txpkt
.
size
 = (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

3145 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "data");

3146 i‡(
°r
 =
NULL
) {

3147 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.data\" object in JSON, TXáborted\n");

3148 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3151 
i
 = 
	`b64_to_bö
(
°r
, 
	`°æí
(°r), 
txpkt
.
∑ylﬂd
, Åxpkt.payload);

3152 i‡(
i
 !
txpkt
.
size
) {

3153 
	`MSG
("WARNING: [down] mismatch between .sizeánd .data size once converterÅo binary\n");

3157 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

3160 i‡(
£¡_immedüã
) {

3161 
txpkt
.
tx_mode
 = 
IMMEDIATE
;

3163 
txpkt
.
tx_mode
 = 
TIMESTAMPED
;

3167 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

3168 
mós_dw_dgøm_rcv
 += 1;

3169 
mós_dw_√tw‹k_byã
 +
msg_Àn
;

3170 
mós_dw_∑ylﬂd_byã
 +
txpkt
.
size
;

3171 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

3174 
jô_ªsu…
 = 
w¨nög_ªsu…
 = 
JIT_ERROR_OK
;

3175 
w¨nög_vÆue
 = 0;

3178 i‡((
txpkt
.
‰eq_hz
 < 
tx_‰eq_mö
[txpkt.
rf_chaö
]Ë|| (txpkt.‰eq_hz > 
tx_‰eq_max
[txpkt.rf_chain])) {

3179 
jô_ªsu…
 = 
JIT_ERROR_TX_FREQ
;

3180 
	`MSG
("ERROR: Packë REJECTED, unsuµ‹ãd fªquícy - %u (mö:%u,max:%u)\n", 
txpkt
.
‰eq_hz
, 
tx_‰eq_mö
[txpkt.
rf_chaö
], 
tx_‰eq_max
[txpkt.rf_chain]);

3184 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

3185 
i
 = 
	`gë_tx_gaö_lut_ödex
(
txpkt
.
rf_chaö
,Åxpkt.
rf_powî
, &
tx_lut_idx
);

3186 i‡((
i
 < 0Ë|| (
txlut
[
txpkt
.
rf_chaö
].
lut
[
tx_lut_idx
].
rf_powî
 !=Åxpkt.rf_power)) {

3188 
w¨nög_ªsu…
 = 
JIT_ERROR_TX_POWER
;

3189 
w¨nög_vÆue
 = (
öt32_t
)
txlut
[
txpkt
.
rf_chaö
].
lut
[
tx_lut_idx
].
rf_powî
;

3190 
	`¥ötf
("WARNING: Reque°ed TXÖowî i†nŸ suµ‹ãd (%ddBm),á˘uÆÖowî u£d: %ddBm\n", 
txpkt
.
rf_powî
, 
w¨nög_vÆue
);

3191 
txpkt
.
rf_powî
 = 
txlut
[txpkt.
rf_chaö
].
lut
[
tx_lut_idx
].rf_power;

3196 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

3197 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

3198 
	`lgw_gë_ö°˙t
(&
cuºít_c⁄˚¡øt‹_time
);

3199 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3200 
jô_ªsu…
 = 
	`jô_íqueue
(&
jô_queue
[
txpkt
.
rf_chaö
], 
cuºít_c⁄˚¡øt‹_time
, &txpkt, 
dow∆ök_ty≥
);

3201 i‡(
jô_ªsu…
 !
JIT_ERROR_OK
) {

3202 
	`¥ötf
("ERROR: Packë REJECTED (jôÉº‹=%d)\n", 
jô_ªsu…
);

3205 
jô_ªsu…
 = 
w¨nög_ªsu…
;

3207 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

3208 
mós_nb_tx_ªque°ed
 += 1;

3209 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

3213 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
jô_ªsu…
, 
w¨nög_vÆue
);

3216 
	`MSG
("\nINFO: End of downstreamÅhread\n");

3217 
	}
}

3219 
	$¥öt_tx_°©us
(
uöt8_t
 
tx_°©us
) {

3220 
tx_°©us
) {

3221 
TX_OFF
:

3222 
	`MSG
("INFO: [jit]Ügw_statusÑeturned TX_OFF\n");

3224 
TX_FREE
:

3225 
	`MSG
("INFO: [jit]Ügw_statusÑeturned TX_FREE\n");

3227 
TX_EMITTING
:

3228 
	`MSG
("INFO: [jit]Ügw_statusÑeturned TX_EMITTING\n");

3230 
TX_SCHEDULED
:

3231 
	`MSG
("INFO: [jit]Ügw_statusÑeturned TX_SCHEDULED\n");

3234 
	`MSG
("INFO: [jô]Ügw_°©u†ªtu∫ed UNKNOWN (%d)\n", 
tx_°©us
);

3237 
	}
}

3243 
	$thªad_jô
() {

3244 
ªsu…
 = 
LGW_HAL_SUCCESS
;

3245 
lgw_pkt_tx_s
 
pkt
;

3246 
pkt_ödex
 = -1;

3247 
uöt32_t
 
cuºít_c⁄˚¡øt‹_time
;

3248 
jô_îr‹_e
 
jô_ªsu…
;

3249 
jô_pkt_ty≥_e
 
pkt_ty≥
;

3250 
uöt8_t
 
tx_°©us
;

3251 
i
;

3253 !
exô_sig
 && !
quô_sig
) {

3254 
	`waô_ms
(10);

3256 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

3258 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

3259 
	`lgw_gë_ö°˙t
(&
cuºít_c⁄˚¡øt‹_time
);

3260 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3261 
jô_ªsu…
 = 
	`jô_≥ek
(&
jô_queue
[
i
], 
cuºít_c⁄˚¡øt‹_time
, &
pkt_ödex
);

3262 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

3263 i‡(
pkt_ödex
 > -1) {

3264 
jô_ªsu…
 = 
	`jô_dequeue
(&
jô_queue
[
i
], 
pkt_ödex
, &
pkt
, &
pkt_ty≥
);

3265 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

3267 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

3269 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

3270 
pkt
.
‰eq_hz
 = (
uöt32_t
)(
xèl_c‹ª˘
 * ()pkt.freq_hz);

3271 
	`MSG_DEBUG
(
DEBUG_BEACON
, "bóc⁄_pkt.‰eq_hz=%u (xèl_c‹ª˘=%.15lf)\n", 
pkt
.
‰eq_hz
, 
xèl_c‹ª˘
);

3272 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

3275 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

3276 
mós_nb_bóc⁄_£¡
 += 1;

3277 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

3278 
	`MSG
("INFO: Bóc⁄ dequeued (cou¡_us=%u)\n", 
pkt
.
cou¡_us
);

3282 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

3283 
ªsu…
 = 
	`lgw_°©us
(
pkt
.
rf_chaö
, 
TX_STATUS
, &
tx_°©us
);

3284 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3285 i‡(
ªsu…
 =
LGW_HAL_ERROR
) {

3286 
	`MSG
("WARNING: [jô%d]Ügw_°©u†Áûed\n", 
i
);

3288 i‡(
tx_°©us
 =
TX_EMITTING
) {

3289 
	`MSG
("ERROR: c⁄˚¡øt‹ i†cuºíéyÉmôtög o¿rf_chaö %d\n", 
i
);

3290 
	`¥öt_tx_°©us
(
tx_°©us
);

3292 } i‡(
tx_°©us
 =
TX_SCHEDULED
) {

3293 
	`MSG
("WARNING:á dow∆ök wa†Æªady scheduÀd o¿rf_chaö %d, ovîwrôtög it...\n", 
i
);

3294 
	`¥öt_tx_°©us
(
tx_°©us
);

3301 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

3302 i‡(
•e˘øl_sˇn_∑øms
.
íabÀ
 =
åue
) {

3303 
ªsu…
 = 
	`lgw_•e˘øl_sˇn_ab‹t
();

3304 i‡(
ªsu…
 !
LGW_HAL_SUCCESS
) {

3305 
	`MSG
("WARNING: [jô%d]Ügw_•e˘øl_sˇn_ab‹àÁûed\n", 
i
);

3308 
ªsu…
 = 
	`lgw_£nd
(&
pkt
);

3309 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3310 i‡(
ªsu…
 !
LGW_HAL_SUCCESS
) {

3311 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

3312 
mós_nb_tx_Áû
 += 1;

3313 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

3314 
	`MSG
("WARNING: [jô]Ügw_£nd faûed o¿rf_chaö %d\n", 
i
);

3317 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

3318 
mós_nb_tx_ok
 += 1;

3319 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

3320 
	`MSG_DEBUG
(
DEBUG_PKT_FWD
, "lgw_£nd d⁄ê⁄Ñf_chaö %d: cou¡_us=%u\n", 
i
, 
pkt
.
cou¡_us
);

3323 
	`MSG
("ERROR: jô_dequeuêÁûed o¿rf_chaö %d wôh %d\n", 
i
, 
jô_ªsu…
);

3326 } i‡(
jô_ªsu…
 =
JIT_ERROR_EMPTY
) {

3329 
	`MSG
("ERROR: jô_≥ek faûed o¿rf_chaö %d wôh %d\n", 
i
, 
jô_ªsu…
);

3334 
	`MSG
("\nINFO: End of JITÅhread\n");

3335 
	}
}

3340 
	$gps_¥o˚ss_sync
() {

3341 
time•ec
 
gps_time
;

3342 
time•ec
 
utc
;

3343 
uöt32_t
 
åig_t°amp
;

3344 
i
 = 
	`lgw_gps_gë
(&
utc
, &
gps_time
, 
NULL
, NULL);

3347 i‡(
i
 !
LGW_GPS_SUCCESS
) {

3348 
	`MSG
("WARNING: [gps] couldÇot get GPSÅime from GPS\n");

3353 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

3354 
i
 = 
	`lgw_gë_åig˙t
(&
åig_t°amp
);

3355 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3356 i‡(
i
 !
LGW_HAL_SUCCESS
) {

3357 
	`MSG
("WARNING: [gps] failedÅoÑead concentratorÅimestamp\n");

3362 
	`±hªad_muãx_lock
(&
mx_timîef
);

3363 
i
 = 
	`lgw_gps_sync
(&
time_ª„ªn˚_gps
, 
åig_t°amp
, 
utc
, 
gps_time
);

3364 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

3365 i‡(
i
 !
LGW_GPS_SUCCESS
) {

3366 
	`MSG
("WARNING: [gps] GPS out of sync, keepingÖreviousÅimeÑeference\n");

3368 
	}
}

3370 
	$gps_¥o˚ss_co‹ds
() {

3372 
co‹d_s
 
co‹d
;

3373 
co‹d_s
 
gp£º
;

3374 
i
 = 
	`lgw_gps_gë
(
NULL
, NULL, &
co‹d
, &
gp£º
);

3377 
	`±hªad_muãx_lock
(&
mx_mós_gps
);

3378 i‡(
i
 =
LGW_GPS_SUCCESS
) {

3379 
gps_co‹d_vÆid
 = 
åue
;

3380 
mós_gps_co‹d
 = 
co‹d
;

3381 
mós_gps_îr
 = 
gp£º
;

3384 
gps_co‹d_vÆid
 = 
Ál£
;

3386 
	`±hªad_muãx_u∆ock
(&
mx_mós_gps
);

3387 
	}
}

3389 
	$thªad_gps
() {

3391 
£rül_buff
[128];

3392 
size_t
 
wr_idx
 = 0;

3395 
gps_msg
 
œã°_msg
;

3398 
	`mem£t
(
£rül_buff
, 0,  serial_buff);

3400 !
exô_sig
 && !
quô_sig
) {

3401 
size_t
 
rd_idx
 = 0;

3402 
size_t
 
‰ame_íd_idx
 = 0;

3405 
ssize_t
 
nb_ch¨
 = 
	`ªad
(
gps_ây_fd
, 
£rül_buff
 + 
wr_idx
, 
LGW_GPS_MIN_MSG_SIZE
);

3406 i‡(
nb_ch¨
 <= 0) {

3407 
	`MSG
("WARNING: [gps]Ñód(Ëªtu∫ed vÆuê%zd\n", 
nb_ch¨
);

3410 
wr_idx
 +(
size_t
)
nb_ch¨
;

3416 
rd_idx
 < 
wr_idx
) {

3417 
size_t
 
‰ame_size
 = 0;

3420 i‡(
£rül_buff
[
rd_idx
] =()
LGW_GPS_UBX_SYNC_CHAR
) {

3425 
œã°_msg
 = 
	`lgw_∑r£_ubx
(&
£rül_buff
[
rd_idx
], (
wr_idx
 -Ñd_idx), &
‰ame_size
);

3427 i‡(
‰ame_size
 > 0) {

3428 i‡(
œã°_msg
 =
INCOMPLETE
) {

3430 
‰ame_size
 = 0;

3431 } i‡(
œã°_msg
 =
INVALID
) {

3433 
	`MSG
("WARNING: [gps] couldÇot getá valid message from GPS (noÅime)\n");

3434 
‰ame_size
 = 0;

3435 } i‡(
œã°_msg
 =
UBX_NAV_TIMEGPS
) {

3436 
	`gps_¥o˚ss_sync
();

3439 } i‡(
£rül_buff
[
rd_idx
] =()
LGW_GPS_NMEA_SYNC_CHAR
) {

3444 * 
nmó_íd_±r
 = 
	`memchr
(&
£rül_buff
[
rd_idx
],()0x0a, (
wr_idx
 -Ñd_idx));

3446 if(
nmó_íd_±r
) {

3448 
‰ame_size
 = 
nmó_íd_±r
 - &
£rül_buff
[
rd_idx
] + 1;

3449 
œã°_msg
 = 
	`lgw_∑r£_nmó
(&
£rül_buff
[
rd_idx
], 
‰ame_size
);

3451 if(
œã°_msg
 =
INVALID
 ||Ü©e°_msg =
UNKNOWN
) {

3453 
‰ame_size
 = 0;

3454 } i‡(
œã°_msg
 =
NMEA_RMC
) {

3455 
	`gps_¥o˚ss_co‹ds
();

3460 i‡(
‰ame_size
 > 0) {

3463 
rd_idx
 +
‰ame_size
;

3464 
‰ame_íd_idx
 = 
rd_idx
;

3466 
rd_idx
++;

3470 i‡(
‰ame_íd_idx
) {

3472 
	`mem˝y
(
£rül_buff
, &£rül_buff[
‰ame_íd_idx
], 
wr_idx
 - frame_end_idx);

3473 
wr_idx
 -
‰ame_íd_idx
;

3477 i‡(((
£rül_buff
Ë- 
wr_idx
Ë< 
LGW_GPS_MIN_MSG_SIZE
) {

3478 
	`mem˝y
(
£rül_buff
, &£rül_buff[
LGW_GPS_MIN_MSG_SIZE
], 
wr_idx
 - LGW_GPS_MIN_MSG_SIZE);

3479 
wr_idx
 -
LGW_GPS_MIN_MSG_SIZE
;

3482 
	`MSG
("\nINFO: End of GPSÅhread\n");

3483 
	}
}

3488 
	$thªad_vÆid
() {

3491 
gps_ªf_age
 = 0;

3492 
boﬁ
 
ªf_vÆid_loˇl
 = 
Ál£
;

3493 
xèl_îr_˝y
;

3496 
öô_˝t
 = 0;

3497 
öô_acc
 = 0.0;

3498 
x
;

3513 !
exô_sig
 && !
quô_sig
) {

3514 
	`waô_ms
(1000);

3517 
	`±hªad_muãx_lock
(&
mx_timîef
);

3518 
gps_ªf_age
 = ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
);

3519 i‡((
gps_ªf_age
 >0Ë&& (gps_ªf_agê<
GPS_REF_MAX_AGE
)) {

3521 
gps_ªf_vÆid
 = 
åue
;

3522 
ªf_vÆid_loˇl
 = 
åue
;

3523 
xèl_îr_˝y
 = 
time_ª„ªn˚_gps
.
xèl_îr
;

3527 
gps_ªf_vÆid
 = 
Ál£
;

3528 
ªf_vÆid_loˇl
 = 
Ál£
;

3530 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

3533 i‡(
ªf_vÆid_loˇl
 =
Ál£
) {

3535 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

3536 
xèl_c‹ª˘_ok
 = 
Ál£
;

3537 
xèl_c‹ª˘
 = 1.0;

3538 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

3539 
öô_˝t
 = 0;

3540 
öô_acc
 = 0.0;

3542 i‡(
öô_˝t
 < 
XERR_INIT_AVG
) {

3544 
öô_acc
 +
xèl_îr_˝y
;

3545 ++
öô_˝t
;

3546 } i‡(
öô_˝t
 =
XERR_INIT_AVG
) {

3548 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

3549 
xèl_c‹ª˘
 = ()(
XERR_INIT_AVG
Ë/ 
öô_acc
;

3551 
xèl_c‹ª˘_ok
 = 
åue
;

3552 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

3553 ++
öô_˝t
;

3557 
x
 = 1 / 
xèl_îr_˝y
;

3558 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

3559 
xèl_c‹ª˘
 = xèl_c‹ª˘ - xèl_c‹ª˘/
XERR_FILT_COEF
 + 
x
/XERR_FILT_COEF;

3560 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

3567 
	`MSG
("\nINFO: End of validationÅhread\n");

3568 
	}
}

3573 
	$thªad_•e˘øl_sˇn
() {

3574 
i
, 
x
;

3575 
uöt32_t
 
‰eq_hz
 = 
•e˘øl_sˇn_∑øms
.
‰eq_hz_°¨t
;

3576 
uöt32_t
 
‰eq_hz_°›
 = 
•e˘øl_sˇn_∑øms
.
‰eq_hz_°¨t
 + s≥˘øl_sˇn_∑øms.
nb_ch™
 * 200E3;

3577 
öt16_t
 
Àvñs
[
LGW_SPECTRAL_SCAN_RESULT_SIZE
];

3578 
uöt16_t
 
ªsu…s
[
LGW_SPECTRAL_SCAN_RESULT_SIZE
];

3579 
timevÆ
 
tm_°¨t
;

3580 
lgw_•e˘øl_sˇn_°©us_t
 
°©us
;

3581 
uöt8_t
 
tx_°©us
 = 
TX_FREE
;

3582 
boﬁ
 
•e˘øl_sˇn_°¨ãd
;

3583 
boﬁ
 
exô_thªad
 = 
Ál£
;

3586 !
exô_sig
 && !
quô_sig
) {

3588 
i
 = 0; i < ()(
•e˘øl_sˇn_∑øms
.
∑˚_s
 ? spectral_scan_params.pace_s : 1); i++) {

3589 i‡(
exô_sig
 || 
quô_sig
) {

3590 
exô_thªad
 = 
åue
;

3593 
	`waô_ms
(1000);

3595 i‡(
exô_thªad
 =
åue
) {

3599 
•e˘øl_sˇn_°¨ãd
 = 
Ál£
;

3602 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

3604 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

3605 i‡(
tx_íabÀ
[
i
] =
åue
) {

3606 
x
 = 
	`lgw_°©us
((
uöt8_t
)
i
, 
TX_STATUS
, &
tx_°©us
);

3607 i‡(
x
 !
LGW_HAL_SUCCESS
) {

3608 
	`¥ötf
("ERROR: faûedÅÿgë TX sètu†⁄ chaö %d\n", 
i
);

3610 i‡(
tx_°©us
 =
TX_SCHEDULED
 ||Åx_°©u†=
TX_EMITTING
) {

3611 
	`¥ötf
("INFO: skù s≥˘ø»sˇ¿(dow∆ökÖrogømmed o¿RF chaö %d)\n", 
i
);

3617 i‡(
tx_°©us
 !
TX_SCHEDULED
 &&Åx_°©u†!
TX_EMITTING
) {

3618 
x
 = 
	`lgw_•e˘øl_sˇn_°¨t
(
‰eq_hz
, 
•e˘øl_sˇn_∑øms
.
nb_sˇn
);

3619 i‡(
x
 != 0) {

3620 
	`¥ötf
("ERROR: spectral scan start failed\n");

3621 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3624 
•e˘øl_sˇn_°¨ãd
 = 
åue
;

3626 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3628 i‡(
•e˘øl_sˇn_°¨ãd
 =
åue
) {

3630 
°©us
 = 
LGW_SPECTRAL_SCAN_STATUS_UNKNOWN
;

3631 
	`timeout_°¨t
(&
tm_°¨t
);

3634 i‡(
	`timeout_check
(
tm_°¨t
, 2000) != 0) {

3635 
	`¥ötf
("ERROR: %s: TIMEOUT o¿S≥˘ø»Sˇn\n", 
__FUNCTION__
);

3640 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

3641 
x
 = 
	`lgw_•e˘øl_sˇn_gë_°©us
(&
°©us
);

3642 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3643 i‡(
x
 != 0) {

3644 
	`¥ötf
("ERROR: spectral scan status failed\n");

3649 
	`waô_ms
(10);

3650 } 
°©us
 !
LGW_SPECTRAL_SCAN_STATUS_COMPLETED
 && sètu†!
LGW_SPECTRAL_SCAN_STATUS_ABORTED
);

3652 i‡(
°©us
 =
LGW_SPECTRAL_SCAN_STATUS_COMPLETED
) {

3654 
	`mem£t
(
Àvñs
, 0, Üevels);

3655 
	`mem£t
(
ªsu…s
, 0, Ñesults);

3656 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

3657 
x
 = 
	`lgw_•e˘øl_sˇn_gë_ªsu…s
(
Àvñs
, 
ªsu…s
);

3658 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

3659 i‡(
x
 != 0) {

3660 
	`¥ötf
("ERROR: spectral scan getÑesults failed\n");

3665 
	`¥ötf
("SPECTRAL SCAN - %u Hz: ", 
‰eq_hz
);

3666 
i
 = 0; i < 
LGW_SPECTRAL_SCAN_RESULT_SIZE
; i++) {

3667 
	`¥ötf
("%u ", 
ªsu…s
[
i
]);

3669 
	`¥ötf
("\n");

3672 
‰eq_hz
 += 200000;

3673 i‡(
‰eq_hz
 >
‰eq_hz_°›
) {

3674 
‰eq_hz
 = 
•e˘øl_sˇn_∑øms
.
‰eq_hz_°¨t
;

3676 } i‡(
°©us
 =
LGW_SPECTRAL_SCAN_STATUS_ABORTED
) {

3677 
	`¥ötf
("INFO: %s: s≥˘ø»sˇ¿ha†bì¿ab‹ãd\n", 
__FUNCTION__
);

3679 
	`¥ötf
("ERROR: %s: s≥˘ø»sˇ¿°©u†u†u√x≥˘ed 0x%02X\n", 
__FUNCTION__
, 
°©us
);

3683 
	`¥ötf
("\nINFO: End of Spectral ScanÅhread\n");

3684 
	}
}

	@tools/payload_tools/payload_crc.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<°rög.h
>

9 
ußge
();

10 
uöt16_t
 
sx1302_l‹a_∑ylﬂd_¸c
(c⁄° 
uöt8_t
 * 
d©a
, uöt8_à
size
);

11 
ªmove_•a˚s
(*
°r
);

16 
	$maö
(
¨gc
, ** 
¨gv
)

18 
j
;

19 
uöt8_t
 
∑ylﬂd
[255];

20 
uöt8_t
 
∑ylﬂd_size
;

21 
uöt16_t
 
¸c
;

22 
hex°r
[1024];

24 i‡(
¨gc
 < 2) {

25 
	`ußge
();

30 
	`mem˝y
(
hex°r
, 
¨gv
[1], 
	`°æí
(argv[1]));

31 
hex°r
[
	`°æí
(
¨gv
[1])] = '\0';

32 
	`¥ötf
("I≈uàhex såög: %s\n", 
hex°r
);

35 
	`ªmove_•a˚s
(
hex°r
);

36 
hex°r
[
	`°æí
(hexstr)] = '\0';

37 
	`¥ötf
("Removög s∑˚s: %s\n", 
hex°r
);

40 
∑ylﬂd_size
 = 
	`°æí
(
hex°r
) / 2;

41 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

42 
	`ssˇnf
(
hex°r
 + 2*
j
, "%02hhx", &
∑ylﬂd
[j]);

46 
¸c
 = 
	`sx1302_l‹a_∑ylﬂd_¸c
(
∑ylﬂd
, 
∑ylﬂd_size
);

47 
	`¥ötf
("Paylﬂd CRC_16: %04X\n", 
¸c
);

50 
	}
}

54 
	$ußge
() {

55 
	`¥ötf
("MissingÖayload hex string\n");

56 
	}
}

60 
	$ªmove_•a˚s
(*
°r
)

63 
cou¡
 = 0;

67 
i
 = 0; 
°r
[i]; i++) {

68 i‡(
°r
[
i
] != ' ') {

69 
°r
[
cou¡
++] = så[
i
];

72 
°r
[
cou¡
] = '\0';

73 
	}
}

77 
	$l‹a_¸c16
(c⁄° 
d©a
, *
¸c
) {

78 
√xt
 = 0;

79 
√xt
 = (((
d©a
>>0)&1Ë^ ((*
¸c
>>12)&1) ^ ((*crc>> 8)&1) ) ;

80 
√xt
 +((((
d©a
>>1)&1Ë^ ((*
¸c
>>13)&1) ^ ((*crc>> 9)&1) )<<1 ) ;

81 
√xt
 +((((
d©a
>>2)&1Ë^ ((*
¸c
>>14)&1) ^ ((*crc>>10)&1) )<<2 ) ;

82 
√xt
 +((((
d©a
>>3)&1Ë^ ((*
¸c
>>15)&1) ^ ((*crc>>11)&1) )<<3 ) ;

83 
√xt
 +((((
d©a
>>4)&1Ë^ ((*
¸c
>>12)&1) )<<4 ) ;

84 
√xt
 +((((
d©a
>>5)&1Ë^ ((*
¸c
>>13)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<5 ) ;

85 
√xt
 +((((
d©a
>>6)&1Ë^ ((*
¸c
>>14)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1))<<6 ) ;

86 
√xt
 +((((
d©a
>>7)&1Ë^ ((*
¸c
>>15)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1))<<7 ) ;

87 
√xt
 +((((*
¸c
>>0)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<8 ) ;

88 
√xt
 +((((*
¸c
>>1)&1) ^ ((*crc>>12)&1) )<<9 ) ;

89 
√xt
 +((((*
¸c
>>2)&1) ^ ((*crc>>13)&1) )<<10) ;

90 
√xt
 +((((*
¸c
>>3)&1) ^ ((*crc>>14)&1) )<<11) ;

91 
√xt
 +((((*
¸c
>>4)&1) ^ ((*crc>>15)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<12) ;

92 
√xt
 +((((*
¸c
>>5)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1) )<<13) ;

93 
√xt
 +((((*
¸c
>>6)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1) )<<14) ;

94 
√xt
 +((((*
¸c
>>7)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<15) ;

95 (*
¸c
Ë
√xt
;

96 
	}
}

100 
uöt16_t
 
	$sx1302_l‹a_∑ylﬂd_¸c
(c⁄° 
uöt8_t
 * 
d©a
, uöt8_à
size
) {

101 
i
;

102 
¸c
 = 0;

104 
i
 = 0; i < 
size
; i++) {

105 
	`l‹a_¸c16
(
d©a
[
i
], &
¸c
);

109  (
uöt16_t
)
¸c
;

110 
	}
}

	@tools/payload_tools/payload_diff.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<°rög.h
>

9 
	#TAKE_N_BITS_FROM
(
b
, 
p
, 
n
Ë(((bË>> (p)Ë& ((1 << (n)Ë- 1))

	)

14 
ußge
();

15 
ªmove_•a˚s
(*
°r
);

20 
	$maö
(
¨gc
, ** 
¨gv
)

22 
i
, 
j
;

23 
uöt8_t
 
∑ylﬂd_a
[255];

24 
uöt8_t
 
∑ylﬂd_b
[255];

25 
uöt8_t
 
∑ylﬂd_diff
[255];

26 
uöt8_t
 
∑ylﬂd_size
;

27 
hex°r
[1024];

28 
uöt16_t
 
nb_bôs_diff
 = 0;

30 i‡(
¨gc
 < 3) {

31 
	`ußge
();

35 i‡(
	`°æí
(
¨gv
[1]) != strlen(argv[2])) {

36 
	`¥ötf
("ERROR:Öayloads A & B must have same size\n");

41 
	`mem˝y
(
hex°r
, 
¨gv
[1], 
	`°æí
(argv[1]));

42 
hex°r
[
	`°æí
(
¨gv
[1])] = '\0';

43 
	`¥ötf
("I≈uàhex såög: %s\n", 
hex°r
);

46 
	`ªmove_•a˚s
(
hex°r
);

47 
hex°r
[
	`°æí
(hexstr)] = '\0';

48 
	`¥ötf
("Removög s∑˚s: %s\n", 
hex°r
);

51 
∑ylﬂd_size
 = 
	`°æí
(
hex°r
) / 2;

52 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

53 
	`ssˇnf
(
hex°r
 + 2*
j
, "%02hhx", &
∑ylﬂd_a
[j]);

57 
	`mem˝y
(
hex°r
, 
¨gv
[2], 
	`°æí
(argv[2]));

58 
hex°r
[
	`°æí
(
¨gv
[2])] = '\0';

59 
	`¥ötf
("I≈uàhex såög: %s\n", 
hex°r
);

62 
	`ªmove_•a˚s
(
hex°r
);

63 
hex°r
[
	`°æí
(hexstr)] = '\0';

64 
	`¥ötf
("Removög s∑˚s: %s\n", 
hex°r
);

67 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

68 
	`ssˇnf
(
hex°r
 + 2*
j
, "%02hhx", &
∑ylﬂd_b
[j]);

72 
	`¥ötf
("Diff: ");

73 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

74 
∑ylﬂd_diff
[
j
] = 
∑ylﬂd_a
[j] ^ 
∑ylﬂd_b
[j];

75 
	`¥ötf
("%02X ", 
∑ylﬂd_diff
[
j
]);

77 
	`¥ötf
("\n");

79 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

80 
i
 = 7; i >= 0; i--) {

81 
	`¥ötf
("%u", 
	`TAKE_N_BITS_FROM
(
∑ylﬂd_diff
[
j
], 
i
, 1));

82 i‡(
	`TAKE_N_BITS_FROM
(
∑ylﬂd_diff
[
j
], 
i
, 1) == 1) {

83 
nb_bôs_diff
 += 1;

86 
	`¥ötf
(" ");

88 
	`¥ötf
("\n");

89 
	`¥ötf
("%u bô†Êù≥d\n", 
nb_bôs_diff
);

92 
	}
}

96 
	$ußge
() {

97 
	`¥ötf
("MissingÖayload hex strings forá & b\n");

98 
	}
}

102 
	$ªmove_•a˚s
(*
°r
)

105 
cou¡
 = 0;

109 
i
 = 0; 
°r
[i]; i++) {

110 i‡(
°r
[
i
] != ' ') {

111 
°r
[
cou¡
++] = så[
i
];

114 
°r
[
cou¡
] = '\0';

115 
	}
}

	@tools/payload_tools/payload_gen.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<°rög.h
>

6 
	~"töymt32.h
"

11 
ußge
();

12 
ªmove_•a˚s
(*
°r
);

17 
	$maö
(
¨gc
, ** 
¨gv
)

19 
j
;

20 
uöt8_t
 
dev_id
[4];

21 
uöt8_t
 
∑ylﬂd
[255];

22 
uöt8_t
 
∑ylﬂd_size
;

23 
∑ckë_˙t
;

24 
töymt32_t
 
töymt
;

25 
hex°r
[32];

27 i‡(
¨gc
 < 4) {

28 
	`ußge
();

33 
	`mem˝y
(
hex°r
, 
¨gv
[1], 
	`°æí
(argv[1]));

34 
hex°r
[
	`°æí
(
¨gv
[1])] = '\0';

37 
	`ªmove_•a˚s
(
hex°r
);

38 
hex°r
[
	`°æí
(hexstr)] = '\0';

39 
	`¥ötf
("Dev_id: %s\n", 
hex°r
);

42 
∑ylﬂd_size
 = 
	`°æí
(
hex°r
) / 2;

43 
j
 = 0; j < 4; j++) {

44 
	`ssˇnf
(
hex°r
 + 2*
j
, "%02hhx", &
dev_id
[j]);

48 
∑ckë_˙t
 = 
	`©oi
(
¨gv
[2]);

51 
∑ylﬂd_size
 = (
uöt8_t
)
	`©oi
(
¨gv
[3]);

54 
töymt
.
m©1
 = 0x8f7011ee;

55 
töymt
.
m©2
 = 0xfc78ff1f;

56 
töymt
.
tm©
 = 0x3793fdff;

57 
	`töymt32_öô
(&
töymt
, 
∑ckë_˙t
);

60 
∑ylﬂd
[0] = 
dev_id
[0];

61 
∑ylﬂd
[1] = 
dev_id
[1];

62 
∑ylﬂd
[2] = 
dev_id
[2];

63 
∑ylﬂd
[3] = 
dev_id
[3];

64 
∑ylﬂd
[4] = (
uöt8_t
)(
∑ckë_˙t
 >> 24);

65 
∑ylﬂd
[5] = (
uöt8_t
)(
∑ckë_˙t
 >> 16);

66 
∑ylﬂd
[6] = (
uöt8_t
)(
∑ckë_˙t
 >> 8);

67 
∑ylﬂd
[7] = (
uöt8_t
)(
∑ckë_˙t
 >> 0);

68 
j
 = 8; j < 
∑ylﬂd_size
; j++) {

69 
∑ylﬂd
[
j
] = (
uöt8_t
)
	`töymt32_gíî©e_uöt32
(&
töymt
);

71 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

72 
	`¥ötf
("%02X ", 
∑ylﬂd
[
j
]);

74 
	`¥ötf
("\n");

77 
∑ckë_˙t
 = 0;Öacket_cnt < 10;Öacket_cnt++) {

78 
	`töymt32_öô
(&
töymt
, ()
∑ckë_˙t
);

79 
∑ylﬂd
[0] = 0xCA;

80 
∑ylﬂd
[1] = 0xFE;

81 
∑ylﬂd
[2] = 0x12;

82 
∑ylﬂd
[3] = 0x34;

83 
∑ylﬂd
[4] = (
uöt8_t
)(
∑ckë_˙t
 >> 24);

84 
∑ylﬂd
[5] = (
uöt8_t
)(
∑ckë_˙t
 >> 16);

85 
∑ylﬂd
[6] = (
uöt8_t
)(
∑ckë_˙t
 >> 8);

86 
∑ylﬂd
[7] = (
uöt8_t
)(
∑ckë_˙t
 >> 0);

87 
j
 = 8; j < 16; j++) {

88 
∑ylﬂd
[
j
] = (
uöt8_t
)
	`töymt32_gíî©e_uöt32
(&
töymt
);

90 
j
 = 0; j < 16; j++) {

91 
	`¥ötf
("%02X ", 
∑ylﬂd
[
j
]);

93 
	`¥ötf
("\n");

98 
	}
}

102 
	$ußge
() {

103 
	`¥ötf
("MissingÖarameters: ./payload_gen dev_idÖkt_cntÖkt_size\n");

104 
	`¥ötf
(" dev_id: hex string for 4-bytes dev_id\n");

105 
	`¥ötf
("Ökt_cnt: unsigned int usedÅo initializeÅheÖseudo-random generator\n");

106 
	`¥ötf
("Ökt_size:Öaylaod size in bytes [0..255]\n");

107 
	}
}

111 
	$ªmove_•a˚s
(*
°r
)

114 
cou¡
 = 0;

118 
i
 = 0; 
°r
[i]; i++) {

119 i‡(
°r
[
i
] != ' ') {

120 
°r
[
cou¡
++] = så[
i
];

123 
°r
[
cou¡
] = '\0';

124 
	}
}

	@util_boot/src/boot.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<öây≥s.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<m©h.h
>

34 
	~<sig«l.h
>

35 
	~<gë›t.h
>

37 
	~"l‹agw_usb.h
"

38 
	~"l‹agw_mcu.h
"

39 
	~"l‹agw_hÆ.h
"

44 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

49 
	#TTY_PATH_DEFAULT
 "/dev/âyACM0"

	)

58 
	$ußge
() {

59 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

60 
	`¥ötf
("Available options:\n");

61 
	`¥ötf
(" -hÖrintÅhis help\n");

62 
	`¥ötf
(" -d [path] TTYÖathÅo be usedÅoáccessÅhe concentrator\n");

63 
	}
}

68 
	$maö
(
¨gc
, **
¨gv
)

70 
i
, 
x
;

71 
fd
;

74 c⁄° 
ây_∑th_deÁu…
[] = 
TTY_PATH_DEFAULT
;

75 c⁄° * 
ây_∑th
 = 
ây_∑th_deÁu…
;

76 * 
com_èrgë
 = 
NULL
;

79 
›ti⁄_ödex
 = 0;

80 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

85 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hd:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

86 
i
) {

88 
	`ußge
();

93 
ây_∑th
 = 
›èrg
;

97 
	`¥ötf
("ERROR:árgumentÖarsing\n");

98 
	`ußge
();

104 
x
 = 
	`lgw_usb_›í
(
ây_∑th
, &
com_èrgë
);

105 i‡(
x
 != 0) {

106 
	`¥ötf
("ERROR: faûedÅÿ›í USB o¿%s\n", 
ây_∑th
);

107  
EXIT_FAILURE
;

111 
fd
 = *(*)
com_èrgë
;

112 
x
 = 
	`mcu_boŸ
(
fd
);

113 i‡(
x
 != 0) {

114 
	`¥ötf
("ERROR: failedÅo switch MCU in BOOT mode\n");

115  
EXIT_FAILURE
;

118 
	`¥ötf
("INFO: The concentrator is in DFU mode,Åhe MCU can beÖrogrammed\n");

123 
x
 = 
	`˛o£
(
fd
);

124 i‡(
x
 != 0) {

125 
	`¥ötf
("ERROR: failedÅo close USB\n");

126  
EXIT_FAILURE
;

130 
	}
}

	@util_chip_id/src/chip_id.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<öây≥s.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<m©h.h
>

34 
	~<sig«l.h
>

35 
	~<gë›t.h
>

37 
	~"l‹agw_hÆ.h
"

38 
	~"l‹agw_ªg.h
"

39 
	~"l‹agw_aux.h
"

44 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

49 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

50 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

52 
	#DEFAULT_CLK_SRC
 0

	)

53 
	#DEFAULT_FREQ_HZ
 868500000U

	)

62 
	$ußge
() {

63 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

64 
	`¥ötf
("Available options:\n");

65 
	`¥ötf
(" -h PrintÅhis help\n");

66 
	`¥ötf
(" -u Set COMÅypeás USB (default is SPI)\n");

67 
	`¥ötf
(" -d [path] PathÅoÅhe COM interface\n");

68 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

69 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

70 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

71 
	}
}

76 
	$maö
(
¨gc
, **
¨gv
)

78 
i
, 
x
;

79 
¨g_u
;

80 
uöt8_t
 
˛ocksour˚
 = 0;

81 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

83 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

84 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

85 
uöt64_t
 
eui
;

88 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

89 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

90 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

93 
›ti⁄_ödex
 = 0;

94 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

99 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hud:k:r:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

100 
i
) {

102 
	`ußge
();

107 
com_ty≥
 = 
LGW_COM_USB
;

111 
com_∑th
 = 
›èrg
;

115 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

116 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

117 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

118  
EXIT_FAILURE
;

120 
¨g_u
) {

122 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

125 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

128 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

135 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

136 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

137 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

138  
EXIT_FAILURE
;

140 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

145 
	`¥ötf
("ERROR:árgumentÖarsing\n");

146 
	`ußge
();

151 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

153 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

154 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

155 
	`exô
(
EXIT_FAILURE
);

160 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

161 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

162 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

163 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

164 
bﬂrdc⁄f
.
com_ty≥
 = com_type;

165 
	`°∫˝y
(
bﬂrdc⁄f
.
com_∑th
, com_path,  boardconf.com_path);

166 
bﬂrdc⁄f
.
com_∑th
[ boardconf.com_path - 1] = '\0';

167 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

168 
	`¥ötf
("ERROR: failedÅo configure board\n");

169  
EXIT_FAILURE
;

172 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

173 
rfc⁄f
.
íabÀ
 = 
åue
;

174 
rfc⁄f
.
‰eq_hz
 = 868500000;

175 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

176 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

177 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

178 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

179 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

180  
EXIT_FAILURE
;

183 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

184 
rfc⁄f
.
íabÀ
 = (
˛ocksour˚
 =1Ë? 
åue
 : 
Ál£
;

185 
rfc⁄f
.
‰eq_hz
 = 868500000;

186 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

187 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

188 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

189 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

190 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

191  
EXIT_FAILURE
;

194 
x
 = 
	`lgw_°¨t
();

195 i‡(
x
 != 0) {

196 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

197  
EXIT_FAILURE
;

201 
x
 = 
	`lgw_gë_eui
(&
eui
);

202 i‡(
x
 !
LGW_HAL_SUCCESS
) {

203 
	`¥ötf
("ERROR: failedÅo get concentrator EUI\n");

205 
	`¥ötf
("\nINFO: c⁄˚¡øt‹ EUI: 0x%016" 
PRIx64
 "\n\n", 
eui
);

209 
x
 = 
	`lgw_°›
();

210 i‡(
x
 != 0) {

211 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

212  
EXIT_FAILURE
;

215 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

217 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

218 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

219 
	`exô
(
EXIT_FAILURE
);

224 
	}
}

	@util_net_downlink/src/net_downlink.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 7

28 
	#FALL_THROUGH
 
	`__©åibuã__
 ((
ÁŒthrough
))

	)

30 
	#FALL_THROUGH
 (()0)

	)

33 
	~<°döt.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<°dboﬁ.h
>

39 
	~<°rög.h
>

40 
	~<time.h
>

41 
	~<î∫o.h
>

42 
	~<sys/time.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√tdb.h
>

49 
	~<sig«l.h
>

51 
	~<±hªad.h
>

53 
	~"∑rs⁄.h
"

54 
	~"ba£64.h
"

59 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

61 
	#PROTOCOL_VERSION
 2

	)

74 
	#TAKE_N_BITS_FROM
–
b
, 
p
, 
n
 ) ((bË>> (p)Ë& ((1 << (n)Ë- 1)

	)

77 
	#DEFAULT_LORA_BW
 125

	)

78 
	#DEFAULT_LORA_SF
 7

	)

79 
	#DEFAULT_LORA_CR
 "4/5"

	)

80 
	#DEFAULT_FSK_FDEV
 25

	)

81 
	#DEFAULT_FSK_BR
 50

	)

82 
	#DEFAULT_LORA_PREAMBLE_SIZE
 8

	)

83 
	#DEFAULT_PAYLOAD_SIZE
 4

	)

84 
	#PUSH_TIMEOUT_MS
 100

	)

91 
	mPKT_PUSH_DATA
 = 0,

92 
	mPKT_PUSH_ACK
 = 1,

93 
	mPKT_PULL_DATA
 = 2,

94 
	mPKT_PULL_RESP
 = 3,

95 
	mPKT_PULL_ACK
 = 4,

96 
	mPKT_TX_ACK
 = 5

97 } 
	tpkt_ty≥_t
;

101 
uöt32_t
 
	mnb_lo›
[2];

102 
uöt32_t
 
	mdñay_ms
[2];

103 
	msock
;

104 
	m‰eq_mhz
[2];

105 
	m‰eq_°ï
;

106 
uöt8_t
 
	m‰eq_nb
;

107 
uöt8_t
 
	mrf_chaö
;

108 
uöt16_t
 
	mb™dwidth_khz
;

109 
	mmoduœti⁄_rf0
[8];

110 
	mmoduœti⁄_rf1
[8];

111 
uöt8_t
 
	m•ªad_Á˘‹
[2];

112 
	mcodög_øã
[8];

113 
	mbr_kbps
;

114 
uöt8_t
 
	mfdev_khz
;

115 
öt8_t
 
	mrf_powî
[2];

116 
uöt16_t
 
	m¥ómb_size
[2];

117 
uöt8_t
 
	m∂_size
[2];

118 
boﬁ
 
	mùﬁ
;

119 } 
	tthªad_∑øms_t
;

125 
	gexô_sig
 = 0;

126 
	gquô_sig
 = 0;

129 
boﬁ
 
	gsockaddr_vÆid
 = 
Ál£
;

130 
sockaddr_°‹age
 
	gdi°_addr_down
;

131 
sockÀn_t
 
	gaddr_Àn_down
 =  
di°_addr_down
;

134 
±hªad_muãx_t
 
	gmx_sockaddr
 = 
PTHREAD_MUTEX_INITIALIZER
;

139 
sig_h™dÀr
–
sigio
 );

140 
ußge
( );

141 * 
thªad_down_rf0
–c⁄° * 
¨g
 );

142 * 
thªad_down_rf1
–c⁄° * 
¨g
 );

143 
log_csv
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf
);

148 
	$maö
–
¨gc
, **
¨gv
 )

150 
i
, 
j
, 
x
;

151 
siga˘i⁄
 
siga˘
;

152 
¨g_u
 = 0;

153 
¨g_u2
 = 0;

154 
¨g_f
 = 0.0;

155 
¨g_f_°ï
 = 0.0;

156 
¨g_f2
 = 0.0;

157 
¨g_i
 = 0;

158 
¨g_i2
 = 0;

159 
¨g_s
[8];

160 
¨g_s2
[8];

161 
boﬁ
 
∑r£_îr
 = 
Ál£
;

164 c⁄° * 
log_‚ame
 = 
NULL
;

165 
FILE
 * 
log_fûe
 = 
NULL
;

166 
boﬁ
 
is_fú°
 = 
åue
;

169 
sock
;

170 
addröfo
 
höts
;

171 
addröfo
 * 
ªsu…
;

172 
addröfo
 * 
q
;

173 
ho°_«me
[64];

174 
p‹t_«me
[64];

175 c⁄° * 
p‹t_¨g
 = 
NULL
;

176 
sockaddr_°‹age
 
di°_addr
;

177 
sockÀn_t
 
addr_Àn
 =  
di°_addr
;

180 
boﬁ
 
fwd_u∂ök
 = 
Ál£
;

181 
sock_fwd
 = -1;

182 
£rv_addr
[64] = "127.0.0.1";

183 
£rv_p‹t_fwd
[8] = "1700";

184 
timevÆ
 
push_timeout_hÆf
 = {0, (
PUSH_TIMEOUT_MS
 * 500)};

187 
uöt8_t
 
d©abuf_up
[32768];

188 
uöt8_t
 
d©abuf_ack
[4];

189 
byã_nb
;

192 
uöt32_t
 
øw_mac_h
;

193 
uöt32_t
 
øw_mac_l
;

194 
uöt64_t
 
gw_mac
;

195 
uöt8_t
 
ack_comm™d
;

196 
boﬁ
 
no_ack
;

199 
thªad_∑øms_t
 
thªad_∑øms
 = {

200 .
nb_lo›
 = {0, 0},

201 .
dñay_ms
 = {1000, 1000},

202 .
b™dwidth_khz
 = 
DEFAULT_LORA_BW
,

203 .
•ªad_Á˘‹
 = {
DEFAULT_LORA_SF
, DEFAULT_LORA_SF},

204 .
moduœti⁄_rf0
 = {"LORA"},

205 .
moduœti⁄_rf1
 = {"LORA"},

206 .
codög_øã
 = 
DEFAULT_LORA_CR
,

207 .
br_kbps
 = 
DEFAULT_FSK_BR
,

208 .
fdev_khz
 = 
DEFAULT_FSK_FDEV
,

209 .
rf_powî
 = {27, 27},

210 .
¥ómb_size
 = {
DEFAULT_LORA_PREAMBLE_SIZE
, DEFAULT_LORA_PREAMBLE_SIZE},

211 .
∂_size
 = {
DEFAULT_PAYLOAD_SIZE
, DEFAULT_PAYLOAD_SIZE},

212 .
‰eq_°ï
 = 0.2,

213 .
‰eq_nb
 = 1,

214 .
ùﬁ
 = 
Ál£


218 
±hªad_t
 
thrid_down_rf0
;

219 
±hªad_t
 
thrid_down_rf1
;

222  ( 
i
 = 
	`gë›t
–
¨gc
, 
¨gv
, "b:c:f:hij:l:p:r:s:t:x:z:A:F:P:m:d:q:" ) ) != -1 )

224  
i
 )

227 
	`ußge
( );

228  
EXIT_SUCCESS
;

232 
log_‚ame
 = 
›èrg
;

236 
p‹t_¨g
 = 
›èrg
;

240 
fwd_u∂ök
 = 
åue
;

241 
	`°∫˝y
–
£rv_addr
, 
›èrg
,  serv_addr );

242 
£rv_addr
[ serv_addr - 1] = '\0';

246 
	`°∫˝y
–
£rv_p‹t_fwd
, 
›èrg
,  serv_port_fwd );

247 
£rv_p‹t_fwd
[ serv_port_fwd - 1] = '\0';

251 
j
 = 
	`ssˇnf
–
›èrg
, "%lf,%lf", &
¨g_f
, &
¨g_f2
 );

252  
j
 )

255 if–(
¨g_f2
 < 30.0) || (arg_f2 > 3000.0) )

257 
∑r£_îr
 = 
åue
;

261 
thªad_∑øms
.
‰eq_mhz
[1] = 
¨g_f2
;

263 
FALL_THROUGH
;

265 if–(
¨g_f
 < 30.0) || (arg_f > 3000.0) )

267 
∑r£_îr
 = 
åue
;

271 
thªad_∑øms
.
‰eq_mhz
[0] = 
¨g_f
;

275 
∑r£_îr
 = 
åue
;

277 if–
∑r£_îr
 )

279 
	`¥ötf
( "ERROR:árgumentÖarsing of -fárgument\n" );

280 
	`ußge
( );

281  
EXIT_FAILURE
;

286 
j
 = 
	`ssˇnf
–
›èrg
, "%u:%lf", &
¨g_u
, &
¨g_f_°ï
 );

287  
j
 )

290 if–(
¨g_f_°ï
 < 0.05) || (arg_f_step > 20.0) )

292 
∑r£_îr
 = 
åue
;

296 
thªad_∑øms
.
‰eq_°ï
 = 
¨g_f_°ï
;

298 
FALL_THROUGH
;

300 if–(
¨g_u
 == 0) || (arg_u > 100) )

302 
∑r£_îr
 = 
åue
;

306 
thªad_∑øms
.
‰eq_nb
 = 
¨g_u
;

310 
∑r£_îr
 = 
åue
;

312 if–
∑r£_îr
 )

314 
	`¥ötf
( "ERROR:árgumentÖarsing of -járgument\n" );

315 
	`ußge
( );

316  
EXIT_FAILURE
;

321 
j
 = 
	`ssˇnf
–
›èrg
, "%u", &
¨g_u
 );

322 if–(
j
 !1Ë|| ((
¨g_u
 != 125) && (arg_u != 250) && (arg_u != 500)) )

324 
	`¥ötf
( "ERROR:árgumentÖarsing of -bárgument\n" );

325 
	`ußge
( );

326  
EXIT_FAILURE
;

330 
thªad_∑øms
.
b™dwidth_khz
 = (
uöt16_t
)
¨g_u
;

335 
j
 = 
	`ssˇnf
–
›èrg
, "%u,%u", &
¨g_u
, &
¨g_u2
 );

336  
j
 )

339 if–(
¨g_u2
 < 5) || (arg_u2 > 12) )

341 
∑r£_îr
 = 
åue
;

345 
thªad_∑øms
.
•ªad_Á˘‹
[1] = (
uöt8_t
)
¨g_u2
;

347 
FALL_THROUGH
;

349 if–(
¨g_u
 < 5) || (arg_u > 12) )

351 
∑r£_îr
 = 
åue
;

355 
thªad_∑øms
.
•ªad_Á˘‹
[0] = (
uöt8_t
)
¨g_u
;

359 
∑r£_îr
 = 
åue
;

361 if–
∑r£_îr
 )

363 
	`¥ötf
( "ERROR:árgumentÖarsing of -sárgument\n" );

364 
	`ußge
( );

365  
EXIT_FAILURE
;

370 
j
 = 
	`ssˇnf
–
›èrg
, "%s", 
¨g_s
 );

371 if–
j
 != 1 )

373 
	`¥ötf
( "ERROR:árgumentÖarsing of -cárgument\n" );

374 
	`ußge
( );

375  
EXIT_FAILURE
;

379 
	`°∫˝y
–
thªad_∑øms
.
codög_øã
, 
¨g_s
, Åhread_params.coding_rate );

380 
thªad_∑øms
.
codög_øã
[Åhread_params.coding_rate - 1] = '\0';

385 
j
 = 
	`ssˇnf
–
›èrg
, "%[^,],%[^,]", 
¨g_s
, 
¨g_s2
 );

386  
j
 )

389 
	`°∫˝y
–
thªad_∑øms
.
moduœti⁄_rf1
, 
¨g_s2
, Åhread_params.modulation_rf1 );

390 
thªad_∑øms
.
moduœti⁄_rf1
[Åhread_params.modulation_rf1 - 1] = '\0';

391 
FALL_THROUGH
;

393 
	`°∫˝y
–
thªad_∑øms
.
moduœti⁄_rf0
, 
¨g_s
, Åhread_params.modulation_rf0 );

394 
thªad_∑øms
.
moduœti⁄_rf0
[Åhread_params.modulation_rf0 - 1] = '\0';

397 
∑r£_îr
 = 
åue
;

399 if–
∑r£_îr
 )

401 
	`¥ötf
( "ERROR:árgumentÖarsing of -márgument\n" );

402 
	`ußge
( );

403  
EXIT_FAILURE
;

408 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

409 i‡((
i
 !1Ë|| (
¨g_u
 < 1) || (arg_u > 250)) {

410 
	`¥ötf
("ERROR: invalid FSK frequency deviation\n");

411 
	`ußge
( );

412  
EXIT_FAILURE
;

414 
thªad_∑øms
.
fdev_khz
 = (
uöt8_t
)
¨g_u
;

419 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_f
);

420 i‡((
i
 !1Ë|| (
¨g_f
 < 0.5) || (arg_f > 250)) {

421 
	`¥ötf
("ERROR: invalid FSK bitrate\n");

422 
	`ußge
( );

423  
EXIT_FAILURE
;

425 
thªad_∑øms
.
br_kbps
 = 
¨g_f
;

430 
j
 = 
	`ssˇnf
–
›èrg
, "%i,%i", &
¨g_i
, &
¨g_i2
 );

431  
j
 )

434 if–(
¨g_i2
 < -60) || (arg_i2 > 60) )

436 
∑r£_îr
 = 
åue
;

440 
thªad_∑øms
.
rf_powî
[1] = (
öt8_t
)
¨g_i2
;

442 
FALL_THROUGH
;

444 if–(
¨g_i
 < -60) || (arg_i > 60) )

446 
∑r£_îr
 = 
åue
;

450 
thªad_∑øms
.
rf_powî
[0] = (
öt8_t
)
¨g_i
;

454 
∑r£_îr
 = 
åue
;

456 if–
∑r£_îr
 )

458 
	`¥ötf
( "ERROR:árgumentÖarsing of -párgument\n" );

459 
	`ußge
( );

460  
EXIT_FAILURE
;

465 
j
 = 
	`ssˇnf
–
›èrg
, "%u,%u", &
¨g_u
, &
¨g_u2
 );

466  
j
 )

469 if–(
¨g_u2
 < 5) || (arg_u2 > 65535) )

471 
∑r£_îr
 = 
åue
;

475 
thªad_∑øms
.
¥ómb_size
[1] = (
uöt16_t
)
¨g_u2
;

477 
FALL_THROUGH
;

479 if–(
¨g_u
 < 5) || (arg_u > 65535) )

481 
∑r£_îr
 = 
åue
;

485 
thªad_∑øms
.
¥ómb_size
[0] = (
uöt16_t
)
¨g_u
;

489 
∑r£_îr
 = 
åue
;

491 if–
∑r£_îr
 )

493 
	`¥ötf
( "ERROR:árgumentÖarsing of -rárgument\n" );

494 
	`ußge
( );

495  
EXIT_FAILURE
;

500 
j
 = 
	`ssˇnf
–
›èrg
, "%u,%u", &
¨g_u
, &
¨g_u2
 );

501  
j
 )

504 if–
¨g_u2
 > 255 )

506 
∑r£_îr
 = 
åue
;

510 
thªad_∑øms
.
∂_size
[1] = (
uöt8_t
)
¨g_u2
;

512 
FALL_THROUGH
;

514 if–
¨g_u
 > 255 )

516 
∑r£_îr
 = 
åue
;

520 
thªad_∑øms
.
∂_size
[0] = (
uöt8_t
)
¨g_u
;

524 
∑r£_îr
 = 
åue
;

526 if–
∑r£_îr
 )

528 
	`¥ötf
( "ERROR:árgumentÖarsing of -zárgument\n" );

529 
	`ußge
( );

530  
EXIT_FAILURE
;

535 
thªad_∑øms
.
ùﬁ
 = 
åue
;

539 
j
 = 
	`ssˇnf
–
›èrg
, "%u,%u", &
¨g_u
, &
¨g_u2
 );

540  
j
 )

543 
thªad_∑øms
.
dñay_ms
[1] = (
uöt32_t
)
¨g_u2
;

544 
FALL_THROUGH
;

546 
thªad_∑øms
.
dñay_ms
[0] = (
uöt32_t
)
¨g_u
;

549 
∑r£_îr
 = 
åue
;

551 if–
∑r£_îr
 )

553 
	`¥ötf
( "ERROR:árgumentÖarsing of -tárgument\n" );

554 
	`ußge
( );

555  
EXIT_FAILURE
;

560 
j
 = 
	`ssˇnf
–
›èrg
, "%u,%u", &
¨g_u
, &
¨g_u2
 );

561  
j
 )

564 
thªad_∑øms
.
nb_lo›
[1] = (
uöt32_t
)
¨g_u2
;

565 
FALL_THROUGH
;

567 
thªad_∑øms
.
nb_lo›
[0] = (
uöt32_t
)
¨g_u
;

570 
∑r£_îr
 = 
åue
;

572 if–
∑r£_îr
 )

574 
	`¥ötf
( "ERROR:árgumentÖarsing of -xárgument\n" );

575 
	`ußge
( );

576  
EXIT_FAILURE
;

581 
	`¥ötf
( "ERROR:árgumentÖarsing options, use -h option for help\n" );

582 
	`ußge
( );

583  
EXIT_FAILURE
;

588 if–
p‹t_¨g
 =
NULL
 )

590 
	`¥ötf
( "ERROR: missingárgument, use -h option for help\n" );

591 
	`ußge
( );

592  
EXIT_FAILURE
;

596 
	`¥ötf
( "+++ Start ofÇetwork uplinkÜogger (30ms delay) +++\n" );

599 if–
fwd_u∂ök
 =
åue
 )

602 
	`mem£t
–&
höts
, 0,  hints );

603 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

604 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

605 
höts
.
ai_¥Ÿocﬁ
 = 
IPPROTO_UDP
;

606 
höts
.
ai_Êags
 = 
AI_ADDRCONFIG
;

609 
x
 = 
	`gëaddröfo
–
£rv_addr
, 
£rv_p‹t_fwd
, &
höts
, &
ªsu…
 );

610 if–
x
 != 0 )

612 
	`¥ötf
–"ERROR: [up] gëaddröfÿ⁄áddªs†%†(PORT %sËªtu∫ed %s\n", 
£rv_addr
, 
£rv_p‹t_fwd
, 
	`gai_°ªº‹
–
x
 ) );

613  
EXIT_FAILURE
;

617  
q
 = 
ªsu…
; q !
NULL
; q = q->
ai_√xt
 )

619 
sock_fwd
 = 
	`sockë
–
q
->
ai_Ámûy
, q->
ai_sockty≥
, q->
ai_¥Ÿocﬁ
 );

620 if–
sock_fwd
 == -1 ) ;

623 if–
q
 =
NULL
 )

625 
	`¥ötf
–"ERROR: [up] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
£rv_addr
, 
£rv_p‹t_fwd
 );

626  
EXIT_FAILURE
;

630 
	`gë«meöfo
–
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
 );

631 
	`¥ötf
–"INFO: sockë %ò›íed f‹ up°ªamÅøffic, ho°: %s,Ö‹t: %s\n", 
sock_fwd
, 
ho°_«me
, 
p‹t_«me
 );

635 
x
 = 
	`c⁄√˘
–
sock_fwd
, 
q
->
ai_addr
, q->
ai_addæí
 );

636 if–
x
 != 0 )

638 
	`¥ötf
–"ERROR: [up] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
–
î∫o
 ) );

639  
EXIT_FAILURE
;

643 
	`‰ìaddröfo
–
ªsu…
 );

646 
x
 = 
	`£tsock›t
–
sock_fwd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&(
push_timeout_hÆf
), Öush_timeout_half );

647 if–
x
 != 0 )

649 
	`¥ötf
–"ERROR: [up] sësock›àªtu∫ed %s\n", 
	`°ªº‹
–
î∫o
 ) );

650 
	`exô
–
EXIT_FAILURE
 );

655 
	`mem£t
–&
höts
, 0,  hints );

656 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

657 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

658 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

661 
x
 = 
	`gëaddröfo
–
NULL
, 
p‹t_¨g
, &
höts
, &
ªsu…
 );

662 if–
x
 != 0 )

664 
	`¥ötf
–"ERROR: gëaddröfÿªtu∫ed %s\n", 
	`gai_°ªº‹
–
x
 ) );

665  
EXIT_FAILURE
;

669  
q
 = 
ªsu…
; q !
NULL
; q = q->
ai_√xt
 )

671 
sock
 = 
	`sockë
–
q
->
ai_Ámûy
, q->
ai_sockty≥
, q->
ai_¥Ÿocﬁ
 );

672 if–
sock
 == -1 )

678 
x
 = 
	`böd
–
sock
, 
q
->
ai_addr
, q->
ai_addæí
 );

679 if–
x
 == -1 )

681 
	`shutdown
–
sock
, 
SHUT_RDWR
 );

686 
thªad_∑øms
.
sock
 = sock;

691 if–
q
 =
NULL
 )

693 
	`¥ötf
( "ERROR: failedÅo open socket orÅo bindÅo it\n" );

694 
i
 = 1;

695  
q
 = 
ªsu…
; q !
NULL
; q = q->
ai_√xt
 )

697 
	`gë«meöfo
–
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
 );

698 
	`¥ötf
–"INFO:Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
 );

699 ++
i
;

701  
EXIT_FAILURE
;

703 
	`¥ötf
–"INFO: utû_√t_dow∆ökÜi°íög o¿p‹à%s\n", 
p‹t_¨g
 );

704 
	`‰ìaddröfo
–
ªsu…
 );

707 if–
log_‚ame
 )

709 
log_fûe
 = 
	`f›í
–
log_‚ame
, "w+" );

710 if–
log_fûe
 =
NULL
 )

712 
	`¥ötf
–"ERROR: impossibÀÅÿ¸óãÜog fûê%s\n", 
log_‚ame
 );

713  
EXIT_FAILURE
;

718 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

719 
siga˘
.
ß_Êags
 = 0;

720 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

721 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

722 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

723 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

725 
i
 = 
	`±hªad_¸óã
–&
thrid_down_rf0
, 
NULL
, (* (*)–* ))
thªad_down_rf0
, (*)&
thªad_∑øms
 );

726 if–
i
 != 0 )

728 
	`¥ötf
( "ERROR: [main] impossibleÅo create downstreamÅhread\n" );

729  
EXIT_FAILURE
;

732 
i
 = 
	`±hªad_¸óã
–&
thrid_down_rf1
, 
NULL
, (* (*)–* ))
thªad_down_rf1
, (*)&
thªad_∑øms
 );

733 if–
i
 != 0 )

735 
	`¥ötf
( "ERROR: [main] impossibleÅo create downstreamÅhread for RF1\n" );

736  
EXIT_FAILURE
;

740  ( 
quô_sig
 !1 ) && ( 
exô_sig
 != 1 ) )

743 
	`mem£t
–
d©abuf_up
, 0, 4096 );

744 
byã_nb
 = 
	`ªcv‰om
–
sock
, 
d©abuf_up
,  d©abuf_up, 0, (
sockaddr
 *)&
di°_addr
, &
addr_Àn
 );

745 if–
byã_nb
 == -1 )

747 
	`¥ötf
–"ERROR:Ñecv‰omÑëu∫ed %†\n", 
	`°ªº‹
–
î∫o
 ) );

752 
x
 = 
	`gë«meöfo
–(
sockaddr
 *)&
di°_addr
, 
addr_Àn
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
 );

753 if–
x
 == -1 )

755 
	`¥ötf
–"ERROR: gë«meöfÿªtu∫ed %†\n", 
	`gai_°ªº‹
–
x
 ) );

756  
EXIT_FAILURE
;

758 
	`¥ötf
–" ->Ökàö , ho° %†’‹à%s), %òbyãs", 
ho°_«me
, 
p‹t_«me
, 
byã_nb
 );

761 if–
byã_nb
 < 12 )

764 
	`¥ötf
( " (too short for GW <-> MACÖrotocol)\n" );

770 if–
d©abuf_up
[0] !
PROTOCOL_VERSION
 )

772 
	`¥ötf
–", invÆid vîsi⁄ %u\n", 
d©abuf_up
[0] );

775 
øw_mac_h
 = *–(
uöt32_t
 *)–
d©abuf_up
 + 4 ) );

776 
øw_mac_l
 = *–(
uöt32_t
 *)–
d©abuf_up
 + 8 ) );

777 
gw_mac
 = ( (
uöt64_t
)
	`¡ohl
–
øw_mac_h
 ) << 32 ) + (uöt64_tÍtohl–
øw_mac_l
 );

780  
d©abuf_up
[3] )

782 
PKT_PUSH_DATA
:

783 
	`¥ötf
–", PUSH_DATA from g©eway 0x%08X%08X\n", (
uöt32_t
)–
gw_mac
 >> 32 ), (uint32_t)( gw_mac & 0xFFFFFFFF ) );

784 
ack_comm™d
 = 
PKT_PUSH_ACK
;

785 
no_ack
 = 
Ál£
;

786 if–
fwd_u∂ök
 =
Ál£
 )

788 
	`¥ötf
–"<-Ökàout, PUSH_ACK f‹ ho° %†’‹à%s)", 
ho°_«me
, 
p‹t_«me
 );

793 
	`¥ötf
–"<-Ökàout, PUSH_ACK f‹ ho° %†’‹à%s), FORWARD PUSH_DATAÅÿ%†’‹à%s)", 
ho°_«me
, 
p‹t_«me
, 
£rv_addr
, 
£rv_p‹t_fwd
 );

794 
x
 = 
	`£nd
–
sock_fwd
, (*)
d©abuf_up
, 
byã_nb
, 0 );

795 if–
x
 == -1 )

797 
	`¥ötf
–"ERROR: faûedÅÿf‹w¨d u∂ökÖackë - %†(%d)\n", 
	`°ªº‹
(
î∫o
),Érrno);

802 
PKT_PULL_DATA
:

803 
	`¥ötf
–", PULL_DATA from g©eway 0x%08X%08X\n", (
uöt32_t
)–
gw_mac
 >> 32 ), (uint32_t)( gw_mac & 0xFFFFFFFF ) );

804 
ack_comm™d
 = 
PKT_PULL_ACK
;

805 
no_ack
 = 
Ál£
;

806 
	`¥ötf
–"<-Ökàout, PULL_ACK f‹ ho° %†’‹à%s)", 
ho°_«me
, 
p‹t_«me
 );

808 
	`mem˝y
–&
di°_addr_down
, &
di°_addr
, (
sockaddr_°‹age
) );

809 
	`mem˝y
–&
addr_Àn_down
, &
addr_Àn
, (
sockÀn_t
) );

810 
	`±hªad_muãx_lock
–&
mx_sockaddr
 );

811 
sockaddr_vÆid
 = 
åue
;

812 
	`±hªad_muãx_u∆ock
–&
mx_sockaddr
 );

815 
PKT_TX_ACK
:

816 
	`¥ötf
–", TX_ACK from g©eway 0x%08X%08X\n", (
uöt32_t
)–
gw_mac
 >> 32 ), (uint32_t)( gw_mac & 0xFFFFFFFF ) );

817 
no_ack
 = 
åue
;

821 
	`¥ötf
–", u√x≥˘ed comm™d %u\n", 
d©abuf_up
[3] );

826 
	`u¶ìp
( 30000 );

829 if–
no_ack
 =
Ál£
 )

831 
	`mem£t
–
d©abuf_ack
, 0, 4 );

832 
d©abuf_ack
[0] = 
PROTOCOL_VERSION
;

833 
d©abuf_ack
[1] = 
d©abuf_up
[1];

834 
d©abuf_ack
[2] = 
d©abuf_up
[2];

835 
d©abuf_ack
[3] = 
ack_comm™d
;

836 
byã_nb
 = 
	`£ndto
–
sock
, (*)
d©abuf_ack
, 4, 0, (
sockaddr
 *)&
di°_addr
, 
addr_Àn
 );

837 if–
byã_nb
 == -1 )

839 
	`¥ötf
–", sídÉº‹:%s\n", 
	`°ªº‹
–
î∫o
 ) );

843 
	`¥ötf
–", %òbyã†£¡ f‹ ACK\n", 
byã_nb
 );

848 if–
d©abuf_up
[3] =
PKT_PUSH_DATA
 )

850 if–
log_‚ame
 !
NULL
 )

852 if–
is_fú°
 =
åue
 )

854 
	`Ârötf
(
log_fûe
, "tmst,ftime,chan,rfch,freq,mid,stat,modu,datr,bw,codr,rssic,rssis,lsnr,size,data\n");

855 
is_fú°
 = 
Ál£
;

857 
	`log_csv
–
log_fûe
, &
d©abuf_up
[12] );

863 
	`±hªad_joö
–
thrid_down_rf0
, 
NULL
 );

864 
	`±hªad_joö
–
thrid_down_rf1
, 
NULL
 );

866 
	`¥ötf
( "INFO: Exiting uplinkÜogger\n" );

869 if–(
log_‚ame
 !
NULL
Ë&& (
log_fûe
 != NULL) )

871 
	`f˛o£
–
log_fûe
 );

872 
log_fûe
 = 
NULL
;

876 
	}
}

880 
	$log_csv
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf
)

882 
JSON_Obje˘
 * 
rxpk
 = 
NULL
;

883 
JSON_Obje˘
 * 
roŸ
 = 
NULL
;

884 
JSON_Aºay
 * 
rxpk_¨øy
 = 
NULL
;

885 
JSON_VÆue
 * 
roŸ_vÆ
 = 
NULL
;

886 
JSON_VÆue
 * 
vÆ
 = 
NULL
;

887 
i
, 
j
, 
rxpk_nb
, 
x
;

888 c⁄° * 
°r
;

889 
x0
, 
x1
;

890 
uöt8_t
 
∑ylﬂd
[255];

891 
uöt8_t
 
size
;

893 if–
fûe
 =
NULL
 )

895 
	`¥ötf
("ERROR:Ço file opened\n");

900 
roŸ_vÆ
 = 
	`js⁄_∑r£_°rög
–(c⁄° *)
buf
 );

901 
roŸ
 = 
	`js⁄_vÆue_gë_obje˘
–
roŸ_vÆ
 );

902 if–
roŸ
 =
NULL
 )

904 
	`¥ötf
( "ERROR:Çotá valid JSON string\n" );

905 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

910 
rxpk_¨øy
 = 
	`js⁄_obje˘_gë_¨øy
–
roŸ
, "rxpk" );

911 if–
rxpk_¨øy
 !
NULL
)

913 
rxpk_nb
 = ()
	`js⁄_¨øy_gë_cou¡
–
rxpk_¨øy
 );

914  
i
 = 0; i < 
rxpk_nb
; i++ )

916 
rxpk
 = 
	`js⁄_¨øy_gë_obje˘
–
rxpk_¨øy
, 
i
 );

917 if–
rxpk
 =
NULL
)

919 
	`¥ötf
("ERROR: failedÅo getÑxpk object\n");

920 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

925 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "tmst" );

926 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

928 
	`¥ötf
( "ERROR: wrongÅype forÅmst\n" );

929 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

932 
	`Ârötf
(
fûe
, "%u", (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

935 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "ftime" );

936 if–
vÆ
 !
NULL
 )

939 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

941 
	`¥ötf
( "ERROR: wrongÅype forÅmst\n" );

942 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

945 
	`Ârötf
(
fûe
, ",%u", (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

947 
	`Ârötf
(
fûe
, "," );

950 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "chan" );

951 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

953 
	`¥ötf
( "ERROR: wrongÅype for chan\n" );

954 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

957 
	`Ârötf
(
fûe
, ",%u", (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

959 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "rfch" );

960 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

962 
	`¥ötf
( "ERROR: wrongÅype forÑfch\n" );

963 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

966 
	`Ârötf
(
fûe
, ",%u", (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

968 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "freq" );

969 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

971 
	`¥ötf
( "ERROR: wrongÅype forÑfch\n" );

972 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

975 
	`Ârötf
(
fûe
, ",%f", 
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

977 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "mid" );

978 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

980 
	`¥ötf
( "ERROR: wrongÅype for mid\n" );

981 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

984 
	`Ârötf
(
fûe
, ",%u", (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

986 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "stat" );

987 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

989 
	`¥ötf
( "ERROR: wrongÅype for stat\n" );

990 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

993 
	`Ârötf
(
fûe
, ",%d", (
öt8_t
)
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

995 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "modu" );

996 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONSåög
 )

998 
	`¥ötf
( "ERROR: wrongÅype for stat\n" );

999 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1002 
°r
 = 
	`js⁄_vÆue_gë_°rög
–
vÆ
 );

1003 
	`Ârötf
(
fûe
, ",%s", 
°r
 );

1004 if–
	`°rcmp
–
°r
, "LORA" ) == 0 )

1006 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "datr" );

1007 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONSåög
 )

1009 
	`¥ötf
( "ERROR: wrongÅype for datr\n" );

1010 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1013 
°r
 = 
	`js⁄_vÆue_gë_°rög
–
vÆ
 );

1014 
x
 = 
	`ssˇnf
–
°r
, "SF%2hdBW%3hd", &
x0
, &
x1
 );

1015 if–
x
 != 2 )

1017 
	`¥ötf
( "ERROR: formatÉrror in \"rxpk.datr\"\n" );

1018 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1021 
	`Ârötf
(
fûe
, ",%d,%d", 
x0
, 
x1
 );

1023 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "codr" );

1024 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONSåög
 )

1026 
	`¥ötf
( "ERROR: wrongÅype for codr\n" );

1027 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1030 
	`Ârötf
(
fûe
, ",%s", 
	`js⁄_vÆue_gë_°rög
–
vÆ
 ) );

1032 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "rssi" );

1033 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

1035 
	`¥ötf
( "ERROR: wrongÅype forÑssic\n" );

1036 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1039 
	`Ârötf
(
fûe
, ",%.1f", 
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

1041 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "rssis" );

1042 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

1044 
	`¥ötf
( "ERROR: wrongÅype forÑssis\n" );

1045 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1048 
	`Ârötf
(
fûe
, ",%.1f", 
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

1050 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "lsnr" );

1051 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

1053 
	`¥ötf
( "ERROR: wrongÅype forÜsnr\n" );

1054 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1057 
	`Ârötf
(
fûe
, ",%.1f", 
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

1059 if–
	`°rcmp
–
°r
, "FSK" ) == 0 )

1061 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "datr" );

1062 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

1064 
	`¥ötf
( "ERROR: wrongÅype for datr\n" );

1065 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1068 
	`Ârötf
(
fûe
, ",%d,,", (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

1070 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "rssi" );

1071 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

1073 
	`¥ötf
( "ERROR: wrongÅype forÑssic\n" );

1074 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1077 
	`Ârötf
(
fûe
, ",%.1f,,", 
	`js⁄_vÆue_gë_numbî
–
vÆ
 ) );

1081 
	`¥ötf
("ERROR: unknow¿moduœti⁄ %s\n", 
°r
);

1082 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1086 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "size" );

1087 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONNumbî
 )

1089 
	`¥ötf
( "ERROR: wrongÅype for size\n" );

1090 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1093 
size
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
–
vÆ
 );

1094 
	`Ârötf
(
fûe
, ",%u", 
size
 );

1096 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
–
rxpk
, "data" );

1097 if–
	`js⁄_vÆue_gë_ty≥
–
vÆ
 ) !
JSONSåög
 )

1099 
	`¥ötf
( "ERROR: wrongÅype for data\n" );

1100 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1103 
°r
 = 
	`js⁄_vÆue_gë_°rög
–
vÆ
 );

1104 
x
 = 
	`b64_to_bö
–
°r
, 
	`°æí
–°∏), 
∑ylﬂd
, Öayload );

1105 if–
x
 !
size
 )

1107 
	`¥ötf
( "ERROR: mismatch between .sizeánd .data size once converterÅo binary\n" );

1108 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1111 
	`Ârötf
(
fûe
, "," );

1112  
j
 = 0; j < 
size
; j++ )

1114 
	`Ârötf
(
fûe
, "%02x", 
∑ylﬂd
[
j
] );

1118 
	`Ârötf
(
fûe
, "\n" );

1122 
	`fÊush
(
fûe
);

1123 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1124 
	}
}

1128 
	$ußge
( )

1130 
	`¥ötf
( "~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

1131 
	`¥ötf
( " -hÖrintÅhis help\n" );

1132 
	`¥ötf
( " -f <float,float> Target frequency in MHz for RF0,RF1\n" );

1133 
	`¥ötf
( " -j <uint>:<float> Number of channelsÅo jump +Éxplicit offset in MHz between channels\n" );

1134 
	`¥ötf
( " -m <string,string> Modulation [\"LORA\",\"FSK\"] for RF0,RF1\n" );

1135 
	`¥ötf
( " -b <uint> LoRa bandwidth in kHz [125, 250, 500]\n" );

1136 
	`¥ötf
( " -s <uint,uint> LoRa Spreading Factor [5-12] for RF0,RF1\n" );

1137 
	`¥ötf
( " -c <string> LoRa Coding Rate [\"4/5\", \"4/6\", ...]\n" );

1138 
	`¥ötf
( " -d <uint> FSK frequency deviation in kHz [1:250]\n");

1139 
	`¥ötf
( " -q <float> FSK bitrate in kbps [0.5:250]\n");

1140 
	`¥ötf
( " -p <int,int> RFÖower (dBm) for RF0,RF1\n" );

1141 
	`¥ötf
( " -r <uint,uint> Preamble size (symbols, [6..65535]) for RF0,RF1\n" );

1142 
	`¥ötf
( " -z <uint,uint> Payload size (bytes, [0..255]) for RF0,RF1\n" );

1143 
	`¥ötf
( " -i Set invertedÖolarityÅrue\n" );

1144 
	`¥ötf
( " -t <uint,uint> Number of milliseconds betweenÅwo downlinks for RF0,RF1\n" );

1145 
	`¥ötf
( " -x <uint,uint> Number of downlinksÅo be sent for RF0,RF1\n" );

1146 
	`¥ötf
( " -P <udpÖort> UDPÖort ofÅhe Packet Forwarder\n" );

1147 
	`¥ötf
( " -A <ipáddress> IPáddressÅo be used for uplink forwarding (optional)\n" );

1148 
	`¥ötf
( " -F <udpÖort> UDPÖortÅo be used for uplink forwarding (optional)\n" );

1149 
	`¥ötf
( " -l <filename> uplinkÜogging CSV filename (optional)\n" );

1150 
	`¥ötf
( " -B Bypass downlink, for uplinkÜogging only (optional)\n" );

1151 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

1152 
	`¥ötf
( "~~~ Examples ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

1153 
	`¥ötf
( " Log uplinks intoá CSV file,Ço downlink:\n" );

1154 
	`¥ötf
( " ./net_downlink -P 1730 -lÜog.csv\n" );

1155 
	`¥ötf
( " Send downlinks on RF chain 0 only:\n" );

1156 
	`¥ötf
( " ./net_downlink -f 865.1 -s 7 -b 125 -r 8 -t 500 -x 10 -P 1730\n" );

1157 
	`¥ötf
( " Send downlinks on RF chain 1 only:\n" );

1158 
	`¥ötf
( " ./net_downlink -f 865.1,865.3 -s 7,8 -t 1000,1000 -x 0,10 -P 1730\n" );

1159 
	`¥ötf
( " Send downlinks on both RF chain 0ánd 1:\n" );

1160 
	`¥ötf
( " ./net_downlink -f 865.1,865.9 -s 10,7 -t 500,1000 -x 5,10 -P 1730\n" );

1161 
	`¥ötf
( " Trigger continuous TX on both RF chain 0ánd 1:\n" );

1162 
	`¥ötf
( " ./net_downlink -f 865.1,865.9 -s 11,12 -x 1,1 -r 65535,65535 -P 1730\n" );

1163 
	`¥ötf
( " Log uplinks into CSV file while continuous TX isÑunning (full_duplexÅesting):\n" );

1164 
	`¥ötf
( " ./net_downlink -f 864.5 -s 12 -x 1 -r 65535 -P 1730 -lÜog.csv\n" );

1165 
	}
}

1169 
	$sig_h™dÀr
–
sigio
 )

1171 if–
sigio
 =
SIGQUIT
 )

1173 
quô_sig
 = 1;

1175 if––
sigio
 =
SIGINT
 ) || ( sigiÿ=
SIGTERM
 ) )

1177 
exô_sig
 = 1;

1179 
	}
}

1183 
	$¥ï¨e_dow∆ök_js⁄
–c⁄° 
thªad_∑øms_t
 * 
∑øms
, 
uöt8_t
 
rf_chaö
, 
uöt32_t
 
pkt_£¡
, 
JSON_VÆue
 * 
roŸ_vÆ
 )

1185 
j
;

1187 
JSON_VÆue
 *
vÆ
 = 
NULL
;

1188 
JSON_Obje˘
 *
roŸ_obj
 = 
NULL
;

1189 
JSON_Obje˘
 *
obj
 = 
NULL
;

1191 
d©¨©e_°rög
[16];

1192 
uöt8_t
 
∑ylﬂd
[255];

1193 
uöt8_t
 
∑ylﬂd_b64
[341];

1194 
‰eq
;

1195 
uöt8_t
 
sf
;

1196 
öt8_t
 
rf_pwr
;

1197 
uöt16_t
 
¥óm_sz
;

1198 c⁄° *
moduœti⁄
 = (
rf_chaö
 =0Ë? 
∑øms
->
moduœti⁄_rf0
 :Ö¨ams->
moduœti⁄_rf1
;

1200 
	`mem£t
–
d©¨©e_°rög
, 0,  datarate_string );

1201 
	`mem£t
–
∑ylﬂd
, 0, Öayload );

1202 
	`mem£t
–
∑ylﬂd_b64
, 0, Öayload_b64 );

1204 
roŸ_obj
 = 
	`js⁄_vÆue_gë_obje˘
–
roŸ_vÆ
 );

1205 if–
roŸ_obj
 =
NULL
 )

1207 
	`¥ötf
( "ERROR: failedÅo get JSONÑoot object\n" );

1211 
	`js⁄_obje˘_£t_vÆue
–
roŸ_obj
, "txpk", 
	`js⁄_vÆue_öô_obje˘
( ) );

1212 
obj
 = 
	`js⁄_obje˘_gë_obje˘
–
roŸ_obj
, "txpk" );

1215 
	`js⁄_obje˘_£t_boﬁón
–
obj
, "imme", 
åue
 );

1216 
‰eq
 = 
∑øms
->
‰eq_mhz
[
rf_chaö
] + ((
pkt_£¡
 %Ö¨ams->
‰eq_nb
Ë*Ö¨ams->
‰eq_°ï
);

1217 
	`js⁄_obje˘_£t_numbî
–
obj
, "‰eq", 
‰eq
 );

1218 
	`js⁄_obje˘_£t_numbî
–
obj
, "rfch", 
rf_chaö
 );

1219 
rf_pwr
 = 
∑øms
->
rf_powî
[
rf_chaö
];

1220 
	`js⁄_obje˘_£t_numbî
–
obj
, "powe", 
rf_pwr
 );

1221 if–
	`°∫cmp
–
moduœti⁄
, "LORA", 4 ) == 0 )

1223 
	`js⁄_obje˘_£t_°rög
–
obj
, "modu", "LORA" );

1224 
sf
 = 
∑øms
->
•ªad_Á˘‹
[
rf_chaö
];

1225 
	`•rötf
–
d©¨©e_°rög
, "SF%uBW%u", 
sf
, 
∑øms
->
b™dwidth_khz
);

1226 
	`js⁄_obje˘_£t_°rög
–
obj
, "d©r", 
d©¨©e_°rög
 );

1227 
	`js⁄_obje˘_£t_°rög
–
obj
, "codr", 
∑øms
->
codög_øã
 );

1228 } if–
	`°∫cmp
–
moduœti⁄
, "FSK", 3 ) == 0 ) {

1229 
	`js⁄_obje˘_£t_°rög
–
obj
, "modu", "FSK" );

1230 
	`js⁄_obje˘_£t_numbî
–
obj
, "d©r", 
∑øms
->
br_kbps
 * 1E3 );

1231 
	`js⁄_obje˘_£t_numbî
–
obj
, "fdev", 
∑øms
->
fdev_khz
 * 1E3 );

1233 
	`¥ötf
( "ERROR: wrong modulation\n" );

1235 
	`js⁄_obje˘_£t_boﬁón
–
obj
, "ùﬁ", 
∑øms
->
ùﬁ
 );

1236 
¥óm_sz
 = 
∑øms
->
¥ómb_size
[
rf_chaö
];

1237 
	`js⁄_obje˘_£t_numbî
–
obj
, "¥ó", 
¥óm_sz
 );

1238 
	`js⁄_obje˘_£t_boﬁón
–
obj
, "n¸c", 
åue
 );

1239 
	`js⁄_obje˘_£t_boﬁón
–
obj
, "nhdr", 
Ál£
 );

1240 
	`js⁄_obje˘_£t_numbî
–
obj
, "size", 
∑øms
->
∂_size
[
rf_chaö
] );

1243  
j
 = 0; j < 
∑øms
->
∂_size
[
rf_chaö
]; j++ )

1245 
∑ylﬂd
[
∑øms
->
∂_size
[
rf_chaö
] - ( 
j
 + 1 )] = (
uöt8_t
)–(
pkt_£¡
 >> (j * 8)) & 0xFF );

1248 
j
 = 
	`bö_to_b64
–
∑ylﬂd
, 
∑øms
->
∂_size
[
rf_chaö
], (*)(
∑ylﬂd_b64
), 341 );

1249 if–
j
 >= 0 )

1251 
	`js⁄_obje˘_£t_°rög
–
obj
, "d©a", (*)(
∑ylﬂd_b64
) );

1255 
	`¥ötf
( "ERROR: failedÅo convertÖayloadÅo base64 string\n" );

1259 
	`js⁄_vÆue_‰ì
–
vÆ
 );

1261 
	}
}

1265 * 
	$thªad_down_rf0
–c⁄° * 
¨g
 )

1267 
x
;

1268 
byã_nb
;

1269 c⁄° 
thªad_∑øms_t
 *
∑øms
 = ( (thªad_∑øms_t*)
¨g
 );

1272 
ho°_«me
[64];

1273 
p‹t_«me
[64];

1276 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

1277 *
£rülized_°rög
 = 
NULL
;

1280 
uöt8_t
 
d©abuf_down
[4096];

1281 
uöt32_t
 
nb_lo›
;

1282 
uöt32_t
 
pkt_£¡
 = 0;

1285 
nb_lo›
 = 
∑øms
->nb_loop[0];

1286  !
exô_sig
 && !
quô_sig
 && (
pkt_£¡
 < 
nb_lo›
) && (nb_loop > 0) )

1289 
	`±hªad_muãx_lock
–&
mx_sockaddr
 );

1290 if–
sockaddr_vÆid
 =
Ál£
 )

1292 
	`±hªad_muãx_u∆ock
–&
mx_sockaddr
 );

1293 
	`¥ötf
( "Waiting for socketÅo beÑeady...\n" );

1294 
	`u¶ìp
( 500000 );

1297 
	`±hªad_muãx_u∆ock
–&
mx_sockaddr
 );

1300 
x
 = 
	`gë«meöfo
–(
sockaddr
 *)&
di°_addr_down
, 
addr_Àn_down
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
 );

1301 if–
x
 == -1 )

1303 
	`¥ötf
–"ERROR: gë«meöfÿªtu∫ed %†\n", 
	`gai_°ªº‹
–
x
 ) );

1304 
	`u¶ìp
( 10000);

1309 
roŸ_vÆ
 = 
	`js⁄_vÆue_öô_obje˘
( );

1310 if–
roŸ_vÆ
 =
NULL
 )

1312 
	`¥ötf
( "ERROR: failedÅo initialize JSONÑoot object\n" );

1317 
	`¥ï¨e_dow∆ök_js⁄
–
∑øms
, 0, 
pkt_£¡
, 
roŸ_vÆ
 );

1320 
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög
–
roŸ_vÆ
 );

1321 
	`¥ötf
–"%s\n", 
£rülized_°rög
 );

1324 
	`mem£t
–
d©abuf_down
, 0, 4096 );

1325 
d©abuf_down
[0] = 
PROTOCOL_VERSION
;

1326 
d©abuf_down
[1] = 0;

1327 
d©abuf_down
[2] = 0;

1328 
d©abuf_down
[3] = 
PKT_PULL_RESP
;

1329 
	`mem˝y
–&
d©abuf_down
[4], (
uöt8_t
*)
£rülized_°rög
, 
	`°æí
(serialized_string) );

1330 
byã_nb
 = 
	`£ndto
–
∑øms
->
sock
, (*)
d©abuf_down
, 
	`°æí
(
£rülized_°rög
Ë+ 4, 0, (
sockaddr
 *)&
di°_addr_down
, 
addr_Àn_down
 );

1331 if–
byã_nb
 == -1 )

1333 
	`¥ötf
–"ERROR: faûedÅÿ£nd dow∆ökÅÿsockë - %s\n", 
	`°ªº‹
–
î∫o
 ) );

1337 
	`¥ötf
–"<-Ökàout, PULL_RESP f‹ ho° %†’‹à%s), %òbyã†£¡ f‹ dow∆ök (%d)\n", 
ho°_«me
, 
p‹t_«me
, 
byã_nb
, 
pkt_£¡
 );

1341 
	`js⁄_‰ì_£rülized_°rög
–
£rülized_°rög
 );

1342 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1346 
pkt_£¡
 += 1;

1348 
	`u¶ìp
–
∑øms
->
dñay_ms
[0] * 1E3 );

1352 
	`¥ötf
( "\nINFO: End of downstreamÅhread for RF 0\n" );

1353  
NULL
;

1354 
	}
}

1358 * 
	$thªad_down_rf1
–c⁄° * 
¨g
 )

1360 
x
;

1361 
byã_nb
;

1362 c⁄° 
thªad_∑øms_t
 *
∑øms
 = ( (thªad_∑øms_t*)
¨g
 );

1365 
ho°_«me
[64];

1366 
p‹t_«me
[64];

1369 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

1370 *
£rülized_°rög
 = 
NULL
;

1373 
uöt8_t
 
d©abuf_down
[4096];

1374 
uöt32_t
 
nb_lo›
;

1375 
uöt32_t
 
pkt_£¡
 = 0;

1378 
nb_lo›
 = 
∑øms
->nb_loop[1];

1379  !
exô_sig
 && !
quô_sig
 && (
pkt_£¡
 < 
nb_lo›
) && (nb_loop > 0) )

1382 
	`±hªad_muãx_lock
–&
mx_sockaddr
 );

1383 if–
sockaddr_vÆid
 =
Ál£
 )

1385 
	`±hªad_muãx_u∆ock
–&
mx_sockaddr
 );

1386 
	`¥ötf
( "Waiting for socketÅo beÑeady...\n" );

1387 
	`u¶ìp
( 500000 );

1390 
	`±hªad_muãx_u∆ock
–&
mx_sockaddr
 );

1393 
x
 = 
	`gë«meöfo
–(
sockaddr
 *)&
di°_addr_down
, 
addr_Àn_down
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
 );

1394 if–
x
 == -1 )

1396 
	`¥ötf
–"ERROR: gë«meöfÿªtu∫ed %†\n", 
	`gai_°ªº‹
–
x
 ) );

1397 
	`u¶ìp
( 10000);

1402 
roŸ_vÆ
 = 
	`js⁄_vÆue_öô_obje˘
( );

1403 if–
roŸ_vÆ
 =
NULL
 )

1405 
	`¥ötf
( "ERROR: failedÅo initialize JSONÑoot object\n" );

1410 
	`¥ï¨e_dow∆ök_js⁄
–
∑øms
, 1, 
pkt_£¡
, 
roŸ_vÆ
 );

1413 
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög
–
roŸ_vÆ
 );

1414 
	`¥ötf
–"%s\n", 
£rülized_°rög
 );

1417 
	`mem£t
–
d©abuf_down
, 0, 4096 );

1418 
d©abuf_down
[0] = 
PROTOCOL_VERSION
;

1419 
d©abuf_down
[1] = 0;

1420 
d©abuf_down
[2] = 0;

1421 
d©abuf_down
[3] = 
PKT_PULL_RESP
;

1422 
	`mem˝y
–&
d©abuf_down
[4], (
uöt8_t
*)
£rülized_°rög
, 
	`°æí
(serialized_string) );

1423 
byã_nb
 = 
	`£ndto
–
∑øms
->
sock
, (*)
d©abuf_down
, 
	`°æí
(
£rülized_°rög
Ë+ 4, 0, (
sockaddr
 *)&
di°_addr_down
, 
addr_Àn_down
 );

1424 if–
byã_nb
 == -1 )

1426 
	`¥ötf
–"ERROR: faûedÅÿ£nd dow∆ökÅÿsockë - %s\n", 
	`°ªº‹
–
î∫o
 ) );

1430 
	`¥ötf
–"<-Ökàout, PULL_RESP f‹ ho° %†’‹à%s), %òbyã†£¡ f‹ dow∆ök (%d)\n", 
ho°_«me
, 
p‹t_«me
, 
byã_nb
, 
pkt_£¡
 );

1434 
	`js⁄_‰ì_£rülized_°rög
–
£rülized_°rög
 );

1435 
	`js⁄_vÆue_‰ì
–
roŸ_vÆ
 );

1439 
pkt_£¡
 += 1;

1441 
	`u¶ìp
–
∑øms
->
dñay_ms
[1] * 1E3 );

1445 
	`¥ötf
( "\nINFO: End of downstreamÅhread for RF1\n" );

1446  
NULL
;

1447 
	}
}

	@util_spectral_scan/src/spectral_scan.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<öây≥s.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<m©h.h
>

34 
	~<sig«l.h
>

35 
	~<gë›t.h
>

37 
	~"l‹agw_hÆ.h
"

38 
	~"l‹agw_aux.h
"

46 
	#COM_TYPE_DEFAULT
 
LGW_COM_SPI


	)

47 
	#COM_PATH_DEFAULT
 "/dev/•idev0.0"

	)

48 
	#SX1261_PATH_DEFAULT
 "/dev/•idev0.1"

	)

50 
	#DEFAULT_CLK_SRC
 0

	)

51 
	#DEFAULT_RADIO_TYPE
 
LGW_RADIO_TYPE_SX1250


	)

52 
	#DEFAULT_FREQ_HZ
 863100000U

	)

53 
	#DEFAULT_NB_CHAN
 35

	)

54 
	#DEFAULT_NB_SCAN
 2000

	)

55 
	#DEFAULT_RSSI_OFFSET
 -11

	)

57 
	#DEFAULT_LOG_NAME
 "rssi_hi°ogøm"

	)

66 
	$ußge
() {

67 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

68 
	`¥ötf
("Available options:\n");

69 
	`¥ötf
(" -h PrintÅhis help\n");

70 
	`¥ötf
(" -u Set COMÅypeás USB (default is SPI)\n");

71 
	`¥ötf
(" -d [path] PathÅoÅhe main COM interface\n");

72 
	`¥ötf
(" => deÁu…Ö©h: " 
COM_PATH_DEFAULT
 "\n");

73 
	`¥ötf
(" -D [path] PathÅoÅhe SX1261 SPI interface (not used for USB)\n");

74 
	`¥ötf
(" => deÁu…Ö©h: " 
SX1261_PATH_DEFAULT
 "\n");

75 
	`¥ötf
(" -f <float> Scan start frequency, in MHz\n");

76 
	`¥ötf
(" -n <uint> Number of channelsÅo scan\n");

77 
	`¥ötf
(" -s <uint> Number of scanÖointsÖer frequency step [1..65535]\n");

78 
	`¥ötf
(" -o <int> RSSI Offset ofÅhe sx1261Öath, in dB [-127..128]\n");

79 
	`¥ötf
(" -l <char> Log fileÇame\n");

80 
	}
}

85 
	$maö
(
¨gc
, **
¨gv
)

87 
i
, 
j
, 
x
;

88 
¨g_u
;

89 
¨g_d
 = 0.0;

90 
¨g_i
;

91 
¨g_s
[64];

93 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

94 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

95 
lgw_c⁄f_sx1261_s
 
sx1261c⁄f
;

98 c⁄° 
com_∑th_deÁu…
[] = 
COM_PATH_DEFAULT
;

99 c⁄° * 
com_∑th
 = 
com_∑th_deÁu…
;

100 
lgw_com_ty≥_t
 
com_ty≥
 = 
COM_TYPE_DEFAULT
;

101 c⁄° 
sx1261_∑th_deÁu…
[] = 
SX1261_PATH_DEFAULT
;

102 c⁄° * 
sx1261_∑th
 = 
sx1261_∑th_deÁu…
;

105 
uöt32_t
 
‰eq_hz
 = 
DEFAULT_FREQ_HZ
;

106 
uöt8_t
 
nb_ch™√ls
 = 
DEFAULT_NB_CHAN
;

107 
uöt16_t
 
nb_sˇn
 = 
DEFAULT_NB_SCAN
;

108 
öt8_t
 
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

109 
öt16_t
 
Àvñs
[
LGW_SPECTRAL_SCAN_RESULT_SIZE
];

110 
uöt16_t
 
ªsu…s
[
LGW_SPECTRAL_SCAN_RESULT_SIZE
];

111 
log_fûe_«me
[64] = 
DEFAULT_LOG_NAME
;

112 
FILE
 * 
log_fûe
 = 
NULL
;

114 
timevÆ
 
tm_°¨t
;

115 
lgw_•e˘øl_sˇn_°©us_t
 
°©us
;

118 
›ti⁄_ödex
 = 0;

119 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

124 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hud:f:n:o:s:l:D:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

125 
i
) {

127 
	`ußge
();

132 
com_ty≥
 = 
LGW_COM_USB
;

136 
com_∑th
 = 
›èrg
;

140 
sx1261_∑th
 = 
›èrg
;

144 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

145 i‡(
i
 != 1) {

146 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

147  
EXIT_FAILURE
;

149 
‰eq_hz
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

154 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

155 i‡(
i
 != 1) {

156 
	`¥ötf
("ERROR:árgumentÖarsing of -nárgument. Use -hÅoÖrint help\n");

157  
EXIT_FAILURE
;

159 i‡(
¨g_u
 > 255) {

160 
	`¥ötf
("ERROR: Number of channels must be < 255\n");

161  
EXIT_FAILURE
;

163 
nb_ch™√ls
 = (
uöt8_t
)
¨g_u
;

168 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

169 i‡(
i
 != 1) {

170 
	`¥ötf
("ERROR:árgumentÖarsing of -nárgument. Use -hÅoÖrint help\n");

171  
EXIT_FAILURE
;

173 i‡(
¨g_u
 > 65535) {

174 
	`¥ötf
("ERROR: Number of scan must be < 65535\n");

175  
EXIT_FAILURE
;

177 
nb_sˇn
 = (
uöt16_t
)
¨g_u
;

182 
i
 = 
	`ssˇnf
(
›èrg
, "%d", &
¨g_i
);

183 i‡(
i
 != 1) {

184 
	`¥ötf
("ERROR:árgumentÖarsing of -oárgument. Use -hÅoÖrint help\n");

185  
EXIT_FAILURE
;

187 i‡(
¨g_i
 < -127 ||árg_i > 128) {

188 
	`¥ötf
("ERROR: SX1261 RSSI value out ofÑange\n");

189  
EXIT_FAILURE
;

191 
rssi_off£t
 = (
öt8_t
)
¨g_i
;

196 
j
 = 
	`ssˇnf
(
›èrg
, "%63s", 
¨g_s
);

197 i‡(
j
 != 1) {

198 
	`¥ötf
("ERROR:árgumentÖarsing of -lárgument. Use -hÅoÖrint help\n");

199  
EXIT_FAILURE
;

201 
	`•rötf
(
log_fûe_«me
, "%s", 
¨g_s
);

206 
	`¥ötf
("ERROR:árgumentÖarsing\n");

207 
	`ußge
();

212 
	`¥ötf
("==\n");

213 
	`¥ötf
("=S≥˘ø»Sˇn: fªq_hz=%uHz,Çb_ch™√ls=%u,Çb_sˇn=%u,Ñssi_off£t=%ddB\n", 
‰eq_hz
, 
nb_ch™√ls
, 
nb_sˇn
, 
rssi_off£t
);

214 
	`¥ötf
("==\n");

216 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

218 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

219 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

220 
	`exô
(
EXIT_FAILURE
);

225 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

226 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

227 
bﬂrdc⁄f
.
˛k§c
 = 
DEFAULT_CLK_SRC
;

228 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

229 
bﬂrdc⁄f
.
com_ty≥
 = com_type;

230 
	`°∫˝y
(
bﬂrdc⁄f
.
com_∑th
, com_path,  boardconf.com_path);

231 
bﬂrdc⁄f
.
com_∑th
[ boardconf.com_path - 1] = '\0';

232 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

233 
	`¥ötf
("ERROR: failedÅo configure board\n");

234  
EXIT_FAILURE
;

237 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

238 
rfc⁄f
.
íabÀ
 = 
åue
;

239 
rfc⁄f
.
‰eq_hz
 = 867500000;

240 
rfc⁄f
.
ty≥
 = 
DEFAULT_RADIO_TYPE
;

241 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

242 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

243 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

244 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

245  
EXIT_FAILURE
;

248 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

249 
rfc⁄f
.
íabÀ
 = 
åue
;

250 
rfc⁄f
.
‰eq_hz
 = 868500000;

251 
rfc⁄f
.
ty≥
 = 
DEFAULT_RADIO_TYPE
;

252 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

253 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

254 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

255 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

256  
EXIT_FAILURE
;

260 
	`mem£t
(&
sx1261c⁄f
, 0,  sx1261conf);

261 
sx1261c⁄f
.
íabÀ
 = 
åue
;

262 
	`°∫˝y
(
sx1261c⁄f
.
•i_∑th
, 
sx1261_∑th
,  sx1261conf.spi_path);

263 
sx1261c⁄f
.
•i_∑th
[ sx1261conf.spi_path - 1] = '\0';

264 
sx1261c⁄f
.
rssi_off£t
 =Ñssi_offset;

265 
sx1261c⁄f
.
lbt_c⁄f
.
íabÀ
 = 
Ál£
;

266 i‡(
	`lgw_sx1261_£tc⁄f
(&
sx1261c⁄f
Ë!
LGW_HAL_SUCCESS
) {

267 
	`¥ötf
("ERROR: failedÅo configure sx1261\n");

268  
EXIT_FAILURE
;

272 
x
 = 
	`lgw_°¨t
();

273 i‡(
x
 != 0) {

274 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

275  
EXIT_FAILURE
;

279 
	`°rˇt
(
log_fûe_«me
,".csv");

280 
log_fûe
 = 
	`f›í
(
log_fûe_«me
, "w");

281 i‡(
log_fûe
 =
NULL
) {

282 
	`¥ötf
("ERROR: impossibÀÅÿ¸óãÜog fûê%s\n", 
log_fûe_«me
);

283  
EXIT_FAILURE
;

287 
j
 = 0; j < 
nb_ch™√ls
; j++) {

288 
x
 = 
	`lgw_•e˘øl_sˇn_°¨t
(
‰eq_hz
, 
nb_sˇn
);

289 i‡(
x
 != 0) {

290 
	`¥ötf
("ERROR: spectral scan start failed\n");

295 
	`timeout_°¨t
(&
tm_°¨t
);

298 i‡(
	`timeout_check
(
tm_°¨t
, 2000) != 0) {

299 
	`¥ötf
("ERROR: %s: TIMEOUT o¿S≥˘ø»Sˇn\n", 
__FUNCTION__
);

304 
°©us
 = 
LGW_SPECTRAL_SCAN_STATUS_UNKNOWN
;

305 
x
 = 
	`lgw_•e˘øl_sˇn_gë_°©us
(&
°©us
);

306 i‡(
x
 != 0) {

307 
	`¥ötf
("ERROR: spectral scan status failed\n");

311 
	`waô_ms
(10);

312 } 
°©us
 !
LGW_SPECTRAL_SCAN_STATUS_COMPLETED
 && sètu†!
LGW_SPECTRAL_SCAN_STATUS_ABORTED
);

314 i‡(
°©us
 =
LGW_SPECTRAL_SCAN_STATUS_COMPLETED
) {

315 
	`mem£t
(
Àvñs
, 0, Üevels);

316 
	`mem£t
(
ªsu…s
, 0, Ñesults);

317 
x
 = 
	`lgw_•e˘øl_sˇn_gë_ªsu…s
(
Àvñs
, 
ªsu…s
);

318 i‡(
x
 != 0) {

319 
	`¥ötf
("ERROR: spectral scan getÑesults failed\n");

324 
	`Ârötf
(
log_fûe
, "%u", 
‰eq_hz
);

325 
i
 = 0; i < 
LGW_SPECTRAL_SCAN_RESULT_SIZE
; i++) {

326 
	`Ârötf
(
log_fûe
, ",%d,%u", 
Àvñs
[
i
], 
ªsu…s
[i]);

328 
	`Ârötf
(
log_fûe
, "\n");

331 
	`¥ötf
("%u: ", 
‰eq_hz
);

332 
i
 = 0; i < 
LGW_SPECTRAL_SCAN_RESULT_SIZE
; i++) {

333 
	`¥ötf
("%u ", 
ªsu…s
[
i
]);

335 
	`¥ötf
("\n");

338 
‰eq_hz
 += 200000;

339 } i‡(
°©us
 =
LGW_SPECTRAL_SCAN_STATUS_ABORTED
) {

340 
	`¥ötf
("INFO: spectral scan has beenáborted\n");

342 
	`¥ötf
("ERROR: s≥˘ø»sˇ¿°©u†u†u√x≥˘ed 0x%02X\n", 
°©us
);

347 
	`f˛o£
(
log_fûe
);

350 
x
 = 
	`lgw_°›
();

351 i‡(
x
 != 0) {

352 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

353  
EXIT_FAILURE
;

356 i‡(
com_ty≥
 =
LGW_COM_SPI
) {

358 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

359 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

360 
	`exô
(
EXIT_FAILURE
);

365 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_FILE_OFFSET64


148 
f˙é
 (
__fd
, 
__cmd
, ...);

150 #ifde‡
__REDIRECT


151 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

153 
	#f˙é
 
f˙é64


	)

156 #ifde‡
__USE_LARGEFILE64


157 
f˙é64
 (
__fd
, 
__cmd
, ...);

167 #i‚de‡
__USE_FILE_OFFSET64


168 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__REDIRECT


171 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

172 
	`__n⁄nuŒ
 ((1));

174 
	#›í
 
›í64


	)

177 #ifde‡
__USE_LARGEFILE64


178 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__USE_ATFILE


191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

195 #ifde‡
__REDIRECT


196 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

197 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

199 
	#›í©
 
›í©64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

213 #i‚de‡
__USE_FILE_OFFSET64


214 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #ifde‡
__REDIRECT


217 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

218 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

220 
	#¸ót
 
¸ót64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

228 && !
deföed
 
__USE_POSIX
))

237 
	#F_ULOCK
 0

	)

238 
	#F_LOCK
 1

	)

239 
	#F_TLOCK
 2

	)

240 
	#F_TEST
 3

	)

242 #i‚de‡
__USE_FILE_OFFSET64


243 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

245 #ifde‡
__REDIRECT


246 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

248 
	#lockf
 
lockf64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

256 #ifde‡
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


260 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

261 
__advi£
Ë
__THROW
;

263 #ifde‡
__REDIRECT_NTH


264 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

265 
__off64_t
 
__Àn
, 
__advi£
),

266 
posix_Ádvi£64
);

268 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

273 
__advi£
Ë
__THROW
;

281 #i‚de‡
__USE_FILE_OFFSET64


282 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

284 #ifde‡
__REDIRECT


285 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

286 
__off64_t
 
__Àn
),

287 
posix_ÁŒoˇã64
);

289 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

292 #ifde‡
__USE_LARGEFILE64


293 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

299 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

300 && 
deföed
 
__va_¨g_∑ck_Àn


301 
	~<bôs/f˙é2.h
>

304 
__END_DECLS


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


22 
	#_GETOPT_H
 1

	)

24 
	~<„©uªs.h
>

31 #i‚de‡
__gë›t_¨gv_c⁄°


32 
	#__gë›t_¨gv_c⁄°
 c⁄°

	)

35 
	~<bôs/gë›t_c‹e.h
>

36 
	~<bôs/gë›t_ext.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/linux/i2c-dev.h

9 #i‚de‡
_LINUX_I2C_DEV_H


10 
	#_LINUX_I2C_DEV_H


	)

12 
	~<löux/ty≥s.h
>

21 
	#I2C_RETRIES
 0x0701

	)

23 
	#I2C_TIMEOUT
 0x0702

	)

28 
	#I2C_SLAVE
 0x0703

	)

29 
	#I2C_SLAVE_FORCE
 0x0706

	)

31 
	#I2C_TENBIT
 0x0704

	)

33 
	#I2C_FUNCS
 0x0705

	)

35 
	#I2C_RDWR
 0x0707

	)

37 
	#I2C_PEC
 0x0708

	)

38 
	#I2C_SMBUS
 0x0720

	)

42 
	si2c_smbus_io˘l_d©a
 {

43 
__u8
 
	mªad_wrôe
;

44 
__u8
 
	mcomm™d
;

45 
__u32
 
	msize
;

46 
i2c_smbus_d©a
 *
	md©a
;

50 
	si2c_rdwr_io˘l_d©a
 {

51 
i2c_msg
 *
	mmsgs
;

52 
__u32
 
	mnmsgs
;

55 
	#I2C_RDWR_IOCTL_MAX_MSGS
 42

	)

57 
	#I2C_RDRW_IOCTL_MAX_MSGS
 
I2C_RDWR_IOCTL_MAX_MSGS


	)

	@/usr/include/linux/i2c.h

10 #i‚de‡
_LINUX_I2C_H


11 
	#_LINUX_I2C_H


	)

13 
	~<löux/ty≥s.h
>

73 
	si2c_msg
 {

74 
__u16
 
	maddr
;

75 
__u16
 
	mÊags
;

76 
	#I2C_M_RD
 0x0001

	)

77 
	#I2C_M_TEN
 0x0010

	)

78 
	#I2C_M_DMA_SAFE
 0x0200

	)

79 
	#I2C_M_RECV_LEN
 0x0400

	)

80 
	#I2C_M_NO_RD_ACK
 0x0800

	)

81 
	#I2C_M_IGNORE_NAK
 0x1000

	)

82 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

83 
	#I2C_M_NOSTART
 0x4000

	)

84 
	#I2C_M_STOP
 0x8000

	)

85 
__u16
 
	mÀn
;

86 
__u8
 *
	mbuf
;

91 
	#I2C_FUNC_I2C
 0x00000001

	)

92 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

93 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

94 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

95 
	#I2C_FUNC_NOSTART
 0x00000010

	)

96 
	#I2C_FUNC_SLAVE
 0x00000020

	)

97 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

98 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

99 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

100 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

101 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

102 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

103 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

104 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

105 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

106 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

107 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

108 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

109 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

110 
	#I2C_FUNC_SMBUS_HOST_NOTIFY
 0x10000000

	)

112 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

113 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

114 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

115 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

116 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

117 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

118 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

119 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

120 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

121 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

123 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

124 
I2C_FUNC_SMBUS_BYTE
 | \

125 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

126 
I2C_FUNC_SMBUS_WORD_DATA
 | \

127 
I2C_FUNC_SMBUS_PROC_CALL
 | \

128 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

129 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

130 
I2C_FUNC_SMBUS_PEC
)

	)

133 
	#I2C_FUNC_SMBUS_EMUL_ALL
 (
I2C_FUNC_SMBUS_EMUL
 | \

134 
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

135 
I2C_FUNC_SMBUS_BLOCK_PROC_CALL
)

	)

140 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

141 
	ui2c_smbus_d©a
 {

142 
__u8
 
	mbyã
;

143 
__u16
 
	mw‹d
;

144 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

149 
	#I2C_SMBUS_READ
 1

	)

150 
	#I2C_SMBUS_WRITE
 0

	)

154 
	#I2C_SMBUS_QUICK
 0

	)

155 
	#I2C_SMBUS_BYTE
 1

	)

156 
	#I2C_SMBUS_BYTE_DATA
 2

	)

157 
	#I2C_SMBUS_WORD_DATA
 3

	)

158 
	#I2C_SMBUS_PROC_CALL
 4

	)

159 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

160 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

161 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

162 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/spi/spidev.h

23 #i‚de‡
SPIDEV_H


24 
	#SPIDEV_H


	)

26 
	~<löux/ty≥s.h
>

27 
	~<löux/io˘l.h
>

28 
	~<löux/•i/•i.h
>

32 
	#SPI_IOC_MAGIC
 'k'

	)

70 
	s•i_ioc_å™s„r
 {

71 
__u64
 
	mtx_buf
;

72 
__u64
 
	mrx_buf
;

74 
__u32
 
	mÀn
;

75 
__u32
 
	m•ìd_hz
;

77 
__u16
 
	mdñay_u£cs
;

78 
__u8
 
	mbôs_≥r_w‹d
;

79 
__u8
 
	mcs_ch™ge
;

80 
__u8
 
	mtx_nbôs
;

81 
__u8
 
	mrx_nbôs
;

82 
__u8
 
	mw‹d_dñay_u£cs
;

83 
__u8
 
	m∑d
;

95 
	#SPI_MSGSIZE
(
N
) \

96 ((((
N
)*( (
•i_ioc_å™s„r
))Ë< (1 << 
_IOC_SIZEBITS
)) \

97 ? ((
N
)*( (
•i_ioc_å™s„r
))Ë: 0)

	)

98 
	#SPI_IOC_MESSAGE
(
N
Ë
	`_IOW
(
SPI_IOC_MAGIC
, 0, [
	`SPI_MSGSIZE
(N)])

	)

102 
	#SPI_IOC_RD_MODE
 
	`_IOR
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

103 
	#SPI_IOC_WR_MODE
 
	`_IOW
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

106 
	#SPI_IOC_RD_LSB_FIRST
 
	`_IOR
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

107 
	#SPI_IOC_WR_LSB_FIRST
 
	`_IOW
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

110 
	#SPI_IOC_RD_BITS_PER_WORD
 
	`_IOR
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

111 
	#SPI_IOC_WR_BITS_PER_WORD
 
	`_IOW
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

114 
	#SPI_IOC_RD_MAX_SPEED_HZ
 
	`_IOR
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

115 
	#SPI_IOC_WR_MAX_SPEED_HZ
 
	`_IOW
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

118 
	#SPI_IOC_RD_MODE32
 
	`_IOR
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

119 
	#SPI_IOC_WR_MODE32
 
	`_IOW
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 
	#__MATHCALL_NARROW_ARGS_1
 (
_M¨g_
 
__x
)

	)

488 
	#__MATHCALL_NARROW_ARGS_2
 (
_M¨g_
 
__x
, _M¨g_ 
__y
)

	)

489 
	#__MATHCALL_NARROW_ARGS_3
 (
_M¨g_
 
__x
, _M¨g_ 
__y
, _M¨g_ 
__z
)

	)

490 
	#__MATHCALL_NARROW_NORMAL
(
func
, 
«rgs
) \

491 
_Mªt_
 
func
 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
 
__THROW


	)

492 
	#__MATHCALL_NARROW_REDIR
(
func
, 
ªdú
, 
«rgs
) \

493 
_Mªt_
 
	`__REDIRECT_NTH
 (
func
, 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
, \

494 
ªdú
)

	)

495 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

496 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

498 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

500 
	#_Mªt_
 

	)

501 
	#_M¨g_
 

	)

502 
	#__MATHCALL_NAME
(
«me
Ë
f
 ## 
	)
name

503 
	~<bôs/m©hˇŒs-«ºow.h
>

504 #unde‡
_Mªt_


505 #unde‡
_M¨g_


506 #unde‡
__MATHCALL_NAME


508 
	#_Mªt_
 

	)

509 
	#_M¨g_
 

	)

510 
	#__MATHCALL_NAME
(
«me
Ë
f
 ##Çamê## 
l


	)

511 #ifde‡
__LDBL_COMPAT


512 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
f
 ## 
	)
name

513 #unde‡
__MATHCALL_NARROW


514 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

515 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

517 
	~<bôs/m©hˇŒs-«ºow.h
>

518 #unde‡
_Mªt_


519 #unde‡
_M¨g_


520 #unde‡
__MATHCALL_NAME


521 #ifde‡
__LDBL_COMPAT


522 #unde‡
__MATHCALL_REDIR_NAME


523 #unde‡
__MATHCALL_NARROW


524 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

525 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

528 
	#_Mªt_
 

	)

529 
	#_M¨g_
 

	)

530 
	#__MATHCALL_NAME
(
«me
Ë
d
 ##Çamê## 
l


	)

531 #ifde‡
__LDBL_COMPAT


532 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__∆dbl_d
 ##Çamê## 
l


	)

533 #unde‡
__MATHCALL_NARROW


534 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

535 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

537 
	~<bôs/m©hˇŒs-«ºow.h
>

538 #unde‡
_Mªt_


539 #unde‡
_M¨g_


540 #unde‡
__MATHCALL_NAME


541 #ifde‡
__LDBL_COMPAT


542 #unde‡
__MATHCALL_REDIR_NAME


543 #unde‡
__MATHCALL_NARROW


544 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

545 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

550 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

552 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32


553 
	#_Mªt_
 
_Flﬂt16


	)

554 
	#_M¨g_
 
_Flﬂt32


	)

555 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32


	)

556 
	~<bôs/m©hˇŒs-«ºow.h
>

557 #unde‡
_Mªt_


558 #unde‡
_M¨g_


559 #unde‡
__MATHCALL_NAME


562 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32X


563 
	#_Mªt_
 
_Flﬂt16


	)

564 
	#_M¨g_
 
_Flﬂt32x


	)

565 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32x


	)

566 
	~<bôs/m©hˇŒs-«ºow.h
>

567 #unde‡
_Mªt_


568 #unde‡
_M¨g_


569 #unde‡
__MATHCALL_NAME


572 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64


573 
	#_Mªt_
 
_Flﬂt16


	)

574 
	#_M¨g_
 
_Flﬂt64


	)

575 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64


	)

576 
	~<bôs/m©hˇŒs-«ºow.h
>

577 #unde‡
_Mªt_


578 #unde‡
_M¨g_


579 #unde‡
__MATHCALL_NAME


582 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64X


583 
	#_Mªt_
 
_Flﬂt16


	)

584 
	#_M¨g_
 
_Flﬂt64x


	)

585 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64x


	)

586 
	~<bôs/m©hˇŒs-«ºow.h
>

587 #unde‡
_Mªt_


588 #unde‡
_M¨g_


589 #unde‡
__MATHCALL_NAME


592 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128


593 
	#_Mªt_
 
_Flﬂt16


	)

594 
	#_M¨g_
 
_Flﬂt128


	)

595 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128


	)

596 
	~<bôs/m©hˇŒs-«ºow.h
>

597 #unde‡
_Mªt_


598 #unde‡
_M¨g_


599 #unde‡
__MATHCALL_NAME


602 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128X


603 
	#_Mªt_
 
_Flﬂt16


	)

604 
	#_M¨g_
 
_Flﬂt128x


	)

605 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128x


	)

606 
	~<bôs/m©hˇŒs-«ºow.h
>

607 #unde‡
_Mªt_


608 #unde‡
_M¨g_


609 #unde‡
__MATHCALL_NAME


612 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT32X


613 
	#_Mªt_
 
_Flﬂt32


	)

614 
	#_M¨g_
 
_Flﬂt32x


	)

615 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f32x


	)

616 
	~<bôs/m©hˇŒs-«ºow.h
>

617 #unde‡
_Mªt_


618 #unde‡
_M¨g_


619 #unde‡
__MATHCALL_NAME


622 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64


623 
	#_Mªt_
 
_Flﬂt32


	)

624 
	#_M¨g_
 
_Flﬂt64


	)

625 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64


	)

626 
	~<bôs/m©hˇŒs-«ºow.h
>

627 #unde‡
_Mªt_


628 #unde‡
_M¨g_


629 #unde‡
__MATHCALL_NAME


632 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64X


633 
	#_Mªt_
 
_Flﬂt32


	)

634 
	#_M¨g_
 
_Flﬂt64x


	)

635 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64x


	)

636 
	~<bôs/m©hˇŒs-«ºow.h
>

637 #unde‡
_Mªt_


638 #unde‡
_M¨g_


639 #unde‡
__MATHCALL_NAME


642 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128


643 
	#_Mªt_
 
_Flﬂt32


	)

644 
	#_M¨g_
 
_Flﬂt128


	)

645 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128


	)

646 
	~<bôs/m©hˇŒs-«ºow.h
>

647 #unde‡
_Mªt_


648 #unde‡
_M¨g_


649 #unde‡
__MATHCALL_NAME


652 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128X


653 
	#_Mªt_
 
_Flﬂt32


	)

654 
	#_M¨g_
 
_Flﬂt128x


	)

655 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128x


	)

656 
	~<bôs/m©hˇŒs-«ºow.h
>

657 #unde‡
_Mªt_


658 #unde‡
_M¨g_


659 #unde‡
__MATHCALL_NAME


662 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64


663 
	#_Mªt_
 
_Flﬂt32x


	)

664 
	#_M¨g_
 
_Flﬂt64


	)

665 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64


	)

666 
	~<bôs/m©hˇŒs-«ºow.h
>

667 #unde‡
_Mªt_


668 #unde‡
_M¨g_


669 #unde‡
__MATHCALL_NAME


672 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64X


673 
	#_Mªt_
 
_Flﬂt32x


	)

674 
	#_M¨g_
 
_Flﬂt64x


	)

675 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64x


	)

676 
	~<bôs/m©hˇŒs-«ºow.h
>

677 #unde‡
_Mªt_


678 #unde‡
_M¨g_


679 #unde‡
__MATHCALL_NAME


682 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128


683 
	#_Mªt_
 
_Flﬂt32x


	)

684 
	#_M¨g_
 
_Flﬂt128


	)

685 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128


	)

686 
	~<bôs/m©hˇŒs-«ºow.h
>

687 #unde‡
_Mªt_


688 #unde‡
_M¨g_


689 #unde‡
__MATHCALL_NAME


692 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128X


693 
	#_Mªt_
 
_Flﬂt32x


	)

694 
	#_M¨g_
 
_Flﬂt128x


	)

695 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128x


	)

696 
	~<bôs/m©hˇŒs-«ºow.h
>

697 #unde‡
_Mªt_


698 #unde‡
_M¨g_


699 #unde‡
__MATHCALL_NAME


702 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT64X


703 
	#_Mªt_
 
_Flﬂt64


	)

704 
	#_M¨g_
 
_Flﬂt64x


	)

705 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f64x


	)

706 
	~<bôs/m©hˇŒs-«ºow.h
>

707 #unde‡
_Mªt_


708 #unde‡
_M¨g_


709 #unde‡
__MATHCALL_NAME


712 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128


713 
	#_Mªt_
 
_Flﬂt64


	)

714 
	#_M¨g_
 
_Flﬂt128


	)

715 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128


	)

716 
	~<bôs/m©hˇŒs-«ºow.h
>

717 #unde‡
_Mªt_


718 #unde‡
_M¨g_


719 #unde‡
__MATHCALL_NAME


722 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128X


723 
	#_Mªt_
 
_Flﬂt64


	)

724 
	#_M¨g_
 
_Flﬂt128x


	)

725 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128x


	)

726 
	~<bôs/m©hˇŒs-«ºow.h
>

727 #unde‡
_Mªt_


728 #unde‡
_M¨g_


729 #unde‡
__MATHCALL_NAME


732 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128


733 
	#_Mªt_
 
_Flﬂt64x


	)

734 
	#_M¨g_
 
_Flﬂt128


	)

735 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128


	)

736 
	~<bôs/m©hˇŒs-«ºow.h
>

737 #unde‡
_Mªt_


738 #unde‡
_M¨g_


739 #unde‡
__MATHCALL_NAME


742 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128X


743 
	#_Mªt_
 
_Flﬂt64x


	)

744 
	#_M¨g_
 
_Flﬂt128x


	)

745 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128x


	)

746 
	~<bôs/m©hˇŒs-«ºow.h
>

747 #unde‡
_Mªt_


748 #unde‡
_M¨g_


749 #unde‡
__MATHCALL_NAME


752 #i‡
__HAVE_FLOAT128
 && 
__HAVE_FLOAT128X


753 
	#_Mªt_
 
_Flﬂt128


	)

754 
	#_M¨g_
 
_Flﬂt128x


	)

755 
	#__MATHCALL_NAME
(
«me
Ë
f128
 ##Çamê## 
f128x


	)

756 
	~<bôs/m©hˇŒs-«ºow.h
>

757 #unde‡
_Mªt_


758 #unde‡
_M¨g_


759 #unde‡
__MATHCALL_NAME


764 #unde‡
__MATHCALL_NARROW_ARGS_1


765 #unde‡
__MATHCALL_NARROW_ARGS_2


766 #unde‡
__MATHCALL_NARROW_ARGS_3


767 #unde‡
__MATHCALL_NARROW_NORMAL


768 #unde‡
__MATHCALL_NARROW_REDIR


769 #unde‡
__MATHCALL_NARROW


771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


773 
signgam
;

776 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

777 || 
__HAVE_DISTINCT_FLOAT32
 \

778 || 
__HAVE_DISTINCT_FLOAT64
 \

779 || 
__HAVE_DISTINCT_FLOAT32X
 \

780 || 
__HAVE_DISTINCT_FLOAT64X
 \

781 || 
__HAVE_DISTINCT_FLOAT128X
)

794 #ifde‡
__NO_LONG_DOUBLE_MATH


795 #i‡
__HAVE_DISTINCT_FLOAT128


798 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

799 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

800 #ñi‡
__HAVE_DISTINCT_FLOAT128


801 #i‡
__HAVE_GENERIC_SELECTION


802 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


803 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

805 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

807 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


808 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


809 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

811 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

814 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

816 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

817 
	`_Gíîic
 ((
TG_ARG
), \

818 : 
FUNC
 ## 
f
 
ARGS
, \

819 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

820 : 
FUNC
 
ARGS
, \

821 : 
FUNC
 ## 
l
 
ARGS
, \

822 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

823 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

825 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


828 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

829 
__buûtö_choo£_ex¥
 \

830 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

831 
FUNC
 ## 
f
 
ARGS
, \

832 
__buûtö_choo£_ex¥
 \

833 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

834 
FUNC
 
ARGS
, \

835 
__buûtö_choo£_ex¥
 \

836 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

837 
FUNC
 ## 
l
 
ARGS
, \

838 
FUNC
 ## 
f128
 
ARGS
)))

	)

841 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

842 ( (
TG_ARG
) ==  () \

843 ? 
FUNC
 ## 
f
 
ARGS
 \

844 :  (
TG_ARG
) ==  () \

845 ? 
FUNC
 
ARGS
 \

846 : 
FUNC
 ## 
l
 
ARGS
)

	)

850 #ifde‡
__USE_ISOC99


855 
FP_NAN
 =

856 
	#FP_NAN
 0

	)

857 
FP_NAN
,

858 
FP_INFINITE
 =

859 
	#FP_INFINITE
 1

	)

860 
FP_INFINITE
,

861 
FP_ZERO
 =

862 
	#FP_ZERO
 2

	)

863 
FP_ZERO
,

864 
FP_SUBNORMAL
 =

865 
	#FP_SUBNORMAL
 3

	)

866 
FP_SUBNORMAL
,

867 
FP_NORMAL
 =

868 
	#FP_NORMAL
 4

	)

869 
FP_NORMAL


877 #i‡((
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

878 || 
	`__glibc_˛™g_¥îeq
 (2,8)) \

879 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

886 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

887 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

889 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

893 #i‡
	`__GNUC_PREREQ
 (6,0Ë|| 
	`__glibc_˛™g_¥îeq
 (3,3)

894 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

895 #ñi‡
deföed
 
__˝lu•lus


903 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

904 #ñi‡
	`__GNUC_PREREQ
 (4,0)

905 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

907 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

911 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

912 || 
	$__glibc_˛™g_¥îeq
 (2,8)

913 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

915 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

919 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

920 || 
	$__glibc_˛™g_¥îeq
 (2,8)

921 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

923 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

928 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

929 || 
	$__glibc_˛™g_¥îeq
 (2,8)

930 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

932 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

936 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

937 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


943 
	#isöf
(
x
) \

944 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

945 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

946 #ñi‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

947 || 
	$__glibc_˛™g_¥îeq
 (3,7)

948 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

950 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

954 
	#MATH_ERRNO
 1

	)

955 
	#MATH_ERREXCEPT
 2

	)

962 #ifde‡
__FAST_MATH__


963 
	#m©h_îrh™dlög
 0

	)

964 #ñi‡
deföed
 
__NO_MATH_ERRNO__


965 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

967 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

972 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

973 
	~<bôs/isˇn⁄iˇl.h
>

976 #i‚de‡
__˝lu•lus


977 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

986 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

987 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

988 
ölöe
 

989 
	`issig«lög
 (
__vÆ
)

991 #ifde‡
__NO_LONG_DOUBLE_MATH


992  
	`__issig«lög
 (
__vÆ
);

994  
	`__issig«lögl
 (
__vÆ
);

997 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1000 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

1002 
	}
}

1006 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

1009 #i‚de‡
__˝lu•lus


1010 #ifde‡
__SUPPORT_SNAN__


1011 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

1013 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

1017 #ifde‡
__SUPPORT_SNAN__


1018 
ölöe
 

1019 
iszîo
 (
__vÆ
)

1021  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

1023 
ölöe
 

1024 
iszîo
 (
__vÆ
)

1026  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1028 
ölöe
 

1029 
iszîo
 (
__vÆ
)

1031 #ifde‡
__NO_LONG_DOUBLE_MATH


1032  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1034  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

1037 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1040 
ölöe
 

1041 
iszîo
 (
_Flﬂt128
 
__vÆ
)

1043  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

1047 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


1048 
iszîo
 (
__T
 
__vÆ
)

1050  
__vÆ
 == 0;

1057 #ifde‡
__USE_XOPEN


1059 
	#MAXFLOAT
 3.40282347e+38F

	)

1064 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


1065 
	#M_E
 2.7182818284590452354

	)

1066 
	#M_LOG2E
 1.4426950408889634074

	)

1067 
	#M_LOG10E
 0.43429448190325182765

	)

1068 
	#M_LN2
 0.69314718055994530942

	)

1069 
	#M_LN10
 2.30258509299404568402

	)

1070 
	#M_PI
 3.14159265358979323846

	)

1071 
	#M_PI_2
 1.57079632679489661923

	)

1072 
	#M_PI_4
 0.78539816339744830962

	)

1073 
	#M_1_PI
 0.31830988618379067154

	)

1074 
	#M_2_PI
 0.63661977236758134308

	)

1075 
	#M_2_SQRTPI
 1.12837916709551257390

	)

1076 
	#M_SQRT2
 1.41421356237309504880

	)

1077 
	#M_SQRT1_2
 0.70710678118654752440

	)

1083 #ifde‡
__USE_GNU


1084 
	#M_El
 2.718281828459045235360287471352662498L

	)

1085 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

1086 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

1087 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

1088 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

1089 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

1090 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

1091 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

1092 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

1093 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

1094 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

1095 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

1096 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

1099 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


1100 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

1101 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

1102 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

1103 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

1104 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

1105 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

1106 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

1107 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

1108 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

1109 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

1110 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

1111 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

1112 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

1115 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


1116 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

1117 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

1118 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

1119 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

1120 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

1121 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

1122 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

1123 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

1124 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

1125 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

1126 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

1127 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

1128 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

1131 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


1132 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

1133 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

1134 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

1135 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

1136 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

1137 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

1138 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

1139 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

1140 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

1141 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

1142 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

1143 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

1144 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

1147 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


1148 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

1149 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

1150 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

1151 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

1152 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

1153 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

1154 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

1155 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

1156 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

1157 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

1158 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

1159 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

1160 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

1163 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


1164 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

1165 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

1166 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

1167 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

1168 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

1169 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

1170 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

1171 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

1172 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

1173 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

1174 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

1175 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

1176 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

1179 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


1180 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

1181 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

1182 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

1183 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

1184 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

1185 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

1186 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

1187 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

1188 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

1189 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

1190 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

1191 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

1192 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

1195 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


1202 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


1203 
	#__NO_MATH_INLINES
 1

	)

1206 #ifde‡
__USE_ISOC99


1207 #i‡
__GNUC_PREREQ
 (3, 1)

1214 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

1215 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

1216 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

1217 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

1218 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

1219 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

1221 
	#isgª©î
(
x
, 
y
) \

1222 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1223 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

1224 
	#isgª©îequÆ
(
x
, 
y
) \

1225 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1226 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

1227 
	#i¶ess
(
x
, 
y
) \

1228 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1229 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

1230 
	#i¶es£quÆ
(
x
, 
y
) \

1231 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1232 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

1233 
	#i¶essgª©î
(
x
, 
y
) \

1234 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1235 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

1237 
	#isun‹dîed
(
x
, 
y
) \

1238 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

1239 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

1244 #ifde‡
__USE_EXTERN_INLINES


1245 
	~<bôs/m©hölöe.h
>

1249 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1252 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1253 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1254 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1255 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1256 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1257 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1259 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1264 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1265 
	#i£qsig
(
x
, 
y
) \

1266 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1279 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1281 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1283 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1285  
__i£qsigf
 (
__x
, 
__y
);

1289 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1291 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1293  
__i£qsig
 (
__x
, 
__y
);

1297 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1299 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1301 #i‚de‡
__NO_LONG_DOUBLE_MATH


1302  
__i£qsigl
 (
__x
, 
__y
);

1304  
__i£qsig
 (
__x
, 
__y
);

1309 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1312 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1314 
__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
throw
 ()

1316  
__i£qsigf128
 (
__x
, 
__y
);

1321 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1322 
ölöe
 

1323 
i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
throw
 ()

1325 #i‡
__˝lu•lus
 >= 201103L

1326 
de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1328 
__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1330  
__i£qsig_ty≥
<
_T3
>::
__ˇŒ
 (
__x
, 
__y
);

1338 
__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/°döt-uöä.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	~<bôs/ty≥s/sigevít_t.h
>

37 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	~<bôs/√tdb.h
>

43 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

44 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

45 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

46 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

47 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

48 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

51 
	g__BEGIN_DECLS


53 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


56 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

59 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

63 
	#HOST_NOT_FOUND
 1

	)

64 
	#TRY_AGAIN
 2

	)

66 
	#NO_RECOVERY
 3

	)

68 
	#NO_DATA
 4

	)

71 #ifde‡
__USE_MISC


72 
	#NETDB_INTERNAL
 -1

	)

73 
	#NETDB_SUCCESS
 0

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

77 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


79 
	#IPPORT_RESERVED
 1024

	)

82 #ifde‡
__USE_GNU


84 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifde‡
__USE_MISC


90 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

93 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

98 
	sho°ít


100 *
h_«me
;

101 **
h_Æü£s
;

102 
h_addπy≥
;

103 
h_Àngth
;

104 **
h_addr_li°
;

105 #ifde‡
__USE_MISC


106 
	#h_addr
 
h_addr_li°
[0]

	)

115 
	`£tho°ít
 (
__°ay_›í
);

121 
	`ídho°ít
 ();

128 
ho°ít
 *
	`gëho°ít
 ();

135 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

136 
__ty≥
);

142 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

144 #ifde‡
__USE_MISC


153 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

165 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

167 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

168 *
__ª°ri˘
 
__h_î∫›
);

170 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

171 
__ty≥
,

172 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

173 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

174 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

175 *
__ª°ri˘
 
__h_î∫›
);

177 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

178 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

179 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

180 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

181 *
__ª°ri˘
 
__h_î∫›
);

183 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

184 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

185 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

186 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

187 *
__ª°ri˘
 
__h_î∫›
);

196 
	`£äëít
 (
__°ay_›í
);

202 
	`íd√ã¡
 ();

209 
√ã¡
 *
	`gë√ã¡
 ();

216 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

222 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

224 #ifdef 
__USE_MISC


235 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

236 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

237 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

238 *
__ª°ri˘
 
__h_î∫›
);

240 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

241 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

242 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

243 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

244 *
__ª°ri˘
 
__h_î∫›
);

246 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

247 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

248 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

249 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

250 *
__ª°ri˘
 
__h_î∫›
);

255 
	s£rvít


257 *
s_«me
;

258 **
s_Æü£s
;

259 
s_p‹t
;

260 *
s_¥Ÿo
;

268 
	`£t£rvít
 (
__°ay_›í
);

274 
	`íd£rvít
 ();

281 
£rvít
 *
	`gë£rvít
 ();

288 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

295 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

298 #ifdef 
__USE_MISC


306 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

307 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

308 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

310 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

311 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

312 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

313 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

314 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

316 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

317 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

318 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

319 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

324 
	s¥Ÿ€¡


326 *
p_«me
;

327 **
p_Æü£s
;

328 
p_¥Ÿo
;

336 
	`£çrŸ€¡
 (
__°ay_›í
);

342 
	`íd¥Ÿ€¡
 ();

349 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

355 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

361 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

364 #ifdef 
__USE_MISC


372 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

373 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

374 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

376 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

377 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

378 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

379 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

381 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

382 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

383 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

384 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

393 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

401 
	`íd√tgª¡
 ();

410 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

411 **
__ª°ri˘
 
__u£Ω
,

412 **
__ª°ri˘
 
__domaöp
);

421 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

422 c⁄° *
__u£r
, c⁄° *
__domaö
);

430 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

431 **
__ª°ri˘
 
__u£Ω
,

432 **
__ª°ri˘
 
__domaöp
,

433 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

437 #ifde‡
__USE_MISC


449 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

450 c⁄° *
__ª°ri˘
 
__locu£r
,

451 c⁄° *
__ª°ri˘
 
__ªmu£r
,

452 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

461 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

462 c⁄° *
__ª°ri˘
 
__locu£r
,

463 c⁄° *
__ª°ri˘
 
__ªmu£r
,

464 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

465 
ß_Ámûy_t
 
__af
);

477 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

478 c⁄° *
__ª°ri˘
 
__«me
,

479 c⁄° *
__ª°ri˘
 
__∑ss
,

480 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

489 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

490 c⁄° *
__ª°ri˘
 
__«me
,

491 c⁄° *
__ª°ri˘
 
__∑ss
,

492 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

493 
ß_Ámûy_t
 
__af
);

503 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

504 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

513 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

514 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

515 
ß_Ámûy_t
 
__af
);

526 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

527 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

537 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

538 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

539 
ß_Ámûy_t
 
__af
);

549 
	`ºesvp‹t
 (*
__Æp‹t
);

558 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

563 #ifde‡
__USE_XOPEN2K


565 
	saddröfo


567 
ai_Êags
;

568 
ai_Ámûy
;

569 
ai_sockty≥
;

570 
ai_¥Ÿocﬁ
;

571 
sockÀn_t
 
ai_addæí
;

572 
sockaddr
 *
ai_addr
;

573 *
ai_ˇn⁄«me
;

574 
addröfo
 *
ai_√xt
;

577 #ifde‡
__USE_GNU


579 
	sgaicb


581 c⁄° *
¨_«me
;

582 c⁄° *
¨_£rvi˚
;

583 c⁄° 
addröfo
 *
¨_ªque°
;

584 
addröfo
 *
¨_ªsu…
;

586 
__ªtu∫
;

587 
__glibc_ª£rved
[5];

591 
	#GAI_WAIT
 0

	)

592 
	#GAI_NOWAIT
 1

	)

596 
	#AI_PASSIVE
 0x0001

	)

597 
	#AI_CANONNAME
 0x0002

	)

598 
	#AI_NUMERICHOST
 0x0004

	)

599 
	#AI_V4MAPPED
 0x0008

	)

600 
	#AI_ALL
 0x0010

	)

601 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifde‡
__USE_GNU


604 
	#AI_IDN
 0x0040

	)

607 
	#AI_CANONIDN
 0x0080

	)

608 
	#AI_IDN_ALLOW_UNASSIGNED
 \

609 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë0x0100

	)

610 
	#AI_IDN_USE_STD3_ASCII_RULES
 \

611 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë0x0200

	)

613 
	#AI_NUMERICSERV
 0x0400

	)

616 
	#EAI_BADFLAGS
 -1

	)

617 
	#EAI_NONAME
 -2

	)

618 
	#EAI_AGAIN
 -3

	)

619 
	#EAI_FAIL
 -4

	)

620 
	#EAI_FAMILY
 -6

	)

621 
	#EAI_SOCKTYPE
 -7

	)

622 
	#EAI_SERVICE
 -8

	)

623 
	#EAI_MEMORY
 -10

	)

624 
	#EAI_SYSTEM
 -11

	)

625 
	#EAI_OVERFLOW
 -12

	)

626 #ifde‡
__USE_GNU


627 
	#EAI_NODATA
 -5

	)

628 
	#EAI_ADDRFAMILY
 -9

	)

629 
	#EAI_INPROGRESS
 -100

	)

630 
	#EAI_CANCELED
 -101

	)

631 
	#EAI_NOTCANCELED
 -102

	)

632 
	#EAI_ALLDONE
 -103

	)

633 
	#EAI_INTR
 -104

	)

634 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifde‡
__USE_MISC


638 
	#NI_MAXHOST
 1025

	)

639 
	#NI_MAXSERV
 32

	)

642 
	#NI_NUMERICHOST
 1

	)

643 
	#NI_NUMERICSERV
 2

	)

644 
	#NI_NOFQDN
 4

	)

645 
	#NI_NAMEREQD
 8

	)

646 
	#NI_DGRAM
 16

	)

647 #ifde‡
__USE_GNU


648 
	#NI_IDN
 32

	)

649 
	#NI_IDN_ALLOW_UNASSIGNED
 \

650 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë64

	)

651 
	#NI_IDN_USE_STD3_ASCII_RULES
 \

652 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë128

	)

660 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

661 c⁄° *
__ª°ri˘
 
__£rvi˚
,

662 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

663 
addröfo
 **
__ª°ri˘
 
__∑i
);

666 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

669 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

675 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

676 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

677 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

678 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

681 #ifde‡
__USE_GNU


690 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

691 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

701 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

702 c⁄° 
time•ec
 *
__timeout
);

705 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

708 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

711 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‡!
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_ALLSNOOPERS_GROUP
 ((
ö_addr_t
Ë0xe000006aË

	)

208 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

210 #i‡!
__USE_KERNEL_IPV6_DEFS


212 
	sö6_addr


216 
uöt8_t
 
	m__u6_addr8
[16];

217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

219 } 
	m__ö6_u
;

220 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

221 #ifde‡
__USE_MISC


222 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

223 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

228 c⁄° 
ö6_addr
 
ö6addr_™y
;

229 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

230 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

231 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

233 
	#INET_ADDRSTRLEN
 16

	)

234 
	#INET6_ADDRSTRLEN
 46

	)

238 
	ssockaddr_ö


240 
__SOCKADDR_COMMON
 (
sö_
);

241 
ö_p‹t_t
 
	msö_p‹t
;

242 
ö_addr
 
	msö_addr
;

245 
	msö_zîo
[ (
sockaddr
)

246 - 
__SOCKADDR_COMMON_SIZE


247 -  (
ö_p‹t_t
)

248 -  (
ö_addr
)];

251 #i‡!
__USE_KERNEL_IPV6_DEFS


253 
	ssockaddr_ö6


255 
__SOCKADDR_COMMON
 (
sö6_
);

256 
ö_p‹t_t
 
	msö6_p‹t
;

257 
uöt32_t
 
	msö6_Êowöfo
;

258 
ö6_addr
 
	msö6_addr
;

259 
uöt32_t
 
	msö6_sc›e_id
;

263 #ifde‡
__USE_MISC


265 
	sù_mªq


268 
ö_addr
 
	mimr_mu…üddr
;

271 
ö_addr
 
	mimr_öãrÁ˚
;

274 
	sù_mªq_sour˚


277 
ö_addr
 
	mimr_mu…üddr
;

280 
ö_addr
 
	mimr_öãrÁ˚
;

283 
ö_addr
 
	mimr_sour˚addr
;

287 #i‡!
__USE_KERNEL_IPV6_DEFS


289 
	sùv6_mªq


292 
ö6_addr
 
	mùv6mr_mu…üddr
;

295 
	mùv6mr_öãrÁ˚
;

299 #ifde‡
__USE_MISC


301 
	sgroup_ªq


304 
uöt32_t
 
	mgr_öãrÁ˚
;

307 
sockaddr_°‹age
 
	mgr_group
;

310 
	sgroup_sour˚_ªq


313 
uöt32_t
 
	mg§_öãrÁ˚
;

316 
sockaddr_°‹age
 
	mg§_group
;

319 
sockaddr_°‹age
 
	mg§_sour˚
;

324 
	sù_msfûãr


327 
ö_addr
 
	mimsf_mu…üddr
;

330 
ö_addr
 
	mimsf_öãrÁ˚
;

333 
uöt32_t
 
	mimsf_fmode
;

336 
uöt32_t
 
	mimsf_num§c
;

338 
ö_addr
 
	mimsf_¶i°
[1];

341 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

342 -  (
ö_addr
) \

343 + (
num§c
Ë*  (
ö_addr
))

	)

345 
	sgroup_fûãr


348 
uöt32_t
 
	mgf_öãrÁ˚
;

351 
sockaddr_°‹age
 
	mgf_group
;

354 
uöt32_t
 
	mgf_fmode
;

357 
uöt32_t
 
	mgf_num§c
;

359 
sockaddr_°‹age
 
	mgf_¶i°
[1];

362 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

363 -  (
sockaddr_°‹age
) \

364 + ((
num§c
) \

365 *  (
sockaddr_°‹age
)))

	)

375 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

376 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

377 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

378 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

379 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

380 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

381 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

383 
	~<ídün.h
>

386 
	~<bôs/byãsw≠.h
>

387 
	~<bôs/uöä-idítôy.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

397 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

398 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

399 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

415 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

416 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

417 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

425 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

441 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

442 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

449 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

457 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

458 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

459 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‡!
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

99 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


102 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

103 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

104 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

105 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


110 
	#PTHREAD_RWLOCK_INITIALIZER
 \

111 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

112 #ifde‡
__USE_GNU


113 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

114 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

122 
	mPTHREAD_INHERIT_SCHED
,

123 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

124 
	mPTHREAD_EXPLICIT_SCHED


125 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

132 
	mPTHREAD_SCOPE_SYSTEM
,

133 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

134 
	mPTHREAD_SCOPE_PROCESS


135 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

142 
	mPTHREAD_PROCESS_PRIVATE
,

143 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

144 
	mPTHREAD_PROCESS_SHARED


145 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

151 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

155 
	s_±hªad_˛ónup_buf„r


157 (*
	m__routöe
) (*);

158 *
	m__¨g
;

159 
	m__ˇn˚…y≥
;

160 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

166 
	mPTHREAD_CANCEL_ENABLE
,

167 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

168 
	mPTHREAD_CANCEL_DISABLE


169 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

173 
	mPTHREAD_CANCEL_DEFERRED
,

174 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

175 
	mPTHREAD_CANCEL_ASYNCHRONOUS


176 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

178 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

182 
	#PTHREAD_ONCE_INIT
 0

	)

185 #ifde‡
__USE_XOPEN2K


189 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

193 
__BEGIN_DECLS


198 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

199 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

200 *(*
__°¨t_routöe
) (*),

201 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

207 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

215 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

217 #ifde‡
__USE_GNU


220 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

228 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

229 c⁄° 
time•ec
 *
__ab°ime
);

238 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

239 
˛ockid_t
 
__˛ockid
,

240 c⁄° 
time•ec
 *
__ab°ime
);

247 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

251 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

254 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

255 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

263 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

266 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

271 *
__dëach°©e
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

275 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

276 
__dëach°©e
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

282 
size_t
 *
__gu¨dsize
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

287 
size_t
 
__gu¨dsize
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

293 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

298 c⁄° 
sched_∑øm
 *
__ª°ri˘


299 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


303 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

304 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

307 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1));

311 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


312 
__©å
, *
__ª°ri˘
 
__öhîô
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

316 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

317 
__öhîô
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

322 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 *
__ª°ri˘
 
__sc›e
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1));

331 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


332 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

339 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

340 *
__°ackaddr
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

344 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


345 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

352 
size_t
 
__°acksize
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_XOPEN2K


357 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 **
__ª°ri˘
 
__°ackaddr
,

359 
size_t
 *
__ª°ri˘
 
__°acksize
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

365 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

366 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_GNU


372 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

373 
size_t
 
__˝u£tsize
,

374 c⁄° 
˝u_£t_t
 *
__˝u£t
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

379 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

380 
size_t
 
__˝u£tsize
,

381 
˝u_£t_t
 *
__˝u£t
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

385 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1));

396 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

397 
__THROW
 
	`__n⁄nuŒ
 ((2));

405 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

406 c⁄° 
sched_∑øm
 *
__∑øm
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3));

410 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

411 *
__ª°ri˘
 
__pﬁicy
,

412 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

413 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

416 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

417 
__THROW
;

420 #ifde‡
__USE_GNU


422 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

423 
size_t
 
__buÊí
)

424 
__THROW
 
	`__n⁄nuŒ
 ((2));

427 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 #ifde‡
__USE_UNIX98


434 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

437 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

440 #ifde‡
__USE_GNU


445 
	$±hªad_yõld
 (Ë
__THROW
;

450 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

451 c⁄° 
˝u_£t_t
 *
__˝u£t
)

452 
__THROW
 
	`__n⁄nuŒ
 ((3));

455 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

456 
˝u_£t_t
 *
__˝u£t
)

457 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

471 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

482 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

486 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

489 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

494 
	`±hªad_ã°ˇn˚l
 ();

503 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

504 
__mask_was_ßved
;

505 } 
__ˇn˚l_jmp_buf
[1];

506 *
__∑d
[4];

507 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

510 #i‚de‡
__˛ónup_f˘_©åibuã


511 
	#__˛ónup_f˘_©åibuã


	)

516 
	s__±hªad_˛ónup_‰ame


518 (*
__ˇn˚l_routöe
) (*);

519 *
__ˇn˚l_¨g
;

520 
__do_ô
;

521 
__ˇn˚l_ty≥
;

524 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


525 #ifde‡
__˝lu•lus


527 ˛as†
	c__±hªad_˛ónup_˛ass


529 (*
__ˇn˚l_routöe
) (*);

530 *
__ˇn˚l_¨g
;

531 
__do_ô
;

532 
__ˇn˚l_ty≥
;

534 
public
:

535 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

536 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

537 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

538 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

539 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

540 &
__ˇn˚l_ty≥
); 
	}
}

541 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

551 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

553 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

557 
	#±hªad_˛ónup_p›
(
execuã
) \

558 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

559 } 0)

	)

561 #ifde‡
__USE_GNU


565 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

567 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

568 
__˛‰ame
.
	`__de„r
 ()

	)

573 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

574 
__˛‰ame
.
	`__ª°‹e
 (); \

575 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

576 } 0)

	)

583 
__exã∫_ölöe
 

584 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

586 i‡(
__‰ame
->
__do_ô
)

587 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

588 
	}
}

597 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

599 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

600 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

601 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

602 .
__do_ô
 = 1 };

	)

606 
	#±hªad_˛ónup_p›
(
execuã
) \

607 
__˛‰ame
.
__do_ô
 = (
execuã
); \

608 } 0)

	)

610 #ifde‡
__USE_GNU


614 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

616 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

617 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

618 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

619 .
__do_ô
 = 1 }; \

620 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

621 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

626 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

627 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

628 
__˛‰ame
.
__do_ô
 = (
execuã
); \

629 } 0)

	)

640 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

642 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

643 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

644 *
__ˇn˚l_¨g
 = (
¨g
); \

645 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

646 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

647 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

649 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

650 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

654 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

655 dÿ{

	)

656 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

657 
__˛ónup_f˘_©åibuã
;

661 
	#±hªad_˛ónup_p›
(
execuã
) \

664 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

665 i‡(
execuã
) \

666 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

667 } 0)

	)

668 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

669 
__˛ónup_f˘_©åibuã
;

671 #ifde‡
__USE_GNU


675 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

697 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

700 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

701 i‡(
execuã
) \

702 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

703 
	}
} 0)

	)

704 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

705 
__˛ónup_f˘_©åibuã
;

709 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

711 #i‚de‡
SHARED


712 
	`__©åibuã__
 ((
__wók__
))

718 
__jmp_buf_èg
;

719 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

725 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

726 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1));

730 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

731 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

735 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

741 #ifde‡
__USE_XOPEN2K


743 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

744 c⁄° 
time•ec
 *
__ª°ri˘


745 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

748 #ifde‡
__USE_GNU


749 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

750 
˛ockid_t
 
__˛ockid
,

751 c⁄° 
time•ec
 *
__ª°ri˘


752 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

756 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

761 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

762 
__ª°ri˘
 
__muãx
,

763 *
__ª°ri˘
 
__¥io˚ûög
)

764 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

768 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 
__¥io˚ûög
,

770 *
__ª°ri˘
 
__ﬁd_˚ûög
)

771 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

774 #ifde‡
__USE_XOPEN2K8


776 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1));

778 #ifde‡
__USE_GNU


779 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

780 
__THROW
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1));

793 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

798 
__ª°ri˘
 
__©å
,

799 *
__ª°ri˘
 
__psh¨ed
)

800 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

803 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

804 
__psh¨ed
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


809 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


810 
__©å
, *
__ª°ri˘
 
__köd
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

816 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

822 
__ª°ri˘
 
__©å
,

823 *
__ª°ri˘
 
__¥Ÿocﬁ
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

828 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

829 
__¥Ÿocﬁ
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1));

833 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

834 
__ª°ri˘
 
__©å
,

835 *
__ª°ri˘
 
__¥io˚ûög
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

839 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

840 
__¥io˚ûög
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1));

843 #ifde‡
__USE_XOPEN2K


845 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

846 *
__robu°√ss
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 #ifde‡
__USE_GNU


849 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

850 *
__robu°√ss
)

851 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

855 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

856 
__robu°√ss
)

857 
__THROW
 
	`__n⁄nuŒ
 ((1));

858 #ifde‡
__USE_GNU


859 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

860 
__robu°√ss
)

861 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


871 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

872 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


873 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

876 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

881 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

887 #ifde‡
__USE_XOPEN2K


889 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
time•ec
 *
__ª°ri˘


891 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

894 #ifde‡
__USE_GNU


895 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

896 
˛ockid_t
 
__˛ockid
,

897 c⁄° 
time•ec
 *
__ª°ri˘


898 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

902 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

909 #ifde‡
__USE_XOPEN2K


911 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

912 c⁄° 
time•ec
 *
__ª°ri˘


913 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

916 #ifde‡
__USE_GNU


917 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 
˛ockid_t
 
__˛ockid
,

919 c⁄° 
time•ec
 *
__ª°ri˘


920 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

924 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

925 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

931 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

940 
__ª°ri˘
 
__©å
,

941 *
__ª°ri˘
 
__psh¨ed
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

945 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

946 
__psh¨ed
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1));

950 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

951 
__ª°ri˘
 
__©å
,

952 *
__ª°ri˘
 
__¥ef
)

953 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

956 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

957 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

986 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

987 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

988 
	`__n⁄nuŒ
 ((1, 2));

997 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

998 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

999 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1000 
	`__n⁄nuŒ
 ((1, 2, 3));

1002 #ifde‡
__USE_GNU


1010 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1011 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1012 
__˛ockid_t
 
__˛ock_id
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 4));

1020 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 *
__ª°ri˘
 
__psh¨ed
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1037 #ifde‡
__USE_XOPEN2K


1039 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1040 
__ª°ri˘
 
__©å
,

1041 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1042 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1045 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1046 
__˛ockid_t
 
__˛ock_id
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 #ifde‡
__USE_XOPEN2K


1056 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1057 
__THROW
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROW
 
	`__n⁄nuŒ
 ((1));

1064 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1065 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1069 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1072 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1073 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1080 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1081 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1082 
__©å
, 
__cou¡
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1087 
__THROW
 
	`__n⁄nuŒ
 ((1));

1090 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1091 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1095 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1096 
__THROW
 
	`__n⁄nuŒ
 ((1));

1099 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1103 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1104 
__ª°ri˘
 
__©å
,

1105 *
__ª°ri˘
 
__psh¨ed
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1109 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1110 
__psh¨ed
)

1111 
__THROW
 
	`__n⁄nuŒ
 ((1));

1123 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1124 (*
__de°r_fun˘i⁄
) (*))

1125 
__THROW
 
	`__n⁄nuŒ
 ((1));

1128 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1131 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1134 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1135 c⁄° *
__poöãr
Ë
__THROW
 ;

1138 #ifde‡
__USE_XOPEN2K


1140 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1141 
__˛ockid_t
 *
__˛ock_id
)

1142 
__THROW
 
	`__n⁄nuŒ
 ((2));

1157 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1158 (*
__∑ª¡
) (),

1159 (*
__chûd
Ë()Ë
__THROW
;

1162 #ifde‡
__USE_EXTERN_INLINES


1164 
__exã∫_ölöe
 

1165 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1167  
__thªad1
 =
__thªad2
;

1168 
	}
}

1171 
	g__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

374 
	~<bôs/sig«l_ext.h
>

376 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


406 #ifde‡
__REDIRECT


407 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

409 
__isoc99_fsˇnf
Ë
__wur
;

410 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_sˇnf
Ë
__wur
;

412 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

413 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_ssˇnf
);

416 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

417 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

418 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

419 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

421 
	#fsˇnf
 
__isoc99_fsˇnf


	)

422 
	#sˇnf
 
__isoc99_sˇnf


	)

423 
	#ssˇnf
 
__isoc99_ssˇnf


	)

427 #ifdef 
__USE_ISOC99


432 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

433 
__gnuc_va_li°
 
__¨g
)

434 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

440 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

441 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

444 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

446 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

449 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT


451 
	`__REDIRECT
 (
vfsˇnf
,

452 (
FILE
 *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

454 
__isoc99_vfsˇnf
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

456 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

457 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

459 
	`__REDIRECT_NTH
 (
vssˇnf
,

460 (c⁄° *
__ª°ri˘
 
__s
,

461 c⁄° *
__ª°ri˘
 
__f‹m©
,

462 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

463 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

464 #ñi‡!
deföed
 
__REDIRECT


465 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
,

467 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

468 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

469 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

470 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

471 c⁄° *
__ª°ri˘
 
__f‹m©
,

472 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

473 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

474 
	#vsˇnf
 
__isoc99_vsˇnf


	)

475 
	#vssˇnf
 
__isoc99_vssˇnf


	)

485 
	`fgëc
 (
FILE
 *
__°ªam
);

486 
	`gëc
 (
FILE
 *
__°ªam
);

492 
	`gëch¨
 ();

494 #ifde‡
__USE_POSIX199506


499 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

500 
	`gëch¨_u∆ocked
 ();

503 #ifde‡
__USE_MISC


510 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

521 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

522 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putch¨
 (
__c
);

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
__gnuc_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 
	`__uÊow
 (
FILE
 *);

859 
	`__ovîÊow
 (
FILE
 *, );

863 #ifde‡
__USE_EXTERN_INLINES


864 
	~<bôs/°dio.h
>

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/°dio2.h
>

869 #ifde‡
__LDBL_COMPAT


870 
	~<bôs/°dio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	$©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

936 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

937 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

938 
__THROW
;

941 #ifde‡
__USE_MISC


946 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


957 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

958 *c⁄° *
__ª°ri˘
 
__tokís
,

959 **
__ª°ri˘
 
__vÆuï
)

960 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

966 #ifde‡
__USE_XOPEN2KXSI


968 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

971 #ifde‡
__USE_XOPEN_EXTENDED


976 
	$gø¡±
 (
__fd
Ë
__THROW
;

980 
	$u∆ock±
 (
__fd
Ë
__THROW
;

985 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

988 #ifde‡
__USE_GNU


992 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

993 
__THROW
 
	`__n⁄nuŒ
 ((2));

996 
	`gë±
 ();

999 #ifde‡
__USE_MISC


1003 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1010 
	$ây¶Ÿ
 (Ë
__THROW
;

1013 
	~<bôs/°dlib-Êﬂt.h
>

1016 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1017 
	~<bôs/°dlib.h
>

1019 #ifde‡
__LDBL_COMPAT


1020 
	~<bôs/°dlib-ldbl.h
>

1023 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

181 
	#__i¶óp
(
yór
) \

182 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

185 #ifde‡
__USE_MISC


190 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

193 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

196 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

200 #ifde‡
__USE_POSIX199309


205 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

206 
time•ec
 *
__ªmaöög
);

210 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

213 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

216 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

217 
__THROW
;

219 #ifde‡
__USE_XOPEN2K


224 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

225 c⁄° 
time•ec
 *
__ªq
,

226 
time•ec
 *
__ªm
);

229 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

234 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

235 
sigevít
 *
__ª°ri˘
 
__evp
,

236 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

239 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

242 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

243 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

244 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

247 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

248 
__THROW
;

251 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

255 #ifde‡
__USE_ISOC11


257 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1));

262 #ifde‡
__USE_XOPEN_EXTENDED


274 
gëd©e_îr
;

283 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

286 #ifde‡
__USE_GNU


297 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

298 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

301 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1170 
	~<bôs/uni°d_ext.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/spi/spi.h

2 #i‚de‡
_SPI_H


3 
	#_SPI_H


	)

5 
	~<löux/c⁄°.h
>

7 
	#SPI_CPHA
 
	`_BITUL
(0Ë

	)

8 
	#SPI_CPOL
 
	`_BITUL
(1Ë

	)

10 
	#SPI_MODE_0
 (0|0Ë

	)

11 
	#SPI_MODE_1
 (0|
SPI_CPHA
)

	)

12 
	#SPI_MODE_2
 (
SPI_CPOL
|0)

	)

13 
	#SPI_MODE_3
 (
SPI_CPOL
|
SPI_CPHA
)

	)

14 
	#SPI_MODE_X_MASK
 (
SPI_CPOL
|
SPI_CPHA
)

	)

16 
	#SPI_CS_HIGH
 
	`_BITUL
(2Ë

	)

17 
	#SPI_LSB_FIRST
 
	`_BITUL
(3Ë

	)

18 
	#SPI_3WIRE
 
	`_BITUL
(4Ë

	)

19 
	#SPI_LOOP
 
	`_BITUL
(5Ë

	)

20 
	#SPI_NO_CS
 
	`_BITUL
(6Ë

	)

21 
	#SPI_READY
 
	`_BITUL
(7Ë

	)

22 
	#SPI_TX_DUAL
 
	`_BITUL
(8Ë

	)

23 
	#SPI_TX_QUAD
 
	`_BITUL
(9Ë

	)

24 
	#SPI_RX_DUAL
 
	`_BITUL
(10Ë

	)

25 
	#SPI_RX_QUAD
 
	`_BITUL
(11Ë

	)

26 
	#SPI_CS_WORD
 
	`_BITUL
(12Ë

	)

27 
	#SPI_TX_OCTAL
 
	`_BITUL
(13Ë

	)

28 
	#SPI_RX_OCTAL
 
	`_BITUL
(14Ë

	)

29 
	#SPI_3WIRE_HIZ
 
	`_BITUL
(15Ë

	)

30 
	#SPI_RX_CPHA_FLIP
 
	`_BITUL
(16Ë

	)

40 
	#SPI_MODE_USER_MASK
 (
	`_BITUL
(17Ë- 1)

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

18 #ifde‡
__CHECKER__


19 
	#__bôwi£
 
	`__©åibuã__
((
bôwi£
))

	)

21 
	#__bôwi£


	)

25 
	#__bôwi£__
 
__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

50 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/linux/const.h

4 #i‚de‡
_LINUX_CONST_H


5 
	#_LINUX_CONST_H


	)

16 #ifde‡
__ASSEMBLY__


17 
	#_AC
(
X
,
Y
Ë
	)
X

18 
	#_AT
(
T
,
X
Ë
	)
X

20 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

21 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

22 
	#_AT
(
T
,
X
Ë((T)(X))

	)

25 
	#_UL
(
x
Ë(
	`_AC
(x, 
UL
))

	)

26 
	#_ULL
(
x
Ë(
	`_AC
(x, 
ULL
))

	)

28 
	#_BITUL
(
x
Ë(
	`_UL
(1Ë<< (x))

	)

29 
	#_BITULL
(
x
Ë(
	`_ULL
(1Ë<< (x))

	)

31 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

32 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

34 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/linux/stddef.h

2 #i‚de‡
_LINUX_STDDEF_H


3 
	#_LINUX_STDDEF_H


	)

7 #i‚de‡
__Æways_ölöe


8 
	#__Æways_ölöe
 
__ölöe__


	)

26 
	#__°ru˘_group
(
TAG
, 
NAME
, 
ATTRS
, 
MEMBERS
...) \

28 °ru˘ { 
MEMBERS
 } 
ATTRS
; \

29 
	sTAG
 { 
MEMBERS
 } 
ATTRS
 
NAME
; \

30 }

	)

42 
	#__DECLARE_FLEX_ARRAY
(
TYPE
, 
NAME
) \

44 °ru˘ { } 
__em±y_
 ## 
NAME
; \

45 
TYPE
 
NAME
[]; \

46 }

	)

	@
1
.
1
/usr/include
126
3525
libloragw/inc/config.h
libloragw/inc/loragw_ad5338r.h
libloragw/inc/loragw_agc_params.h
libloragw/inc/loragw_aux.h
libloragw/inc/loragw_cal.h
libloragw/inc/loragw_com.h
libloragw/inc/loragw_debug.h
libloragw/inc/loragw_gps.h
libloragw/inc/loragw_hal.h
libloragw/inc/loragw_i2c.h
libloragw/inc/loragw_lbt.h
libloragw/inc/loragw_mcu.h
libloragw/inc/loragw_reg.h
libloragw/inc/loragw_spi.h
libloragw/inc/loragw_stts751.h
libloragw/inc/loragw_sx1250.h
libloragw/inc/loragw_sx125x.h
libloragw/inc/loragw_sx1261.h
libloragw/inc/loragw_sx1302.h
libloragw/inc/loragw_sx1302_rx.h
libloragw/inc/loragw_sx1302_timestamp.h
libloragw/inc/loragw_usb.h
libloragw/inc/sx1250_com.h
libloragw/inc/sx1250_defs.h
libloragw/inc/sx1250_spi.h
libloragw/inc/sx1250_usb.h
libloragw/inc/sx125x_com.h
libloragw/inc/sx125x_spi.h
libloragw/inc/sx1261_com.h
libloragw/inc/sx1261_defs.h
libloragw/inc/sx1261_spi.h
libloragw/inc/sx1261_usb.h
libloragw/src/loragw_ad5338r.c
libloragw/src/loragw_aux.c
libloragw/src/loragw_cal.c
libloragw/src/loragw_com.c
libloragw/src/loragw_debug.c
libloragw/src/loragw_gps.c
libloragw/src/loragw_hal.c
libloragw/src/loragw_i2c.c
libloragw/src/loragw_lbt.c
libloragw/src/loragw_mcu.c
libloragw/src/loragw_reg.c
libloragw/src/loragw_spi.c
libloragw/src/loragw_stts751.c
libloragw/src/loragw_sx1250.c
libloragw/src/loragw_sx125x.c
libloragw/src/loragw_sx1261.c
libloragw/src/loragw_sx1302.c
libloragw/src/loragw_sx1302_rx.c
libloragw/src/loragw_sx1302_timestamp.c
libloragw/src/loragw_usb.c
libloragw/src/sx1250_com.c
libloragw/src/sx1250_spi.c
libloragw/src/sx1250_usb.c
libloragw/src/sx125x_com.c
libloragw/src/sx125x_spi.c
libloragw/src/sx1261_com.c
libloragw/src/sx1261_spi.c
libloragw/src/sx1261_usb.c
libloragw/tst/test_loragw_cal_sx125x.c
libloragw/tst/test_loragw_capture_ram.c
libloragw/tst/test_loragw_com.c
libloragw/tst/test_loragw_com_sx1250.c
libloragw/tst/test_loragw_com_sx1261.c
libloragw/tst/test_loragw_counter.c
libloragw/tst/test_loragw_gps.c
libloragw/tst/test_loragw_hal_rx.c
libloragw/tst/test_loragw_hal_tx.c
libloragw/tst/test_loragw_i2c.c
libloragw/tst/test_loragw_reg.c
libloragw/tst/test_loragw_sx1261_rssi.c
libloragw/tst/test_loragw_toa.c
libtools/inc/base64.h
libtools/inc/parson.h
libtools/inc/tinymt32.h
libtools/src/base64.c
libtools/src/parson.c
libtools/src/tinymt32.c
packet_forwarder/inc/jitqueue.h
packet_forwarder/inc/trace.h
packet_forwarder/src/jitqueue.c
packet_forwarder/src/lora_pkt_fwd.c
tools/payload_tools/payload_crc.c
tools/payload_tools/payload_diff.c
tools/payload_tools/payload_gen.c
util_boot/src/boot.c
util_chip_id/src/chip_id.c
util_net_downlink/src/net_downlink.c
util_spectral_scan/src/spectral_scan.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/linux/i2c-dev.h
/usr/include/linux/i2c.h
/usr/include/linux/spi/spidev.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/linux/ioctl.h
/usr/include/linux/spi/spi.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/strings.h
/usr/include/linux/const.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/linux/stddef.h
